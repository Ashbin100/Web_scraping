Toward Automated Information-Flow Integrity Verification for Security-Critical
Applications
UmeshShankar TrentJaeger ReinerSailer
ushankar@cs.berkeley.edu tjaeger@cse.psu.edu sailer@us.ibm.com
UniversityofCaliforniaatBerkeley PennsylvaniaStateUniversity IBMT.J.WatsonResearchCenter
Abstract Let us consider an example. If an untrusted user
can write to the trusted OpenSSH configuration file,
We provide a largely automated system for verifying Clark- sshd config, that is a violation of information-flow in-
Wilson interprocess information-flow integrity. Information-flow tegrity and a clear security breach. Transitive flows must
integritypropertiesareessentialtoisolatetrustedprocessesfrom also be checked: if an untrusted user can run a cron job
untrustedones,butsystemmisconfigurationcaneasilycreatein- that writes sshd config, there is obviously still an in-
securedependences. Forexample,anuntrusteduserprocessmay tegrity violation. Merely setting file permissions does not
beabletowritetosshd configviaacronscript. Ausefulno- preventattacksthatoperatevia, say, pipesorsharedmem-
tionofintegrityistheClark-Wilsonintegritymodel[7],whichal- ory: we must consider all kinds of inputs. In general, if
lowstrustedprocessestoacceptnecessaryuntrustedinputs(e.g., atrustedprogramdependsonuntrustedinputs, anattacker
network data or print jobs) via filtering interfaces that sanitize may be able to gain escalated privilege or compromise the
the data. However, Clark-Wilson has the requirement that pro- system. To maintain information-flow integrity, a system
gramsundergoformalsemanticverification;inpractice,thiskind mustbeproperlyconfigured,i.e.,itssetofpermissionsmust
of burden has meant that no information-flow integrity property besuchthatillegalflowsfromuntrustedprocessestotrusted
isverifiedonmostwidely-usedsystems. Wedefineaweakerver- ones are not possible. Such is the approach taken by the
sionofClark-Wilsonintegrity,calledCW-Lite,whichhasthesame Biba[2]model,wherethetrustedprocessissaidtodepend
interprocessinformation-flowguarantees,butwhichrequiresless on a resource merely by reading it. That is, no untrusted
filtering, only small changes to existing applications, and which inputswereallowedtotrustedprocesses.
wecancheckusingautomatedtools. WemodifytheSELinuxuser Thispictureiscomplicatedbythefactthatmanytrusted
library and kernel module in order to support CW-Lite integrity processes must accept some untrusted input to function.
verification and develop new software tools to aid developers in We say that each open() call (or equivalent, such as
finding and enabling filtering interfaces. Using our toolset, we connect()oraccept)intheprogramconstitutesanin-
foundandfixedseveralintegrity-violatingconfigurationerrorsin put interface, or simply an interface. Network daemons
thedefaultSELinuxpoliciesforOpenSSHandvsftpd. must accept some input, such as HTTP requests or ses-
sion logins, from the network. Input to network interfaces
maybecontrolledbyanattacker. Theprogramsrunningon
1 Introduction systemmustperformsanitizationorfilteringofinputsthat
comefromuntrustedsources. Byusingfilteringinterfaces,
1.1 MotivationandGoals theprogramcanreadfromanuntrustedresource,whilecon-
trollingtheextenttowhichitdependsonthatresource.
Whileoperatingsystemsprovideisolationthroughsepa- Inshort, information-flowintegrityrequiresacombina-
ratememoryspaces,processesstillinteractviafiles,pipes, tion of two elements: (1) proper configuration, which en-
network connections, shared memory, and other mecha- suresthatinputsthataprogramtrusts(likeconfigfiles)can-
nisms. We say that there is an information flow between a not be written by untrusted users, and (2) filtering code,
processAandaprocessB ifAcanwritetosomeresource which ensures that inputs that a program does not trust
(e.g.,afileorpipe)onwhichB depends. (Wedonotcon- (like network input) are checked for well-formedness and
sider side-channel attacks in this paper.) The information- application-specificrestrictions.Withouttheabilitytocom-
flowintegrityverificationproblemistoprovethatasecurity- municate with trusted processes except by very narrow in-
critical,orhighintegrity,processdoesnotdependoninfor- terfaces, untrusted users’ attack options, and therefore po-
mationflowsfromuntrusted,orlowintegrity,processes. tentialexploits,arelimited.The Clark-Wilson integrity model [7] covers both as- 1.2 Contributions
pects and is a good match for current trusted processes,
requiring that all of processes’ inputs be filtered or san- Inthiswork,wemakethefollowingcontributions:
itized. However, Clark-Wilson is, like Biba, relatively
heavyweight, requiring formal verification for programs. • We develop an information-flow integrity property,
Theseandotherintegritymodelsweredevelopedatatime CW-Lite,whichcapturestheinterprocessdependency
when deep, complete program analysis for security was semantics of Clark-Wilson integrity, but is verifiable
thoughttobecominginthenearfuture. Thatvisionhasnot onrealsystemsusingtoolsandonlyamodestamount
been realized and, as a result, most systems in widespread ofmanualeffort;
use operate without any kind of information-flow integrity
verification: this long-identified problem is not solved in • Wedevelopasuiteoftoolsaswellasmodificationsto
practice. SELinuxtosupportCW-Liteenforcement;
• We apply our approach to OpenSSH and vsftpd, and
Our goal in this paper is to change that; to do so, we findseveralintegrity-violatingpermissionsintheirde-
define a lighter-weight version of Clark-Wilson integrity, faultSELinuxpolicies;
which we term CW-Lite, that retains the same interpro-
• Inshort,wehavedemonstratedpracticalverificationof
cess dependency semantics but omits the requirement that
Clark-Wilsoninterprocessinformation-flowintegrity.
programs undergo full formal verification. We then show
how a combination of new and existing tools allows prac-
tical verification of CW-Lite. These tools address both as- 1.3 Roadmap
pects of integrity verification: they help administrators to
findandfixconfigurationerrors,andapplicationdevelopers Section2containsahigh-leveloverviewoftheCW-Lite
to find and annotate interfaces that require input sanitiza- modelanditsverificationprocess. InSection3, wedefine
tion. Verifying CW-Lite is largely automated: administra- CW-Lite formally, starting with the Clark-Wilson model
torsmustonlymakemanualdecisionswhenviolationsare and weakening certain requirements. Section 4 describes
found, and developers must only annotate untrusted input our system modifications and the algorithm used to verify
interfaces, which are identified with our tools, with a sim- the CW-Lite of a trusted application. In Section 5 we ap-
ple macro. Naturally, developers must implement filtering ply our approach to OpenSSH and vsftpd on Linux with
code on these interfaces in any case; the annotation serves SELinux, describing howweusedourtoolsto(1)identify
toallowstaticverificationofCW-Lite. filteringinterfacesnecessarytohandlelowintegrityinputs;
and (2) resolve potentially harmful information flows that
wouldnotbefiltered. WediscussrelatedworkinSection6
Rather than have a tool that simply says that a system andsummarizeourfindingsandfutureworkinSection7.
hasviolations,wehavetriedwherepossibletomakeresolv-
ingtheproblemseasieraswell. Wedemonstratetheeffec-
2 OverviewofCW-LiteanditsVerification
tiveness of our tools—and thus, the feasibility of achiev-
ing Clark-Wilson-style information-flow guarantees—by
applying them to privilege-separated OpenSSH, which in- TherearetwomotivatingobservationsbehindCW-Lite.
teracts with many system objects, and has the challenge ThefirstisthatbecausetheClark-Wilsonmodelcontainsa
ofcontainingtrustedanduntrustedcomponentswithinone formal verification requirement in addition to an interpro-
application. We also analyze vsftpd to illustrate the gen- cess data flow model, it has proven too heavyweight for
eral applicability of our approach. We found several secu- widespreaduse. However,thetwogoalsareseparable,and
ritypolicyconfigurationerrorsthatpermittedunnecessary, wemayprofitablytrytosolvethelattergoalindependently.
possibly insecure flows. We also determined that certain ThesecondobservationisthatClark-Wilsonrequiresfilter-
other programs, such as rlogind and xdm, caused inse- ingofallinterfaces,butmosttrustedprogramsonlyneedto
cure flows, and should not be run on systems that desire openuntrustedinterfacesatasmallnumberoflocations.
information-flow integrity guarantees. Indeed, one of the Thefirstobservationledustofocusourworkhereona
benefits of checking information flows on a system is that concretesolutiontothefirstClark-Wilsongoal:securingin-
it makes the formerly implicit TCB of the system explicit, terprocessinformationflowsinanapplication-independent
andhighlightsprogramswhosepresenceonthesystemcan way. Accordingly, CW-Lite duplicates the interprocess
cause insecure flows. Although not every insecure infor- information-flow semantics of Clark-Wilson. Full formal
mationflowleadstoanexploitablehole,byeliminatingall verification of the programs themselves is a separate and
suchflows,weeliminateallrelatedexploitsaswell. difficultproblem;also,verifyingsemanticcorrectnessisanapplication-specific task. Obviously this kind of verifica- 3 CW-Lite
tion is very useful and can prevent other kinds of integrity
compromises (e.g., those resulting from buffer overflows),
In this section, we state the CW-Lite model more for-
butwebelievethatseparatingthetwoproblemswillallow
mally. Aswenotedpreviously,CW-Liteisaweakenedver-
simpler,moreflexiblesolutionstoeach.
sionoftheClark-Wilson[7]integritymodel, butthefocus
VerifyingCW-Litemeansensuringthatnounfilteredin- isoncontrollinginterprocessinformationflows,ratherthan
formation flows exist from untrusted processes to trusted formalverificationoftheprogramsthemselves(whichisa
ones. To do this, we must first identify all possible inter- separate, importantproblem). Inparticular, wedonotdis-
processinformationflows. Wedosobyusingamandatory cusstheapplication-specifictaskofverifyingthesemantic
access-control(MAC)systemthatinterposesaccesschecks correctnessoffilteringinterfacesinthispaper. Thatis, we
onallinterprocessflows;withafine-grainedMAC,wecan seek to provide assurance that filtering code has not been
makemeaningfulstatementsaboutwhichflowsareandare omitted, but not assurance of that code’s semantic correct-
notpossible.Inthispaper,weusetheSELinux[23]module ness.
forLinux,afine-grainedMACsystemforLinuxthatimple-
mentsRole-BasedAccessControlwithTypeEnforcement.
3.1 BasicInformation-FlowIntegrity
SELinux is now a standard part of Fedora Core Linux and
isbeingintegratedintomanyotherLinuxdistributions.
In basic information-flow integrity models, dependence
Our second observation led us to extend the MAC sys- on low integrity data is defined in terms of information
tem, so developers would not have to filter on trusted in- flows. Such models require that no low integrity informa-
puts. In order to enforce least privilege for both trusted tionflowsmaybeinputtoahighintegritysubject.
(non-filtering)interfacesanduntrusted(filtering)interfaces
We start with a definition of information flow based on
inoneprocess,theMACmustdistinguishbetweenthetwo
two standard operators, modify and observe where: (1)
kinds of interfaces, allowing only trusted flows to trusted
mod(s,o) is the modify operator where a subject (e.g., a
interfaces but allowing additional, untrusted, inputs to the
processoruser)withsubjectlabelswritestoanobject(e.g.,
others. By modifying SELinux to associate two security
afileorsocket)withobjectlabeloand(2)obs(s,o)isthe
contexts,orsubjecttypes,witheachprocessinsteadofone,
observe operator where a subject of subject label s reads
wecanallowonlyinputsfromtrustedprocessesbydefault,
fromanentityofobjectlabelo. WeuseS torefertotheset
whileenablingaspecialcontext,afilteringsubjecttype,for
ofallsubjects.
filteringinterfacesthatallowsnecessarykindsofuntrusted
inputsaswell.Thisseparationreducestheburdenonthede-
Definition1(Basicinformationflow) flow(s1,s2)spec-
veloperrelativetoClark-Wilsonbyrequiringfilteringonly
ifiesthatinformationflowsfromsubjects1tosubjects2.
of untrusted inputs, which they must do in any case. The
onlyrequirementsarethatdeveloperannotatefilteringinter-
faces with a simple macro and put relevant permissions in
flow(s1,s2):=∃o:mod(s1,o)∧obs(s2,o)
thefilteringsubjecttype. Tofacilitatethisprocess,wealso
developed a tool that enables developers to identify which Next,theoperatorint(x)definestheintegritylevelofx
inputsshouldbeannotatedfilteringinterfaces,basedonthe where it may be either a subject or an object. In informa-
extra permissions they need. These small changes to the tion flow integrity models, integrity levels are related by a
developmentprocessandSELinuxarealsowhatenableau- lattice[8]whereint(x)>int(y)meansthatymaydepend
tomaticverificationbyadministratorsonendsystems. onx,butnotviceversa. Forourpurposes,thismeansthat
trustedprocessesmaynotdependonuntrustedones.
Now that we have isolated the trusted interfaces into a
separate subject type, we need a way for administrators to
detectillegalflowstoitfromuntrustedsources,i.e.,verify Definition2(Bibaintegrity) Biba integrity [2] is pre-
the CW-Lite property on their systems. In previous work, served for a subject s if (1) all high integrity objects meet
we developed the Gokyo tool [14, 15], which can deter- integrityrequirementsinitiallyand(2)allinformationflows
mine information flows from an SELinux policy by look-
tosbefromsubjectsofequalorhigherintegrity:
ingatread-typeandwrite-typepermissions,thenflagillegal
oneswhensuppliedwiththesystem’sTCB(assumingother ∀si ∈S,flow(si,s)⇒(int(si)≥int(s)).
kindsofprocessesareuntrusted). WeleverageGokyohere
by having it ignore flows to the filtering subject type for Some information-flow based integrity models, such
thetargetapplication,reportinginformation-flowviolations as LOMAC [12], operate differently but have the same
onlyforthebasesubjecttype. information-flowintegritysemanticsasBiba.A note on transitivity. We note that while information Definition4(Clark-Wilsonintegrity) Clark-Wilson in-
flow is transitive in general, only intransitive information tegrity is preserved for a subject s if (1) all high integrity
flows need to be examined to detect a Biba integrity vio- objectsmeetintegrityrequirementsinitially;(2)thebehav-
lation. Suppose that A and B are untrusted and X and Y ioroftheprogramsofsubjectS areassuredtobecorrect;
are trusted. If we have a transitive information flow from and (3) all interfaces filter (i.e., upgrade or discard) low
A→B →X →Y,onlytheflowfromBtoXisneededto integrityinformationflows:
triggeraBibaintegrityviolation,i.e.,thereisalwayssome
flow that crosses boundary between untrusted and trusted.
∀si ∈S,flow(si,s,I)⇒filter(s,I).
It does not impact Biba integrity further that information
WhiletheClark-Wilsonmodeldoesnotrequireseparate
can flow from A to B. While we find Biba too restrictive,
multi-levelsecureprocessesforupgrading,asdoesBiba,it
wewanttopreservetheneedonlytocheckflowsindepen-
requires a significant assurance effort. An important point
dently.
tonoteisthatsinceaClark-Wilsonapplicationprogrammer
does not know the system’s information flows in advance,
3.2 Clark-WilsonIntegrity
all interfaces must be assured to be filtering interfaces. In
practice, often only a small number of interfaces actually
The Clark-Wilson integrity model [7] provides a differ-
needtocapableoffilteringinthecontextofarealsystem.
ent view of dependence. Security-critical processes may
Thissetcanbederivedfromanalyzingthesystem’ssecurity
acceptlowintegrityinformationflows(unconstraineddata
policy; that is, by using system knowledge in application
itemsorUDIs),buttheprogrammusteitherdiscardorup-
development(sincethedevelopercanshipasecuritypolicy
gradeallthelowintegritydatafromallinputinterfaces.The
withtheapplication),wecanreducethefilteringburdenon
key to eliminating dependence on low integrity informa-
the developer. We use this observation in developing CW-
tionflowsisthepresenceoffilteringinterfacesthatimple-
Lite.
mentthediscardingorupgradingoflowintegritydata. The
Clark-Wilson integrity model does not distinguish among
3.3 CW-Lite
program interfaces, but treats the entire security-critical
programasahighlyassuredblackbox. Asaresult, allin-
Definition5(CW-Lite) CW-Liteispreservedforasubject
terfacesmustbefilteringinterfaces.
s if: (1) all high integrity objects meet integrity require-
IntheoriginalClark-Wilsonmodel,trustedprocessesare
ments initially; (2) all trusted code is identifiable as high
knownastransformationprocedures(TPs),typicallyoper-
integrity (e.g., from its hash value as for NGSCB [11]);
ateonCDIs(trustedinputs),butmayalsoacceptUDIsifit
and(3)allinformationflowsarefromsubjectsofequalor
isassuredtofilterallitsinputs. Thus,ournotionoftrusted
higherintegrityunlesstheyarefiltered:
applicationsmapscloselytoClark-Wilson’stransformation
procedures. Clark-Wilsonalsodefined specialtrustedpro-
flow(si,s,I)∧¬filter(s,I)→(int(si)≥int(s))
cesses, called integrity verification procedures (IVPs), that
check the integrity of CDIs by performing appropriate in- That is, CW-Lite requires that the application’s infor-
tegrity checks on each data item. These are used to estab- mationflowseitheradheretoclassicalintegrityorthatun-
lishsystemwideintegrityatthestartofoperation;wedonot trusted(low-integrity)inputsarehandledbyafilteringinter-
specificallyconsidersuchprogramsinourmodel. face. Note that this provides equivalent integrity to Clark-
We now define information flow in terms of a connec- Wilson, since the only flows not being filtered come from
tion between subject labels and their program interfaces. trustedsources. RecallthatCW-Litealsodoesnotprovide
For this we need a more precise obs operator: obs(s,I,o) for formal verification of filtering interfaces; it simply re-
meansthatthesubjectsreadsanobjectoftypeooninter-
quires the developer to mark them as such so they can be
faceI.Aninterfaceforasubjectisadistinctinputinforma-
handledcorrectlybytheMACsystem.
tion channel, and is created by, e.g., a particular open()
callinaprogram.
4 DevelopingCW-Lite-Compliant Systems
Definition3(Interfaceinformationflow) flow(si,s,I)
specifiesthatinformationflowsfromsubjectsi tosubjects In this section, we tackle the CW-Lite tasks implied by
throughaninterfaceI inaprogramrunningassubjects. the previous section. Recall that the CW-Lite property is
one that is verified for a particular target application run-
flow(si,s,I):=mod(si,o)∧obs(s,I,o)
ning on a particular system. Application developers must
Wealsodefinethepredicatefilter(s,I)tomeanthata enableverificationwithsmallchangestotheirprogramsand
subjectsfiltersorsanitizesinputonaninterfaceI. security policies, while the administrators perform the ac-
WearenowreadytostatetheClark-Wilsonproperty. tualverificationontheirsystems. (SeeFigures1and2forChoose a TCB
Identify filtering interfaces (one time for all apps)
(may use settraceonerror())
Run Gokyo on app security
Add DO_FILTER() annotation policy (from developer)
to filtering interfaces
Config
Add filtering subject type Done
Errors?
to default security policy; No
policy ships with application
Yes
Figure 1. Application developer tasks re-
Fix Errors: remove perms
quired to enable CW-Lite verification. Fil-
or increase TCB
teringinterfacesarethosethatacceptin-
puts from untrusted sources, and must
sanitize, or filter the input. An interface Figure 2. System Administrator tasks re-
is marked by a distinct call to open(), quired to verify CW-Lite. The system ad-
accept(),orothercallthatenablesdata ministratordecidesonasystemTCBini-
input. The DO FILTER() annotation on tially. Then, when she wants to verify
aninterfacetellstheaccess-controlsys- CW-Lite for a particular trusted applica-
tem to grant additional permissions al- tion, she runs Gokyo on its security pol-
lowedbythefilteringsubjecttypetothat icy. If no errors are reported, CW-Lite
interface. Thedefaultsubjecttype,used integrityisverified. Ifitreportsanillegal
on all other input interfaces, only allows flows,theoffendingpermissionsmustbe
inputsfromthethesystemTCB. removed,ortheTCBexpandedtoinclude
thesourceoftheillegalflows.
flowcharts of these tasks.) For our discussion, we use the Sinceapplicationdevelopers shouldbesanitizingtheirun-
term TCB (trusted computing base) to indicate the set of trustedinputsanyway, thisrepresentsonlyasmallamount
subjectsthatmustbetrustedonthesysteminordertotrust ofadditionalworktoenablesystem-levelintegrityverifica-
thesetoftargetapplications(e.g.,sshd,Apache,bind). tion.
Anapplicationdevelopermust: Asystemadministratormust:
1. Assuming some TCB and application configuration, • One time only, choose a system TCB. (A TCB may
identify untrusted inputs to the program and imple- bechosenper-applicationforamultileveltrustmodel,
ment filtering interfaces for each. This may be done butthisisnotnecessaryorcommon. Inthisscenario,
usingtheprocessinSection4.4. each target app would be associated with only the set
ofsubjectsonwhichitdepended,independentofother
2. AnnotatethoseinterfaceswiththeDO FILTER()an- applications.)
notation. These annotations are used by the access
• Runthesecuritypolicyanalysistoolforthetargetap-
controlsystemasdescribedinSection4.2.
plicationasdescribedinSection4.3.
3. (Possibly in conjunction with a distribution main-
• Ifnointegrity-violatingpermissionsaredetected,then
tainer:) Constructadefaultsecuritypolicyfortheap-
skipthenextstep.
plication that has two subject types: the default only
allowsinputsfromtheTCB,andtheother,forfiltering • Classify each integrity-violating permission found by
interfaces,allowsrequiredtypesofuntrustedinputsas thetooltodecidehowtoremovetheillegalflow. See
well. Section4.5fordetailsonhowtodothis.NotethatverifyingtheCW-Litepropertyisdoneautomat- theobjectlabelofanobject. Thisenablesinformationflow
ically using Gokyo; it is only resolution of problems that fromtheoldobjectlabeltothenewone.
requiresmanualintervention. Inaddition,ourapproachal- Whileitallowsusgreatcontrolandflexibility,suchfine-
lows each sysadmin to decide which applications trust on grained, comprehensive control results in very large and
hersystem.Shecanevaluatetheriskofrunningaparticular complex access control policies. Frank Mayer describes
applicationintermsofwhatmustbetrustedinordertorun the SELinux policy model as an “assembler level” policy.
it. In the August 19, 2004 release, the default build results in
Intheremainderofthissection,wewillfirstdescribethe a 500 KB compiled policy file. There are over 5,000 per-
SELinux access control system, then show how we modi- missionassignment(allow)rulesinthepolicyitself(inthe
fied SELinux to support filtering interfaces and, therefore, filepolicy.conf). Notethatthispolicycontainsjustthebase
CW-Liteverification. Wecontinuebyaddressingthedevel- subjects;thecompletepolicy,includingpoliciesforallship-
operandsysadmintasksabove,includingperformingpolicy pingapplications,isabouttentimesgreaterinsize. Asare-
analysisandfindingfilteringinterfaces. sult,understandingthehigher-levelpropertiesthatapolicy
implies,suchasinformationflow,cannotbedonemanually.
4.1 SELinux
4.2 Supporting filtering interfaces in the MAC
The SELinux module [23] is a Linux Security Mod-
Policy
ule (LSM) [26] that provides fine-grained, comprehen-
sive MAC enforcement. It ships standard with Fedora
Linux, among others, and it is quickly becoming standard
SELinuxcannotdistinguishamonginputinterfacesina
to include attendant SELinux policies with applications.
single process. Some interfaces may only have to process
SELinux implements an extended form of Type Enforce-
highintegritydata,suchastheinterfacethatreadsaconfig-
ment(TE)[4]withdomaintransitionsthatenablesexpres-
urationfile. Othershavetobeabletovalidateandupgrade
sionofpoliciescoveringover30differentkindsofobjects
certain types of low-integrity data such as network input:
with about 10 operations each. SELinux is comprehen-
thesearefilteringinterfaces. Inordertosupportfilteringin-
sive because it aims to control all programs’ accesses to
terfaces(andthereforetocheckCW-Lite),wemodifiedthe
all security-relevant system objects. In this paper, we do
SELinux user space library and kernel module to support
notexamineverifyingthattheSELinux/LSMimplementa-
two subject types per process instead of one. The default
tion is a correct reference monitor. Previous work verified
subjecttypeisusedforordinaryoperationandallowsinputs
theLSMreferencemonitorinterface[27],butverifyingthe
onlyfromsubjectsintheapplication’sTCB;thisisenforced
correctness of the SELinux implementation properties re-
bytheGokyopolicyanalysisinSection4.3. Thenewfilter-
mains.
ing subject type, with additional permissions, is used for
Key notions in SELinux are those of subject types and
interfaceswiththeappropriateDO FILTER()sourcecode
object types. A process’ security context is determined
annotation.
by its subject type, much as the security context of an or-
dinary UNIX process is determined by its effective UID.
Likewise,non-processobjectslikefilesareassociatedwith DO_FILTER(interface creation code) :=
an object type. Permissions are attached to a subject use_filtering_subject_type();
type in policy files; if an Apache process has the subject interface creation code
type apache t, and its configuration file has object type use_default_subject_type();
apache config t,wemightsaysomethinglike
The annotation serves as a contract with the programmer,
allow apache_t apache_config_t:file
whostipulatesthatinputfromtheinterfaceisfiltered. Our
{stat read}
macro-like approach is deliberate, to discourage running a
toallowApachetocallstat()onorreadfromitsconfig- largeamountofcodewithhigherprivilege. Typically,only
urationfile. SELinuxdoesnotincludea“deny”operation; a single open()-type call requires the permissions. An
allpermissionsaredeniedbydefault. exampleoftherequiredchangestotheprogramandthese-
Althoughthereareseveralaccesscontrolconceptsinthe curitypolicyforfilteringinterfacesisgiveninFigure4.2.
SELinuxpolicymodelbesidesallowpermissionsbysub-
Notethattheaccept()systemcallisstillconstrained
jects on objects, only one other is relevant to information
bytheMACpolicyforthefilteringsubjecttype. Forexam-
flow. Therelabeloperations1enableasubjecttochange
ple,thefilteringsubjecttypepermissionsfortheapplication
1Asubjectneedstherelabelfromandrelabeltopermissionstoimple- mightallowacceptingconnectionsfromonenetworkcard,
mentarelabel. butnotanother.Before After
SourceCode SourceCode
conn = accept() DO FILTER(conn = accept())
// accept() fails // accept() succeeds
get http request sanitized(conn) get http request sanitized(conn)
SecurityPolicy(defaultDENY) SecurityPolicy(defaultDENY)
Apache: ALLOW read httpd.conf Apache: ALLOW read httpd.conf
// Problem: network (∈ TCB! // network officially (∈ TCB
Apache: ALLOW accept Apache-filter: ALLOW accept
Figure 3. Supportingfilteringinterfaces. Initially, the program above is not allowed to accept network
input,becausethenetworkisnotintheTCB.Inordertoacceptsuchinput,thesourcecodemustfilter
it and the programmer must supply an annotation indicating that the interface is filtered. Then the
policymustbemodifiedtoallowthenetworkinputonlyforthefilteringinterface. TheDO FILTER()
macrotellstheMACsystemtousethefilteringsubjecttypepermissionsfortheenclosedoperations.
Weannotateaccept()(whichimpliesaread/writesocket),ratherthansubsequentsocketread/write
operations, because that is where the MAC system performs access checks. This is analogous to
howfileaccesschecks,includingread/writepermissionchecks,areperformedonceonopen(),not
foreveryread()orwrite()call.
4.3 MACPolicyAnalysis offendingmodandobsoperations:
Oncethetargetapplication’suntrustedinputshavebeen P ={p:flow(u,s),p⇒mod(u,o)∨p⇒obs(s,o)}
isolatedintoitsfilteringsubjecttypes,weneedonlycheck
thattherearenountrustedinputstotheapplication’sdefault wherepisapermissionassignment,u ∈ U,andoissome
subjecttypes. objecttype.
WeemploytheGokyotooltocomputeinformationflows
fromanSELinuxpolicy[14].Gokyorepresentsaccesscon- 4.4 Findingfilteringinterfaces
trolpoliciesasgraphswherethenodesaretheSELinuxsub-
ject types and permissions, and the edges are assignments AlthoughwemodifiedSELinuxtosupportmediationfor
ofpermissionstosubjecttypes. Basedonwhethertheper- filtering interfaces separately from other interfaces (Sec-
missionallowsamodoperation,anobsoperation,orboth,
tion 4.2, above), the developer still needs to make annota-
Gokyocomputesallinformationflowstos. Thatis,itcom- tionstotellSELinuxwhetheragiveninterfaceperformsfil-
putesthesetofsubjecttypes teringornot. Aspartofthisprocess,thedeveloperneedsto
! ! determinewhichinterfacesrequirefiltering. Somemaybe
F ={s :mod(s,o)∧obs(s,o),oisanobjecttype}.
obvious, but there may be permissions to access untrusted
Gokyoalsocorrectlyhandlesflowsimpliedbyobjectrela- data that are used in a subtle way. The developer can find
beling;seetheAppendixfordetails. thesebyrunningthesecuritypolicyanalysisonthedefault
Some of the non-target subjects may be designated as policyandanalyzingallintegrity-violatingpermissionsfor
trusted subjects, and they form the system’s TCB. The theapplication.
TCBincludessubjectssuchasthosethatbootstrapthesys- The problem of determining where in a program a per-
tem (e.g., kernel and init), define the MAC policy (e.g., mission is used is outside the scope of SELinux’s goals,
load policy),anddoadministration(e.g.,sysadm). so we implemented our own mechanism. We defined a
GiventhesetofinformationflowsandtheTCB,theun- newoperationinSELinuxcalledsettraceonerrorus-
trustedsubjectswithflowstosaregivenby ing the sysfs interface and made appropriate changes to
both SELinux’s user library and its kernel module. When
U =F ∩¬TCB.
settraceonerror(true) is called from user space,
Ifthissetisempty,thenCW-Liteholdsforthetargetappli- our modified SELinux kernel module signals the process
cation. Ifnot, Gokyooutputsthesetofpermissionassign- whenever a violation of the SELinux policy is found. The
mentsP thatneedtobeexamined,i.e.,thosethatallowthe user library catches the signal and traps the process into aseparate xterm debugger (gdb). If the process forks, addi- notation. Thesysadmincaneithernotrunthetargetappli-
tionalxtermwindowswithdebuggersonthechildprocesses cationorgetthedevelopertowriteandannotateadditional
arelaunched. Onceinthedebugger,itismucheasier,using filteringinterfaces.
stack traces and data inspection, to determine where and
why a permission error occurred and take appropriate ac- 5 Example: CW-LiteIntegrityVerification
tion,eitherremovingtheoffendingoperationorimplement-
ingafilteringinterface. Ifthepermissionisneveractually
5.1 Goal
needed,thenitcansimplyberemovedfromthepolicy.
Some filtering interfaces may not need to actually fil-
So far, we have defined CW-Lite and shown in gen-
ter the incoming data contents, since some interfaces do
eral how applications can be constructed to satisfy its re-
notinterprettheincomingdata. Forexample,logrotateen-
quirements. WehaveseveralgoalsinapplyingCW-Liteto
ables automatic rotation of log files, but does not depend
ourprimaryexampleapplication,OpenSSH,andtovsftpd.
on the data in the files. Likewise, the cp utility copies
First,wewanttoseehoweasyitistobuildapplicationsto
files, but does not consider their contents. In these cases,
meet CW-Lite in practice. Since OpenSSH is a very pop-
aDO FILTER()annotationisstillappropriate,ratherthan
ular, complex, and security-critical program that has been
allowing the program to accept all inputs. This is because
architectedtopreservetheintegrityofitsprivilegedcompo-
(1) filtering based on metainformation (like input length)
nents, verifying a useful integrity property can be of value
maystillbeneeded;and(2)thekindsofinputsmayneedto
toofmillionsofsystemsandvalidatethesecurityeffortsof
be restricted(for example, disallowing copies fromnamed
itsdevelopers. vsftpdisasomewhatsimplerexample, and
pipes). Naturally, iftheprogramsemanticschangelaterto
illustrativeofacommoncase. Second,wewanttoseehow
includeinterpretationoftheuntrusteddata,theprogrammer
closethedefaultSELinuxpolicyistoenablingsatisfaction
shouldimplementadditionalfilteringcode.
of CW-Lite. Third, if either application (with the standard
One may wonder why we use a dynamic approach to
shipping policy) does not initially meet CW-Lite integrity,
findingfilteringinterfaces. Asimpleexampleisrevealing:
wewanttoseewhyitfailsandhowdifficultitismodifythe
consider the interface fd = open(filename). In or-
applicationorpolicytoenablesuccess.
der to decide statically if filtering is required, we would
need to know the value of filename. This may be par-
5.2 Setup
tiallyaddressedwithaprogramanalysis,thoughofcourseit
isundecidableandmaycomefromdynamicdata,sayfrom
Provos et al. decomposed the server-side daemon of
thesystem’sconfiguration. Themappingoffilenametoob-
OpenSSH into privileged and unprivileged components in
jecttype(whichiswhatmattersforintegrity)isalsosystem
order to minimize the amount of code that needs to run
dependent,andeachadministratormaykeepfilesindiffer-
withprivilege. Theprivilegedcomponentexportsanarrow
entlocations. Ourapproachworkswellenoughinpractice,
interface to the unprivileged components, such that only
sincethenumberoffilteringinterfacesisusuallyrelatively
specific operations in a specific order may be requested,
small;whileitmayhavethecoverageproblemofdynamic
which reduces the risk of the privileged component be-
analysis, it does not have the scalability and decidability
ing compromised by a hijacked unprivileged component.
problemsofstaticanalysis.
Privilege-separationhasbeenaddedasanoptiontothemain
OpenSSHdistribution.
4.5 Handlingillegalinformationflows
The process graph for privilege-separated OpenSSH is
shown in Figure 4. One privileged component, listen, lis-
Ifasysadmin’sinvocationofthepolicyanalysistoolde- tens for new connections via port 22 and forks a new
tects illegal information flows implied by a set of permis- privileged component, priv, per connection. This priv
sions, one of a few actions is required. Some such per- component performs the privileged operations required by
missionsaresimplyunneededandmayberemoved. Some OpenSSH: authentication of the remote user, creation of
information flows may be generated by programs that are pseudo-terminals, and transition to a particular, authenti-
untrusted, but optional to the system. An easy way to re- cated userid. The priv component in turn spawns unpriv-
movethisinformationflowistoexcludetheoffendingcode ileged components to handle various types of user interac-
and subject types from the system. Some permissions are tion. Thenetcomponentisusedtoperformtheremotein-
needed by optional components of the target app; the op- teractionpartoftheauthenticationphase, whichhasinthe
tionsmaybedisabled,andthepermissionsremoved. Ifthe past been subject to compromise; it uses the priv compo-
permission is used by the core application, then either the nentasaprivilegedservertohandlesecretdataoperations.
sysadmin may be assuming a smaller TCB than the devel- Aftersuccessfulauthentication,privspawnsashellorother
oper or the developer has not added a DO FILTER() an- processrequestedbytheuserinthatuser’ssecuritycontext.Figure 4. Process structure of privilege separated OpenSSH. The listen process simply processes new
connectionrequests,forkingaprivprocesstohandleeachone. Theprivprocessforksanetprocess
to perform the network portion of user authentication, providing a narrow interface to privileged
operations necessary to complete authentication. After net completes its task, priv spawns the
authenticateduser’srequestedprocess,inourexampleabashshell.
vsftpd is the FTP server included with Fedora Core addtheDO FILTER()annotation.
Linux. It too employs separate trusted and untrusted pro-
cesses, though its policy treats both the same. We do not 5.4 Inter-processFlowAnalysis
discuss its analysis in as much detail, but give a summary
oftheanalysisandtheresults.
Given the new SELinux policy for the OpenSSH com-
Fortesting,weusedOpenSSH3.6andvsftpd2.1.3onan
ponents and the remainder of the SELinux example policy
Intelx86 platformwiththeLinux 2.6kernelinstalled. We
fortherestofthesystem,wearereadytouseGokyotofind
use SELinux (see Section 4.1) as our MAC system, using
lowintegrityinformationflowstotheprivilegedOpenSSH
thestrict(nottargeted)policyconfigurationforFedoraCore
componentsprivandlistenandrevisethepolicytoremove
4.
any unnecessary flows. Gokyo computes the information
flowsintheSELinuxpolicythatviolatethepolicyanalysis
5.3 RoadmapforOpenSSH
constraintsgiventhesetsoftrustedsubjects,excludedsub-
jects, and filter rules. A short introduction to Gokyo is in
The problem of verifying CW-Lite for privilege- Section4.3.
separatedOpenSSHisaddressedbyensuringthatallinfor- We define a TCB including the system bootstrap com-
mationflowsintotheprivilegedcomponents(listenorpriv) ponents, such as bootloader, kernel and init, and compo-
either contain only high integrity data or discard/upgrade nentsthatmodifytheSELinuxpolicyitself(e.g.,checkpol-
thedataviadeclaredfilteringinterfaces. icy, load policy, setfiles, etc.) orotherobjectsuponwhich
EnablingOpenSSHtosatisfyCW-Literequiresworkby the system integrity depends (e.g., administrative subjects
theapplicationdevelopertomodifyOpenSSHtofindwhere sysadm,staff,rpm,etc.).
filtering interfaces are necessary, build acceptable filtering WethenrunGokyoandidentifyseveralinformationflow
interfaces, and declare the presence of the filtering inter- conflicts shown in Table 1. The table shows each instance
faces to SELinux. Then, the administrator of the SELinux where the target subjects (priv and/or listen) have a read
system needs to configure an SELinux policy that enables permissiononanobjectthatmaybemodifiedbyuntrusted
satisfactionofCW-Lite. Recallthatthispolicywillhavea source subjects (write-up subjects); some objects may be
basesetofpermissions(subjecttype)allowingonlytrusted writtentobymanywrite-upsubjects. Theproblemthenis
input for normal interfaces and additional subject type to to find a resolution that prevents the target subjects from
accept requires types of untrusted input at the filtering in- being dependent on the write-up subjects. For each entry,
terfaces. one of these resolutions is applied in the following order
The first step is to use the Gokyo policy analysis tool of precedence: (1) we can EXCLUDE the write-up sub-
to identify the illegal information flows to priv and listen. ject from the system if it is not required on the system (2)
The next task is to determine whether the remaining low wecanidentifythatthepermissiondoesnotactuallyresult
integrity flows can be handled by filtering interfaces. We inadatadependency(FILTER NO DEP),whichrequiresa
use our tools (see Section 4.4) to find the interfaces that lightweightfilteringinterfacethatpreventsonlymetainfor-
acceptlowintegritydataintheprivilegedcomponentsand mationattackslikebufferoverflows;(3)wecanFILTERtheTarget Permission SourceSubjects Resolution
Subject (object:class) (namesorcount)
Resolutionsrequiringprimarilysystemknowledge
priv,listen,ftpd devlog:sock privlog FILTER NO DEP
priv lastlog:file 6 FILTER NO DEP
priv,ftpd etc runtime:file xdm,hotplug EXCLUDE
listen initrc var run:file 7(includesrlogind) EXCLUDE
listen,ftpd net conf:file dhcpc EXCLUDE
priv,ftpd wtmp:file 7(includesrlogin) EXCLUDE
Resolutionsrequiringapplicationknowledge
listen sshd listen:tcp(accept()) [network] FILTER
listen userpty:chr file 7 FILTER
priv sshd priv:unix sshd net FILTER
ftpd ftp port t:tcp(accept()) [network] FILTER
listen sshd listen:tcp(read()) [network] REMOVE
priv xserver port:tcp 165 REMOVE
priv,listen devtty:chr file 200 REMOVE(Thisrowusedforasamplewalkthrough.)
priv,listen port type:tcp [network] REMOVE
listen sshd listen:unix unpriv userdomain REMOVE
listen sshd listen devpts:chr file 5 REMOVE
priv sshd tmp:file (staff/sysadm/user)ssh REMOVE
priv sshd tmp:lnk (staff/sysadm/user)ssh REMOVE
priv sshd tmp:sock (staff/sysadm/user)ssh REMOVE
priv sshd tmp:fifo (staff/sysadm/user)ssh REMOVE
priv system chkpwd:fd 27 REMOVE
priv,listen unpriv domain:fd 33 REMOVE
ftpd ftp port t:tcp(read()) [network] REMOVE*
ftpd nfs t/cifs t:file 27 REMOVE*
ftpd user home:file 4 REMOVE*
FILTER=Thepermissionisnecessary,butrequiresafilteringinterface.Itshouldbeputinthefilteringsubjecttype.
FILTER NO DEP=Necessarypermissionsthatrequiresafilteringinterface,butnosemanticfilteringisneededsincetheinputisnot
interpreted. Thefilteringsubjecttypeisstillneededtoproperlyhandlemetainformationandenforceleastprivilegeforothertrusted
inputs.
EXCLUDE=ExcludethesourcesubjectfromtheSELinuxpolicy,asitcausesinsecureflows;anyassociatedprogramsmustnotbe
runonthesystem.Thisisajudgmentcall;sysadminsmayinsteaddecidetoaddthesourcesubjecttotheTCB.
REMOVE=Removethepermissionassignmentfromthetargetsubject,breakingtheinformationflow.
*=Thevsftpdpolicydidnotfullyreflectitsprocessstructure;seeSection5.6fordetails.
Walkthough for shaded row: “priv, listen” indicates that the illegal flows were inputs to both the priv and listen components of
OpenSSH.Theobjectthattheyhavepermissiontoreadfromisdevtty:chr file,thatis,aTTYfrom/dev/tty.Twohundreduntrusted
subjects have permission to write to that object. The illegal flows are broken by removing the read permissions, since they are not
necessary:theTTYisactuallyreadonlybythenetcomponent,whichhandlesremoteuserinput.
Table 1. Information flows to our target subjects (priv and listen for OpenSSH and ftpd for vsftpd) that may
leadtointegrityproblems. The permissions leading to these flows were identified by the Gokyo tool.
The top half of the table indicates conflicts resolved based on system knowledge. The bottom half
required examining the behavior of the target application using the tools described in Section 4.4.
Eachtargetsubjectwasanalyzedindependently.useofthepermissionviaafilteringinterface;or(4)wecan actually needed. SELinux policies only allow assignment
REMOVE the permission assignment from the target sub- ofpermissions,nottheirremoval,soweurgepolicywriters
jectorthewrite-upsubjectifnotrequiredbythesubject. tobecarefulintheiruseofsuchmacros.
Thetablegroupstheresolutionsintotwocategories: (1)
resolutions based on information flow only and (2) reso- 5.5 OpenSSHFilteringInterfaces
lutionsbasedonapplicationconfigurationandinformation
flow. The decision between removal ofpermissionassign- We now describe how we identified which permission
ments and filtering generally requires application knowl- assignmentstoclassifyasFILTER.First,theOpenSSHap-
edge; some permissions are needed to support optional plication developer needs to find where filtering interfaces
componentsoftheapplicationandsomeareneededforcore are necessary. Afiltering interface isnecessary where low
operation. An administrator would need to decide which integrity data may be input. For OpenSSH, the interfaces
options were required on her system and trust the corre- wherelistenreceivesconnectionrequestsfromthenetwork
sponding inputs. 14 of the 20 conflicts require some un- andwhereprivreceivescommandsfromnetarethetwoob-
derstandingoftheneedsoftheOpenSSHapplication. viouscases. However,otherinterfacesmayalsorequirefil-
Next, we recognize that the use of devlog and lastlog teringinOpenSSH.Tofindallfilteringinterfaces,ananaly-
doesnotresultinanyformofdependence.Theymanipulate sisoftheSELinuxpolicyisnecessarytoseeiflowintegrity
log data which is not interpreted, for example by rotating inputsmaybeusedbyotherOpenSSHinterfaces.
logfiles. Weusethesettraceonerrormechanismdescribed
Finally,weexcludeafewwrite-upsubjectsfromthesys- in Section 4.4 to test our configuration against the default
temiftheycauseillegalflowstoOpenSSH.Thisisajudg- SELinuxpolicytodetermineifotherinterfacesbesidesthe
ment call; a sysadmin may decide to trust these subjects twoaboverequirefilteringinterfaces. Welocatedone: the
instead. If they are trusted, then they must implement ap- userptypseudoterminalusedbyprivtocommunicatewith
propriate filtering interfaces. dhcpc is an example of this theusershellprocess.
as some vulnerabilities have been found for it. Dynamic Next,theapplicationdevelopermustconstructeffective
system extension via hotplug is not necessary in our envi- filtering interfaces. It is the application developer’s task
ronment,soourjudgmentistosimplifyadministrationand to build the filtering interfaces and prove effectiveness to
exclude it. We also eliminate the untrusted subjects that thecommunity. ForOpenSSH,theconstructionofafilter-
writetotheloginrecordsofwtmp,suchasrlogind. inginterfaceforprivtoreadcommandsfromnetisoneof
Only 3 of the 15 remaining read-type permissions are themaintasksintheprivilege-separationdonebyProvoset
actually needed in our OpenSSH configuration: the per- al [21]. The interface to accept connections in listen does
missionsidentifiedbyProvosetalforcreatingthepseudo- nothaveanyspecialfilteringperse,astheconnectionisnot
terminal; initiating OpenSSH connections (by listen); and interpreted by listen. Also, the userpty pseudo terminal in
processingusercommandsviathesocketfromnettopriv. priv is only used to pass data to the remote user from the
Weremovethe10unnecessarypermissionassignments.We shell process with an encryption step; the contents are not
notethattheport type:tcppermissionwhichpermitsaccess examined.
tomostsystemssocketsismuchcoarser-grainedthannec- Finally,oncefilteringinterfacesarefound,theymustbe
essary. listen only needs access to sshd listen:tcp on port declared to SELinux in order to use the low integrity per-
22. We note that the replication of some permissions for missions. WeusetheDO FILTER()annotationtodeclare
listen and priv was unnecessary. For example, there is no suchinterfacesasdescribedinSection4.2.
needforlistentoacceptrequestsfromnet.
Figure1showshowchallengingitcanbetogettheper- 5.6 Verifyingvsftpd
missionassignmentscorrectforagivensystem. Thehand-
constructed SELinux policy shipped with Fedora Core 4 We applied the same approach to verifying vsftpd; the
contained several permissions that needed to be removed. results are in Table 1. One difference is that the SELinux
(Our hand-distribution of OpenSSH permissions to net, policydidnotreflectthenatureoftheFTPdaemon,which
priv, and listen did not impact these.) Some, such as for forksper-connectionhelperprocessesinamannerverysim-
sshd tmp,enableactionsthatwedonotwantinourconfig- ilartoOpenSSH.Instead,therewasonesubjecttypeforall
uration(e.g.,useradministration). Others,though,aresim- processes. The child processes do drop Linux privileges
plymistakesthatenableinformationflowsthatcouldcom- (versus than SELinux ones), so they are still largely con-
promisetheintegrityofourprivilegedcomponents. While fined (if a permission is denied in either model, it is de-
investigating the source of these errors, we found that, of- nied to the process). The three starred permissions in the
ten,largeblocksofpermissionassignmentsweremadeus- tablearethosethatshouldbelongtotheunprivilegedchild
ingSELinuxconveniencemacroswhenonlyasubsetwere processes only, not to the trusted server process, which iswhy we specify their disposition vis-a-vis the trusted sub- curity. Onemayimagineapplyingtheirmethodtointerpro-
jecttypeas“REMOVE”.Theinterfacebetweenthetwois cess flow, which is controlled by a security policy rather
a filtered domain socket. The additional violating permis- than program source. The DO FILTER() primitive we
sions were eliminated by excluding some of the same ex- presentmaybeseenasadowngradingoperationinthiscon-
cludedsubjectsasforOpenSSH,likerlogindandxdm. text.
6 RelatedWork 6.2 StaticAnalysis
Several access control policy analysis tools have
6.1 IntegrityModels
emerged,particularlyinthecontextofSELinux. Whilethe
early tools mainly supported query handling, recent tools,
System integrity has been a difficult problem for secu-
such as Gokyo [14], SLAT [13], and Apol [25], now sup-
rityresearchersovertheyears. Mostworkonintegrityhas
port different kinds of information flow analysis. For ex-
focusedoninformationflowmodels,supplementedbyhigh
ample, SLAT enable verification of particular information
assurance (i.e., formal, validation of program correctness,
flow policies, and Gokyo identifies and enables resolution
suchasCommonCriteriaEAL7evaluation).
of illegal information flows [16]. Understanding informa-
TheBibaintegritymodel[2]isessentiallyadualofthe
tionflowsiskeytoachievingCW-Liteintegrity.
Bell-LaPadulasecrecymodel[1],whereinformationflows
Staticanalysishasalsobeenusedtoseparatetrustedand
from low integrity subjects to high integrity subjects are
untrustedcodeinotherways. ThePrivtranssystem[5]uses
prohibited. Like Bell-LaPadula, high assurance compo-
sourcecodeanalysistotrytoautomateprivilegeseparation,
nents are required to overcome restrictions, but unlike the
dividingaprogramintotrustedanduntrustedprocesses.
caseforsecrecy,illegal(low-to-high)integrityinformation
flowsarecommon(e.g.,userrequests).
6.3 Whole-systemAnalysis
Attempts in subsequent models have not grappled with
the fundamental problem that low-to-high integrity flows
Whilethereiswidespreadagreementthatwhole-system
are common. Denning’s work on secure information flow
analysis is desirable, there have been relatively few efforts
models [8] models information flows between subjects of
that actually do so on widely-used operating systems. Re-
differentlabelsasalattice, butmodelsillegalflowsasany
cently,Chowetal. usedhardware-levelsimulationonavir-
flow that violates the lattice structure. The LOMAC (low
tual machine in order to perform a dynamic cross-process
watermark)integritymodelalsopreventshighintegritysub-
taint analysis [6]. By contrast, our work focuses on static
jectsfromactingonlowintegrityinformationflows,inthis
analysis to prove certain properties about applications’ in-
case by downgrading the level of a high integrity subject
formation flow rather than infer them dynamically. Thus,
upon receipt of a low integrity information flow [12]. The
weseeourapproachascomplementarytotheirs.
Clark-Wilson model acknowledges that interfaces are re-
quired that can sanitize (or discard) low integrity data, but
7 ConclusionandFutureWork
all interfaces must be capable of sanitization (or discard)
and the basis for trusting these interfaces is still high as-
surance [7]. We are significantly influenced by the Clark- Maintaininginformation-flowintegrityisanoldandim-
Wilsonmodel’sviewofrequirementsoninterfacesofhigh portant problem, but as yet an unsolved one in practice:
integrity processes, though. Lastly, the recent Caernarvon most administrators have not verified that untrusted users
modelallowssubjectstospanmultipleintegritylevelssuch cannotcompromiseinputstotrustedprogramsontheirsys-
that a subject (i.e., process running with an integrity label tems. Inthispaper, wehavedevelopedawaytoautomati-
range)maybeabletoreadfromlowerintegritydatawithin cally verify a meaningful information-flow integrity prop-
itsintegrityrangesecurelywhilewritingtohigherintegrity erty with very small changes to existing trusted applica-
data within its integrity range [22]. Unfortunately, the in- tions. WecallthispropertyCW-Lite,sinceithasthesame
tegrityrangesmustbejustifiedbyassurance,wheresignif- interprocess dependency semantics as the well-established
icantlybroadrangeswillstillrequirehighassurance. Even Clark-Wilson model, but does not address Clark-Wilson’s
after 25 years, we cannot escape the requirement for high whole-program formal verification requirement. CW-Lite
assurance,whichplacestoohighaburdenontoomanyap- requiresfilteringonlyforuntrustedinputinterfaces, asde-
plicationstobepractical. termined by the system’s security policy, and just simple
More recent work by Li and Zdancewic [18] present a annotationstoexistingapplicationstoenableleast-privilege
formal type system that captures intraprogram labeled in- enforcementandautomaticverification. Onlyconflictreso-
formation flow, with provisions for downgrading of data; lutionrequiresmanualeffortbythesysadmin. Wemodified
type-checking may be used to ensure information-flow se- theSELinuxaccesscontrolsystemtoenforceCW-Liteanddevelopedtoolsthatsupporttheimplementationofcompat- [8] D.EDenning.ALatticeModelofSecureInformation
ible program. We verified the practicality of our tools by Flow. In Communications of the ACM, vol. 19, no. 5
analyzingprivilege-separatedOpenSSHandvsftpd,finding (May1976),pp.236-243.
andfixingseveralintegrity-violatingconfigurationerrorsin
theshippingSELinuxpolicy. [9] J. Dyer, M. Lindemann, R. Perez, R. Sailer, S.
ThemainfutureworkistoextendCW-Litetotheentire W. Smith, L. van Doorn, and S. Weingart. Building
softwaretrustedcomputingbaseofthesystem. Inaddition, the IBM 4758 secure coprocessor. IEEE Computer,
a natural extension to our model would be a way to prove (34)10:57-66,October2001.
staticallythatfilteringinterfaces’upgrade/discardoperation
[10] D.EvansandD.Larochelle. Improvingsecurityusing
is semantically correct, an application-specific check that
extensiblelightweightstaticanalysis. IEEESoftware,
may be tractable if the types of allowed filtering are re-
Jan/Feb2002.
stricted.
[11] P. England, B. Lampson, J. Manferdelli, M. Peinado,
Acknowledgements andB.Willman. Atrustedopenplatform. IEEECom-
puter,pp.55-62,July2003.
David Wagner, Rob Johnson, Naveen Sastry, Monica
[12] T. Fraser. LOMAC: Low Water-Mark integrity pro-
Chew, AJ Shankar, David Molnar, and Chris Karlof pro-
tectionforCOTSenvironments. InProceedingsofthe
vided valuable technical and stylistic feedback on this pa-
2000IEEESymposiumonSecurityandPrivacy,May
per.
2000.
References [13] J.Guttman,A.Herzog,andJ.Ramsdell. Information
flowinoperatingsystems: Eagerformalmethods. In
WorkshoponIssuesintheTheoryofSecurity(WITS),
[1] D.BellandL.LaPadula. SecureComputerSystems:
2003.
MathematicalFoundations(Volume1). TechnicalRe-
portESD-TR-73-278,MitreCorporation,1973.
[14] T.JaegerandA.EdwardsandX.Zhang. Policyman-
[2] K. J. Biba. Integrity considerations for secure com- agement using access control spaces. ACM Transac-
puter systems. Technical Report MTR-3153, Mitre tions on Information and System Security (TISSEC),
Corporation,MitreCorp,BedfordMA,June1975. 6(3),August2003.
[3] P. Broadwell, M. Harren, and N. Sastry. Scrash: A [15] T.Jaeger,R.Sailer,andX.Zhang.Analyzingintegrity
system for generating secure crash information. In protectionintheSELinuxexamplepolicy.InProceed-
Proceedingsofthe11th USENIXSecuritySymposium, ingsofthe12th USENIXSecuritySymposium,August
August2003 2003.
[4] W. E. Boebert and R. Y. Kain. A practical alterna- [16] T. Jaeger, R. Sailer, and X. Zhang. Resolving con-
th
tive to hierarchical integrity policies. In Proceedings straintconflicts. InProceedingsofthe9 ACMSym-
of the 8th National Computer Security Conference, posium on Access Control Models and Technologies,
Gaithersburg,Maryland,1985. June2004.
[5] D. Brumley and D. Song. Privtrans: Automatically [17] D. Kilpatrick. Privman: A library for partitioning
partitioningprogramsforprivilegeseparation. InPro- applications. In Proceedings of the USENIX 2003
ceedings of the 13th USENIX Security Symposium, AnnualTechnicalConference,FREENIXTrack,April
August2004. 2003.
[6] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and [18] P. Li and S. Zdancewic. “Downgrading Policies and
M. Rosenblum. Understanding data lifetime via Relaxed Noninterference”. In Proceedings of the
wholesystemsimulation. InProceedingsofthe13th 2005SymposiumonPrinciplesofProgrammingLan-
USENIXSecuritySymposium,August2004. guages,January2005.
[7] D. . Clark and D. R. Wilson. A comparison of com- [19] A.C.MyersandB. Liskov. Complete,safeinforma-
mercial and military computer security policies. In tionflowwithdecentralizedlabels. InProceedingsof
Proceedingsofthe1987IEEESymposiumonSecurity the 1998 IEEE Symposium on Security and Privacy,
andPrivacy,May1987. May1998.[20] NIST, Computer Security Division. Common crite- flowrulestatesthat
riaforITsecurityevaluation. Availablefromcsrc.
nist.gov/cc/,2004. mod(s1,o1)∧relabel(o1,oi)∧obs(si,I,oi)
→flow(s1,si,I).
[21] N. Provos, M. Friedl and P. Honeyman. Prevent-
th
ing privilege escalation. In Proceedings of the 12 Gokyoaccountsforinformationflowsduetoarbitraryrela-
USENIXSecuritySymposium,August2003. beling.
[22] G.Schellhorn,W.Reif,A.Schairer,P.Karger,V.Aus-
tel,D.Toll.Verificationofaformalsecuritymodelfor
th
multiapplicativesmartcards.InProceedingsofthe6
EuropeanSymposiumonResearchinComputerSecu-
rity(ESORICS),2000.
[23] National Security Agency. Security-Enhanced Linux
(SELinux). http://www.nsa.gov/selinux,
2001.
[24] S.Smith. Outboundauthenticationforprogrammable
th
secure coprocessors. In Proceedings of the 8 Eu-
ropeanSymposiumonResearchinComputerSecurity
(ESORICS),2002.
[25] Tresys Technology. Security-Enhanced Linux re-
search. www.tresys.com/selinux.html,2004.
[26] C. Wright, C. Cowan, S. Smalley, J. Morris, and
G. Kroah-Hartman. Linux Security Modules: Gen-
eralsecuritysupportfortheLinuxkernel. InProceed-
th
ingsofthe11 USENIXSecuritySymposium,August
2002.
[27] X.Zhang,A.Edwards,andT.Jaeger. UsingCQUAL
forstaticanalysisofauthorizationhookplacement. In
th
Proceedingsofthe11 USENIXSecuritySymposium,
August2002.
Appendix: Gokyo support for SELinux object
relabeling
Because the SELinux policy model also permits object
relabeling, we must consider information flows caused by
modifying an object and relabeling it to another object
type. Therelabel(s,obj,o,o! )operationenablessubjects
tochangeanobjectobj’slabelfromotoo!
.Sincerelabeling
doesnotchangethecontentsofanobject,wedonotreally
carewhodoestherelabel,justthatitcanoccur.Also,itdoes
notmatterwhichspecificobjectcanberelabeled, sinceall
objectsofthesameobjecttypeareequivalentfromaninfor-
mation flow perspective. Thus, we use a refined predicate
relabel(o,o!
).
Next,weconsidersuccessiverelabelingoperationso1 →
o2 → ... → oi. Thetransitiveclosureoftherelabel oper-
ationisdefinedbyrelabel(o1,oi). Therelabelinformation