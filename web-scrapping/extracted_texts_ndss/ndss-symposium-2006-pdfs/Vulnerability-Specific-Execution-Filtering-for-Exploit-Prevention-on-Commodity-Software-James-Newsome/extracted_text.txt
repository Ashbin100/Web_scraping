Vulnerability-Specific Execution Filtering
for Exploit Prevention on Commodity Software
James Newsome David Brumley Dawn Song
Carnegie MellonUniversity Carnegie MellonUniversity Carnegie MellonUniversity
jnewsome@ece.cmu.edu dbrumley@cs.cmu.edu dawnsong@cmu.edu
Abstract beturnedintowormswhichcompromisehundredsofthou-
sandsofmachineswithinonlyafewminutes[22,35].Thus,
afteravulnerabilityisdiscovereditisimportanttoquickly
Exploits for new vulnerabilities, especially when incor- developeffectivemechanismstoprotectvulnerablehostsso
porated within a fast spreading worm, can compromise that(1)theywillnotbecompromisedbyexploitsofthevul-
nearly all vulnerable hosts within a short amount of time. nerability,and(2)provideservicewithoutdisruption.
Thisproblemdemonstratestheneedforfastdefenseswhich The speed at which new vulnerabilities are discovered
canreacttoanewvulnerabilityquickly. Inaddition,areal- and exploits created necessitates new defenses that meet
isticdefensesystemshould(a)notrequiresourcecodesince severalgoalssimultaneously: (1)Fastdefensedevelopment
inpracticemostvulnerablesystemsdonothavesourcecode anddeployment: thereisoftenverylittlereactiontime,es-
access nor is there adequate time to involve the software peciallywhentheexploitcomesintheformofafastprop-
vendor,(b)beaccurate,i.e.,haveanegligiblefalsepositive agating worm. Thus, we need to be able to develop and
rate and low false negative rate, and (c) be efficient, i.e., deploydefensemechanismsextremelyquicklyafterthede-
addlittleoverheadtonormalprogramexecution. tection of a vulnerability. (2) No requirement for source
Weproposevulnerability-specificexecution-basedfilter- code: many vulnerable programs are commodity software
ing(VSEF)–anewapproachforautomaticdefensewhich forwhichthesourcecodeisproprietary.Torespondquickly
achievesalowererrorrateandwiderapplicabilitythanin- to newvulnerabilities, weneedtobeableto developa de-
put filters and has better performance than full execution fense mechanism without access to source code, so we do
monitoring. VSEFisanexecution-basedfilterwhichfilters notrelyonthecooperationofthesoftwarevendor.(3)High
outattacksonaspecificvulnerabilitybasedonthevulnera- accuracyandeffectiveness: thedefensemechanismshould
bleprogram’sexecutiontrace.WepresentVSEF,alongwith protectagainstthevulnerabilityandshouldnothaveanyun-
asystemforautomaticallycreatingVSEFfiltersandahard- desirablesideeffectonnormalexecution. Itshouldhavea
enedprogramwithoutaccesstosourcecode.Inoursystem, lowfalsepositiverate(notblockinglegitimaterequests)and
the time it takes to create the filter and generatethe hard- alowfalsenegativerate(eveneffectiveagainstpolymorphic
enedprogram isnegligible. The overhead of the hardened attacks).(4)Lowperformanceoverhead:thedefensemech-
programisonlyafewpercentinmostcases. Thefalsepos- anismshouldhavelowperformanceoverhead,soavulnera-
itive rate is zero in mostcases, and the hardened program blehostdeployingthedefensemechanismcanstillprovide
is resilient against polymorphicvariants of exploits on the criticalserviceswithlittleperformancedegradation.
same vulnerability. VSEF therefore achieves the required Many defense mechanisms have been proposed to pro-
performance,accuracy,andresponsespeedrequirementsto tectavulnerablehostafteravulnerabilityhasbeendiscov-
defendagainstcurrentfast-spreadingexploits. ered. Previousworkhasvariousdrawbacksanddonotsat-
isfyalltheaboverequirements. Onepopularapproachisto
automatically generate network-based input filters to filter
1. Introduction outknownexploits[16,34,18,27,26]. However,theaccu-
racy and effectivenessof the network-based input filtering
The number of new vulnerabilities reported each year approachisfundamentallylimitedtosyntacticpropertiesof
continues to grow. According to CERT/CC, in 1995 171 the input string and cannot take into account application-
newvulnerabilitieswerereported,whilelessthanadecade specific semantic and context information. In particular,
later in 2004 over 3700 new vulnerabilities were discov- there maybeno syntax-basedclassifier tocorrectly distin-
ered[9].Anewexploitforasinglevulnerabilitycanreadily guish between malicious and innocuous traffic for certainapplications or vulnerabilities due to polymorphic attacks; program. Thehardenedprogramintroducesverylittleover-
andthelackofcontextinformationinnetwork-basedinput head and for normal requests performs just as the original
filteringcanhavehighfalsepositiverateforcertainapplica- program. Ontheotherhand,thehardenedprogramdetects
tions. Input filters also have difficulty recognizing seman- andfiltersoutattacksagainstthesamevulnerability. Thus,
ticallyequivalentinputs,suchasalternateURLencodings, VSEFprotectsvulnerablehostsfromattacksandallowthe
whichleadstofalsenegatives.Intheextremecasewherean vulnerablehoststocontinueprovidingcriticalservices.
inputfilterisusedonanencryptedprotocol,itmustsome-
Contributions. The central contribution of this paper is a
howbesuppliedwiththedecryptionkey,whichisawkward
newapproachforautomaticdefenseagainstknownvulnera-
andapplication-specific.Costaet.al.proposeautomatically
bilities, calledvulnerability-specificexecution-basedfilter-
generated host-based input filters [11], which has greater
ing. Using the execution trace of an exploit of a vulner-
accuracythannetwork-basedinputfilters,andcancorrectly
ability, our VSEF automatically generates a hardened pro-
recognize some semantically equivalent inputs. However,
gram which can defend against further (polymorphic) ex-
theapproachstillsuffersdifficultywhenthecorrectclassifi-
ploits of the same vulnerability. VSEF achieves three im-
cationruleiscomplexandneedsprogramstateinformation,
portant goals: low performance overhead, fast generation,
orwheninputisencrypted.Thereforetheinputfilteringap-
andalowerrorrate. Specifically:
proachisnotacompletesolution.
On the other hand, various host-based approaches have (cid:15) OurVSEFisanextremelyfastdefense. Ingeneral, it
takesafewmillisecondsforourVSEFtogeneratethe
been proposed which are more accurate, but fail to meet
hardenedprogramfromanexploitexecutiontrace.
the other requirements. For example, previousapproaches
havefocusedon: (1) Patching: patchinga newvulnerabil- (cid:15) Our VSEF filtering techniques provide a way of de-
tectingexploitsofavulnerabilitymoreaccuratelythan
ity can be a time-consuming task—generating high qual-
ity patches often require source code, manual effort, and input-basedfiltersandmoreefficientlythanfullexecu-
tionmonitoring.
extensive testing. Applying patches to an existing system
also often requiresextensivetestingto ensurethat thenew (cid:15) Our techniques do not require access to source code,
andarethusapplicableinrealisticenvironments.
patches do not lead to any undesirable side effects on the
wholesystem. (2)Binary-basedfullexecutionmonitoring: (cid:15) We provide two VSEF filtering mechanisms for de-
tecting overwrite attacks, including buffer overflows,
many approaches have been proposed to add protection to
double-free attacks, and format string vulnerabilities.
abinaryprogram. However,thesepreviousapproachesare
The first mechanism, taint-based VSEF, is the most
eitherinaccurateandonlydefendagainstasmallclassesof
attacks [6, 31, 17, 23] or require hardwaremodificationor accurate and requires potentially a longer filter. The
second mechanism, destination-based VSEF, is more
incur high performanceoverheadwhenused to protect the
efficientandisstillhighlyaccurate. Bothmechanisms
entireprogramexecution[14,27,36,11].
havezerofalse positivesinmost cases, andareeffec-
In this paper, we propose a new approach for auto-
tiveagainstpolymorphicvariantsoftheexploitofthe
maticdefense: vulnerability-specificexecution-basedfilter-
vulnerability. Note that our approach is general, and
ing (VSEF).Atahigh-level,VSEFfiltersoutexploitsbased
couldpotentiallybeappliedtootherfaultssuchasin-
on the program’s execution, as opposed to filtering based
tegeroverflow,divide-by-zero,etc.
solely upon the input string. However, instead of instru-
(cid:15) Ourexperimentsshowthatthe performanceoverhead
mentingandmonitoringthefullexecution,VSEFonlymon-
ofthehardenedprogramisusuallyonlyafewpercent.
itors and instruments the part of program execution which
is relevant to the specific vulnerability. VSEF therefore
These properties make VSEFan attractive approach to-
takes the best of both input-based filtering and full execu-
ward building an automatic worm defense system that can
tionmonitoring: itismuchmoreaccuratethaninput-based
reacttoextremelyfastworms.
filteringandmuchmoreefficientthanfullexecutionmoni-
toring.
2. Approach: Vulnerability-Specific
Wealsodevelopthefirstsystemforautomaticallycreat-
Execution-basedFiltering
ingaVSEFfilterforaknownvulnerabilitygivenonlyapro-
grambinary,andasampleinputthatexploitsthatvulnera-
bility. Our VSEF Filter Generator automatically generates Overview. We propose a new approach for automatically
aVSEFfilterwhichencodestheinformationneededtode- defending against just-discovered attacks, vulnerability-
tectfutureattacksagainstthevulnerability.UsingtheVSEF specificexecution-basedfiltering(VSEF).VSEFisbasedon
filter, thevulnerablehostcanuseourVSEFBinaryInstru- theobservationthatforaspecificvulnerabilityonlythepart
mentation Engine to automatically add instrumentation to of the program execution that is relevant to the exploit of
the vulnerablebinary programto obtain a hardenedbinary thevulnerabilityneedbemonitored. VSEFmonitoringhasfullcontextandsemanticinformation,asopposedtoinput- (cid:15) Efficient generation of VSEF filters. Once a vulner-
based filters which are limited to syntactic properties. In- ability is discovered, it often takes days or months to
strumentingthebinarytoperformthevulnerability-specific prepareasuitablepatch. However,fastwormsmaybe
execution filtering results in a hardened binary. As a re- abletoinfecttheentireInternetinunderafewminutes.
sult,VSEFismuchmoreaccuratethannetwork-basedfilter- Weshouldbeabletogeneratefiltersquicklyenoughto
ing,andmuchmoreefficientthanfullexecutionmonitoring. allowaneffectiveresponsetosuchflashevents.
The combination of accuracyand low overheadmakesthe (cid:15) Efficient detection. The vulnerability-specific execu-
VSEF approach very attractive for automatic deployment tion filtering should add as little overheadas possible
schemes. toprogramexecution.
ThemainresearchquestionsforenablingVSEFinclude
(1)whatpartoftheprogramshouldwemonitor/instrument, 3. Taint-basedand Stack-basedVSEF
(2)howcanwedetectandfilterouttheattackwhenweonly
Inthissection,wepresenttwoconcreteexamplesofour
monitor/instrumentpartoftheprogram,and(3)howcanwe
VSEF system: the taint-based VSEF and the destination-
minimizetheoverheadoftheVSEFdefense. Inthispaper
based VSEF. The taint-based VSEF is based on dynamic
we address these questions. In particular, we propose an
taintanalysisandhashighaccuracy. Thedestination-based
architecturethatwillautomaticallycreateVSEFfiltersand
VSEF is an optimistic version of taint-based that usually
harden the vulnerable program given an exploit execution
requiresfewerinstructionsinstrumented.
trace.
VSEF Architecture. Figure 1 shows the overall architec- 3.1.Taint-basedVSEF
ture. Our architecture contains two main components: the
3.1.1.Overview
VSEF Filter Generator and the VSEF Binary Instrumenta-
tion Engine. To enable VSEF, we assume that a sample One effective method recently proposed to detect
exploit has been detected by some exploit detector which memory-safetybasedattacksisdynamictaintanalysis[14,
outputs an exploit execution trace. The exploit execution 27,36,11].Dynamictaintanalysismarksdatacomingfrom
tracecontainstheinformationabouttheprogramexecution untrusted sources (such as the network) tainted, and then
up to the detectedexploit of the vulnerability. The exploit keepstrackofwhatdatabecomestaintedbyuntrustedinput
execution trace can be a simple instruction trace dump of data by inserting instrumentation instructions to propagate
theprogramexecutionorsomemoreintelligentoutputfrom the taint attribute. For example, it adds instrumentation to
theexploitdetector.TheVSEFFilterGeneratorusestheex- each data movement instruction (mov, push, pop, etc.),
ploitexecutiontracetocreateaVSEFfilterwhichencodes and data arithmetic instruction (add, sub, xor, etc.), so
the information needed for the monitoring to detect future thattheresultoftheinstructionwillbemarkedtaintedifand
attacks on the vulnerability. The VSEF filter can then be only if any operand of the instruction is tainted. Dynamic
disseminated. taintanalysisalsoinsertsextrainstrumentationbeforeevery
Vulnerable hosts use the VSEF Binary Instrumentation point wheredata isused in a sensitive way (suchas return
Engine to apply a VSEF filter to a binary. The result is a addresses, function pointers, and format strings) to ensure
hardenedbinaryprogram. Thehardenedprogramfunctions thatthedataisnottainted. Dynamictaintanalysishasbeen
liketheoriginalprogramfornormalrequestsandintroduces shown to accurately detect a wide range of exploit attacks
very little overhead. The hardened program, however, de- includingbufferoverrun,formatstring,anddoublefreeat-
tects and filters out attacks against the same vulnerability. tacks [14, 27, 36, 11], making it one of the most compre-
Thus, VSEFprotectsvulnerablehosts fromattacksandal- hensiveprotectionmechanismsthatdoesnotrequireaccess
lowsthevulnerablehoststocontinuetoprovidecriticalser- tosourcecode.
vices. However,dynamictaintanalysis requires instrumenting
many instructions. Every data movement, arithmetic, and
VSEFRequirements.Thevulnerability-specificexecution
control transfer instructions that could potentially touch a
filteringarchitectureshouldhavethefollowingproperties:
tainted memory location must be instrumented in order to
(cid:15) Robust VSEF filters. A VSEF filter should be accurately propagate the taint attribute and detect when
vulnerability-specific but exploit agnostic. For exam- tainteddataismisused.Suchextensiveinstrumentationcan
ple,itshouldbeabletodetectthesampleexploiteven add significant performance overhead — up to a factor of
when a polymorphic engine has been used to encrypt 30ormoreinsomecases[27].
the payload [37]. Note that input filters are particu- Weobservethatwhenexploitingaparticularvulnerabil-
larlyvulnerabletopolymorphism,astheremaynotbe ity,onlyahandfulofinstructionsareinvolvedinpropagat-
enough syntactic information in the input to reliably ing the tainted input to the sensitive location that is over-
detectpolymorphicvariants. written. When we know what those instructions are, weExploit
Execution
VSEF filter Hardened
Exploit Trace VSEF Binary
Sample VSEF Filter
Binary
Detector Instrumentation
Exploit Generator
Program
Engine
Vulnerable
Binary
Program
Figure 1. VSEF architecture. Once an exploit is detected, an execution log is produced. The VSEF
Filter Generator produces a filter that recognizes execution patterns that exploit the vulnerability.
These filters can then be disseminated. The VSEF Filter Generator takes the filter and instruments
thebinarytorecognizeexecutionsequencesthatexploitthevulnerability,theresultbeingahardened
binary.
caninstrumentonlythoseinstructionstopropagatethetaint support [7, 32]. The VSEF Filter Generator examines the
attribute, and the instruction that unsafely uses the tainted traceinabackwardmannertodeterminewhichinstructions
data, and still successfully detect attacks against that vul- propagatedtainteddatathatreachedthevulnerabilitydetec-
nerability. tionpoint.Itbeginsattheendofthetrace,calledtheexploit
Thus, in taint-based VSEF, we automatically identify point, wheretheexploitwasdetected. Thesourceoperand
andinstrumenttheinstructionpositionsthat needto bein- tothisinstructionmusthavebeentaintedbysomeprevious
strumentedtopropagatethetaintattributeandtodetectthe instructioninthetrace(sincethisisanoverwriteattackus-
misuseoftainteddatatodetectexploitsofaparticularvul- ingtainteddata);andthesourceoperandofthatinstruction
nerability.Asaresult,taint-basedVSEFcandetectexploits musthavebeentaintedbysomeotherpreviousinstruction,
of the same vulnerability much more efficiently than full etc.. The VSEF Filter Generator continues performingthe
executionmonitoring. analysis recursively until it reaches the initial instructions
for reading the original untrusted input in the sample ex-
3.1.2.Taint-basedVSEFFilterGeneration ploit.
Byfollowingthechainoftaintedoperationsbackwards,
Ataint-basedVSEFfilterincludestwoparts: (1)thelist
the VSEF Filter Generator can identify the list of instruc-
ofinstructionpositionsthatweneedtoaddinstrumentation
tions in the executiontrace which were involvedin propa-
to for taint propagation, and (2) the instruction position to
gatingthetaintattributefromtheoriginaluntrustedinputto
whichweneedtoaddinstrumentationtodetectthemisuse
theexploitpoint. Thislistofinstructionsisusedinthefilter
of tainted data. Instruction positions can be expressed as
asthelistofinstructionstobeinstrumentedtopropagatethe
absolute addresses, or as the name of a shared library and
taint attribute. This calculation is an instance of flowback
offsetintothatlibraryforincreasedportability.
analysis[5],awellstudiedandefficientprocedure[38].
Theinstructionpositionthatwe needtoaddinstrumen-
tation to to detect the misuse of tainted data is simply the An obvious choice for the exploit detector is a taint-
instruction position where tainted data was detected being based exploit detector [14, 27, 36, 11]. In particular,
misused. The list of instruction positions that we need to TaintCheck [27] already keeps a directed acyclic graph
addinstrumentationtofortaintpropagationisthelistofin- (DAG) of where tainted data was propagated from, and at
structionsthatpropagatedthetaintattributefromtheorigi- at what instruction points. That is, each time tainted data
nalmaliciousinputtothepointwhereitwasdetectedbeing is propagated, a node is generated that contains the posi-
misusedintheexploitexecutiontrace. tion of the currently executing instruction, and pointers to
The VSEF Filter Generator can identify this list using nodes corresponding to each tainted operand. In this ap-
1) any exploit detector that can identify the tainted data proach all the information needed to calculate the filter is
that was misused and what instruction misused it, and 2) alreadyonhand.TheVSEFFilterGeneratorsimplyfollows
a log of instructions that have been executed, and the val- theDAGfromthepoint(s)wheretainteddatawasmisused
ues ofdynamicallycalculatedaddresses. Thelatter canbe tothepoint(s)whereitwasoriginallyinput,andrecordsall
loggedinsoftware,orgeneratedefficientlyusinghardware theinstructionpositionsonthatpath.Csource IA-32assembly Taintpropagation
1 structdummy tf
2 charbuf[16];
3 void(*fnptr)(void);
4 g;
5
6 voidvuln(structdummy t*dummy)
7 f
8 charbigbuf[100];
9 inti=0;
10 intcount=0;
11 void(*fnptr)(void)=NULL;
12
13 fgets(bigbuf,100,stdin); A int$0x80 0x3a966010 stdin
B repzmovsb%ds:(%esi),%es:(%edi) 0xafefea80 0x3a966010
14 strcpy(dummy(cid:0)>buf,bigbuf); C movzbl(%edx),%eax al 0xafefea80
D mov%al,(%ecx,%edx,1) 0x80ad1b0 al
15 fnptr=dummy(cid:0)>fnptr; E mov0x10(%eax),%eax eax 0x80ad1b0
F mov%eax,0xffffffcc(%ebp) 0xafefea64 eax
16 fnptr(); G mov0xffffffcc(%ebp),%eax eax 0xafefea64
H call*%eax illegaluseoftaintedeax
17 g
Table 1. Overwrite example: A piece of vulnerable code, and the instructions that propagated and
misusedthetainteddatawhenthevulnerabilitywasexploited. InstructionpositionDistheoverwrite
point, where tainted data overwrites a function pointer. Instruction position H is the exploit point,
wherethetainteddataismisused.
Table 1 shows an example of code that is vulnerable to thedestinationasalsotainted.TheTaint-basedVSEFFilter
anoverwriteattack,inthiscaseabufferoverflowthatover- Generatorinsertsinstrumentationattheexploitpointtode-
writesafunctionpointer.Thesecondcolumnshowstheas- tectifthesensitivevaluebeingusedistainted,signifyingan
semblyinstructionsthatareinvolvedinpropagatingtainted attack,andifsototakeappropriateaction.Here,weassume
data to the point where it is misused. The third column the appropriate action is exitingthe program. Others have
showstheactualpropagation,withthedataaddressesasre- investigated other actions, such as returning an error code
solvedatruntime. In thisexample, theexploitis detected and continuing execution [30, 33]. The resulting program
atinstructionH,wheretainteddataineaxismisused.The withtheaddedinstrumentationisthehardenedbinary.
VSEF Filter Generator traces backwards in the execution When the hardened binary is run, the instrumentation
log(ortheDAGifusingTaintCheck)andfindsthatinstruc- propagates the taint attribute throughout the program as
tion G was the last instruction to write to eax, and so on, wouldhavebeendonebyafulltaint-basedexploitdetector.
backtoinstructionAwhichperformedareadsystemcall. Iftheexploitpointisreached,andthedatabeingusedina
Hence, the taint-based VSEF filter consists of position H, sensitivewayhasbeenmarkedtainted,executionisaborted.
where tainted data was misused, and positions A through Since the VSEF Filter Generator does not instrument
G,whichpropagatedthetainteddatatothatpoint. all data movement and arithmetic instructions, tainted lo-
cationsarenotmarkeduntaintedwhenoverwrittenwithun-
3.1.3.Taint-basedVSEFBinaryInstrumentation
tainteddatabyuninstrumentedinstructions. Thiscouldpo-
TheTaint-basedVSEFFilterGeneratorinstrumentseach tentiallyleadtofalsepositivesinsomecases. Forexample,
instructioninthetaint-basedVSEFfiltertopropagatetaint supposeastack-basedbuffermarkedastaintedispoppedoff
information,andinsertstheappropriatesafetycheckatthe thestack,andislateroverwrittenwitha(legitimate)return
exploitpoint. Theinstrumentationconceptuallykeepsalist address,withoutbeingmarkeduntainted.
oftaintedmemorylocations. Whenaninstructionlistedin We addressthisproblembyhavingthehardenedbinary
theVSEFexecutes,theaddedinstrumentationcheckstosee recordthevaluethatalocationtakesonwhenitismarkedas
if any source operand is a tainted location. If so, it marks tainted.Whenanotherinstrumentedinstructionlatercheckstoseeifthatlocationistainted,italsocheckstoseeifitstill monly used data movement function such as strcpy or
has thesame value. Ifnot, thenithas beenoverwrittenby memcpy, and hence the instrumentation will be executed
an uninstrumented instruction, and is marked as no longer anytimethat functioniscalled. Inourevaluationthiswas
tainted. Thisapproachaddslittleoverhead,butthereisstill true,thoughwedidnotfindittobeaperformanceproblem.
somepotentialforfalsepositives. Ifanuninstrumentedin- If it were, we could use the techniques described in Sec-
struction overwrites tainted data with the same value that tion 3.2 so that the instrumentation is only executedwhen
was already there, this heuristic will not correctly untaint thefunctioniscalledinthevulnerablecontext.
thatlocation.
Accuracy. The VSEF-hardened binary has no false posi-
An alternative approach is to use existing memory
tives when memory watchpoint techniques are used to en-
watch-pointtechniquestomonitortaintedlocations,andun-
surelocationsarecorrectlymarkeduntaintedwhenwritten
taintthemwhenotherinstructionswritetothem.OntheIA-
tobyuninstrumentedinstructions. Thereisnothingmarked
32 architecture the debug registers can be used to monitor
as tainted by the instrumentation that was not actually de-
upto4memorylocations(upto4byteseach). Wecanalso
rivedfromuntrustedinput,andduringdetectionwealready
use page-protection techniques (e.g., setting tainted mem-
determined that the attacker should not be able to write to
orypagestoberead-only)tobenotifiedofwritestotainted
the sensitivevaluebeing guarded. Note thatwithoutusing
memory. Moreover,when available, we can also use ECC
memory watchpoint support, the untaint heuristic will not
memoryto be notifiedof writesto tainted memorysimilar
correctlyuntaintdataifithasbeenoverwrittenbyuntainted
totechniquesusedin[28]. Allofthesetechniquesgenerate
data with the same value, which could lead to false posi-
a trap when the watched memory is accessed (or memory
tives. However, we have not encountered any in practice
nearthewatchedmemory),allowingourcodetountaintthe
andexpectthemtoberare.
watchedlocationifithasbeenrewrittenbyuntainteddata.
Thecost of generating trapswhendata isuntainted canbe A false negative is when the same vulnerability is ex-
reduced by reducing the amount of data that gets tainted. ploitedwithoutbeingreported.Thiscanoccurifthetainted
Onewaytoachievethisistomodifytheinstrumentationof input is propagated along a different code path than in the
eachofthedatapropagationinstructionintheVSEFfilter, sampleexploit,oriftheoverwrittensensitivevalueismis-
so that it will only taint the destination when executing in usedatadifferentlocation. Notepolymorphicvariantscre-
the same call-stack context as during the original exploit. ated by tools such as MetaSploit [3] will be detected from
This technique comes with a trade-off of false negatives asinglefilter. Thereasonissuchpolymorphicvariantsdif-
whendataistaintedbythesameinstructions,butinadiffer- fer in the payload, which would be executed strictly after
ent context, until the alternate contextsare discoveredand theexploitpoint. Onlyanexploitthatispolymorphicinthe
addedtotheVSEFfilter. Whileweareunawareofexisting execution path exploited could be missed. Specifically, it
mechanisms to watch for writes to processor registers, we wouldbemissedifandonlyifdifferentinstructionspropa-
expect that a processor register will not remain tainted for gatethetainteddatatotheexploitpoint,orthereisadiffer-
long before being overwrittenwith untainted data. Hence, entexploitpoint. We expectthatthereisarelativelysmall
when a register becomes tainted, we can switch to moni- numberofsuchpossiblevariantsforaparticularvulnerabil-
toringallinstructionsuntilitbecomesuntaintedagain. We ity,andthattheattackermustidentifythemmanuallyorby
showhowtoefficientlyturnfulltaintanalysisonandoffat static analysis of the vulnerable binary. Naturally, we can
runtimein[25]. apply the same static analysis techniques to preemptively
identifytheotherpathsthatshouldbeinstrumented. Thisis
3.1.4.AnalysisandCombiningFilters discussedfurtherinSection3.3.
Performance.Bydesignthetaint-basedVSEFfiltercanbe Combiningfilters.Wemaywanttocombineseveraldiffer-
created with information already on hand to a Taint-based ent taint-based VSEF filters. For example, a single binary
detector. As a result, filter generation is almost instanta- mayhaveseveralvulnerabilitiesthat arenotalldiscovered
neous. Thelengthofthefilterisproportionaltothenumber simultaneously. Wewanttohardenthebinaryaseachnew
ofinstructionsthatpropagatetainteddatafromtheinputto vulnerabilityisdiscovered. Anotherexampleisvulnerabil-
the exploit point. Similarly, the execution overheadof the ities that can be exercisedvia several different code paths.
hardenedprogramisproportionaltothisnumberofinstruc- Wewanttobeabletore-hardenthebinaryaseachnewcode
tions. By design, most programs attempt to minimize un- pathisdiscoveredbythedetector.
necessary data copying, so this will intuitively be a small Wecombinetaint-basedVSEFfiltersbyasimpleunion:
set of instructions. We verify this in our experimental re- anyinstructionlistedineitherofthefiltersshouldbeinstru-
sults. mented. Thesimplicityandefficiencyof combiningfilters
Notethatitislikelythatoneormoreoftheinstructions is a nice property for defense systems using our approach
that propagate tainted data in the attack belong to a com- sinceitmeansthesystemdoesnotbecomecomplexasnewvulnerabilitiesandattackersarediscovered. tionimmediatelyavailable.
Toidentifythedatamovementinstructionthatperformed
3.2.Destination-basedVSEF theillegitimatewrite,theVSEFFilterGeneratorfirstiden-
tifies the chain of instructions that propagated the tainted
Overview.Wenextconsideranoptimisticfilterthatfocuses datatotheexploitpoint,inthesamemannerastogenerate
on instrumenting the point where sensitive data was ille- a taint-basedVSEFfilter. TheVSEFFilter Generatorthen
gitimately overwritten, rather than the point where tainted identifieswhichoftheinstructionsinthattaintpropagation
data was illegitimately used. Conceptually, a taint-based chainistheoverwritepoint.
VSEF filter consists of a chain of data movement opera- When available, the VSEF Filter Generator can use de-
tions, and the instruction at the exploit point, which mis- bug information compiled into the program to help iden-
uses the tainted data. The taint-based VSEF filter detects tifytheoverwritepoint. Debuginformationcanbeusedto
when the tainted data is misused, which is a very accu- determine the allocated size of a buffer. Hence, for buffer
rate detection method. However, the actual security vio- overflows,theVSEFFilterGeneratorcanidentifytheover-
lation is the data movement instruction in the chain that write point as a data movement instruction that calculates
wrotetoanillegitimatedestination,copyingthetainteddata anaddressasabaseplusanoffset,wheretheoffsetcauses
to the overwrite target. We refer to this instruction as the thecalculatedaddresstopointoutsideofthebufferthatthe
overwrite point. Therefore, we propose destination-based basepointerpointsto.
VSEF, which monitors only the overwrite point, i.e., the Debug information also provides information about the
specific instruction that illegitimately wrote to a specific typeofeachmemoryobject.Hence,theVSEFFilterGener-
destination(suchasaspecificfunctionpointer).Weusethe atorcanusethisinformationtoidentifytheoverwritepoint
term optimistic because of cases where destination-based asthethedatamovementinstructionthatcausedatypevio-
VSEFmayhavefalsepositives.Destination-basedVSEFis lation,e.g.,astringcopiedoverafunctionpointer. Forpro-
basedontheideathatanoverwriteattackresultsinthein- gramsthathavenotbeencompiledwithdebuginformation,
structionattheoverwritepointwritingtoadestinationthat typeinformationcansometimesbeinferredatruntime.For
it would not normally write to. This idea is supported by example, return addresses can be identified for programs
Zhou et. al. [44], who built a system that successfullyde- that obey normal stack conventions. It is possible to infer
tectsmanymemoryfaults(andoverwriteattacks)bydetect- the types of other locations based on how the data is used
ingwhenaninstructionwritestoadestinationthatithasn’t duringnormalexecution[8].
writtentoduringnormalexecution. Whenneitherdebuginformationnortypeinformationis
It is not enough to specify the overwrite point only by available,theVSEFFilterGeneratoridentifiestheoverwrite
thepositionoftheinstructionthatperformedtheoverwrite. point as the last instruction in the propagation chain that
Forexample,supposethattheinstructionthatperformedthe writestoadynamicallycalculatedmemoryaddress.Heuris-
overwritewasa movinsidememcpy. Becauseofabugin tically this willusually be true, giventheassumptionsthat
thewaymemcpywascalled,itwrotepasttheendofabuffer overwrite attacks are the result of such a memory address
andoverwroteasensitivevalue,suchasafunctionpointer. taking on an unintended value, and that there are not any
However,adifferentcalltomemcpyinanotherpartofthe other such copies that occur between the overwrite point
program maybe used to intentionallycopylegitimatedata andtheexploitpoint.
to the same location. Therefore, we specify the overwrite
UsingourpreviousexampleinTable1,anyofthesetech-
point as the position of the instruction that performed the
niquescorrectlyidentifiestheoverwritepointasinstruction
overwrite,plusthecontextinwhichitwasexecuted,which
D. Using buffer size information: While the base address
wecallthevulnerablecontext.Wespecifythecontexttobe
usedatthatpointpointstodummy->buf,theoffsetcauses
thelistofreturnaddressesonthestack,whichindicatesthe
thecalculatedaddresstopointtodummy->fnptr. Using
sequenceoffunctioncallsthatledtotheexploit.
typeinformation:InstructionDisthefirstinstructioninthe
Destination-basedVSEFFilterGeneration. Togenerate chainwheretainteddataiswrittentoadatatypethatshould
a destination-based VSEF filter, the VSEF Filter Genera- not be tainted. Using neither: Instruction D is the last in-
torneedstodetermine(1)whichdatamovementinstruction struction in the chain to write to a dynamically calculated
illegitimately wrote to a sensitive location (the overwrite address. InstructionsE andG write to processorregisters.
point),(2)thevulnerablestackconfigurationwhenthatdata InstructionFwritestoahard-codedoffsetwithinthecurrent
movementtakesplace(thevulnerablecontext),and(3)what stackframe.
destination(s)shouldnotbeoverwrittenbythatinstruction, Once the overwrite point has been identified, the vul-
inthatcontext. TheVSEFFilterGeneratorcanextractthis nerable context in which it was executed can be found by
informationfromanexecutionlogofageneralpurposede- examining the calls and returns up to that point in the ex-
tector,oruseaspecializeddetectorthatmakesthisinforma- ploit execution trace. Alternatively, a specialized detectorsuch as TaintCheck can log the call-stack state along with blestackcontext. Atthatpoint,theinstrumentationdetects
each tainted data propagation, so that the call-stack is al- thatthedestinationaddressisillegitimate,signallinganat-
ready on-hand when the overwrite point is reached in the tack.
backwardstraceoftheexploitexecutiontrace.Inourprevi- Aswith taint-basedVSEFfilters, exploitsthat automat-
ousexamplefromTable1,thestackcontextattheoverwrite icallyaltertheircontentwhileusingthesameattackvector
point(instructionD)is[main+47;vuln+68;strcpy+25]. willstillbecaught. However,itispossiblethatanattacker
That is, the instruction atoffset47 from the startof main could altertheexploitso thatthevulnerabilityisexploited
called vuln, the instruction at offset 68 from the start of in a different vulnerable context (i.e. there may be multi-
vulncalledstrcpy,andtheinstructionatoffset25from ple functions that call the vulnerable function), or so that
thestartofstrcpyisthemovthatoverwrotethefunction itoverwritesadifferentsensitivevalue. Thereareunlikely
pointer. Thisexampledemonstrateswhyweneedtokeep to be many such possible variations, and we may be able
track of the vulnerable context, and not just the overwrite to find some of them automatically using static analysis.
point instruction. Here, as in manycases, there is nothing For example, manual analysis of the vulnerable ATPhttpd
wrong with the instruction at the overwrite point, or even showsthatthereareonlytwocontextsinwhichthevulner-
the functionit isin (strcpy). Theproblem isthat vuln ablefunctioniscalledinanexploitableway.
calledstrcpyinanunsafeway. Weexpectthatmostdestination-basedVSEFfilterswill
The sensitive value overwritten is the destination have zero false positives. There are a few cases where a
operand of the data movementinstruction at the overwrite destination-based VSEFfilter may have false positives, all
point. We express this location in a robust way in our fil- of which we expect to be very rare. A destination-based
ter. Forexample,thiscanbedonebydenotingasanoffset VSEF could have false positives if 1) The VSEF Filter
fromanactivationrecordforstack-basedlocations,orasan Generatoridentifiedthewronginstructionastheoverwrite
offsetfroma bufferallocatedina certainstack-contextfor point, andhencethewritetothataddressoccursinnormal
heap-basedlocations. IntheexamplefromTable1,thelo- usage. This problem should be straight-forward to detect
cationisoffset16indummy.Thisisexpressedasoffset16 andfixafterusingthefilter. 2)Theinstructionattheover-
fromthebufferallocatedatcontext[main+14]. writepointcanlegitimatelywritetothemonitoredlocation
in the vulnerable context. This can be true if the source is
In the case of bufferoverruns, we would ideally like to
sometimes a legitimate (non-tainted) value, or if the desti-
specifythatthewritedoesnotcontinuepasttheendofthe
nationisn’talwaysusedinasensitiveway(e.g.,aCunion
buffer, so that future exploits against the vulnerability are
that could be a function pointer or a string buffer). In this
notable to overwritedatain betweentheendof thebuffer
case a low-false-positivedestination-based VSEF filter for
andthedatathatwasdetectedasbeingmisused. TheVSEF
that vulnerability is not possible, and a taint-based VSEF
Filter Generator can do this if the binary was compiled
filtershouldbeusedinstead.
with debug information (hence the length of the buffer is
known). Whenthisinformationisnotavailable,theVSEF Combining Filters. It is straightforward to instrument a
Filter Generatorcan still sometimes create a tighter bound programwithmultipledestination-basedVSEFfilters. The
forwhatareashouldnotbeoverwritten.Forexample,itrec- instrumentation for each filter can be added independently
ognizeswhenthevalueoverwrittenwasthereturnaddress. oftheotherinstrumentation. Insomecasesmultiplefilters
Insteadofonlyprotectingthereturnaddress,italsoprotects will instrument the same instruction. Each filter can add
thesavedebp,whichisadjacenttothereturnaddress,and its own instrumentation independently, without interfering
couldbeoverwrittenwithoutoverwritingthereturnaddress. withtheother.
Destination-based VSEF Binary Instrumentation. We Performance. Destination-basedVSEFallowsthefilterto
instrumentthebinaryprogramtocheckthatthedatamove- be created almost instantaneously. The length of the filter
mentinstructionattheoverwritepointdoesnotwritetothe (as well as the total number of instructions instrumented),
sensitivedestinationwhenitisinthevulnerablestackcon- however,isboundbythedepthofthecallstackattheover-
text. Our experimentsin Section4.2showthat thiscanbe write pointofsampleexploit, plustheaddressoftheover-
done by instrumenting a small number of instructions- the write point, plus the identifier of the sensitive data to be
data movement instruction, and the call instruction corre- guarded. InSection4.2wedescribehowwecaninstrument
spondingtoeachactivationrecordinthevulnerablecontext. evenfewerinstructions,furtherimprovingperformance.
Wealsoshowhowthiscouldbereducedtoonlyinstrument-
ingthedatamovementinstructionbymakingcopiesofeach 3.3.Staticanalysisextensions
functioninthevulnerablecontext.
Our adversarial model requires filters be generated
Accuracy. When the program is run with the sample ex- quickly,andrequiresthemtobesmallenoughtodistribute
ploit,itwillagainreachtheoverwritepoint,inthevulnera- rapidly. As a result, filter creation for both schemes reliesonlyoninformationalreadyon-handwhentheexploitisde- AvgTime(s) Overhead
tected. However,ifwerelaxthespeedrequirementwemay Native 121.4 -
beabletogeneratemoreaccuratefiltersbyperformingmore DynamoRIO 135.05 11%
analysis. +Taint-basedVSEFfilter 138.35 14%
Backwardslicing. Thefilterwecreaterecognizesthesam-
Table2.SQLtaint-basedVSEFbenchmark.
ple exploit along with variants polymorphic in the exploit
payload. However, an exploit may be polymorphic in the
Latency(ms) Overhead
executionpathfollowed. For example, the ATPhttpd web-
Native .566 -
server vulnerability we investigate can be exploited along
two different code paths: one where the requested file is Valgrind 1.279 126%
found but not readable and one if the file is not found at +Taint-basedVSEFfilter 1.360 140%
all. The destination-based VSEF filter generated from one FullTaintCheck 9.797 1631%
will not detect the other, because the overwrite occurs in Destination-basedVSEF .585 3%
a different vulnerablecontext. In thiscase, the taint-based
VSEFfilterforonewilldetecttheotherbecausethesamein- Table 3. ATPhttpd taint-based VSEF and
structionsareinvolvedincopyingthetainteddataineither destination-based VSEF benchmark. (1 KB
case. However, if ATPhttpd had been implemented to use pages)
memcpytocopythetainteddataononepath,andstrcpy
to copy the tainted data on the other path, then the taint-
basedVSEFfiltergeneratedfromonepathwouldnotdetect
plemented the taint-based VSEF Filter Generator by mod-
theother.
ifying TaintCheck to save the set of instruction addresses
One can perform static analysis to recognize these al-
from that part of the DAG into a separate file, along with
ternate code paths, and identify the additional instructions
theinstructionaddresswherethetainteddatawasmisused.
thatwouldneedtobeinstrumentedtodetectthecorrespond-
Thisfileisthetaint-basedVSEFfilter.
ingattacks. Thatis,alternatedatapropagationpathscanbe
We also implemented the taint-based VSEF Binary In-
identifiedandinstrumentedintaint-basedVSEFfilters,and
strumentation Engine as an extensionto TaintCheck. Nor-
alternate vulnerable contexts can be identified and instru-
mallyTaintCheckaddstaint-propagationinstrumentationto
mented in destination-based VSEF filters. Note the static
every instruction that propagates data, which is most in-
analysis is sound but imprecise, so it is possible that more
structions. Italso addstaint-assertionsto everyinstruction
instructions will be instrumented than necessary. How-
thatcouldpotentiallymisusetainteddata. Inourextension,
ever, including instrumentation for potential alternate ex-
TaintCheck accepts a taint-based VSEF filter as input, and
ploitpaths,willresultinafilterthatdetectsfutureexploits
thenonlyaddstaint-propagationtothepropagationinstruc-
polymorphicboth inthe pathtakenandinthe exploitpay-
tionslistedintheVSEFfilter,andtaint-assertioninstrumen-
load.
tationtothemisuseinstructionlistedintheVSEFfilter.
Note that our current implementation of the taint-based
4. Implementation&Evaluation
VSEF Binary Instrumentation Engine is intended only as
a prototype to show the relative difference between mon-
Inthissectionwepresentourimplementationandexper-
itoring nearly every instruction, and monitoring only the
imentalevaluationofthetaint-basedanddestination-based
instructions in the taint-based VSEF filter. However,
VSEFFilterGenerators andVSEFBinaryInstrumentation
TaintCheckiscurrentlyimplementedonValgrind[24](for
Engines. InourexperimentsweuseTaintCheck[27]asthe
Linux),andDynamoRIO[1](forWindows). Bothofthese
ExploitDetector,andtorecordtheexploitexecutiontrace.
tools are well suited for when the entire program needs to
be monitored, buttheyeach addsubstantialoverheadeven
4.1.Taint-basedVSEF
whennoinstrumentationisadded. Amoreefficientimple-
4.1.1.Implementation mentation could be done using a tool such as Dyninst [2],
whichisbettersuitedforaddinginstrumentationtospecific
As discussed in Section 2, TaintCheck already records
points of a program. (We use Dyninst to implement the
theinformationneededtoproduceataint-basedVSEFfilter.
destination-basedVSEFBinaryInstrumentationEngine).
As the monitored program is executing it keeps a directed
acyclic graph (DAG) that represents how tainted data was 4.1.2.Evaluation
propagated, and what instructions propagated it. When an
exploitisdetected,partoftheoutputisthepartoftheDAG Weevaluatethequalityandefficiencyofourtaint-based
showinghowthemisusedtainteddatawasderived.Weim- VSEF using real world exploits. We have tested the ef-fectivenessofourtaint-basedVSEFapproachonWindows enedATPhttpdandMicrosoftSQLserverwereabletosuc-
againsttheSQLSlammerattack[22],andonLinuxagainst cessfullydefendagainsttheoriginalexploit. ForATPhttpd,
theATPhttpdexploit[29]. we also created synthetic polymorphic variants of the ex-
ploit by replacing the code in the request with randomly
Taint-basedVSEFFilterSize. Thefiltergeneratedforthe
generated bytes. We verified that the hardened ATPhttpd
ATPhttpdexploitcontainsonly10instructionsthatmustbe
successfullydetectedthesemodifiedversionsoftheexploit,
instrumented. The filter for the vulnerability exploited by
thus demonstrating that our taint-based VSEF approach is
theSQLSlammerwormcontains200instructionsthatmust
effectiveagainstpolymorphicvariantsofthesampleexploit.
be instrumented. Note that our Windows implementation
During our benchmarks, neither hardened server had
of taint-based VSEF Filter Generator, which is based on
false positives. We also sent the ATPhttpd server several
thelessmatureDynamoRIOimplementationofTaintCheck,
anomalous requests that exercise similar code paths as the
currently adds every instruction that operates on the mis-
exploit, without actually exploiting the server. The hard-
used tainted data to the VSEF filter, rather than refining it
enedATPhttpdcorrectlydidnotidentifytheseasattacks.
to only the instructions that actually propagate the tainted
data to the point where it is misused. This refinement is
4.2.Destination-basedVSEF
straight-forwardtoimplement, andshouldreducethefilter
size by an order of magnitude. For comparison, the AT-
4.2.1.Implementation
PhttpdVSEFfiltercontains83instructionswithoutthisre-
finement. Weimplementedthedestination-basedVSEFBinaryIn-
strumentationEngineusingDyninst[2],abinaryinstrumen-
Taint-based VSEF Performance. The time to generate a
tationtool. UnlikeValgrindandDynamoRIO,Dyninstper-
VSEFanduse itto hardena binaryis verysmall. ForAT-
forms static rewritingof the targetbinary. Instructions are
Phttpd it was 186 microseconds to generate a VSEF from
instrumented by overwriting them with jumps to trampo-
TaintCheck’sDAG,and195mstousetheVSEFtoharden
line functions that call our instrumentation code, and then
theATPhttpdbinary. Here,wemeasuretheperformanceof
execute the overwritten instruction before returning. This
the hardened Microsoft SQL Server and the hardened AT-
approachwaschosentoavoidtherun-timeoverheadofdy-
Phttpdserver. Forbothtests,weissuequeriestotheserver
namicbinaryrewriting. Dyninstandourdestination-based
processfrom the samemachine so asto not introducenet-
VSEF Binary Instrumentation Engine run on both Linux
worklatency.
andWindows.
We subjected the Microsoft SQL server to the bench-
The destination-based VSEF filter consists of the ad-
mark query described in [19]. We measured performance
dress of the overwrite point, the activation records on the
whentheserverwasrun natively,andwhenitwasrun un-
stack when the overwrite point was executed in the origi-
derDynamoRIOwithandwithoutthetaint-basedVSEFin-
nalexploit,andthenormalizedaddressofthedatathatwas
strumentation. Table2showstheresults. Theinstrumenta-
overwritten. Giventheexploitexecutiontracegeneratedby
tionaddedbythetaint-basedVSEFcausestheservertorun
TaintCheck, thedestination-basedVSEFfilter isgenerated
only14%slowerthannative,andonly2%slowerthanrun-
using the algorithm from Section 3.2 to identify which in-
ningunderDynamoRIOalone.Again,implementingthefil-
struction is the overwritepoint, and pulling the rest of the
terrefinementstepfortheWindowsversionofTaintCheck
information from the exploit execution trace in a straight-
wouldreducethenumberofinstructionsinstrumented,and
forward manner. We assume the most difficult scenario,
furtherreducethetaint-basedVSEFoverhead.
in which nodebugor type information is available to help
WeusedtheApacheFloodtool[39]tomeasuretheper-
identifytheoverwritepoint.
formanceofthe hardenedATPhttpdserverwhenserving1
We observe that the overwrite instruction is usually a
KB files. Results are shown in Table 3. Our results show
movinstruction,whichisusuallytoosmalltobeoverwrit-
that the hardened server runs only 6% slower than when
tenbyajumpinstructionbyDyninst. Dyninsthandlesthis
runningunderValgrindalone. Wealsoranthesamebench-
case by instead overwriting it with a 1 byte instruction to
mark using Valgrind to count how often the instrumented
generateatrap,whichcausestheoperatingsystemtodeliver
instructionsareexecuted.Wefoundthatthe10instructions
a signal to the process, andthe instrumentation codeto be
instrumented by the taint-based VSEF accounted for only
executedbythe signal handler.1 This is undesirable, since
32,649 of 746,419,783 instructions executed (.00437%).
this is a relatively expensive process. We observe that in
This suggests that implementing the VSEF Binary Instru-
manycases,theinstrumentedmoviscalledfrequently(i.e.,
mentationEnginewithmoreefficientinstrumentationtech-
niques(suchasDynamoRIOorDyninst)shouldresultinthe 1Dyninstversion5,whichiscurrentlyunderdevelopment,usesadif-
taint-basedVSEFhavingverylittleperformanceoverhead. ferentmethodtoinsertinstrumentationwhichshouldmostlyeliminatethe
needtousetraps. Unfortunately, wewerenotabletotestthisversionat
Taint-based VSEF Accuracy. We verified that the hard- thetimeofwriting.it may be in strcpy), but usually not in the vulnerable ablebinary.Here,wemeasuretheperformanceofthehard-
context. Thereforeweaddressthisproblembyonlyhaving enedATPhttpdserver.
the instrumentation be used when the function is called in As in Section 4.1, we evaluate the performance of the
thevulnerablecontext. Themostefficientwaytodothisis hardened ATPhttpd server using the Apache Flood tool to
bycopyingthe functionsthatmake upthevulnerable con- measure the time to serve requests for 1 KB files. Our re-
text,andrewritingthecorrespondingcallinstructionsso sultsareshowninTable3. Ourresultsshowthattheserver
that the instrumented mov is only used in the vulnerable runs only 3% slower than when the server is run without
context. In caseswherethisis infeasible,we candynam- instrumentation.
ically enable or disable the mov instrumentation when the We also used Valgrind to count how often the instru-
vulnerablecontextisenteredorleft. mented instructions are executed during the benchmark.
We currentlyimplementthelatterapproach. We imple- The 12 instrumented instructions accounted for 6,070 of
mentedtheVSEFBinaryInstrumentationEnginetoinstru- 746,465,052instructionsexecuted(.000813%).
mentthecallinstructioncorrespondingtoeachactivation
Destination-based VSEF Accuracy. We verified that the
record in the vulnerable context. This instrumentation in-
hardened ATPhttpd server was able to successfully defend
crementally tracks which of the activation records of the
againsttheoriginalexploit. Asinthetaint-basedVSEFex-
vulnerable context are currently on the stack. The instru-
periment, we also verified that server was able to defend
mentation for the last call of the vulnerable context dy-
againstpolymorphicvariationsoftheexploit,andthatitcor-
namicallyaddsorremovestheinstrumentationattheover-
rectlydidnotidentifysimilarbutnon-exploitingrequestsas
write point when the vulnerable context is entered or left.
attacks.
Notethatifweinstrumentedonlythiscallinsteadofeach
callinthevulnerablecontext,theinstrumentationwould
5. DeploymentandApplications
needtowalk thestack everytimethatcallwasexecuted
toseeifitwasinthevulnerablecontext,whichwouldresult
Vulnerability-specificexecutionfilteringmeetsthreeim-
inahigherperformancecost.
portantgoals: fastfiltergeneration,accuratedetection,and
The instrumentation at the overwrite point checks
lowperformanceoverhead.Theserequirementsaddressthe
whether the instruction is about to write to the protected
most relevant threat to today’s Internet infrastructure: fast
location. Ifso,anattackisdetected.
spreadingworms.Wormsthatexploitknownvulnerabilities
cancausemillionsofdollarsofdamage.Awormexploiting
4.2.2.Evaluation
anunknownvulnerabilitycouldbemuchmoredevastating.
Weevaluatethequalityandefficiencyofourdestination- Figure 2showsourenvisionedarchitecturefordefend-
basedVSEFusingtheATPhttpdexploit.2 ing against worms. Various full instrumentation detectors
areplacedacrosstheInternet,forexampleonhoneypotsor
Destination-basedVSEFFilterSize. Thefiltergenerated
over-provisionedsites. When a new worm is released, the
for the ATPhttpd vulnerability consists of the addresses of
fullinstrumentationversiondetectstheexploitandusesthe
12instructions(themovthatcausestheoverwrite,andthe
VSEFFilterGeneratortocreateanexecutionfilter. Thefil-
11 call instructions corresponding to the vulnerable con-
teristhendistributedtoothervulnerablehostsacrosstheIn-
text),andarangeofoffsetsfromthevulnerablestackframe
ternet(thathavethesamevulnerablebinary,similarshared
to protect. The ATPhttpd exploit overwrote the return ad-
libraries,etc.),whichuseVSEFBinaryInstrumentationEn-
dress, so in this case we are protecting the return address,
gine to harden their binaries against subsequent infection.
which is located at offsets 4 to 7 in the vulnerable stack
Thishardeningcanbedonewithoutrestartingtheserverfor
frame. (Inourimplementation,werecognizethiscaseand
destination-based VSEF, because Dyninst is able to attach
extendtherangeto0to7toalsoprotecttheframepointer).
to an already running program and instrument it without
Toclarify,ifwewereprotectingdatainsidethestackframe
restarting. Taint-based VSEF could also be implemented
(suchasalocalvariablestoringafunctionpointer),thisoff-
usingDyninst,whichwouldalsoallowittohardenthepro-
setwouldbenegative.
grambinarywithoutneedingtorestarttheprogram.
Destination-basedVSEFPerformance.Ittakesanegligi- Our architecture provides for completely automatic re-
bleamountof timeto createa destination-basedVSEFfil- sponse and containment, and therefore can respond to a
terfromTaintCheck’slog,andtousethedestination-based rapidwormoutbreak.Oursystemalsoworksforpreviously
VSEFBinaryInstrumentationEnginetohardenthevulner- unknownvulnerabilitieswherethehardened binarycan be
useduntilaproperpatchcanbeinstalled.Wenotethatsites
2Atthetimeofwriting, theWindows implementationofTaintCheck maybeunmotivatedtoinstallautomaticallygeneratednet-
doesnotlogthecorrectinformationtocreateadestination-basedVSEF,so
workfilterswithsuspectaccuracy. Theaccuracyofourfil-
wewereunabletoevaluateourdestination-basedVSEFfortheMicrosoft
SQLserverexploit.However,doingsowouldbestraight-forward. tersmakeautomaticinstallationmuchmoreattractive.functioncallgranularity,andtheyuseheuristicstofindout
whatfunctioncallsneedtobeinstrumented. Theyleaveas
anopenproblemhowtodeterminemorepreciseinstrumen-
tation,whichwesolvebyusingtaint-basedanalysis.
3. VSEF filter
Rinardet. al. hasproposedusingcompilerextensionsto
disseminated
deal with writes to unallocated memory. The approach al-
lows a program to execute even in the presence of buffer
1: New exploit received Primergy 2. Full instrumentation overflow attacks[30]. These techniques are aimed at in-
detects exploit & creates
VSEF filter creasingavailabilityforservicesandarenotnecessarilysafe
andthusinappropriateasadefensemechanism.
5. Exploit fails
against hardened Shield [40] provides vulnerability-specific exploit
binary generic protection. However, it uses manually generated
signatures.
Costaet.al.proposeaconcurrentworktoautomatically
4. VSEF binary
Instrumentation generated host-based input filters [11], which has greater
(on each host) accuracythannetwork-basedinputfilters,andcancorrectly
recognize some semantically equivalent inputs. However,
Figure 2. The deployment scenario for theapproachstillsuffersdifficultywhenthecorrectclassi-
vulnerability-specific execution filtering. ficationruleiscomplexorneedsapplicationstate,orwhen
Upon (1) receiving an exploit of a new vul- inputisencrypted.
nerability, the (2) full instrumentation engine IntroVirt [15] uses vulnerability-specific predicates to
detects it and creates an appropriate filter. detect when a vulnerability has been exploited. However,
The filter is (3) disseminated to all hosts, thesepredicatesaremanuallygenerated.
whichthen(4)usethefiltertoinstrumentand DAKODA [13] provides a quantitative analysis for a
produce a hardened binary. The hardened numberofexploitvectors.Theirresultsshowthatnetwork-
binarycannotbethenexploited(5). Notethat based filters are not specific enough for exploits against
the exploit in step 5 may be a polymorphic many vulnerabilities, and that there are a number of vul-
variantofstep1. nerabilities where the attack vector is encrypted, making
host-based input filters impractical. The paper also noted
thatreturnaddressesarenotsuitedtobeusedassignatures
forpolymorphicwormswhichwereusedinseveralexisting
automaticsignaturegenerationmethods[27,20,42].
Our techniques and architecture also apply to other ad-
We benefitdirectlyfromtheactiveresearchforincreas-
versarial models. Host-based privilege escalation attacks
ing the efficiency of emulation [21, 41, 2]. For example,
areaseriousthreatthatpreviousautomaticdefensesystems
we use Valgrind and DynamoRIO for taint-based instru-
have mostly ignored. Our scheme can be used to harden
mentation(onLinuxandWindows,respectively),whilePin
known vulnerable programs against such attacks until the
reports emulation speeds 3.3x faster than Valgrind and 2x
properpatchcanbeapplied. Notethisisespeciallyimpor-
fasterthanDynamoRIO[21].
tant for legacy systems where source code for the running
We use TaintCheck [27] to initially discover unknown
applicationsmaynolongerexistorbeaccessibleandthusa
vulnerabilities. Other fine-grained dynamic bug detection
permanentpatchmayneverbecreated.
tools could be used during initial filter creation, such as
We present a distributed architecture for efficiently and
program shepherding [17], libsafe [4, 6], or Nethercote-
securelygenerating,using,andsharingVSEFfiltersin[25].
Fitzhardinge bounds checking [23]. We chose TaintCheck
becausethetaint-basedapproachdetectsthewidestvariety
6. Relatedwork
of attacks and is easy to augment to produce the taint log
neededfortaint-basedVSEF.
Sidiroglouet. al. proposedselectiveemulationaspartof
Slicingtechniques[38,43]canbeusedtohelpcreateor
areactiveapproachforhandlingsoftwarefailure[33].Their
refinetheVSEFfilters,asdiscussedinSection3.3. Weplan
selectiveemulationissimilarinsomeaspectsto ourwork.
toinvestigatethisapproachinthefuture.
Like us, they note that partial instrumentation can reduce
totalmonitoringoverhead. Howevertheirapproachforde-
7. Conclusion
fendingagainstbufferoverflowattacksrequiressourcecode
to instrument the binary, since it is based on a canary as We propose vulnerability-specific execution filtering
inStackGuard[12]. Inaddition,theirinstrumentationisat (VSEF), a newtypeof filter that recognizesand filters outexecutionpatternsofanexploitexercisingaknownvulner- [12] C.Cowan,C.Pu, D.Maier, J.Walpole,P.Bakke, S.Beat-
ability. VSEFismoreaccuratethaninputfiltering,andsig- tie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. Stack-
nificantlyfasterthanfullexecutionmonitoring.Wegivetwo Guard: automatic adaptive detection and prevention of
types of VSEF filters: taint-based VSEF and destination- buffer-overflowattacks. InProceedingsofthe7thUSENIX
SecuritySymposium,January1998.
based VSEF. The former is more accurate while the latter
[13] J.Crandall,Z.Su,S.F.Wu,andF.Chong. Onderivingun-
may require less instrumentation. We show how to auto-
knownvulnerabilitiesfromzero-daypolymorphicandmeta-
matically create both filters using a VSEF Filter Genera-
morphicwormexploits. InProc.12thACMConferenceon
tor. The filters can then be used to automatically harden
ComputerandCommunicationsSecurity(CCS),2005.
a binary against the vulnerability via the VSEF Binary In-
[14] J.R.CrandallandF.Chong. Minos: Architecturalsupport
strumentation Engine. We provide an implementation for
forsoftwaresecuritythroughcontroldataintegrity.InToap-
both components under Windows and Linux, and run ex- pearinInternationalSymposiumonMicroarchitecture,De-
perimentsthatconfirmtheaccuracy,performance,andgen- cember2004.
eration speed. Inmost casestheoverheadofVSEFbinary [15] A.Joshi,S.T.King,G.W.Dunlap,andP.M.Chen. Detect-
hardeningisonlyafewpercent. ingpastandpresentintrusionsthroughvulnerability-specific
predicates.InProceedingsofthetwentiethACMsymposium
onOperatingsystemsprinciples(SOSP),Oct.2005.
8. Acknowledgments
[16] H.-A.KimandB.Karp. Autograph:towardautomated,dis-
tributed worm signature detection. In Proceedings of the
Wewouldliketothankthefollowingpeople:JadCham-
13thUSENIXSecuritySymposium,August2004.
cham, for implementing TaintCheck on DynamoRIO [10];
[17] V.Kiriansky,D.Bruening,andS.Amarasinghe.Secureexe-
Xeno Kovah, for help running experiments; Drew Bernat,
cutionviaprogramshepherding. InProceedingsofthe11th
for feedback and assistance with using Dyninst; Timothy
USENIXSecuritySymposium,August2002.
Wong; Emery Berger; and the anonymous reviewers for [18] C.KreibichandJ.Crowcroft. Honeycomb-creatingintru-
theirinsightfulfeedback. siondetectionsignaturesusinghoneypots.InProceedingsof
theSecondWorkshoponHotTopicsinNetworks(HotNets-
II),November2003.
References
[19] G. Larsen. Benchmarking performance of a query - part
1 elapsed time. http://www.databasejournal.
[1] Dynamorio. http://www.cag.lcs.mit.edu/
com/features/mssql/article.php/3298411,
dynamorio/.
2004.
[2] Dyninst. www.dyninst.org.
[20] Z.LiangandR.Sekar. Fastandautomatedgenerationofat-
[3] Metasploit. http://www.metasploit.org.
tacksignatures: Abasisforbuildingself-protectingservers.
[4] K.Avijit,P.Gupta,andD.Gupta. Tied,libsafeplus: Tools
In Proc. of the 12th ACM Conference on Computer and
forruntimebufferoverflowprotection. InUSENIXSecurity
CommunicationsSecurity(CCS),2005.
Symposium,August2004.
[21] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
[5] R.Balzer. EXDAMS-extendabledebuggingandmonitor-
G.Lowney,S.Wallace,V.J.Reddi,andK.Hazelwood.Pin:
ingsystem. ProceedingsoftheAFIPSSJCC,34:567–586,
Building customized program analysis tools with dynamic
1969.
instrumentation.InProgrammingLanguageDesignandIm-
[6] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time
plementation(PLDI),2005.
defenseagainststacksmashingattacks. InUSENIXAnnual
[22] D.Moore,V.Paxson,S.Savage,C.Shannon,S.Staniford,
TechnicalConference2000,2000.
andN.Weaver. Insidetheslammerworm. InIEEESecurity
[7] P. Bosch, A. Carloganu, and D. Etiemble. Complete x86 andPrivacy,volume1,2003.
instruction trace generation from hardware bus collect. In
[23] N.NethercoteandJ.Fitzhardinge. Bounds-checkingentire
23rdIEEEEUROMICROConference,1997.
programswithoutrecompiling.InProceedingsoftheSecond
[8] M.Burrows,S.N.Freund,andJ.L.Wiener. Run-timetype Workshop on Semantics, Program Analysis, and Comput-
checkingforbinaryprograms. InInternationalConference ingEnvironmentsforMemoryManagement(SPACE2004),
onCompilerConstruction,April2003. Venice, Italy, Jan. 2004. (Proceedings not formally pub-
[9] CERT/CC.CERT/CCstatistics1988-2005.http://www. lished.).
cert.org/stats/cert_stats.html. [24] N.NethercoteandJ.Seward. Valgrind:Aprogramsupervi-
[10] J. Chamcham. Dynamic taint analysis: Protecting Win- sionframework. InProceedingsoftheThirdWorkshopon
dowsagainstwormsandzero-dayattacks. Master’sThesis, RuntimeVerification (RV’03),Boulder,Colorado,USA,July
CarnegieMellonUniversity,2005. 2003.
[11] M.Costa, J.Crowcroft, M.Castro, A. Rowstron, L.Zhou, [25] J. Newsome, D. Brumley, D. Song, M. R. Pariente, and
L. Zhang, and P. Barham. Vigilante: End-to-end contain- T. Kampouris. Efficient and effective self-healing for de-
ment of internet worms. In Proceedings of the twentieth fending against exploit attacks on commodity software.
ACMsymposium on Operating systems principles (SOSP), Technical Report CMU-CS-05-191, Department of Com-
Oct.2005. puterScience,CarnegieMellonUniversity,May2005.[26] J.Newsome,B.Karp,andD.Song. Polygraph: Automati- [34] S.Singh,C.Estan,G.Varghese,andS.Savage. TheEarly-
callygeneratingsignaturesforpolymorphicworms. InPro- Bird system for real-time detection of unknown worms.
ceedingsoftheIEEESymposiumonSecurityandPrivacy, Technical Report CS2003-0761, University of California,
May2005. SanDiego,August2003.
[27] J. Newsome and D. Song. Dynamic taint analysis for au- [35] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the
tomaticdetection,analysis,andsignaturegenerationofex- Internetinyoursparetime. In11thUSENIXSecuritySym-
ploitson commoditysoftware. InProceedingsofthe 12th posium,2002.
Annual Network and Distributed System Security Sympo- [36] G.E.Suh,J.Lee,andS.Devadas.Secureprogramexecution
sium(NDSS),February2005. via dynamic information flow tracking. In Proceedingsof
[28] F. Qin, S. Lu, and Y. Zhou. SafeMem: Exploiting ECC- ASPLOS,2004.
memoryfordetectingmemoryleaksandmemorycorruption [37] P.Szor. Huntingformetamorphic.InVirusBulletinConfer-
duringproductionruns. InProceedingsofthe11thInterna- ence,2001.
tionalSymposiumonHigh-PerformanceComputerArchitec- [38] F.Tip. Asurveyofprogramslicingtechniques. Journalof
ture,2005. programminglanguages,,3,September1995.
[29] Y. Ramin. ATPhttpd. [39] A. F. Tool. http://httpd.apache.org/test/
http://www.redshift.com/(cid:24)yramin/atp/atphttpd/. flood.
[30] M. Rinard, C. Cadar, D. Dumitran, D. Roy, T. Leu, and [40] H.J.Wang,C.Guo,D.Simon,andA.Zugenmaier. Shield:
W.B.Jr. Enhancingserveravailabilityandsecuritythrough Vulnerability-driven network filters for preventing known
failure-obliviouscomputing.InOperatingSystemDesign& vulnerabilityexploits. InACMSIGCOMM,August2004.
Implementation(OSDI),2004. [41] C.WilliamsandJ.Hollingsworth. Interactivebinaryinstru-
[31] T. J. Robbins. libformat. http://www. mentation. In Second International Workshop on Remote
securityfocus.com/tools/1818,2001. Analysis and Measurement of Software Systems (RAMSS),
[32] P. A. Sandon, Y. Liao, T. Cook, D. Schultz, and P. M. 2004.
deNicolas. Nstrace: Abus-driveninstructiontracetoolfor [42] J.Xu,P.Ning,C.Kil,Y.Zhai,andC.Bookholt. Automatic
powerpcmicroprocessors.IBMJournalofResearchandDe- diagnosis and response to memory corruption vulnerabili-
velopment,41(3),1997. ties,2005.
[33] S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D. [43] X. Zhang and R. Gupta. Cost effective dynamic program
Keromytis. Buildingareactiveimmunesystemforsoftware slicing. In2004ProgrammingLanguageDesignandImple-
services. InUSENIXAnnualTechnicalConference,2005. mentation(PLDI)conference,2004.
[44] P.Zhou,W.Liu,F.Long,S.Lu,F.Qin,Y.Zhou,S.Midkiff,
andJ.Torrellas.AccMon:Automaticallydetectingmemory-
related bugs via program counter-based invariants. In The
Proceedingsof37thAnnualIEEE/ACMInternationalSym-
posiumonMicro-architecture(Micro’04),Dec.2004.