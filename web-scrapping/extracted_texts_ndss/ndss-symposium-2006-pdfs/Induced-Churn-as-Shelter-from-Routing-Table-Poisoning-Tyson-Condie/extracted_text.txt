Induced Churn as Shelter from Routing-Table Poisoning
TysonCondie,VarunKacholia,SriramSankararaman,JosephM.Hellerstein,PetrosManiatis
UCBerkeleyandIntelResearchBerkeley
Abstract lay network: a coordination mechanism for nodes running
a distributed application to track each other, and to route
Structuredoverlaysareanimportantandpowerfulclass messagesamongthemselves.Suchlarge,opensystemsface
ofoverlaynetworksthathasemergedinrecentyears. They constantchurn,thearrivalanddepartureofnodes,assome
aretypicallytargetedatpeer-to-peerdeploymentsinvolving fail,hardwareisreplaced,connectivitychanges,orsoftware
millionsofuser-managedmachinesontheInternet. Inthis is upgraded. Much design and engineering are devoted to
paper we address routing-table poisoning attacks against maintainingperformancewhiletoleratingchurn.
structured overlays, in which adversaries attempt to inter- A particular class of overlays, structured overlays such
cepttrafficandcontrolthesystembyconvincingothernodes asChord[30]andPastry[25],presentsahashtableabstrac-
tousecompromisednodesastheiroverlaynetworkneigh- tionon topof apopulation of networked computers. Each
bors. Inkeepingwiththefully-decentralizedgoalsofstruc- participating node in the overlay has an ID from a large
turedoverlaydesign,weproposeadefensemechanismthat identifier space, and is responsible for handling messages
makes minimal use of centralized infrastructure. Our ap- addressedtoanextentoftheidentifierspacearounditsown
proach, induced churn, utilizes periodic routing-table re- ID. In order to route messages in the overlay, every node
sets, unpredictable identifier changes, and a rate limit on maintains a routing table of “links.” The set of nodes and
routing-tableupdates. Inducedchurnleavesadversariesat linksinthesystemformsastructurednetworkgraph, over
themercyofchance: theyhavelittleopportunitytostrate- whichIDlookupscanberoutedtotheresponsiblenodeef-
gize their positions in the overlay, and cannot entrench ficiently, even as the network churns. When used to store
themselves in any position that they do acquire. We im- data, structured overlays are often called distributed hash
plement induced churn in Maelstrom, an extension to the tables(DHTs),thoughmanystructuredoverlayapplications
broadly used Bamboo distributed hash table. Our Mael- donotrequirestorage.
strom experiments over a simulated network demonstrate
Anadversarywhocansubvertoverlayroutingcanmod-
robustroutingwithverymodestcostsinbandwidthandla-
ifytheoverlay’sbehaviorandhurtapplications: forexam-
tency, at levels of adversarial activity where unprotected
ple, she can convince a correct (i.e., “good”) node to redi-
overlaysarerenderedalmostcompletelyuseless.
rect an outgoing link to her, thereby poisoning its routing
table. Alllookupsroutedviathatlinkwillendupinthead-
versary’scontrol;shecanforwardthemorrespondtothem
1.Introduction as she wishes. This has been called routing-table poison-
ing or an eclipse attack in the literature. Once an adver-
In recent years, the systems and networking communi- sary poisons a good node’s routing table, she can amplify
tieshavedevotedsignificantattentiontotechniquesforco- thatpoisoningbyinterceptingthegoodnode’smaintenance
ordinatinglargenumbers–millions–ofcomputersinade- traffic, and convincing the node to update its routing table
centralized fashion. Originally motivated by peer-to-peer toincludeadditionalcompromisedneighbors(Section2.2).
filesharing applications, this research demonstrated mas- Previous Proposals: Previous defenses against eclipse
sivelydistributedsystemswhosefunding,provisioning,and attacks have typically involved the use of a trusted third
managementaredecentralizedacrossnumerouspartieswith party that regulates indirectly how nodes partition the ID
little shared trust. More recently, this design philosophy space, for example, by authoritatively assigning IDs to
has been applied to a host of applications including con- nodes[7]. Theintuitionisthatiftheadversary’snodeIDs
tent distribution networks [13], geographic location ser- arechosenuniformlyatrandombyanuncompromisedau-
vices[17],filesystems[10],monitoringsystems[4],docu- thority, then even the adversary receives responsibility of
mentarchives[31],anddistributedqueryprocessing[19]. anIDspacesharethatisproportionaltothenumberofher
Centraltoanyofthesesystemsisthenotionofanover- nodes. Shecanthereforeaffectthesystemonlyinpropor-tiontoherpresence. Centralized,globallytrustedcertifica- Section4,withexperimentalresultsonMaelstrom,aproto-
tionauthoritiescanbeburdensomeanddifficulttoadminis- typeimplementationofinducedchurnasanextensionofthe
ter[11],especiallywhenmultiple,mutuallydistrustingad- Bamboo structured overlay [23]. Ourevaluation measures
ministrativedomainsareinvolved. However,theycanoffer the improved security of the system as well as the perfor-
relief from rampant adversarial activity such as the use of mancehitcausedbyrouting-tablereset,unpredictableiden-
forged, throwaway identities (also known as Sybil identi- tifierchanges, and rate-limited routing-table updates. Fur-
ties[12]). ther we explore extensions, possible limitations, and big-
Note that defenses against Sybil attacks do not miti- picture implications of this work in Section 5. Finally, we
gate the threat of amplification once a compromised node concludewithrelatedworkandourfutureresearchagenda.
ischosenasaneighbor. Thisriskhasbecomemoreimpor-
tant inrecent, highly optimized structured overlays, which 2.Background
make aggressive use of routing-table updates not only to
addresschurninthenetwork,butalsoforperformanceop-
Asbackground, wepresentabriefprimeronstructured
timizationssuchaslatencyminimizationoverlookuppaths
overlaynetworks. Wethendiscusstheclassofattacksthat
throughthegraph[14,23].
concernus,andpreviously-proposeddefenses,beforeintro-
OurContribution:Inthispaper1weasktwoquestions.
ducinginducedchurninSection3.
First,cantherebeaneffectivedefenseagainstroutepoison-
ingattackswithasimpler,lesstrusted,centralizedcompo-
2.1.StructuredOverlayNetworks
nent that is easy to audit and replicate? Second, can there
be a practical, implementable defense against eclipse at-
An overlay network is a virtual network implemented
tacksthataddressestheperformanceoptimizationsusedin
on top of an established underlying network of routers; in
recentstructuredoverlays? Wepresenttechniquesthatan-
our discussion we will focus on Internet overlays. Appli-
swerbothquestionsintheaffirmative.
cationsrunningatparticipantmachinescommunicatealong
Specifically, we propose the use of induced churn as a
theedgesoftheoverlaynetworkusingunicasttransportser-
defense against eclipse attacks, unconventionally casting
vicesprovidedbytheunderlyingnetwork–inourcase,by
churn as a tool rather than a scourge. Induced churn con-
IP. Therefore, a message over an edge of the overlay may
sistsofthreetechniques: periodicresetofroutingtablesto
traversemanyedges(IProuterlinks)intheunderlyingnet-
less efficient but more attack-resistant ones, forced unpre-
work. The algorithms for choosing overlay edges differ
dictable identifier changes, and rate limitation on routing-
amongoverlaydesigns.
tableupdates. Wearguethatbyneverallowingtheoverlay
A structured overlay builds its topology according to a
toquiesce,werobtheadversaryoftheopportunitytoplan
particular model graph structure such as a hypercube, a
aheadonnodepositioningpriortoanattack,andofherabil-
torus, a de Bruijn graph, etc. To facilitate this construc-
ity to entrench herself, amplifying her position over time.
tion,overlaynodestakeidentifiersfromalargeIDspaceI,
We show that for a typical, well-tuned structured overlay
which is typically the range of a cryptographic hash func-
we reduce routing-table poisoning by an order of magni-
tion (e.g., SHA-1), and is chosen to be sufficiently large
tudeandincreasetheprobabilityofsuccessfullookupsbyas
(e.g.,160bitsormore)tominimizenamecollisions. Over-
muchasafactorof5,whileincurringamaintenanceover-
lay nodes take random IDs from I. Then the canonical
head of under 1 KBps at each node, low enough even for
model graph structure chosen for the overlay is embedded
homeusersoverdial-upconnections. Inducedchurnisap-
intheIDspaceandmappedtotheexistingoverlaynodes.
plicabletoanyoverlayapplicationthatrequiresnodeorga-
Toeffectthismapping,responsibilityforIDspaceranges
nizationwithoutpersistentstorage(e.g.,forqueryprocess-
ispartitionedamongthenodesintheoverlayatalltimes.In
ing,multicast,ornetworkmonitoring);howeverforstorage
ourdiscussionwewillassumethateachnodeisresponsible
applications where churn imposes data migration, induced
forthe IDsthat are nearest toit inI (Figure 1); otherpar-
churnmightbelessappropriate(seeSection5).
titioning schemes are used in the literature, but the choice
In Section 2 we present relevant background on struc-
hasnoimpactonourtechniquesbelow.
turedoverlays,routingthreatsagainstthem,andsomepre-
API: The interface to the structured overlay consists of
viously proposed solutions that form the basis for our de- asinglelookup(id)call. Inresponse,theoverlaymust
fenses. Section3presentsthedesignofourinducedchurn
locate the IP address of the node currently responsible for
defense against eclipse attacks. We evaluate our design in IDid,typicallybyroutingamessagetothatdestination.
Topology and Routing: The overlay’s network topol-
1An extended version of this paper can be found as a technical re-
ogy–themappingofthemodelgraphstructuretooverlay
port[9]. Inthatversion,weundertakeapreliminaryanalysisofinduced
nodes and links – is captured via the routing table main-
churn,modelingasimpleadversarystrategy.Furtheranalysisisthesubject
ofourfuturework. tained at each participant node. For concreteness, we use memberwhoseIDistheclosesttoα.
 Dynamics: Since structured overlays are intended for
dynamicenvironmentswherenodescomeandgofrequently


  and unpredictably, every node monitors the state of the
nodestowhichitlinks,replacinganythatdisappear. Con-

sidertheexampleinwhichPastrynodeF893Adetectsthat

 node F8389, contained in its routing-table entry (2,3), no
  longerrespondstopings. Then,nodeF893Alooksforan-
 other candidate to fill entry (2,3), by choosing some ran-
dom suffix X and issuing lookup(F83X). Any returned
 
noderesponsibleforIDF83X canfilltheemptyentry.
In addition to ensuring the liveness of neighbors, some
Figure1.AnexampleIDspaceforastructured structured overlays perform routing-table updates to opti-
overlay, represented as a ring. The nodes mizeperformanceoverlookuppaths;Bambooisoneexam-
maintaining the overlay are represented as ple. In such designs [14,23], a node maintains for every
white circles on the ring; for example, com- entryintheroutingtableanumberofcandidateneighbors.
puter A is represented as the circle with ID The node keeps track of any performance metric with re-
h(A)=F893A. Dashedovalsrepresentthe“re- gardstothosecandidatesandchoosesthebestnodeamong
sponsibility” of every node, in terms of the themtolinkto(e.g., theonewiththesmallestnetworkla-
ID range it manages. In this example, every tency, or highest uptime, etc.) For example, the Bamboo
node manages the range of IDs that are nu- node with ID F893A repeatedly looks up IDs with prefix
mericallyclosesttoitsownidentifier. F83andincludesthediscoverednodestoasetofcandidates
forrouting-tableentry(2,3). Itpickstheclosestcandidate
intermsofnetworklatencyforthatentry,butkeepstherest
asbackupincasethechosencandidatefails.
Pastry[25]asanexamplehere. Pastryisrelativelyeasyto
describe,andourimplementationinSection4wasdonein
theBamboooverlay,whichusesaPastry-basedtopology. 2.2.EclipseAttacks
Manystructuredoverlaydesigns,includingthoseofPas-
try and Bamboo, begin with a reinforced ring topology, in We shift ourattention to attacks on overlay routing. To
which every node maintains links to the participant nodes begin the discussion, we consider the case in which some
whoseIDsareclosestinI –usuallyafixednumberofsuc- nodesbecomeinstantaneouslycompromisedbyasinglead-
cessors and predecessors. These are sometimes called the versary. Clearly the adversary also controls the fate of all
node’s leaf set. To provide routing efficiency, the ring is IDsmappedtohernodes. Alessobviousbutimportantim-
then augmented with a set of neighbors that provide long plicationisthat“good”(i.e.,uncompromised)nodes’rout-
“jumps”inI. ingtablesnowpointtosomecompromisednodes. Wede-
The choice of which faraway nodes to link to is fineasthelevelofpoisoningofagoodnodethefractionof
implementation-dependent. In Pastry (and Bamboo) far- itsroutingtableoccupiedbycompromisednodes.
away links are chosen according to a prefix-hypercube Singh et al. [28] formalized a pattern of misbehavior
topology and node IDs are represented in terms of digits calledaneclipseattack, whichconsistsofthegradualpoi-
inbase2b,whereusuallyb=4. Hypercubelinksarestored soning of good nodes’ routing tables with links to a con-
in a routing table that is divided into 160/b rows and 2b spiracyofadversarialnodes. Notethatmulti-hoproutingin
columns. ForanodewithIDγ,therouting-tableentry(i,j) the overlay allows adversaries to intercept lookups whose
“pointsto”anIDthatsharesitsleadingidigitswithγ,has j source and destination are both uncompromised. Left
asits(i+1)-stdigit,andendsinanysuffix.Topopulatethat unchecked,theadversarycaneventuallycontrolmostcom-
entry, γ picks such an ID randomly, looks up the responsi- municationbetweengoodpeers,therebyplacingastrangle-
ble node, and stores its address and ID in the table entry. holdonthequalityandfateofapplicationsusingtheover-
Theremaybemanycandidatenodesforatableentry(i,j), lay. Thepaceatwhichanadversaryisabletoincreaseher
particularlyforsmallvaluesofi. Forexample,inFigure1, controldependsonthenumberofattackvectorsavailable.
nodeF893Acouldhaveinentry(0,9)anynoderesponsible Amplification: In addition to intercepting application
forIDsstartingwith9(e.g.,91188or9D0E6). Typically,a lookups, the adversary can intercept lookups used by the
noderouteslookup(α)greedily. Ifamongallneighbors, overlay to choose neighbors; she can thus influence good
its own ID is the closest to α, the node responds directly; nodes’ neighbor selection, amplifying her ability to inter-
otherwiseitforwardsthelookuptotheneighbororleaf-set cept subsequent traffic. In the Pastry example, when node geststheuseoffailuredetectorsforrouting. Onesuchfail-
 ure detectordepends on the uniform distribution of identi-
            fi pid oe er in ns t ti so fiv oee urr tct teh hre ati tfin aco a ld ote i oo kp n uo a pp uu rtl eha sot pi ro oitn ny, s. eim W isp h sl ee unm spte ihn cet ie ofd ua siv l ,ui ta r he ea ndc e ae ten cct otr o na r -l
 strained, unoptimized routing table is used as fallback to
resendthesamelookuprequest[7]. Constrainedroutingta-
bleslimitthechoiceofnodesforeachrouting-tableentryto
Figure 2. The victim sends a “Ping” mes-
onecandidate.InthePastryexample,entry(0,9)inthecon-
sagetoadversarynode“Bad2,”whichrelays
strainedroutingtableofnodeF893ApointstoasingleID:
the message over a low-latency link to “Bad
the one numerically closest to 9X for a fixed suffix X that
1,” which finally returns a spoofed-source
thenodechooses. ContrastthistoregularPastryroutingta-
“Pong” message to the victim, pretending to
bles,whereanysuffixX,afull16-thoftheIDspace,would
be “Bad 2.” Whereas the correct round-trip
beadmissibleinstead. Aslongasanodecanlocatethecor-
IP latency from the victim to “Bad 2” would
rectcandidateforanentry–perhapsviaredundantlookups
havebeen200ms,itispresentedas130ms.
– it can ensure that its constrained routing-table poisoning
Such latency “savings” – which can be ob-
is similar to the adversary-controlled fraction of the node
tainedthroughunpublishedroutes(e.g.,with
population. Bymaintainingbothroutingtables–oneopti-
RON [1]) – give the adversary a significant
mizedbuteasilycorruptible,andoneslowbutmorerobust
advantageinoptimizedrouting.
– we can get good performance and secure routing. In the
induced churn design, described next, we utilize this idea
ofdualroutingtables,thoughinaslightlydifferentmanner
F893A updates the routing-table entry (2,3), it looks up thatdoesnotrequirefailuredetectors.
F83X. If the path of the a lookup passes through a com-
promisednode,theadversarycanintercepttherequestand 3.Design
respondtoitasifshecontrolledF83X,returningoneofher
nodes with the nearest ID. This behavior pattern causes a
Ourcontribution in this work arises out of the observa-
feedbackcycle, whoseresultisanincreaseingoodnodes’
tion that, regardless of fallback routing, poisoning in op-
levelofpoisoningwithmostupdaterequeststheymake.
timized routing tables increases over time. Our goal is to
To make matters worse, optimized structured overlays
ensure that the average poisoning of good nodes’ routing
offerfurtherattackvectors totheadversary, sincetheybe-
tablesremainslowovertime. Toaccomplishthis,ourpro-
stowuponroutingtablesmore“degreesoffreedom.”There,
posal retains the idea of maintaining both constrained and
anodeselectstheoptimalnodeforeachrouting-tableentry
optimized routing tables [7], but with a twist. Instead of
according to measurements it performs between itself and
using a failure detector to decide when to use each table
the candidate nodes. If such measurements can be biased
forregularlookups,weimposeaperiodicresetoftheopti-
by the adversary, then she can cause a victim node to give
mized routing table to the contents of the constrained one,
preferentialtreatmenttohernodes. Forexample,anadver-
always using the optimized routing table forlookups. Op-
sarywithgoodnetworkconnectivitycanuseherresources
timization starts anew after reset, but the adversary must
toexhibitunnaturallylownetworklatency,asshowninFig-
poison good routing tables again to maintain herfoothold.
ure2.
Intuitively,weseektoinducethepoisoningbehaviorillus-
Simple Defenses: The presence of adversarial nodes is trated in Figure 3. Assuming resets bring the optimized
inevitableinanypracticalopensystem.Inastructuredover- routing table back to its baseline level of poisoning, the
lay,thesenodescontrolthefateoftheIDsforwhichtheyare morefrequenttheresets, thelowerthepoisoningaveraged
responsible. To mitigate the ability of the adversary to in- overtime.
tercepttrafficdestinedforotherIDs,Castroetal.proposed Periodicresetcanbehelpfulonlyifpoisoningintheopti-
redundantrouting[7]: thesendersendsitslookuptoallof mizedroutingtablesslowlyincreasesovertime;inFigure3,
its leaf-set neighbors, who forward each duplicate lookup theslopeofthe“sawtooth”mustbelow. Inpracticethatis
to the destination independently, in largely distinct paths. not always the case, since “eager” update algorithms may
This approach trades bandwidth for a higher likelihood of optimizeroutingtablesfast,andpreferencetonearbynodes
message delivery, and can be worthwhile for a small sub- (inthenetwork)canbeadversariallybiasedtoconvergeal-
set of critical traffic. We will use it later for routing-table waystowardsgreaterpoisoning. Tokeeptheslopelow,we
maintenancelookups,forexample. propose the rate limitation of routing-table updates, since
Withrespecttooptimizedoverlays,thesameworksug- updatesconstitutetheprimaryvectoroverwhichpoisoning1
0.8
0.6
0.4
0.2
0
gninosioP
Instantaneous
Average
No reset Reset once Reset twice
Time Time Time
Figure 3. A graphical representation of routing-table reset, with increasing frequency from left to
rightgraphs.
increase is effected. Instead of getting updates as fast as 3.1.TimedRandomnessService
possible,wegetthematafixedratethatdoesnotchangeas
networkconditionsorthesizeoftheoverlaychange. Con- Ourdesign relies on a timed randomness service. Peri-
vergencetooptimalconnectivitymaybedelayedasaresult odically–ontheorderofseconds–thisservicegeneratesa
ofthisupdateratelimitation. Withit,however,evenapow- freshrandomnumber,whichitplacesintoasignedrandom-
erfuladversaryispreventedfrombringingherresourcesto ness certificate of the form [Timestep, Random]. The ser-
beartotheirfullestextent,reducedinsteadtotheextentad- vicereturnsthecurrentoranyrecentrandomnesscertificate
missiblebyourratelimits. toanyonewhoasks,viasomesimpletransportmechanism,
The last component of our contribution concerns pre- e.g.,overHTTP.
dictability. If the adversary knows how optimized rout- This is a relatively simple service and can be imple-
ingtablesresetovertime,thenshecanconductherattacks mentedinavarietyofways.Astraightforwardimplementa-
againstcontentrightbeforearesetoccurs.Furthermore,she tionwouldbecentralized,requiringlittlemorethanawell-
canimprovethedeploymentofhernodes(whichidentifiers managedbutlightweightwebserver,withminimalstorage
theyhaveandwhichroutingtabletheypoison)usingknowl- andaprocessoronlystrongenoughtoproduceasignedran-
edge of how good nodes’ routing tables evolve with every dom number every few seconds or so. It requires that all
reset. Wedeprivetheadversaryofthissourceofknowledge nodes have the server’s public key; this key may be dis-
with an unpredictable ID assignment. At every reset, ev- tributedwiththeoverlaysoftwarebundle,orviaanetwork
ery node picks a new random ID and positions itself to a discovery protocol like DHCP or DNS. Here we assume
differentpartofthetopology, enforcingthesamebehavior that the randomness server is available, uncompromised,
on nodes in its own routing tables. If good nodes “move” andreachablewithlowlatencyfromallnodes. Thesegoals
continuously,theadversarycannotattacktheminthesame maybedifficulttorealize. However,thereadershouldnote
way after every routing-table reset; if all nodes, including that the timed randomness service is light weight, easy to
adversarial ones, must change theiridentifiers periodically audit, andamenabletoreplication. Theeaseofreplication
(orfacedisconnectionfromgoodnodes),thentheadversary inparticularalleviatestheriskofDDoSattacksontheran-
cannotholdontoorimproveuponadvantageouspositions domnessservice. Inthispaperwedonotdiscussthedetails
intheoverlay. ofimplementingafullydecentralizedrandomnessserveral-
thoughwedoexplorealternativedesignsinSection5, and
Wenextdescribeadesignthatimplementsthisbasicin-
discuss the complexity-accountability trade-off for such a
tuitioninstructuredoverlays. Ourdesignisgenericandcan
service.
be applied to any specific structured overlay. In Section 4
we describe a particular implementation of induced churn
for Bamboo [23]. At a high level, our design consists of 3.2.RandomUnpredictableIdentifiers
acommonsourceofrandomnesstoreducethepredictabil-
ityoftheunderlyingoverlay(Section3.1),functionalityfor In this section we discuss the details of node identifier
computingandvalidatingfreshidentifiersusingthissource generation, and how it is done in an unpredictable fash-
of randomness (Section 3.2), machinery for effecting and ion. Itistypicalforanoverlaynodetosetitsidentifierby
enforcing churn (Section 3.3), and a mechanism for limit- hashingitsIPaddress(e.g., Chord[30]). Weaugmentthis
ing the rateof routing-table updates (Section 3.4). In Sec- constructionwithafresh,randomnonce. Tojointheover-
tion 3.5, we present some extensions and optimizations to lay, or whenever it must reset its identifier, a node obtains
thisbasicdesign. the appropriate random number from the randomness ser-vice. Itthencomputesitsnewidentifierbyhashingitsad- 3.4.UpdateRateLimitation
dressandthatnumber:newID=hash(Random!IPAddress).
Given the same random number, other nodes will be sub- We impose a limit on the rate at which updates are ap-
sequently able to validate the computation of this ID from plied to a node’s routing tables in order to slow down the
the node’s IP address. These validations replace the vali- proliferation of malicious entries. When first joining the
dation of centrally issued ID certificates, in a certification overlay or after churning, a node starts a periodic update
authority-baseddesign. timer. Wheneverthattimerexpires, thenodeissuesanup-
The choice of theappropriate random number–that is, date request for each of its routing tables to obtain up-to-
thetimesteptoberequestedfromtherandomnessserver– datecandidatesforsomerandomlychosentableentries. As
is dependent on the frequency with which identifiers must describedinSection2.2,fortheConsRTthenewcandidate
bereset. Wecallthetimebetweenidentifierchangesinour nodeisfoundviaaredundantlookup, andisacceptedinto
induced churn schemean epoch, and express thelength of theentryifitsidentifierisnumericallyclosertotheentry’s
theepochintermsoftimestepsoftherandomnessservice; target than the existing link. For the OptRT, the candidate
wewillexplorethetuningoftheepochlengthinSection4. node is found via a single-path lookup, and is accepted if
Byconvention,the“beginning”ofanepochisthetimestep the entry was empty before, orif the candidate’s measure-
oftherandomnessservicethatisanintegermultipleofthe ments on the optimized network metric are better than all
epochlength. Inotherwords,attimestept,currentoverlay otherknowncandidatesforthesameentry.
IDsmustbecomputedusingtherandomnumberissuedby Updates toboth routing tables must be ratelimited, but
therandomnessserverattimestept−(t modk),wherekis update rates need not be the same for both tables, though
the number of timesteps in an epoch. In Section 3.5.1 we our prototype does use the same rate. Nodes set the pe-
refinethisconventionfurther. riod of the update timer according to a trade-off between
systemadaptabilityanddesiredroutingsecurity; morefre-
quent updates improve responsiveness to highly dynamic
environments at the expense of security and possible con-
3.3.InducedChurn
gestion[23],whereaslessfrequentupdatesarecheaper,fa-
cilitate defense against eclipse attacks, but hinder respon-
sivenesstotopologychange.
Every node in our design maintains two kinds of rout-
Update rate limitation should apply to single-entry up-
ingstate: anOptimizedRoutingTable(OptRT)andaCon-
dates; forsomestructuredoverlayupdatemechanismsthat
strained Routing Table (ConsRT). The node uses its Op-
updateentiregroupsofentriesinonego,furtherrefinement
tRTforallapplicationlookuprequestsandmaintenancere-
isrequired. Forsuch“bundled”updates,werandomlydrop
questsfortheOptRTitself. ThenodeusestheConsRTfor
some of the update contents. We thus shield the recipient
alllookuprequeststhatassistotherstojointheoverlay,ei-
groupofentriesinthetargetroutingtablefrombeingcom-
ther initially or after the end of an epoch, and to maintain
pletely poisoned in one fell swoop due to an unfortunate
theConsRTitself.LookupsovertheConsRTareperformed
choice of lookup path. Instead, to poison many routing-
redundantlytoincreasethechancesthattheyreachtheirin-
table entries, a node must make many unfortunate update
tendeddestinations.
choices.
Attheendofitsepoch(i.e.,everyktimestepsoftheran-
domness service), a node obtains the random number for 3.5.Optimizations
its next epoch from the service and uses it to compute its
next identifier (Section 3.2). It then joins the overlay with
Up to this point, we have presented a simple design.
that new identifier; its join – a lookup for the new identi-
In this section we complicate it slightly to introduce two
fier–isroutedredundantlyovertheConsRTofthenodesin
important optimizations that allow induced churn in prac-
theoverlay. Whenthe(re)joiningnodehasacquiredanew
tice,withoutunduesacrificesinperformance. Theresulting
ConsRT, it resets its OptRT to the new ConsRT and aban-
pseudocodeappearsinFigure4.
dons itsoldidentifier. Itthenbegins optimizingitsOptRT
anew,untiltheendoftheepoch.
3.5.1.StaggeredChurn
Nodes evict from both routing tables those entries con-
tainingstaleidentifiers. Anidentifierisstaleiftherandom Ifallnodesinthesystemchurneveryk-thtimestep,thenthe
number used to compute it is too old, that is, k or more systemwilllikelybeveryunstableandheavilyloadedright
timestepsearlierthanthecurrentrandomnessserver’stime. around the global churn time. It will also move from less
In this sense, nodes enforce a maximum lifetime of one poisonedtomorepoisonedstatesuniformly,makingiteasy
epochlengthonthenodescontainedintheirroutingtables. fortheadversarytopickwhentoattack. WenowdescribefunctionprecomputeNeighbors()
functionstaggeredChurn() 1: peer←lookup(myNextID)
1: LeafSet←LeafSet next 2: LeafSet next←null
2: OptRT←ConsRT next 3: tmpLeafSet←peer.getLeafSet()
3: ConsRT←ConsRT next 4: forall p∈tmpLeafSetdo
4: ConsRT next←LeafSet next←null 5: ifnextChurnTime<expireTime(p)then
5: ifLeafSet=null then 6: LeafSet next.add(p)
6: Rejoinnetworkanew 7: PopulateConsRT next foridentifiermyNextID
7: CallstaggeredChurn()intimeepochLength 8: forall p∈ConsRT next do
8: CallprecomputeNeighbors()intimeepochLength−δ 9: ifnextChurnTime<expireTime(p)then
10: Remove pfromConsRT next
Figure4.Pseudocodeforthestaggeredchurnandrouting-tableprecomputationalgorithms.
howtostaggerinducedchurnbypartitioningthepopulation 3.5.2.RoutingStatePrecomputation
intoGchurngroups,eachchurningatadifferenttimestep.
InthebasicdesignofSection3.3,anodejoinstheoverlay
We define churn groups according to nodes’ IP ad-
withitsnewidentifieratthebeginningofeachepoch.While
dresses, for example, by setting a node’s group number to
a node is joining, it is unavailable for handling lookups.
(hash(IPPrefix)modG). IPPrefixisanappropriatelysized
To reduce the impact of this regular occurrence, we allow
prefix of the node’s IP address, e.g., 24 bits, long enough
nodes to precompute their next routing state. When the
toensureareasonablyuniformgroupsizedistribution,but
epoch boundary arrives, the node can immediately switch
short enough to prevent the adversary from changing her
its leaf set, ConsRT, and OptRT to the precomputed rout-
nodes’ churn groups by fiddling with the highly spoofable
ing state, making for a smooth transition. If the node has
low-orderbitsofIPaddresses.
been unable to precompute its new routing state on time,
it joins with the new identifier as before. This optimiza-
In order to stagger churn, we must make minor mod-
tion requires that a node know its next identifier ahead
ifications to the identifier mechanisms described in Sec-
of time. To allow this, we shift the mapping from ran-
tion 3.2. The randomness server timestep when a node
domness service timesteps to epochs: the random nonce
mustswitchidentifiersisnolongerthesameforallnodes,
for group g’s current epoch at timestep t is that issued at
but is offset by the group number. A node in group
T =(t−k−((t−gk/G)modk)); the random nonce for
g∈[0,G), must switch identifiers at all timesteps t where g
groupg’snextepochisT +k.
t modk =gk/G. At timestep t, current, non-stale identi- g
fiers of group g must use the random number of timestep With routing state precomputation, at any given time a
(t−((t−gk/G)modk)). nodemaintainsatotalofthreeroutingtables:aConstrained
RoutingTable(ConsRT),anOptimizedRoutingTable(Op-
A related implication of staggered churn is that differ- tRT), and a speculative Constrained Routing Table for the
ententriesinroutingtablesbecomestaleatdifferenttimes, next epoch (ConsRTnext). A node populates ConsRTnext
and are verifiable with different random certificates from usingitscurrentConsRT,bygoingthroughthemotionsof
theserver. Tosimplifymanagementofidentifierexpiration a join operation with its next identifier, without actually
without overloading the randomness server, nodes piggy- changing any other node’s routing tables: it looks up its
backtherelatedrandomnesscertificatewithanytransferof next identifier in the overlay to discover what its leaf set
node identifiers during maintenance or other identifier ex- andConsRTwouldbeforthatnextidentifier. Thisdiscov-
changes. For the same reasons, nodes cache randomness eryisdifferentforeverystructuredoverlaydesign. InBam-
certificatesforaslongastheyhaverelatednodeidentifiers boo,forexample,thenodeforwardingthenewcomer’sjoin
intheirroutingstate.Withthesesmalloptimizations,anode lookup at every hop sends the newcomer its routing-table
needcontacttherandomnessserverdirectlyonlyonceevery row used to forward the lookup [23]. During precompu-
epoch toobtain the random numberitneeds before churn- tation, routing-table entries that will be stale by the time
ing;itcanalsousethatopportunitytosynchronizeitsclock the node actually churns are excluded. The precomputed
tothatoftheserverattimestepgranularity. Sinceweexpect ConsRTnext is maintained using periodic updates, just as
timesteps to last a few seconds, even high Internet round- thecurrentConsRTis(seeSection3.3). Thecarefulreader
triptimeswouldallowfairlygoodtimesynchronizationof will notice that pruning nodes with IDs that expire prior
nodes with the randomness service for the duration of an to an induced churn point prefers nodes in groups imme-
epoch. diatelyfollowingthechurningnode’sgroup. Toreducethisbias,nodesprecomputetheConsRTnext lateinthecurrent atimeframethatthepeeritselfcantrackalone. Thebasic
epoch.IntheFigure4pseudocode,thistranslatestomaking ideaistorunanunpredictablelogicalclockperpeer. Atev-
δ(lastlineofstaggeredChurn())assmallaspossible. ery timestep, each peer broadcasts the random value of its
Precomputationgivestheadversaryadvanceknowledge clocktoitsneighbors. Apeerreceivingclockvaluesfrom
ofwheregoodnodeswillbeoneepochintothefuture. This its neighbors hashes them together (e.g., in a Merkle hash
is an important concern, making it undesirable to provide tree) and combines the result with its own previous clock
greaterlevelsofprecomputation.However,recallfromSec- value to produce a value for the next timestep. A peer’s
tion3.4thattheadversarycanonlytakeadvantageofalim- identity is cryptographically dependent on the value of its
itednumberofupdatesperepochduetoratelimitation. For locallogicalclock.
our single-epoch precomputation, the adversary must de- Toprovetoaneighborthatitsidentifierisrelativelyfresh
cidewhethertouseherupdatebudgettoattackthecurrent and until recently unpredictable, a peer traces a backward
epoch’s OptRT, or to place her nodes so as to attack next pathfromtheclockvaluethatinfluenceditsnewidentifier
epoch’s OptRT more effectively. Fortunately, even though to a clock value issued by this new neighborsome time in
she knows where her nodes will be in the next epoch, just thepast; thispathfollowsbackwardsasequenceofhashes
as good nodes do, she is still limited to using an identifier andlogicalclockvaluebroadcasts,e.g.,tracingapathfrom
forthedurationofasingleepochonly,makingsuchprede- the new neighbor to the peer’s old position in the overlay.
ploymentofassetslimitedinitsutility. Sincetheneighborrememberswhenitissueditsownclock
values (for a short period in the past), it can estimate for
3.6.DesignAlternatives how long the peer has known its new identifier. This is a
simplified instance of the coordination required for a dis-
In this section we talk about the alternative designs tributedsecuretimestampingservice[20].Weareplanning
for our defenses, namely Forced Unpredictable Identifier to explore the overheads and potential benefits of such an
ChangeandPeriodicResets. aggressivelydecentralizedapproachunderheavychurn.
3.6.1. Alternatives for Forced Unpredictable Identifier
3.6.2.AlternativesforPeriodicReset
Change
Ourdesignchoiceforforcedunpredictableidentifierchange Weconsideredseveralalternativesforperformingtheperi-
placestheresponsibilityofkeepingtimeandproducingun- odicresetsthattriggerinducedchurn,includingproximity-
predictabilitytoacentralizedrandomnessserver. Thisisa metric randomization, gang evictions, and selfish routing-
reductionincentralresponsibility,comparedtothealterna- tablechurn. Proximity-metricrandomizationintroduceser-
tive of having a certification authority registering entities, ror in the measurement of the proximity metric used for
controlling the rate at which identifiers are issued, dealing routingoptimization. Fortheexampleofpoint-to-pointla-
withrevocation,etc. Anintermediatedesignpointbetween tencyasthemetric, wecouldrandomizeseverallow-order
thetwowouldbetocontrolidentifierunpredictabilityover bits of the measured latency per discovered peer. Though
entiregroupsofpeers(accordingtosomegrouping),reduc- coarse-graineddifferentiationamongpotentiallinksisstill
ingthestatemaintainedattheserverfromthegranularityof available,finer-grainedcomparisonsoflinkschangeunpre-
individualaddressestothatofgroups. IncontrasttoMael- dictably, causing proximity neighbor selection not to con-
strom, this approach is cheaper in terms of resources, but vergealwaystothestrictlyclosestneighborbut,instead,to
gives more responsibility to the server, who can now bias pickatrandomfromalargersetofotherwisenearbyneigh-
groupassignments. bors. Thisapproachseemedawkwardasitineffecttriesto
Going in the opposite direction from our design choice modifytheproximitymachineryspecifictoBamboo,while
towards less centralized responsibility, we could distribute oursolutioniscleanerandapplicabletoanystructuredover-
the task of controlling unpredictability, forinstance by us- lay.
ing variants of shared coin flipping schemes, such as that Gangevictionswouldallowthepeerscurrentlyoccupy-
describedbyCachinetal.[5].Therandomnessservercould inganeighborhoodofthelogicaloverlayspacecollectively
thusbedistributedoverallpeersorasetofserversenjoying to decide the order of peer evictions and to monitor joins.
partialtrustamongthepeerpopulation. This,forinstance, However, achievingconsensusonevictionsinahighlyde-
couldbeataskforthesetofbootstrappingserversthatmost centralized, untrusted environment can be tricky and com-
overlaysrelyon. putationallyexpensive,makingthisapproachundesirable.
Finally,anattractivefullydistributeddesignwearecon- Selfishrouting-tablechurningfollowsthesimilarphilos-
sidering for future work would help an individual peer to ophy of evicting entries from a peer’s routing table when
ensurethatidentifiersofpeersitcommunicateswitharede- thoseentrieshaveexceededamaximumlifetime. However,
terminedinamannerunpredictabletothemandfreshwithin anidentifierisnotevictedfromallroutingtablesofcorrectpeers at the same time. As a result, though similar to our 0.5
eventual design, this technique might lead to a continuous 0.4
stateofroutinginconsistencies[18].
0.3
0.2
4.Evaluation
0.1
0
Weevaluateinducedchurnagainstthegoalsofoursys-
0 10 20 30 40 50 60
tem: defenseagainsteclipseattackswithacceptableperfor-
mance. FirstwedescribeMaelstrom,ourprototypeimple-
mentationofinducedchurnbuiltontopofBamboo. Then
we measure and compare the resistance of Maelstrom to
poisoning,aswellasitsoverhead.
Implementation: WehavebuiltMaelstromasasecure
extensiontoBamboo, afine-tuned, realstructuredoverlay.
Maelstrom is a secure router package, consisting of about
5,000linesofJavasourcecode.
The primary component in the Bamboo system is the
Router,whichmaintainsaleafsetandOptRT.Duringnor-
maloperation,aBamboonodeperformsperiodicprobesfor
maintaining the routing table. Bamboo uses 2 algorithms
formaintainingtheOptRT:globaltuningandlocaltuning.
Theglobaltuningalgorithmlooksuparandomidentifierin
theIDspace. ThereturnedresponsiblenodeBisaddedto
theroutingtableifitfitsinanemptyslotoriscloserinterms
ofIPlatencythantheexistingslotoccupant.Localtuningat
nodeAperiodicallyrequestsarandomrouting-tablerowR
fromanodeBchosenatrandominA’sroutingtable. Ain-
sertsintoitsroutingtabletheentriesofRiftheyfillempty
slots or improve latencies to those slots. Maelstrom rate-
limitstheseperiodicupdates(Section3.4).
Maelstrom maintains two routing tables in addition to
Bamboo’sOptRT:ConsRTandConsRTnext alongwiththe
nextleafset,whoseupdatesitalsorate-limits.Furthermore,
Maelstrom shields entire row updates during local tuning.
Becausehigherrowsofaroutingtableadmitgreatervaria-
tioninnodecandidates(Section2.1)sincetheyacceptnode
identifiers with longer “free” suffixes, row shielding drops
higher-rowentriesmoreaggressively. Maelstromacceptsa
maximumofRowNumber/2+1randomentriesperupdate
(i.e.,1entryforrow0,2forrow1,etc.).
Experimental Setup: To evaluate Maelstrom, we an-
swertwo questions. First, what does Maelstrom buy us in
practice in the face of attacks? Second, what is its over-
head? Wefocuson5metrics: routing-tablepoisoning,the
fractionofmaliciousentriesinaroutingtable;routingsuc-
cess,theprobabilitythatalookupwillevadeadversarialin-
terceptionandreachitsdestination;themaintenanceband-
widthoverheadintermsofbytessent;averagenetworkla-
tency for overlay lookups; and, the average hop count of
overlaylookups. Routing-tablepoisoningandroutingsuc-
cessmeasurethepoisoningresistanceofMaelstrom,while
bandwidth overhead, latency, and hop count measure the
costsofitsresistance. Ideally,wewishtoshowthatourde-
)%(
gninosioP
TRC
No Redundancy
Redundancy=16
Baseline
0 5 10 15 20 25 30
Time (min) Malicious Presence (%)
Figure 5. ConsRT poisoning without redun-
dant routing and with 16-path redundancy.
(a) Time graph of ConsRT poisoning for 15%
malicious presence. (b) Steady-state Con-
sRT poisoning for different malicious pres-
encelevels.
fenseskeepthepoisoningofoptimizedroutingtablestothe
fraction of adversarial nodes in the population. Since we
cannotdistinguishbetweengoodandbadnodes,thisbase-
linepoisoningisunavoidable.
Our performance measurements compare Maelstrom to
Bamboo in the absence of malicious nodes. Since our
routing-table maintenance is periodic, ratherthan reactive,
the associated overheads do not change when malicious
nodes are introduced in the system. Poisoning resistance
measurementsevaluateMaelstromunderattack.
We evaluate our design using an algorithmic simulator,
andafullimplementationonanemulatednetwork. Theal-
gorithmic simulator is round-based (a round is a timestep
oftherandomnessserver),modelsallthefeaturesofBam-
boo with induced churn, but elides communication asyn-
chronyandnetworkcongestion. Ineachround,everynode
performs maintenance operations such as eviction of its
stale routing-table entries, periodic update lookups when
its timers expire, and induced churn when its epoch ends.
At this level of abstraction, we can experiment with larger
nodepopulations(upto50,000nodes). OurfullMaelstrom
implementationontopofBamboorunsonanemulatednet-
work that models network conditions faithfully, but elides
networkcongestion. Weusethismoredetailedexperimen-
talplatformtovalidatetheresultsfromthealgorithmicsim-
ulator (albeit for smaller populations of 500 nodes) and to
evaluatetheperformanceofMaelstrom.
For both systems, we use a network topology based on
theextendedKingdataset[15],acommonlyusedrealistic
topology of a wide variety of Internet hosts. We use the
defaultvalues[23]forBamboosystemparameters:theleaf-
set size is 32 with a leaf-set update interval of 10 sec; the
OptRTisupdatedevery30secandkeep-alivepingsaresent
toallneighborsevery30sec. IntermsofMaelstrom,nodes
formG=256churngroups. Forallexperiments,wesetthe1
0.8
0.6
0.4
0.2
0
0 10 20 30 40 50 60
gninosioP
elbaT
gnituoR
(a) 8 min epoch (b) 16 min epoch (c) 16 min epoch (d) 32 min epoch (e) Bamboo
no shielding
0 10 20 30 40 50 60 0 10 20 30 40 50 60 0 10 20 30 40 50 60 0 10 20 30 40 50 60
Time (min) Time (min) Time (min) Time (min) Time (min)
Figure6.Routing-tablepoisoningvs.Timefor15%maliciousfraction.
randomnessservicetimestepdurationtobeT/G, whereT greaterlikelihoodthatanodeupdatingitsConsRTwillre-
istheepochlength. ceivearesponsefromthecorrectnodeitisprobing.
Thethreatmodelimplementedinourattacksimulations We now turn to the OptRT itself, measuring its poison-
isstructuredaroundasetofcolludingmaliciousnodescon- ing levels as a function of malicious presence and epoch
spiringtomaximizetherouting-tablepoisoningintheentire length. Weusethesameexperimentalsetupasabove,with
population. Maliciousnodeshijackallroutingstateupdate 50,000nodesoutofwhich15%aremalicious.Figures6(a),
messagesthatarriveatthemorpassthroughthem,respond- (b), and (d) show the average OptRT poisoning with time
ingwithreferencestonodesfromtheirmaliciouscollective. fornodesbelongingtoasinglechurngroupinMaelstrom,
Wegivetheadversaryfullknowledgeofeverygoodnode’s for epoch lengths of 8, 16, and 32 minutes. We isolate a
routingstate,toapproximateanadversarythathasusedtraf- single churn group to show how poisoning levels are af-
ficanalysistoinfersuchstate.Asaresult,theadversarycan fected by non-staggered induced churn. Dips in the graph
giveresponsestolookupsthatwillhavethegreatestimpact indicate the group’s epoch boundaries, where nodes in the
onagivenvictim’sroutingtable. Furthermore,whenfaced churn group reset their OptRT to their ConsRTnext (Sec-
withmultiplenodecandidatesforanentry, goodnodesal- tion3).LongerepochlengthsallowtheOptRTpoisoningto
ways choose the adversary’s candidate, to approximate an increase. ThismatcheswelltheintuitionillustratedinFig-
adversary who can successfully fool victims about its net- ure3. Incontrast,Bamboo(Figure6(e))poisoningcontin-
workmeasurements(Section2.2).Wediscussourchoiceof uously increases until a high saturation point around 80%,
threat model, as well as alternative weakermodels in Sec- morethan5timesthebaselinemaliciouspresenceof15%.
tion5.
Toseparateoutthebenefitsobtainedthroughrowshield-
ing alone, we plot in Figure 6(c) one instance of the time
4.1.Routingstatepoisoning
graphs (for 16-min epochs) without row shielding. The
slopeofthe“sawtooth”patterninthisfigurematchesBam-
ToevaluateMaelstrom’sresistancetopoisoning,wefirst
boo more closely, and is certainly steeperthan the equiva-
study the resistance to poisoning of the ConsRT under in-
lentscenariowithrowshielding,inFigure6(b).
duced churn, since the ConsRT forms the baseline of the
“sawtooth” behavior we hope to instill in the system (Fig- Figure 7(a) supplies a broader view of the system’s
ure3). ThenweevaluatetheabilityoftheOptRTtoresist behavior, over varying malicious presence in the popula-
poisoningandtoperformsuccessfullookups. tion,lookingattheaverageOptRTpoisoningoverallgood
Weusethealgorithmicsimulatorwith50,000nodesun- nodes (not just a single churn group as above). Bamboo
der attack. Figure 5(a) shows ConsRT poisoning vs. time yieldsgreatpoisoningamplificationtotheadversary,espe-
with 15% malicious nodes in the population. Figure 5(b) cially at low malicious fractions, while Maelstrom main-
showsthesteady-stateConsRTpoisoningforvaryingfrac- tainspoisoningclosetothebaseline. Specifically,forupto
tionsofmaliciouspresenceinthepopulation. Bothgraphs 5% malicious nodes, Bamboo suffers from between 6 and
showexperimentswithandwithout16-wayredundantrout- 46 times greater poisoning than Maelstrom, depending on
ing. Weseethatpoisoningremainsclosertothefractionof epochlength.Asabove,thelevelofpoisoninginMaelstrom
maliciouspopulationwithredundancy;e.g.,with15%mali- growsastheepochlengthincreases,sincetheadversarycan
ciouspopulation,steady-statepoisoninghoversaround16% thenincreaseherfootholdinthegoodnodes’routingtables
with16-wayredundancy,andaround20%without. Thisis forlongertimeperiods.
not surprising, since greater redundancy ensures a higher Figure 7(b) shows the actual probability that a lookup
probability of successful lookup routing, which means a overtheOptRTwillreachitsdestination–asopposedtobe-1
0.8
0.6
0.4
0.2
0
5 10 15 20 25
gninosioP
TRP
8 min
16 min
32 min
Bamboo
1
(a)
0.8
0.6
0.4
0.2
0
5 10 15 20 25
Malicious presence (%)
gnituoR
lufsseccuS
fo
.borP
Bamboo: No redun. Bamboo completes those optimizations and consequently
Bamboo: Redun. 16
Maelstrom: No redun. exhibitsthebest(lowest)latency.
Maelstrom: Redun. 16
Figures 8(b), (c), and (d) compare per-node aver-
(b)
age maintenance bandwidth under simulation with 50,000
nodes, 500 nodes, and on an emulated network of 500
nodes respectively. Measurements include bandwidth in-
curred by maintaining, pinging for liveness, and updating
three routing tables in Maelstrom, rather than the single
routingtableinBamboo. Largerpopulationsfillupnodes’
routing tables more, so the per-node bandwidth overhead
Malicious presence (%)
due to periodic node pings and routing-table updates in-
creases. Furthermore,shorterepochlengthsincurmorefre-
Figure 7. OptRT security characteristics vs.
malicious presence in the population. (a)
quent repopulations of ConsRTnext from scratch, increas-
ing bandwidth consumption. The trends in simulation and
Routing-table poisoning for different Mael-
onemulationaresimilar. However,thealgorithmicsimula-
strom epoch lengths and for Bamboo. (b)
tor tends to overestimate maintenance costs slightly, since
Probability of successful lookup delivery for
it does not model optimizations such as suppressing live-
different redundancy levels for Bamboo and
nesspingswhenothertrafficisobserved,whicharepresent
Maelstrom.
in the actual implementation. Nevertheless, even for short
epochs and large populations, Maelstrom’s bandwidth re-
quirementsarewellbelowthetoleranceofevenhomeusers
inginterceptedandabusedbytheadversary–foranepoch behinddial-upmodems.
lengthof16mins. MaelstromdoesbetterthanBambooin
Figure 8(e) shows the average number of neighbors for
all cases. The difference is more pronounced for low ma-
different epoch lengths on the full implementation at the
licious presence; as malicious presence increases, even if
endofthe3-hourexperiment. Thisgraphalsodemonstrates
poisoningdoesnotincreasefromitsbaseline,itcanhinder
howinducedchurncancutneighbordiscoveryshort,aswell
lookupsduetotheirmulti-hopnature.
as poisoning, which can potentially increase latencies but
Toseparateoutthecontributionsofinducedchurnfrom
moderatesbandwidthincreases.
redundantrouting,Figure7(b)alsoplotssuccessfullookups
when they are performed redundantly over the OptRT as We conclude by examining the randomness server. If
well.At16-wayredundancy,Bamboosuccessdropsrapidly every node in a churn group contacts the server individ-
as malicious presence tops 5%, whereas Maelstrom man- ually, the server’s access link must sustain a stream of
agesnicely,stayingbarelybelow100%successforlowma- (Population/EpochLength)certificates. 50,000nodeswith
liciouspresenceandachievingover80%successevenwhen a2-minuteepochwouldincuratotalofabout0.5Mbpsfor
maliciouspresencereaches25%.Thisreinforcesourearlier 1-KByte randomness certificates, which is trivial for even
point: without periodic resets of the optimized routing ta- moderateservices. Allrequestsconcernthesamefewcer-
ble,evenredundancycannotsavelookupsfromadversarial tificatesatanytime,servedfrommainmemory,sotheload
tampering. ofabout400requestspersecondiswellbelowtypicallimits
ofoff-the-shelfwebservers.Furthermore,inpracticenodes
4.2.Performance in a churn group can disseminate a randomness certificate
amongstthemselves,reducingbothoverheadsontheserver
Inthissectionwemeasuretheperformanceoverheadof evenmore. Finally,with256churngroups,theservermust
inducedchurnonMaelstrom. Weconducttheexperiments compute two new certificates persecond; even with 2048-
in the absence of attacks, since Maelstrom is a proactive bitsigningkeys,thisiswellwithinthecapabilitiesofcom-
systemthatdoesnotchangemodeofoperationinreaction modityprocessors.
toattackevidence.
Figure8collectsperformancemeasurementsfor3-hour
(simulated time) runs of Maelstrom and Bamboo in algo-
5.Discussion
rithmicsimulationandonanemulatednetwork.Figure8(a)
shows the average network latency for successful lookups
in a simulated population of 50,000 nodes. Latency in-
creases as epoch length decreases, since routing state op- We now turn to the challenges facing Maelstrom on its
timizationshavelesstimetocompletebeforeatablereset. pathfromresearchprototypetoreal-worlddeployment.500
400
300
200
100
0
2 4 8163264 Bamb.
)cesm(
ycnetaL
4500
4000
(a) 3500
3000
2500
2000
1500
1000
500
0
2 4 8163264Bamb.
Epoch Length (mins)
)ces/setyb(
htdiwdnaB
900
800
(b) 700
600
500
400
300
200
100
0
2 4 8163264 Bamb.
Epoch Length (mins)
)ces/setyb(
htdiwdnaB
900
800
(c) 700
600
500
400
300
200
100
0
2 4 8163264 Bamb.
Epoch Length (mins)
)ces/setyb(
htdiwdnaB
40
35
(d) 30
25
20 15
10
5
0
2 4 8163264 Bamb.
Epoch Length (mins)
srobhgieN
egarevA
(e)
Epoch Length (mins)
Figure 8. Performance measurements as a function of epoch length, compared to Bamboo. (a)
Lookup latency from algorithmic simulator (50,000 nodes); (b) & (c) Maintenance bandwidth from
the algorithmic simulator, 50,000 and 500 nodes respectively; (d) Maintenance bandwidth from the
implementation(500nodes);and(e)Averagenumberofneighborspernodefromtheimplementation
(500nodes).
5.1.TheRandomnessService Withredundancy, there are multiple, independent random-
nessservers,eachdistributingitsownseparaterandomness
Ourdesign includes a source of trusted, timed random- source. Overlay nodes compute their IDs by hashing to-
nesstoensuretheunpredictabilityofnodeidentifiers. This getherrandomnumbersfromallormanyservers. Verifiers
sourceofrandomnesscouldalsohelpwithloadbalancing, can validate IDs computed from those sources of random-
topology formation, leader election, auctions, etc. Mael- nessthattheytrust,ignoringothers; aslongasatleastone
strom implements this functionality as a central, globally randomness server it trusts has been used in an ID com-
trustedservice. Comparedtootherapproachestotheprob- putation, a validator can accept that overlay ID. Such ap-
lem of secure routing that rely on certification authorities, proaches have been used before for highly available time
a central randomness server is simpler to implement, to stampingservices[2].
prove correct, and to audit; however, the randomness ser- Infuturework,wehopetocombineallthreetechniques
vicemakestheoverlaymorereliantonserviceavailability, withtimelineentanglement[20]todistributethefunctional-
sinceiteffectively“clocks”overlayprogress. Furthermore, ityoftherandomnessservicecompletely, whenabsolutely
centralized components of either type can raise trust and nosharedserverscanbetolerated.
reliability concerns. In the context of the Maelstrom ran-
domness service, we can alleviate some of these concerns 5.2.AdversaryBestiary
viaaccountability,replication,andredundancy.
First,tomaketheservicemoreaccountable,wecanpro- Ouradversarymodeliscomprisedofaconspiracyofma-
vide its users with assurances that issued random numbers liciousnodesthatcolludetopoisontheroutingtablesofall
areunpredictabletoallpartieswithingivenbounds. Users the good nodes in the overlay. Although an “attack every-
couldperiodicallyperturbtheservicepseudo-randomnum- one”threatmodelisanimportantone,thereareothermore
bergeneratorbysubmittingtoitnewseedsthatareincorpo- directed threat models that may also be interesting, which
ratedinsubsequentnumbergeneration. Similartechniques we only briefly mention due to space limitations. Instead
have been used in verifiable secret sharing [21], to ensure ofeveryone,theadversarycouldattackaparticularkey(to
thatnoparticipantintheprotocolcanbiascollectivelycom- cripplearesource)oraparticularnode(tocrippleaservice
putedrandomnumbers. operator), as a destination (to intercept incoming requests)
Second, replication can improve availability, e.g., for oras a source of traffic (to produce spam orto hijack nor-
times when a randomness server is unreachable by certain malresponses).Thoughmorelimitedinscope,suchattacks
clients. Replicasoftherandomnessserverneedonlyshare couldallowaweakeradversarytoconcentrateherresources
a secret seed for their pseudo-random functions, and be onaspecifictarget.
loosely time-synchronized. Both requirements are easy to One aspect of the adversary that we have not included
meet, especially compared to the burden of replicating the in our analysis and design is her capacity for increasing
morecomplexcentralliveidentitycertificationauthorities, herpresenceinthesystem,forexampleviaSybilidentities,
whosestatechangesandmustbepropagatedtoreplicasas whichareforgedorotherwisespoofedidentities.Byimpos-
identitiesareissuedorrevoked. inga3-wayhandshakeoneveryIP-levelsession,weensure
Third, redundancycannarrowtheneedforglobaltrust. thatanode’sIPaddressisalegitimateone,oronethatthenodecanspoofeasily(e.g.,withina/24network). Theuse whether clients can reach the desired content or not, and
ofa3-wayhandshake,however,onlyrestrictsanodetoas- hasnobearingonthecontent’seventual survival. Induced
suminganIPaddressthatitcanspoofeasily. InMaelstrom, churnisappropriateinsuchsettingsand,inadversarialen-
we have explored the enforcement of IP address diversity, vironments,itisindispensable.
by which nodes limit the number of representatives from
each such easy-to-spoof address set intheirrouting tables. 5.4.Migratingdata
Diversityenforcementsuccessfullythwartsspoofingadver-
saries fromamplifying theirpoisoning potential. However
Tocontinuetobeuseful,Maelstrommustensurethatthe
it also penalizes overlay participants from large organiza-
datainsertedremainavailabletoclients. Anobvioussolu-
tions (e.g., student computers at a large university); while
tiontotheproblemistoreplicatedataamongstsomesetof
anoverlaycanaccommodatenodesfromsuchnon-diverse
nodes(usuallyasubsetoftheleafsetcalledthereplicaset)
address spaces, it cannot reach its fully optimized connec-
asdiscussedbyRheaetal[22].Inthiscase,everyputunder
tivity,whichwouldbepossiblewithauniformaddressdis-
akeykwouldcontactthenodesinthereplicasetandreturn
tribution.
successonlyiftheputsucceedsonaquorumofthereplica
set. Any get would then contact the replica set and read
5.3.Utility values from a quorum. By choosing these quora appropri-
ately,wecanensurethatapplicationscanretrievethemost
up-to-date data. However, the presence of induced churn
Maelstrom offers a trade-off between the performance
impliesthatnodesfailperiodically. Itisquitepossiblethat
costs and the security benefits of the overlay (referto Fig-
all the nodes in the replica set may churn before handing
ure 8). The performance cost depends on lookup latency
dataovertoanyofthe“nearby”nodes. Tohandlethiscase,
duetosub-optimalrouting,andmaintenancebandwidthdue
wecanhaveeachnodemaintainpointerstoits“ancestors”
toperiodic,unpredictablechurn. Therecanalsobeassoci-
– the set of nodes that previously owned the keys that the
ated application costs if, for example, the overlay is used
nodecurrentlyowns. Anylookuponkeysthathaveavalid
asadistributedhashtabletostoredata;theninducedchurn
“ancestor” is rerouted to the ancestor. Nodes periodically
incurs a bandwidth cost due to data migration. The epoch
synchronizewiththeirancestorsandremovetheassociation
lengthallowsthesystemtobetunedaccordingtotherela-
betweenancestorsandakeyforeachsynchronizedkey.
tiveutilityassignedtoperformanceandsecuritybytheap-
plication using the overlay. On one hand, for distributed
filesystemsanddatabasesthecostofmigratingdataacross 5.5.RelianceonIPaddresses
nodescouldbehigh,andinducedchurnmaybeinappropri-
ate. On the other hand, for monitoring, query processing, A question may arise about the reliance of Maelstrom
orcontentdistribution,thecostisconsiderablylowersince foritsbenefitsoncurrentIPaddressing. Forinstance,how
smaller, fewer, or expendable data items are involved, and easilywouldourdesigncarryovertoIPv6,givenitslarger
highperiodicchurncanbesustainedtoprovidegreaterre- addressspace?
sistancetopoisoning. Maelstrom relies for its protection against eclipse at-
Alongadifferentaxis,forsomeapplicationsthequality tacksontherebeingahierarchicalstructureinIPaddresses,
of the average-case state of good nodes’ routing tables is whereby higher-order bits are fixed per organization, and
less important than avoiding the worst case. For instance, assignedcentrally(currentlybytheIANA),whereaslower-
inapreservationapplicationsuchasPAST[26],contentis order bits are assigned to end hosts by the organization it-
not refreshed by its publisher into the repository. Instead, self.Suchhigher-orderbitsareusedtochoosechurngroups
itisinsertedonceandthenmigratedamongreplicasasthe in a manner that cannot be biased by the adversary. In
system churns. In such an application, arriving ever at a thatsense,wehavetermedhigher-orderbits“unspoofable”
system state in which all replicas of a given document are (Section 3.5.1): a malicious end host cannot change those
controlledbytheadversaryisdetrimental,sinceitgivesthe addressbitsintrafficitoriginatesandstillparticipateinar-
adversarytheopportunitytotamperwiththedocumentper- bitrary two-way IP exchanges without collusion from the
manently. Reducingchurnthenisanabsolutegoal,sinceit Internet’s governing agencies. To the extent that this re-
reduces the likelihood of everachieving such a worst-case quirement holds with IPv6 addresses, Maelstrom is com-
state. Inducedchurnisinappropriateforsuchapplications. patiblewiththenewerIPprotocol. Note,however,thatthe
Contrast this to the common case of monitoring, reposi- definitionofhowmanyhigh-orderaddressbitsmakeupthe
tories, and communication overlay applications, which re- “unspoofable” part of an address would have to adapt to
quireclientstorefreshstoredcontentperiodically. Insuch currentaddressingpolicies.
applications, it is more important to reduce the average- Similarly,MaelstrommayrelyonIPaddressstructureto
caserouting-tablepoisoning,sincethismeasuredetermines combatSybilattackers,thatis,adversarieswhocreatemanyIPaddresseswiththelow-orderaddressbitswithintheiror- techniques, but our simpler design has allowed us to im-
ganizations,hopingtoswaythebalanceofadversarialpres- plement them and evaluate them experimentally for some
ence in the overlay. As described in Section 5.2, diversity adversaries.
enforcement may help. Again, the number of high-order Our basic techniques have been used before in differ-
bitsthatdefineequivalenceclassesamongnodesforthepur- ent contexts: rate-limited routing-table updates to ease
posesofdiversityenforcementmustmatchthedeployment load spikes underchurn [23], increased unpredictability to
policiesofthecurrentIPprotocol. ForIPv4, enforcingdi- thwartadversarialbehaviorthatreliesonpredictability[16],
versitywithinaroutingtableamongthe24high-orderbits andperiodicresetstorejuvenateadegradingsystem[6,8].
appearssufficient.
7.Conclusion
6.RelatedWork
In this work, we have motivated, designed, and ex-
Security analysis of structured overlays and other peer- perimentally evaluated induced churn, a defense against
to-peersystemshaverecentlyappearedintheliterature[12, routing-table poisoning in structured overlays. Induced
29,32], recognizing routing-table poisoning as a serious churn combines periodic routing-table reset, unpredictable
threat. Castro et al. [7] proposed the first comprehensive identifiers,andrate-limitedupdatestoprotectsuchoverlays
solutiontotheprobleminthecontextofPastry[25]. Their fromadversarieswhowishtoinflatetheirpresenceingood
proposal relied on a central certification authority issuing nodes’routingtablesbeyondwhattheirpresenceinthepop-
rate-limited ID certificates, on dual routing tables (one for ulationasawholewouldjustify. Wehavedemonstratedin-
optimizedandoneforsecurerouting), andonroutingfail- ducedchurnbyimplementingMaelstrom,anextensiontoa
uredetectors. Singhetal.[28]extendedthisworktohandle realdistributedhashtableinwideusetoday[23]. Weshow
eclipseattacksingeneraloverlays(structuredandunstruc- thatinducedchurncanthwartadversarieswhocouldother-
tured) by enforcing low in- and out-degree of vertices in wiseinterceptalmostalllookups, evenwithaverylimited
the overlay graph via anonymous auditing. Low in- and presence. Yet, it retains many of the benefits of optimized
out-degreesmeanthatmaliciousnodescannotinsertthem- structured overlays, making tunable the trade-off between
selvestoarbitrarilymanygoodnodes’routingtables.These resistancetopoisoningandefficientrouting.
two approaches make heavy use of an ID certification au- In future work, we hope to understand better the
thority. Though perfectly reasonable for instance in enter- strengthsandlimitationsofinducedchurninrealisticadver-
priseenvironmentsenjoyingwidetrust,suchpowerfuland sarialenvironmentsthroughexperimentationinrealdeploy-
complex globally trusted components are harder to justify ments,andthroughfurtheranalysis. Today,Bambooforms
in more open settings. Maelstrom is inspired by this trail- the basis fora numberof research and production projects
blazingwork,butseekstorelaxtherelianceonapowerful deployed in the wild, including OpenDHT [24], a shared
andcomplexcentralentity. ComparedtoanIDcertification infrastructure forDHT-based applications. We hope to as-
authority that verifies “real-world” credentials, issues rate- sist the maintainers of OpenDHT with the deployment of
limitedIDcertificates,andmonitorsanddistributesrevoca- theMaelstromextensions,soastoinvestigatehowinduced
tions,ourtimedrandomnessserviceisasimplercomponent churnbehaves,evenwhendatamigrationisnecessary.
thatcanbemoreeasilyprovedcorrect, debugged, audited,
Finally, we believe that the need for common sources
anddistributed.
of unpredictability is becoming increasingly important in
RecentworkbyAwerbuchandScheideler[3,27]shares
looselycoupleddistributedsystems. Wehopetostudyfur-
many of the intuitions behind Maelstrom and even proves
ther designs proposed in the literature, or those proposed
someofthemundercertainassumptions. Theauthors’de-
here, for a massively replicated or fully-distributed timed
signsuseverifiablesecretsharingtoallowgroupsofnodes randomness service, hoping to provide a randomness dial
to generate random identifiers for newcomers, and to en- tonethatcanhelpsafeguarddistributedsystemsintheever
forcelimitedidentifierlifetimes. Theapproachthoughvery
moredangerousinternetworkstheyoccupy.
complex and as yet unimplemented to our knowledge, is
proved robust when adversarial nodes and good nodes are
8.Acknowledgments
limitedintheirjoinanddepartureratesfromtheoverlay. In
contrast,Maelstromenforcesthisratelimitationinthepro-
tocolitselfandoff-loadsthetaskofrandomnumbergener- WewouldliketothankSeanRheaforhisinvaluablehelp
ation to a shared service. Furthermore, it concentrates on inextendingBamboowiththeMaelstromextensions,David
extendingimplementedstructuredoverlays,givingpriority Wagnerforhisthoughtfulcommentsonearlierversionsof
toretainingtheoptimizationsthatmaketheseoverlaysprac- this paper, ourshepherd Dan Wallach, and the anonymous
tical. We have yet to formally prove the robustness of our reviewersfortheirfeedback. TysonCondieandJoeHeller-steinarepartiallysupportedbyNSFgrants(contractnum- [11] D. Davis. Compliance Defects in Public-Key Cryptogra-
bers 0209108 and 0225660), and by a gift from Microsoft phy.InProceedingsofthe6thUSENIXSecuritySymposium,
Corporation. pages171–178,SanJose,CA,USA,July1996.
[12] J. Douceur. The Sybil Attack. In Proceedings of the 1st
International Workshop on Peer-to-Peer Systems (IPTPS),
References pages251–260,Boston,MA,USA,Mar.2002.
[13] M.J.Freedman,E.Freudenthal,andD.Mazie`res. Democ-
ratizing content publication with coral. In Proceedings of
[1] D.Andersen,H.Balakrishnan,F.Kaashoek,andR.Morris. the 1st Symposium on Networked Systems Design and Im-
Resilient Overlay Networks. In Proceedings of the Eigh- plementation (NSDI), pages 239–252, San Francisco, CA,
teenth ACM Symposium on Operating Systems Principles
USA,Mar.2004.
(SOSP),pages131–145, ChateauLakeLouise, Banff, AB, [14] K. Gummadi, R. Gummadi, S. Gribble, S. Ratnasamy,
Canada,Oct.2001. S. Shenker, and I. Stoica. The Impact of DHT Routing
[2] A. Ansper, A. Buldas, M. Saarepera, and J. Willemson. GeometryonResilienceandProximity. InProceedingsof
ImprovingtheAvailabilityofTime-StampingServices. In theconferenceonApplications,technologies,architectures,
Proccedings of the 6th Australasian Conference on Infor- and protocols for computer communications (SIGCOMM),
mationandPrivacy(ACISP),pages360–375,Sydney,Aus- pages381–394,Karlsruhe,Germany,Aug.2003.
tralia,July2001. [15] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King: es-
[3] B.AwerbuchandC.Scheideler. GroupSpreading: Apro- timating latency between arbitrary internet end hosts. In
tocolforprovablysecuredistributednameservice. InPro- Proceedingsofthe2ndACM SIGCOMM WorkshoponIn-
ceedingsofthe31stInternationalColloquiumonAutomata, ternet measurment (IMW), pages 5–18, Marseille, France,
Languages, and Programming (ICALP), pages 183–195, Nov.2002.
[16] G.S.Kc, A.D.Keromytis, andV.Prevelakis. Countering
Turku,Finland,July2004.
code-injectionattackswithinstruction-setrandomization.In
[4] A. R. Bharambe, M. Agrawal, and S. Seshan. Mercury:
Proceedingsofthe10thACMconferenceonComputerand
SupportingScalableMulti-AttributeRangeQueries.InPro-
communicationssecurity(CCS),pages272–280, Washing-
ceedings of the Conference on Applications, Technologies,
tonD.C.,USA,Oct.2003.
Architectures,andProtocolsforComputerCommunications
[17] A. LaMarca, Y. Chawathe, S. Consolvo, J. Hightower,
(SIGCOMM), pages 353–366, Portland, OR, USA, Sept.
I.Smith,J.Scott,T.Sohn,J.Howard,J.Hughes,F.Potter,
2004.
J. Tabert, P. Powledge, G. Borriello, and B. Schilit. Place
[5] C. Cachin, K. Kursawe, and V. Shoup. Random Ora-
lab: Devicepositioningusingradiobeaconsinthewild. In
cles in Constantinople: Practical Asynchronous Byzantine
Proceedings of the International Conference on Pervasive
AgreementusingCryptography. InProceedingsofthe19th
Computing,pages116–133,Munich,Germany,May2005.
ACM Symposium on Principles of Distributed Computing [18] D. Liben-Nowell, H. Balakrishnan, and D. Karger. Ob-
(PODC),pages123–132,Portland,OR,USA,July2000. servations on the Dynamic Evolution of Peer-to-peer Net-
[6] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and works. In1stInternationalWorkshoponPeer-to-PeerSys-
A. Fox. Microreboot–A Technique for Cheap Recovery. tems (IPTPS), pages 22–33, Cambridge, MA, USA, Mar.
InProceedingsofthe6thSymposiumonOperatingSystems 2002.
DesignandImplementation(OSDI),pages31–44,SanFran- [19] B. T. Loo, R. Huebsch, J. M. Hellerstein, S. Shenker, and
cisco,CA,USA,Dec.2004. I.Stoica.EnhancingP2PFile-SharingwithanInternet-Scale
[7] M.Castro,P.Druschel,A.Ganesh,A.Rowstron,andD.S. QueryProcessor. InProceedingsofthe30thInternational
Wallach. SecureRoutingforStructuredPeer-to-PeerOver- ConferenceonVeryLargeDataBases(VLDB),pages432–
layNetworks. InProceedingsofthe5thUsenixSymposium 443,Toronto,ON,Canada,Aug.2004.
[20] P. Maniatis and M. Baker. Secure History Preservation
onOperatingSystemsDesignandImplementation(OSDI),
ThroughTimelineEntanglement.InProceedingsofthe11th
pages299–314,Boston,MA,USA,Dec.2002.
USENIX Security Symposium, pages 297–312, San Fran-
[8] M. Castro and B. Liskov. Proactive Recovery in a
cisco,CA,USA,Aug.2002.
Byzantine-Fault-TolerantSystem. InProceedingsofthe4th
[21] T.P.Pedersen. Non-InteractiveandInformation-Theoretic
SymposiumonOperatingSystemsDesignandImplementa-
SecureVerifiableSecretSharing. InJ.Feigenbaum,editor,
tion (OSDI), pages 273–288, San Diego, CA, USA, Oct.
AdvancesonCryptology(CRYPTO),volume576ofLecture
2000.
NotesinComputerScience,pages129–140,Aug.1991.
[9] T.Condie, V.Kacholia, S.Sankararaman, P.Maniatis, and [22] S.Rhea,Byung-GonChun,J.Kubiatowicz,andS.Shenker.
J.M.Hellerstein. Maelstrom: Churnasshelter. Technical FixingtheEmbarrassingSlownessofOpenDHTonPlanet-
ReportUCB/EECS-2005-11,EECSDepartment,University Lab. In Proceedings of the 2nd Workshop on Real, Large
ofCalifornia,Berkeley,CA,USA,Nov.2005. DistributedSystems(WORLDS),SanFrancisco,CA,USA,
[10] F.Dabek,M.F.Kaashoek,D.Karger,R.Morris,andI.Sto- Dec.2005.
ica. Wide-area cooperative storage with CFS. In Pro- [23] S.Rhea,D.Geels,T.Roscoe,andJ.Kubiatowicz.Handling
ceedings of the Eighteenth ACM Symposium on Operating ChurninaDHT.InProceedingsoftheUsenixAnnualTech-
Systems Principles (SOSP), pages 202–215, Chateau Lake nicalConference,pages127–140,Boston,MA,USA,June
Louise,Banff,AB,Canada,Oct.2001. 2004.[24] S.Rhea,B.Godfrey,B.Karp,J.Kubiatowicz,S.Ratnasamy,
S.Shenker,I.Stoica,andH.Yu. OpenDHT:APublicDHT
Service and Its Uses. In Proceedings of the conference
onApplications, technologies, architectures, andprotocols
for computer communications (SIGCOMM), pages 73–84,
Philadelphia,PA,USA,Aug.2005.
[25] A.RowstronandP.Druschel. Pastry: Scalable,distributed
objectlocationandroutingforlarge-scalepeer-to-peersys-
tems.InIFIP/ACMInternationalConferenceonDistributed
Systems Platforms (Middleware), pages 329–350, Heidel-
berg,Germany,Nov.2001.
[26] A. Rowstron and P. Druschel. Storage management and
cachinginPAST,alarge-scale,persistentpeer-to-peerstor-
ageutility. InProceedingsoftheEighteenthACMSympo-
siumonOperatingSystemsPrinciples(SOSP),pages188–
201,ChateauLakeLouise,Banff,AB,Canada,Oct.2001.
[27] C.Scheideler. Howtospreadadversarialnodes?Rotate! In
Proceedings of the thirty-seventh annual ACM symposium
onTheoryofcomputing(STOC),pages704–713,Baltimore,
MD,USA,May2005.
[28] A.Singh,M.Castro,P.Druschel,andA.Rowstron.Defend-
ingagainstEclipseattacksonoverlaynetworks.InProceed-
ingsofthe11thACMSIGOPSEuropeanWorkshop, pages
115–120,Leuven,Belgium,Sept.2004.
[29] E.SitandR.Morris. SecurityConsiderationsforPeer-to-
PeerDistributedHashTables.InProceedingsoftheFirstIn-
ternationalPeerToPeerSystemsWorkshop(IPTPS),pages
261–269,Cambridge,MA,USA,Mar.2002.
[30] I.Stoica,R.Morris,D.Liben-Nowell,D.R.Karger,M.F.
Kaashoek, F.Dabek, andH.Balakrishnan. Chord: ascal-
ablepeer-to-peerlookupprotocolforinternetapplications.
IEEE/ACMTransactionsonNetworks,11(1):17–32,2003.
[31] J. Stribling, I. G. Councill, J. Li, M. F. Kaashoek, D. R.
Karger, R. Morris, and S. Shenker. OverCite: A Cooper-
ative Digital Research Library. In Proceedings of the 4th
International Workshop on Peer-to-Peer Systems (IPTPS),
pages69–79,Ithaca,NY,USA,Feb.2005.
[32] D.Wallach.ASurveyofPeer-to-PeerSecurityIssues.InIn-
ternationalSymposiumonSoftwareSecurity,Tokyo,Japan,
Nov.2002.