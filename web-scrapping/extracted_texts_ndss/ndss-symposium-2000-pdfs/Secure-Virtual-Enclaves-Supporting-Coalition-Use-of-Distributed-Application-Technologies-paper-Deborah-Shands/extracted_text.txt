Secure Virtual Enclaves: Supporting Coalition Use of Distributed Application
Technologies
Deborah Shands, Richard Yee, Jay Jacobs E. John Sebes
NAI Labs at Network Associates Kroll-O’Gara
{dshands, ryee, jjacobs}@nai.com ejs@securify.com
Abstract collaborating organizations have limited trust in one
another, and (2) the coalitions are dynamic.
The Secure Virtual Enclaves (SVE) collaboration Because the organizations may have competitive or
infrastructure allows multiple organizations to share their even adversarial relationships, they do not completely
distributed application objects, while respecting trust one another. They are, however, motivated by a
organizational autonomy over local resources. The common goal to share some of their resources. Their trust
infrastructure is transparent to applications, which may in one another and the limits of that trust are generally
be accessed via a web server, or may be based on Java specified through some extra-technological means, such as
RMI, or Microsoft’s DCOM. The SVE infrastructure is contracts, treaties, or memoranda of agreement.
implemented in middleware, with no modifications to Coalitions are likely to be dynamic, in that
COTS operating systems or network protocols. The organizations may join or leave over the lifetime of the
system enables dynamic updates to security policies to collaboration. An organization’s level of trust in its
support changes in both coalition membership and partners may also change with time, impacting the degree
participants’ perception of risks. While the prototype of resource sharing–local resources may be added or
demonstrates fine-grained access control for secure removed from the sharing arrangement. The mode of
collaborative computing, we have identified significant access to a particular resource may also change over time.
issues that remain to be addressed, particularly in the We believe that the degree of dynamism necessary to
area of policy development, before such collaboration support coalition creation, evolution, and eventual
will be convenient. The SVE infrastructure offers a dissolution preclude a hardware-intensive solution (e.g.,
platform and conceptual basis for further exploration of setting up a new, joint network). Virtual Private Networks
these issues and experimentation with new solutions. (VPNs) can authenticate individual users, but do not
support access controls on fine-grained objects (e.g., a
Java interface/method). VPN-based solutions are also
relatively static, as adding new coalition members requires
1. Introduction
some manual reconfiguration. To support fine-grained
access controls and dynamic changes to coalition
The need for mechanisms to allow organizations to
membership, the SVE project focused on software
collaborate securely is recognized in many environments.
solutions.
Military alliances and joint task forces are formed to
The goal of the Secure Virtual Enclaves (SVE) project
accomplish a common goal and the participating
was to develop software technology to enable multiple
organizations engage in some form of distributed
enclaves to engage in controlled collaborative computing
collaborative planning. After a natural disaster, crisis
using distributed applications, while retaining
management collaborations are formed from an often
organizational autonomy over local resources. By
disjoint collection of disaster/incident response teams
enclave, we mean a collection of computers and networks
(e.g., medical personnel, local police, engineers). In a
managed by the same organization and subject to the same
commercial environment, companies outsource some of
security policy. Collaboration occurs when principals in
their operations (e.g., payroll, data center operations),
partner enclaves are permitted to access selected local
employ contractors to perform certain tasks, or offer some
resources. Security controls are necessary to ensure that
of their data to customers. They may also form
collaborators get only the intended access to local
consortiums to perform collaborative research, develop
resources. Local autonomy is exceedingly important, as
standards, or battle competitors. There are at least two
an organization’s willingness to share its resources with
common elements in any of the resulting scenarios: (1) the
others is influenced by the degree of control it retains over
those resources. An organization that knows it can
1 of 16Figure 1: SVE concept of operation
unilaterally choose to withdraw its resources from a Based on our goals and constraints, we designed an
coalition at any time may be more willing to collaborate. SVE to work in the following way: two or more
Finally, by distributed applications, we mean applications organizations decide, through extra-technological means,
built primarily on middleware infrastructures that support to collaborate by sharing some of their local resources.
program and/or data object distribution. Examples The administrator of one of those organizations begins the
include Java RMI, CORBA, Microsoft DCOM, and technical and administrative process of naming and
Enterprise JavaBeans. We may also include ordinary file creating an SVE, and noting which other enclaves are
system objects and resources accessible via a web server trusted to join the collaboration. The creating enclave
(e.g., HTML files). becomes the sole member of the SVE. The administrator
Our approach was further bounded by the following then creates a resource access policy to identify the local
constraints: the SVE infrastructure should be transparent resources to be shared and the local principals that will be
to applications and based on commercially available authorized to access SVE resources, both local and
operating systems and open networks. This forced us to foreign. The administrators of the remaining enclaves
work primarily in the realm of middleware, which, given follow an administrative process to request to join the
our focus on distributed application technologies, was established SVE. After a join request has been submitted
appropriate. We also emphasized the “Virtual” in “Secure to the local SVE system, the remainder of the process is
Virtual Enclaves,” deciding against solutions that replicate automatic—SVE system components of one enclave
resources and synchronize multiple copies. Though these communicate with SVE system components of the other
approaches can improve the fault tolerance of a system enclaves to establish the desired coalition membership.
and availability of its resources, they introduce Finally, clients (acting for authorized principals) may
undesirable system complexity. SVE resources remain begin to access SVE resources residing in any of the
within, and under the protection of, their local enclaves, member enclaves.
while mechanisms are introduced to control accesses to Figure 1 shows the general SVE concept of operations.
these resources by external subjects. There is one caveat Two enclaves are participating in an (already formed)
to our assumption about application transparency: we SVE. The SVE, shown in the shaded area in the center of
must be able to authenticate the identity of a requesting the figure, is a projection of access rights for principals
principal, so we insist that application traffic use some belonging to the SVE. Thus, the SVE identifies a
authentication mechanism. distributed collection of related resources, along with the
principals that are authorized to access those resources.
2 of 16
(cid:0)
(cid:0)
(cid:0)
(cid:1)
(cid:1)
(cid:1)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:3)
(cid:3)
(cid:4)(cid:5)
(cid:4)(cid:5)
(cid:4)(cid:5)
(cid:1)
(cid:1)
(cid:1)
(cid:6)
(cid:6)
(cid:6)
(cid:4)(cid:12)
(cid:7) (cid:8)
(cid:12) (cid:15)
(cid:0)
(cid:2)
(cid:9)
(cid:13) (cid:14)
(cid:9) (cid:10)(cid:11)
(cid:4)(cid:12)
(cid:4)(cid:12)
(cid:0) (cid:13)
(cid:0)
(cid:14)
(cid:13) (cid:14) (cid:16)
(cid:16)
(cid:2)
(cid:2)
(cid:4)(cid:12)
(cid:4)(cid:12)
(cid:5)
(cid:5)
(cid:4)(cid:7)
(cid:4)(cid:7)
(cid:8)
(cid:8)
(cid:10)(cid:6)
(cid:10)(cid:6)
(cid:4)(cid:12)
(cid:12) (cid:15)
(cid:0)
(cid:9)
(cid:13)
(cid:4)(cid:12)
(cid:14)
(cid:0) (cid:13) (cid:14)
enclaveA.com enclaveB.com
Legend:
(cid:17)(cid:19) (cid:18)(cid:21) (cid:20)(cid:23) (cid:22)SPEX SPEX
Policy Admin Policy Admin
GUI GUI GUI GUI
SVE Control Messages
SPEX SPEX
Controller Controller
Access Access Access Access Access Access
Calculator Calculator Calculator Calculator Calculator Calculator
Interceptor/ Interceptor/ Interceptor/ Interceptor/
Interceptor/ Interceptor/ Interceptor/ Interceptor/
Enforcer Enforcer Enforcer Enforcer
Enforcer Enforcer Enforcer Enforcer
Enclave A
Enclave B
Figure 2: SVE component architecture
The resources and principals remain unchanged by the Access Calculator for an access decision, and enforce the
introduction of the SVE infrastructure. decision by either allowing the request to proceed as
usual, or dropping the request and returning an error
message to the client. The access calculator encapsulates
2. Architecture
a local SVE resource access policy, and responds to
access queries from local interceptor/enforcers. The
The SVE infrastructure consists of components that
SPEX controller provides asynchronous policy updates
create, distribute, and enforce security policy, as shown in
(either full or partial) to local access calculators.
Figure 2. Each “egg” in the figure represents an enclave.
Figure 3 shows a typical client-server application, with
The components in the upper halves of the eggs (policy
SVE interceptor/enforcers. The use of the SVE
GUI, administration GUI, and SPEX controller) are
infrastructure is invisible to the application client,
responsible for creating, maintaining, and distributing
application server, and application developer.
resource access policy, as well as administering SVE
Interceptor/enforcers must, however, be installed between
operations. The remaining components of the architecture
external clients and internal servers, via either gateways or
interpret and enforce access policy.
server modifications. The remainder of the SVE
The GUI components provide policy and
infrastructure does not communicate with or affect the
configuration facilities to a local enclave administrator.
workings of the application.
The Policy GUI allows the administrator to develop and
maintain access policy for local enclave resources.
2.1. Resource access policy
Through the policy tool, the administrator submits new
policies or incremental updates. The SVE Policy
The administrator of an enclave creates and maintains
Exchange (SPEX) Controller propagates policies within a
the local resource access policy for the SVE by
local enclave to the SVE policy enforcement components,
identifying the resources that may be shared and the
and to other SVE member enclaves. The SPEX controller
principals that may participate. Since an enclave may
also accepts SVE control commands from the SPEX
choose to belong to multiple SVEs, there may be multiple
Administration GUI, and participates in SVE control
local policies (one per SVE) in force at any given time. In
protocols (e.g., join, leave). The Interceptor/Enforcers
fact, there may be several more policies lying dormant in
capture client requests for server resources, query a local
3 of 16case changing conditions (and levels of trust) compel the
administrator to replace one of the active policies. In this
section, we will describe a single SVE policy, local to the
enclave in which it was created.
The SVE policy language uses concepts familiar from
Domain and Type Enforcement (DTE) [5], which defines
policy in terms of the access rights of equivalence classes
of subjects to equivalence classes of objects. An object is
a resource accessed by software. A subject is a software
component that accesses resources on behalf of a
principal. Principals are persons or persistent programs
(such as servers). In DTE, objects are grouped into
equivalence classes called types, and subjects are grouped
into equivalence classes called domains.
SVE policies have four components: type definition
rules, which map distributed objects into types; domain
derivation rules, which map subjects into domains; a
domain
4 of 16
(cid:24)
Enclave A
Server
Server
SVE
interceptor/
enforcer
SVE
Gateway
interceptor/
enforcer
Client Client
Enclave B
Figure 3: SVE client-server communication
types of resources: specification resources, source code
resources, and financial resources. Thus, specification-
related resources to be controlled include html files found
in the specs directory at eweb.com, as well as the
view method of the SpecAdminI interface. The “_t”
appended to each type name is a mnemonic device, rather
than a syntactic requirement.
Domain derivation rules uniquely identify principals
on whose behalf a subject will be assigned to a particular
domain. Domains are, essentially, role specifications. In
the example, frank and jane (both of Acme, Inc.) are
assigned to the engineering and accounting domains
(roles) respectively. sue (of Toyco, Inc.) is assigned to
the engineering domain. frank and sue, both
engineers, will have identical access to resources as long
as Acme and Toyco collaborate within an SVE. jane
will also have access to SVE resources, but because she is
type access matrix; and, potentially, a collection an accountant, rather than an engineer, it is likely that her
of additional access constraints. Figure 4 shows an resource access permissions will be different from
example SVE resource access policy. frank’s and sue’s. Thus, the semantics of “domain”
A type definition identifies a collection of resources within the context of Domain and Type Enforcement is
that will be treated identically for access control purposes. very different from the “domain” addressed in network
For many object-oriented distributed systems, a resource terminology. The example specifications show an email
is the pair (object interface, method). In systems that address (found within an X.509 certificate) prepended
support distinguishable objects (e.g., Enterprise Java with a unique name for the user’s home enclave (e.g.,
Beans), this could mean the more specific pair (named Acme). This name identifies the SPEX controller that
object, method). The example shows definitions for three issued the domain derivation rule. The “_d” appended toType Definitions
specifications_t = https://eweb.com/specs/*,
rmi://com.eweb.SpecAdminI/com.eweb.JavaSpec view(int)
source_code_t = rmi://com.eweb.sourceI/*
financials_t = dcom://123-456-789/321-654/1
Domain Derivation Rules (Principal Recognition Rules)
Acme!frank@acme.com = engineer_d
Acme!jane@acme.com = accountant_d
Toyco!sue@toyco.com = engineer_d
Access Matrix
engineer_d = specifications_t, source_code_t
accountant_d = financials_t+TimeInterval!900!1700!M!F
Figure 4: Example SVE resource access policy
each domain name is a mnemonic device, rather than a with other enclaves via an SVE. When a client from
syntactic requirement. enclave A requests a resource on a server in enclave B,
The access matrix shows the types of resources to the principal responsible for the request must be identified
which subjects in a given domain are permitted access. In by enclave B and the requestor mapped into an
our example, engineers may access source code and appropriate domain in order to determine whether the
specifications, while accountants may access financials. access should be permitted. B cannot recognize the
Finally, an entry of the access matrix may be principal behind the client without authentication and role
decorated with a constraint, identifying conditions that information provided by A.
must be met before the subject (i.e., domain) can access Information describing the requestor might be
the object (i.e., type). This allows us to extend our provided in a variety of ways. At one end of the
policies to address restrictions that may not be spectrum, the client might present a credential at request
conveniently expressible in an ordinary access matrix. In time, containing the domain to which the requestor should
the example, a time interval constraint is placed on be assigned. A certifying authority for A would have
accountants’ access to financial data: subjects in the signed the credential. In this case, the client carries all of
accountant_d domain may access financials_t the data needed by B. At the other end of the spectrum, A
type objects only during the hours between 9am and 5pm, might send all of its domain derivation rules to B in
Monday through Friday. advance. When an A client makes a request, B would
authenticate the identity of the responsible principal, then
2.2. Policy distribution apply the appropriate rules to establish a domain for the
requestor. In this case, the client carries almost none of
A complete SVE policy, comprised of the four the data needed by B. A range of hybrid solutions is
components described above, is necessary for an access possible, with some data delivered by the requesting client
control decision. An access calculator must, therefore, and some delivered in bulk, in advance.
retain a complete policy and receive policy updates from There are advantages and disadvantages to any of
its local SPEX controller. Some portions of the policy these approaches. For the SVE architecture, we have
must also be shared among SVE member enclaves. In this chosen the approach in which an enclave sends domain
section, we examine the need for inter-enclave policy derivation rules for its principals to other collaborating
distribution and discuss the role of the SVE Policy enclaves and only the identification and authentication
Exchange (SPEX) controller in the architecture. data are carried by the client request. Because these rules
An enclave defines its resource access policy, makes allow enclaves to recognize “foreign” principals, we have
access control decisions, and enforces those decisions for renamed them principal recognition rules. Principal
each of its local resources, including resources it shares recognition rules are the only SVE policy component that
must be exchanged among SVE member enclaves. All
5 of 16other policy components (resource-type mappings, access An access calculator presents two interfaces to
matrix, and constraints) remain within their local enclave. components of the SVE infrastructure: an access decision
This provides the local administrator with the unilateral interface to accept and respond to requests from
ability to control which of the local resources are shared – interceptor/enforcers, and a policy update interface to the
the administrator can change the resource-type mappings, local SPEX controller. An interceptor/enforcer queries an
the access matrix, or the constraints for the local resources access calculator for a policy decision, while the local
without consulting other SVE member enclaves. SPEX controller pushes policy updates into the access
As a result, an enclave retains the right to authorize calculator. The access policy is completely contained
both local and foreign principals’ access to local within the access calculator, so decision-making is
resources. In doing so, however, the enclave accomplished strictly locally.
administrator does not authorize access directly to those Access calculation is a four step process: domain
principals. Rather, access is granted to a domain (role). derivation, type derivation, access matrix check, and
Principal recognition rules (both local and foreign) constraint check. Domain derivation is accomplished
provide the basis for determining membership in that using identity data, extracted from an authenticated
domain. Thus, an enclave determines the roles that its credential, in combination with principal recognition
principals assume within the coalition by providing rules, provided by the principal’s “home” enclave. Type
appropriate principal recognition rules. This approach derivation is accomplished using resource request data,
improves the scalability of the coalition-formation taken by the application interceptor, in combination with
process, in that an organization need not have a priori type derivation rules defined by the local SVE policy.
knowledge of every foreign principal that might The premise underlying SVE access calculation is that
eventually participate. However, an enclave must trust its each enclave cannot be expected to define access policy
coalition partners to provide accurate and appropriate based on the individual identities of foreign principals. In
principal recognition rules. Note that the trust requirement order to grant access to foreign principals in a timely and
for accurate domain placement does not diminish if clients scalable way, principals must be grouped into domains by
carry domain designations or other forms of authorization their home enclaves. These groupings embody the roles
in their credentials. of those individuals and the degree to which the
The SPEX component of the SVE architecture is individuals are trusted by their home enclaves.
responsible for distributing access policy to local access In the SVE system, access authorization is granted
calculators, as well as communicating the local principal equally to all principals (both local and foreign)
recognition rules to the SPEX controllers of other SVE represented by a domain, rather than to an individual
members. Each enclave must have a SPEX controller. principal. As in Figure 4, individuals acting in the
Since access calculators must be able to recognize engineer_d role will have access to the same SVE
principals from other enclaves, an aggregate of local and resources, regardless of their home enclaves or the
foreign principal recognition rules must be created by the location of the resources they access. In our prototype,
local SPEX controller. The aggregate principal these authorizations are represented by a domain-type
recognition rules, along with the local type definitions, access matrix. However, any policy representation that
access matrix, and constraints, are delivered to the access assigns access authorization to groups or roles could be
calculators by the SPEX controller. Local principal used with the SVE system. If the access request is
recognition rules are published to other SVE member permissible according to the access matrix, then any
enclaves via SPEX-to-SPEX communication when the constraints of the access are checked. The boolean result
enclave joins an SVE or when changes are made to the is returned to the interceptor/enforcer that initiated the
responsibilities of local personnel. When foreign enclaves query.
update and publish their principal recognition rules, the
SPEX controllers of SVE member enclaves deliver those 2.4. Request interception and policy
updates to their local access calculators, without human enforcement
administrative action.
SVE interceptor/enforcers perform the tasks of
2.3. Access calculation capturing a request for a distributed system object,
extracting data to identify both the target object and the
The access calculators in the SVE architecture are requestor, forwarding this data to a local access calculator,
responsible for deciding whether a given access is and enforcing the access calculator’s decision. One
permissible. Each enclave contains one or more access interceptor/enforcer may differ from another quite
calculators, though for performance reasons, we expect drastically, as their distributed application technologies
that an access calculator would be deployed on each host can differ drastically from one another. We will discuss
that supports SVE-sharable resources.
6 of 16some of those implementation issues in Section 3, but will SVE components are platform independent. Most of the
briefly identify two important classes of components were engineered from scratch, using Java 1.1,
interceptor/enforcers, both of which are supported by the with the considerable exception of the interceptor/enforcer
SVE architecture. code.
When server resources are to be protected, request We chose to support distributed applications based on
interception and policy enforcement for distributed the following commonly used technologies: Java RMI,
application technologies may be implemented via either a Microsoft’s DCOM, and two web servers—Sun’s Java
protocol gateway or a server-resident interceptor. Though Web Server, and Microsoft’s IIS. In order to authenticate
the use of a gateway obviates the need for server the identity of a requesting principal, application traffic
modifications, information regarding a request is often must use an authentication mechanism. Since Java RMI
incomplete “on the wire”. In the case of distributed and HTTP traffic can run over SSL, we use data from
application technologies, this is often evident in that target SSL-carried X.509 certificates to identify both web object
identification (e.g., method call) is not resolved until the requestors and Java RMI object requestors. The DCOM
server receives the request. Gateways can sometimes be protocol does not currently run over SSL, but we can
constructed to call out to a server for additional context extract identity data from the Windows NT access token
data to circumvent this issue. When this is undesirable, (created for the user at logon) which is carried with the
when intra-enclave access control is necessary, or when DCOM request. If client identity cannot be established,
client-server communication uses end-to-end encryption, (e.g., when a web or RMI application is not run over SSL,
server-resident policy enforcement may be the preferred or a DCOM application allows an anonymous request) the
approach. Note also that layered defenses can be built SVE infrastructure will not permit access to resources it
with combinations of gateway and server-resident controls.
interceptor/enforcers. The SVE infrastructure can support
both types of interceptor/enforcer. 3.1. SVE Policy Exchange (SPEX) Controller
2.5. SVE administration The SPEX controller is a multithreaded Java-based
server that implements three interfaces for SVE
The administrator of an enclave is responsible not only administration and policy distribution: an administrative
for defining the enclave’s resource access policies for interface, which communicates with the administrative
each of the SVEs that the enclave joins, but also for GUIs; an intra-enclave policy distribution interface; and
performing local SVE administration tasks. In particular, an inter-enclave communication interface. The controller
the administrator must represent the enclave’s trust also implements repositories for resource access policies
relationships with foreign enclaves by identifying the list and SVE administrative data.
of enclaves with which it intends to collaborate in an SVE. SVE administration (SVE policy updates and control
This establishes an enclave-level trust policy that requests) is handled through the SPEX controller’s
determines which foreign enclaves may have access to administrative interface. The administrative GUI
local resources. Both trust policy and resource access communicates with the SPEX controller via Java RMI. At
policy are managed by the enclave administrator via GUIs the administrator’s request, the administrative GUI
that communicate with the local SPEX controller. SVE forwards SVE control requests (e.g., create a new SVE,
administration commands for establishing trust policy, as join an existing SVE) to the SPEX controller. Changes in
well as creating, joining, and leaving an SVE, are initiated the enclave’s state are pushed back to the administrative
by an administrator via the GUI. Once initiated, these GUI for display to the administrator.
processes are carried out automatically by communicating Intra-enclave policy distribution is handled through the
SPEX controllers. policy service interface of the SPEX controller. Access
calculators register via Java RMI as subscribers to the
policy update mechanism. Policy changes originating at
3. Implementation
the policy GUI are accepted by the SPEX controller.
Access calculators must enforce access policy for all of
The SVE infrastructure is primarily a Java-based
the SVEs to which the local enclave belongs. Thus, the
architecture, tested on Sun Solaris, Windows NT 4.0, and
SPEX controller must aggregate the local principal
Linux. Intra-enclave communication among SVE
recognition rules, type mappings, access matrices, and
components is done via Java RMI. Inter-enclave
constraints written for each SVE to which the local
communication is primarily accomplished using the group
enclave belongs. Principal recognition rules received
communication facilities provided by the Ensemble
from foreign SVE member enclaves must also be
system [7], via the JavaGroups interface [3]. Except for
aggregated with the local rules. This aggregate policy is
the platform-specific binaries required by Ensemble, the
7 of 16propagated by either full or incremental updates to the
subscribed calculators whenever the policy GUI gets an
update from an administrator or when foreign members Application Remote
update their principal recognition rules. Client Object
Inter-enclave control messages and policy distribution Server
are handled via the communication service interface of the
SPEX controller. When an enclave attempts to join an
existing SVE, its SPEX controller makes an RMI request
to a liaison (a SPEX controller for an enclave already
Client Server
belonging to the SVE). The liaison launches a voting
Stub Skeleton
request by sending a message object through the
JavaGroups interface to the Ensemble communication Credential Remote Reference Layer
Lookup
system. All of the current SVE members receive the
Table
Transport Layer
voting request and consult their lists of trusted
collaborators. The liaison tabulates the voting results –
only a unanimous positive result will allow the
prospective member to join. The result is returned to the Access
prospective member as a response to the original RMI Calculator
request. If accepted, the new member subsequently takes
part in the group communication and submits its principal
recognition rules for the SVE.
Figure 5: Java RMI interceptor
3.2. Interceptor/Enforcers
The SVE project implemented server-side (i.e., end- 3.2.1. Java RMI. The first distributed application
system-based, rather than gateway-based) technology for which the SVE project implemented an
interceptor/enforcers for Java RMI, Microsoft DCOM, interceptor/enforcer was Java RMI. Currently, Sun’s RMI
and two web servers (Microsoft’s IIS and Sun’s Java Web interface specification provides no defined application
Server). Both server-resident and gateway-based hook for intercepting client method invocation requests as
interception for CORBA requests were addressed by the they arrive at the RMI server. Consequently, providing a
Sigma project [13], a predecessor to the SVE project. server-side interceptor for Java RMI required functional
The implementation of interceptor/enforcers for a enhancements to Sun’s RMI reference implementation.
variety of distributed application technologies provided The Sun specification describes the architecture of
significant engineering challenges. Most of these RMI in three layers. The topmost layer consists of the
technologies were not designed to allow for request RMI stub and skeleton, which provide the client proxy
filtering. Our interceptors are, therefore, highly and server dispatch functionality commonly found in
implementation dependent, and vulnerable to version distributed object models. The middle layer is designated
changes. Choosing to use gateway-based interception as the remote reference layer and is responsible for
would have traded these problems for others. In providing specific remote invocation semantics, such as
particular, gateways must tolerate varying and evolving whether the remote server object will be a single object or
protocol implementations. For example, the developers of part of a replicated object group. At the bottom is the
CORBA’s GIOP/IIOP protocol did not take the need for transport layer, which is responsible for managing
boundary access control mechanisms into account when network connections and tracking remote server objects.
developing the original protocol specification. This The RMI remote reference layer provides an ideal
decision created problems not only for firewall proxy location for interceptor placement since it is considered
development, but also for interoperability of different part of the Java system API. In contrast, embedding an
vendors’ products when a gateway is involved. As interceptor at the top layer would have required special
mentioned in Section 2, identifying the requested resource skeletons to be generated for each application remote
before the request reaches the server is often exceedingly server implementation, while embedding an interceptor at
difficult as often only the server has sufficient contextual the transport layer would not have provided adequate
information to interpret the data carried by the protocol. information about the invocation target. A consequence,
We will now discuss some of the implementation however, of providing interception at the remote reference
challenges we faced in building server-resident layer is that the interceptor is very specific to the RMI
interceptors for the various application technologies. implementation. We chose to add interceptor capability
specifically to Sun’s RMI remote reference
8 of 16implementation for JDK 1.1. Figure 5 provides a high-
level view of our design for RMI interception.
Application
As shown in Figure 5, an additional complication to
Client
RMI interception was the inability to cleanly pass
authentication credentials from the transport layer to the
remote reference layer. The standard RMI interfaces in
JDK 1.1 do not provide a means for passing credentials
between layers. Thus, we were forced to implement a Java Web Server
credential lookup table, which is shared by the transport
and remote reference layers. We made an implementation-
SVE JWS
specific decision to use a thread identifier as the credential
Interceptor Internal
lookup key, since a single thread carries an invocation
Servlets Servlets
request through each layer in Sun’s RMI implementation.
Based on this design, the transport layer, upon receiving a
client invocation request, will insert the associated
credential into the lookup table using the current thread
context identifier as the key. When the remote reference
layer receives the same request, it will use its current Access
thread context identifier as the lookup key for retrieving Calculator
the credential associated with the request.
3.2.2. Microsoft DCOM. The second distributed Figure 6: Java Web Server interceptor
application technology for which the SVE project
implemented a interceptor/enforcer was Microsoft’s
DCOM. DCOM is the distributed specification for calculator. Assembly language code, such as that written
Microsoft’s Component Object Model (COM) for the kernel-based interceptor, cannot communicate
technology. A DCOM component can take any of three directly with a Java-based server, such as an SVE access
forms: a shared library (DLL), a binary executable (EXE), calculator. This problem forced us to build a bridge from
or a system service. A DCOM component is a collection the interceptor to the access calculator.
of COM interfaces, each of which identifies methods, The bridge is based on COM. A COM client and a
which are exported to applications. Using Windows NT COM server are inserted in the communication path
4.0, an access policy for DCOM components can be between the assembly code-based interceptor and the
specified on a component-by-component basis. However, Java-based access calculator. The C++-based COM client
due to our goals of maximizing control and local is called by the interceptor code. The COM client calls
autonomy, the SVE project required finer-grained the Java-based COM server. Since Microsoft’s Java
constraints on interfaces and methods. Virtual Machine (JVM) does not currently support RMI,
In order for a client to invoke a method on an interface we used a collection of RMI classes developed by IBM to
offered by a remote DCOM component, the client must patch the COM server. This server can then communicate
obtain an interface pointer to identify the requested object with the SVE access calculator.
(i.e., instance of the component). Each interface of a Our interceptor can currently handle DCOM
DCOM component has a virtual table (v-table) data applications in the binary executable (EXE) form. The
abstraction, which is a lookup table with pointers to interceptor may be extensible to shared library (DLL)-
method implementations. Pietrek, in [10], uses a custom based and system service-based DCOM applications.
DLL to modify DCOM v-tables and a kernel jump table to
re-route DCOM method calls. The SVE system uses 3.2.3. Java Web Server. Web-based applications are
Pietrek’s method of request interception. Other another technology that SVE supports. We have
techniques have been developed which can be applied to developed two web server interceptor/enforcers, the first
the interception of DCOM requests. The method of which is Sun’s Java Web Server. The Java Web Server
described by Balzer and Goldman in [4] replaces a portion (JWS) was designed with modular extensibility in mind
of the application’s assembly code, diverting the program and is built upon a server framework called the JavaServer
to the interceptor. As we did not require the generality of Toolkit (JST). The JST allows developers to build
the Balzer-Goldman approach, we chose to implement the network application services using the Java programming
simpler Pietrek method. language. The types of services that can be built with the
Once the interceptor has captured the DCOM request, JST include established services such as HTTP and FTP,
it must request an access decision from an SVE access as well as application services that have yet to be created.
9 of 16The JST supports the concept of a servlet, a service
extension API that augments the capabilities of a
Application
particular service for customized application handling.
Client
Servlets run within a JST server as objects in support of a
service and can be dynamically loaded on demand from
any local or network source. The JWS uses servlets to
manage all resources provided through its HTTP and
HTTPS services. For example, the JWS uses a file servlet IIS Web Server
to provide its file-serving capabilities, a CGI servlet to
execute any CGI-based scripts or programs, and an
invoker servlet to execute custom application-specific
System Filters
servlets.
Providing an access control interceptor for the JWS
was fairly straightforward. The JWS allows servlets to be
chained together for the purpose of further augmenting
SSL Filter
service capabilities. Since the standard JWS utilizes
internal servlets to manage all of its web resources,
providing interception was merely a matter of inserting an
interceptor servlet in front of each of the internal servlets.
Thus, we were able to intercept all client requests for web
Custom Filters
resources managed by the JWS. Figure 6 provides a high-
level view of our design for JWS interception.
SVE Interceptor Filter
3.2.4. Microsoft IIS Web Server. The final SVE
interceptor/enforcer was developed for Microsoft’s web
server: the Internet Information Server (IIS). IIS uses
Windows NT’s Internet Server Application Programming SVE
Interface (ISAPI) as a customization interface. ISAPI is a ASP File
server-side API with functionality similar to the Java
servlet interface. An IIS filter conforms to the ISAPI, and
is analogous to a Java servlet, used by the Java Web
Server. Some filters are specially designated system Access
Bridge
filters, provided by Microsoft. Custom filters can be Calculator
developed and added to the IIS server, as well. Both
system and custom filters can be chained together to
augment IIS services, with system filters being executed Figure 7: IIS Web Server interceptor
before any custom filters within the filter chain.
The SVE IIS interceptor is implemented within a
hope and expect that Microsoft will correct these
custom filter, placed after the SSL system filter, but before
problems with future releases of IIS.
other custom filters in the filter chain. The SVE
The lack of Microsoft JVM support for Java RMI once
interceptor makes use of an Active Server Pages (ASP)
again forced us to develop a bridge between the ASP and
file, which should (according to the IIS documentation)
the access calculator. We had hoped to use the same
allow the interceptor to forward the client request data to a
bridge that we built for the DCOM interceptor, but were
local access calculator for an access decision.
unable to force the SVE interceptor filter to communicate
Unfortunately, due to Microsoft’s engineering
directly with a COM client. We, therefore, prepended
problems with IIS 4, custom filters are unable to
additional bridging components to enable the
automatically execute ASP files before resource
communication. Figure 7 provides a high-level view of
processing. Thus, the SVE filter is unable to
IIS interception.
automatically intercept resource requests. We worked
around the problem by sacrificing transparency and
3.3. Communication security
manually modifying each of the IIS resources. During
resource processing, the SVE filter first executes the SVE
To ensure that intra-enclave policy distribution takes
ASP file. Though this non-transparent approach would be
place without danger of policy corruption or source
unacceptable in an operational environment, the
spoofing, SVE Java RMI communication runs over SSL.
workaround was tolerable for experiments with SVE. We
10 of 16The SPEX controller authenticates the source of policy Because it is fully encapsulated, the policy can be
update commands and SVE administrative actions. passed within the SVE infrastructure and handled as an
Similarly, the access calculator ensures that the SPEX opaque object by most of the components. The access
controller is, in fact, the source of a policy update. calculator provides an architectural placeholder in the
Communication between interceptor/enforcers and their SVE infrastructure to insulate interceptor/enforcers from
access calculators has not yet been secured, due to project details of policy-based decision making. The SPEX
resource limits. To ensure that interceptor/enforcers controller can push updated policy metadata into an active
cannot be fooled by imposters spoofing access decision policy, or install a completely new policy in the access
results, these communications should be secured. calculator without interrupting access decision requests
Inter-enclave communication has been secured to from interceptor/enforcers. This approach ensures that the
protect the integrity of policy data (in particular, principal policy update process can be exceptionally dynamic.
recognition rules) and prevent source spoofing. The The policy object’s interface to an access calculator is
initial, RMI-based communication between a prospective quite simple: requestor and resource data are consumed
enclave SVE member and its chosen liaison is secured and a boolean access decision is produced. Though the
using SSL. The remainder of inter-enclave SVE SVE policy language and GUIs reflect the OODTE
communication takes place using the group influence, a policy need not be OODTE-based to be used
communication system. We had the option of using the within the SVE infrastructure. Any policy model
communication security facilities provided by Ensemble implementation that respects the Java interface defined for
(albeit not via JavaGroups); however, as we had earlier the policy object could be substituted in the architecture.
decided to insulate the SVE infrastructure from the choice This offers us tremendous flexibility in selecting
of group communication facilities, we chose not to rely on appropriate policy models. We hope to experiment with a
Ensemble’s security facilities. Instead, we chose to sign variety of resource access policy models and use the SVE
SVE message objects to provide source authentication and infrastructure to deliver and evaluate policies in working
message data integrity. systems.
To secure SVE communication, we used an
implementation of the Java Cryptographic Extensions
4. Discussion
(JCE), produced by the Institute for Applied Information
Processing and Communications (IAIK) from Graz,
The SVE project has developed a software
Austria. We used IAIK’s Digital Signature Standard
infrastructure to enable collaborative distributed
(DSS) implementation to ensure source authentication and
computing. During the analysis, design and
data integrity for SVE messages carried over Ensemble.
implementation of this system, we identified several
IAIK’s iSaSiLk Java-based implementation of SSL was
significant issues that impact the creation and use of
used to secure all of our RMI-based communication.
secure virtual enclaves. Many of these issues (enclave
autonomy, policy semantics, principal data representation
3.4. SVE policy
and transmission, and trust policy) have both conceptual
and implementation consequences. System design and
The implementation of SVE resource access policies
implementation choices in each of these areas have
facilitates both dynamism in policy updates and the use of
significant conceptual repercussions on the relationships
a potentially broad range of policy models. An SVE
among coalition members, the protections offered by the
policy is represented as a Java object that is created by an
system, and the complexity of establishing and
administrator, using the SVE policy GUI, stored and
maintaining a collaborative environment. Some of the
distributed via the SPEX controller, and, finally, lodged in
issues, such as system implementation and performance
an access calculator. The policy encapsulates both
and scalability, primarily impact the engineering of the
metadata (e.g., principal recognition rules, resource to
SVE system and its fitness for use in particular
type mappings, access matrix, and constraints) and rules
collaborative environments. We will discuss each of these
(i.e., code) for interpreting that metadata. The policy
issues, identifying our results, limitations of the SVE
object provides an update interface to allow the policy
approach, lessons learned, and some areas that deserve
metadata to be changed, and an interface to respond to
further attention.
access queries from interceptor/enforcers. An active
access policy resides in an access calculator. The
4.1. Enclave autonomy
calculator delegates any access decision requests to the
policy object, which executes code to interpret its
In this section, we describe how the SVE system
metadata and returns its decision to the calculator. The
enables enclave autonomy, and discuss security issues that
calculator responds to the interceptor/enforcer that
arise from that autonomy. It is essential to facilitate as
initiated the query.
11 of 16much organizational autonomy as possible because an access to the local Alpha Project resources. This problem
infrastructure that required mutually suspicious also arises if enclave A leaves the Alpha Project SVE, due
organizations to cede significant control to potential to new concerns about the trustworthiness of the other
competitors or adversaries would not encourage Alpha Project members. Alice may inadvertently continue
collaboration. The SVE infrastructure offers enclaves a to access Alpha Project resources held by foreign enclaves
great deal of autonomy in controlling access to their local if A’s principal recognition rules are not purged from
resources. foreign Alpha Project members’ active policies. This
The SVE infrastructure supports enclave autonomy places Alice’s, and, thus, A’s integrity at risk from
within a coalition in two ways: (1) by ensuring that most compromised foreign resources.
resource access policy components are used only within In the second case, when a trusted collaboration
the local enclave, and (2) by enabling an enclave to partner shares resources (intentionally or unintentionally)
unilaterally withdraw from an SVE at any time. with non-SVE members, we can’t know which resources
An SVE member enclave retains full control over local have been compromised, or how widely they may have
resource access policy. Specifically, resource to type been circulated. The compromise of an SVE member
mappings, access matrices, and constraints are never makes our local resources conveniently available to an
propagated among enclaves. In the event that an enclave attacker. We must, therefore, trust that our partners are
discovers a collaboration partner to be untrustworthy, the not only honest and cautious, but also savvy about
enclave may respond immediately by modifying any of protecting their network infrastructures. These issues are
these local policy components and updating its access not unique to the SVE system, but, rather, impact
calculators. This permits an enclave to unilaterally restrict coalitions in general and are likely to be significant
access to its local resources by external entities. considerations in planning collaborative efforts.
Alternatively, the enclave may withdraw from the SVE
altogether, effectively removing all of the SVE members’ 4.2. Transmission of principal data
principal recognition rules from the policy enforced by the
local access calculator. This immediately prevents any To enable principals to access resources in foreign
principals in those foreign enclaves from accessing local enclaves, while satisfying the requirements for
resources. Leaving the SVE is a more drastic step as it application-level transparency, requestor data must be
denies local resource access to all of the SVE member transmitted to the resource owner’s enclave. As discussed
enclaves. in Section 2, approaches to transmitting this data range
As with any security mechanism, the protection from annotating principal certificates to supplying a list of
offered by SVE policy enforcement cannot extend beyond all local principals’ data. In this section, we discuss the
the system itself. In particular, the design of the SVE advantages and disadvantages of the SVE approach.
infrastructure does not address the following two issues, The SVE approach to transmitting requestor’s data to
both of which arise due to the autonomous operations of a resource owner’s enclave is to propagate a collection of
the collaborating enclaves: (1) despite an enclave’s principal recognition rules in bulk before a request is
request to leave an SVE (or principal recognition rule made. This bulk propagation approach has the advantage
update), its local principals may continue to access foreign that modifying a role specification (i.e., changing a
SVE resources if other SVE members fail to update their principal recognition rule) is less expensive than reissuing
access policies in a timely manner; and (2) a trusted SVE a certificate. Certificates are usually issued off-line, so
member enclave may inadvertently or intentionally share a producing a new certificate can take a relatively long time.
copy of a resource with a non-SVE member. Furthermore, with each authorization change, the old
In the first case, an enclave depends on other SVE certificate must be revoked and a certificate revocation list
members to correctly manage principal recognition rules. updated. While we can’t avoid dealing with certificate
These rules are the only policy elements shared among revocation with respect to identity certificates, the use of
SVE members, but they require careful handling by each authorization certificates might create even more
of the SVE member enclaves to ensure that principals are significant certificate revocation issues because
granted appropriate access authorizations. For example, if authorizations are likely to change more frequently than
principal “Alice” is transferred by her employer, enclave identities.
A, to a new position and no longer requires access to the The use of bulk principal recognition rules has its
“Alpha Project” SVE, enclave A depends on the other disadvantages, however. When enclave A reorganizes its
SVE members to remove Alice’s principal recognition employees and changes their organizational roles, it must
rules promptly. Alice may, otherwise, have continued issue updates of its principal recognition rules to ensure
access to Alpha Project resources held by foreign that employees have access to the correct SVEs and that
enclaves. We assume that A removed Alice’s principal their subjects are mapped into the correct domains.
recognition rules promptly, so that she doesn’t have
12 of 16Whenever enclave A makes organizational changes, all semantics of roles in advance of their use will completely
other enclaves in the SVEs in which A is a member must solve this problem.
update their systems to handle those changes. This In the SVE project, we assumed that the domain
misplaces the burden of accommodating local changes names to be used in resource access policies were
onto foreign entities. established by the SVE creator and agreed upon via extra-
It is possible that a hybrid approach to authorization technological means by other SVE members in advance of
transmission would be valuable: some role information is any resource sharing. A system in which A’s and B’s
contained in an authorization certificate, a user manages roles could differ would require some translation
multiple such certificates, and additional (more volatile) mechanism, either directly between A and B, or into some
data is expressed in principal recognition rules. agreed-upon intermediate specification. Translation
mechanisms might be constructed by wrapping local role
4.3. Policy semantics data with filters. Overall, the need to establish a common
understanding of security policy semantics among
Policy semantics is a thorny issue when collaborating organizations will prove crucial to the
role/authorization data crosses enclave borders. In this effective use of coalition enabling technologies.
section, we describe problems that may arise with regard
to policy semantics, and their impact on the development 4.4. Trust
of security policies for coalitions.
A major problem with policy semantics is the different Trust is the foundation of any collaboration. In this
interpretations of common entities across multiple section, we consider three trust issues arising in an SVE
enclaves. For example, though enclave A may designate a context, and how the SVE infrastructure handles (or might
principal for the manager role, the semantics of be extended to handle) those issues.
manager are known only within A. manager might The first issue pertains to the granularity of trust
mean line management (e.g., matching staff to projects, expressible within the system. In the SVE system, a
reviewing salaries), or it might mean project management principal’s identification credentials are delivered to an
(e.g., project tasking, project budgets). In either case, the interceptor/enforcer when an access request is made. The
semantics of the manager designation are established interceptor/enforcer must authenticate the credentials
within the A context. (e.g., check certificate signatures) and determine whether
Suppose, for discussion, that by manager, enclave A it trusts the signer before extracting the identification data
means project management. When the manager and forwarding it to an access calculator. We either trust
designation crosses into enclave B, either in an that the certificate accurately identifies the requestor or we
authorization certificate, or as a target domain in an SVE don’t. If we had used authorization certificates, we might
principal recognition rule, the critical context data is lost. have applied a trust designation to each authorization
At least three possible problems might arise: (1) If enclave contained in the certificate. The certificate signer may or
B has no manager role, then it will not authorize may not be trusted by the target enclave to certify each of
resource access, as the principal designation is unknown the authorizations. A finer granularity of trust could be
in B. The foreign manager, therefore, will be denied distinguished within an SVE policy, which could then
access. (2) If enclave B locally defines a manager role influence access calculation.
with the semantics of line management, then the foreign The second issue pertains to the uniformity of trust
manager may inadvertently gain access to some of B’s relationships within an SVE. When joining an SVE, an
salary data. (3) If enclave B defines a project administrator must specify to the local SPEX server the
management role, but instead uses the spelling list of other enclaves that are trusted to join this SVE.
project-manager, then the local project managers These enclaves may share local SVE resources. The SVE
may have access to different resources than the foreign system treats each of these member enclaves identically—
manager, despite the intention to grant them identical each member is equally trusted. To create distinct trust
resource access. relationships among enclaves, an administrator would
One might expect that this problem could be handled form multiple SVEs with different resource access
by treating this as a namespace issue, however, that policies for each SVE. Extending the SVE trust model to
approach is insufficient, as marking the manager role better support asymmetric trust relationships could make
with an enclave qualification gives us something like the system applicable to a broader set of coalition
“enclaveA/manager”. This designation does not environments.
provide B with the information necessary to interpret the The third issue pertains to the degree of symmetry
role in the B context. Nothing short of establishing the required in SVE member relationships. SVE member
enclaves are peers. For example, to admit a prospective
13 of 16member to the SVE, each current member must vote, and 4.6. Performance and scalability
the votes must be unanimously positive to allow the
prospective member to join. It would be worthwhile to Project resources did not permit us to perform a
consider non-peer relationships within the SVE context, to quantitative performance evaluation of our system. We
allow the concepts of “subordinate” or “subcontractor” to can, however, discuss our qualitative observations from
be represented. In an asymmetric relationship, some the perspectives of an administrator and of a user client.
enclaves are primary SVE members, while, for example,
other enclaves participate in the SVE because they 4.6.1. Performance. We developed the initial version of
manage resources at the direction of primary members. the system without any communication security for the
Secondary members that supply services to other enclaves SVE infrastructure. This initial version did require client
may not require a full vote in this scheme. We have not authentication, however, to allow us to test our access
determined how such asymmetries might be expressed decision-making and enforcement. We built a simple
within the SVE context. distributed application to test and demonstrate the SVE
system, using Sun’s JDK versions 1.1.6 and higher, with
4.5. Implementation the Just in Time (JIT) compiler enabled. The application
included two data repositories, one contained in a
In this section, we briefly review our analysis of SVE Microsoft access database and one contained in flat files.
implementation issues and identify alternative We built DCOM and RMI clients, and used web browsers
implementation options we might choose today, if the to access the resources. We used a variety of machines
SVE project were just beginning. As mentioned in ranging from a 166 MHz Pentium Pro with 32 MB RAM
Section 3, most of the SVE infrastructure was to a SPARC Ultra-1 with 128 MB RAM, up to a 450 MHz
implemented in Java 1.1, using RMI for intra-enclave Pentium 2 with 128 MB RAM. All of these machines
communication and the Ensemble group communication were connected via our local Ethernet.
system for inter-enclave communication. Though both When run with communication security turned on
Java and JavaGroups/Ensemble proved to be good choices (SSL for RMI and the web browsers, and the Microsoft
for implementation, upcoming Java facilities and proprietary protocol for DCOM), users noticed a
development tools would have eased our development significant performance impact. When accessing Java-
task. For example, Sun Labs has recently developed a based resources via RMI over SSL, the delay between a
reference implementation of Java reliable multicasting request and the display of resource data was less than 2 or
(JRM) [12]. This might allow us to eliminate some of the 3 seconds. The bridges we built to permit communication
platform-dependent multicasting facilities provided by between the Microsoft interceptors and the access
Ensemble. Sun Labs plans to add the JRM API into calculators degraded performance for these types of
future versions of the Java Development Kit (JDK). requests. In our system, access requests for Microsoft
By far, our most significant implementation problems resources were significantly slower (perhaps on the order
arose during the development of the interceptor/enforcers. of 7 or 10 seconds) than requests for the Java-based
Neither Java RMI nor DCOM were built to allow the resources. By inserting dummy access decisions into our
modular addition of security mechanisms. The problem enforcement code, we established that the bridges, rather
was significantly compounded for DCOM due to its than the interceptors, were at fault.
relative complexity and the lack of available internal From an administrator’s perspective, SVE control
specifications. Fortunately, the RMI interceptor was not operations appeared to have reasonable performance (i.e.,
quite as problematic, as RMI is simple and its under 1 second for an SVE join operation), without
specification is well-documented. However, both communication security. Once we enabled message
interceptors are implementation dependent and vulnerable signing and verification, the performance degraded
to version changes. noticeably. An administrator might wait up to 5 seconds
The web servers were clearly designed to allow before receiving confirmation of a successful join
additional functions to be added. In the case of the Java operation. In summary, it appears that both intra-enclave
Web Server, the servlet concept allowed us a simple and inter-enclave communication security introduce
means of encapsulating and installing SVE interception significant obstacles to attractive performance of the SVE
code. Microsoft’s IIS web server offered a similar system.
approach to extensibility via its filter concept.
Unfortunately, several documented features of IIS did not 4.6.2. Scalability. Our system was tested with only a few
work as specified. As a result, an administrator must SVEs (5 or fewer), and only a few member enclaves of
manually prepare IIS resources before they can be each SVE (3 or fewer). The small size of the experiment
controlled by the SVE system. We hope that Microsoft was due primarily to the administrative overhead of
will correct the problems with IIS in a future release.
14 of 16developing security policies. Scalability was not, Sigma results were focused on policy definition (via
therefore, addressed by experiment. Roughly, the cost in OODTE and other policy specification languages) and
administrative overhead and communication of joining request interception. The SVE project extended these
and participating in two SVEs is twice the cost of joining results by introducing an infrastructure to support shared
only one. Thus, the scalability of the system largely policy elements for collaborating organizations. The
hinges on how well we can support the growth of a single Multi-Protocol Gateway (MPOG) [9] extended the
SVE. CORBA ORB gateway to enforce access policy for both
SVEs grow as new member enclaves issue join CORBA and Java RM requests. We hope to extend the
requests, and are maintained as existing members issue SVE system to provide dynamic policy updates for the
policy update requests. The join operation has the highest MPOG to enable it to consistently enforce SVE resource
messaging requirement of any of the SVE operations, as access policies.
voting requests must be conveyed to each member, ballots Each of the types of middleware resources (e.g., web
collected from each member, and result notification sent resources, RMI resources, DCOM resources) for which
to each member. All of these underlying operations are the SVE infrastructure provides access controls has its
accomplished using Ensemble-based communication. own model of access policy specification and
Therefore, the scalability of inter-enclave SVE enforcement. For example, the default mechanism for
communication is heavily dependent on the scalability of specifying access policy for resources controlled by the
the underlying Ensemble communication system, whose Java Web Server is access control lists. Currently, there is
performance is addressed in [7]. no mechanism for controlling RMI access to distributed
Java resources. In the future, however, the Java
Authentication and Authorization Service (JAAS) [8] will
5. Related work
be used to control this type of access. Access to DCOM
applications can be controlled by Windows NT, but the
Several research projects have addressed problems
finest granularity of control is at the per-application level
related to collaborative computing. Systems such as
(e.g., “launch,” “configure”). Each of these middleware
Ensemble [7], Rampart [11], Transis [1] and Enclaves [6]
systems specializes in controlling access to its own
provide secure group communications, allowing
distributed resources, rather than providing uniform
collaborating entities to maintain privacy and message
access policy enforcement for multiple types of distributed
integrity in their communications. The SVE system,
object resources. None of these policy enforcement
however, focuses on supporting policy-driven access
systems support notions of collaborative computing
controls for distributed object systems.
among multiple organizations. The SVE system focuses
There is also research in the area of security policies
on supporting collaborative computing through uniform
for group communication. In [15], Srisuresh and Sanchez
access controls on various distributed object resources.
describe policy-based routing for IP security.
The SVE system was engineered using many
Requirements are described for intermediate and end
previously developed technologies. As mentioned in
nodes to support security policies for packets crossing
Section 3.2.2, the SVE approach to DCOM interception
enclave boundaries. At this level, policies refer to packet
applied a method described by Pietrek in [10]. A more
forwarding rules or communication security mechanisms
general approach to mediating calls into a Windows NT
and their parameters. The Dynamic Cryptographic
API is described by Balzer and Goldman in [4]. As we
Context Management (DCCM) system [2] provides
did not require the generality of Balzer/Goldman, we
dynamically changeable mappings from low-level policy
opted for the relative simplicity of the Pietrek method.
abstractions onto cryptographic mechanisms for secure
The SVE infrastructure made use of the Ensemble
group communications. DCCM offers a mechanism for
group communication system to provide reliable
inter-enclave policy negotiation. In this case, policies
communication for SVE member enclaves. The
refer to cryptographic context specifications (e.g., ipsec
JavaGroups toolkit [3], developed by Ban at Cornell,
3des-cbc encryption, using sha-1 integrity verification).
provided us with a Java-based interface to the Ensemble
Other work that has dealt with access controls for
system. Protocols for SVE management make calls
distributed objects include the Sigma project [13], which
through JavaGroups to communicate over Ensemble.
investigated the integration of security technologies into
CORBA-based distributed computing environments. The
Sigma project built prototypes of both gateway and 6. Conclusions
server-resident (ORB plug-in) interceptor/enforcers for
CORBA requests and developed the object-oriented Our primary goal was to study software mechanisms to
version (OODTE) [14] of the Domain and Type support coalitions in collaborative computing efforts.
Enforcement (DTE) [5] policy specification language. Because coalition partners may have only limited trust in
15 of 16one another, a coalition support system must provide both [3] B. Ban. Design and implementation of a reliable group
the means for careful control of coalition partners’ access communication toolkit for Java.
to local resources and the ability to dynamically change http://www.cs.cornell.edu/home/bba/papers.html.
those controls as trust relationships evolve. In addition,
[4] R. Balzer and N. Goldman. Mediating connectors. In
the need to share current application resources required
Proceedings of the 19th IEEE International Conference on
that our system solutions be transparent to applications
Distributed Computing Systems Workshop (ICDCS ’99), pages
and based on commercially available operating systems
73-77, Austin, TX, May 1999.
and open networks.
To meet coalition requirements for a collaborative [5] L. Badger, D. Sterne, D. Sherman, K. Walker, and S.
computing environment, we designed and implemented a Haghighat. Practical domain and type enforcement for UNIX.
prototype security infrastructure. The prototype In Proceedings of the 1995 IEEE Symposium on Security and
addressed the problem of limited trust relationships by Privacy, pages 66-77, Oakland, CA, May 1995.
providing significant resource access policy definition and
[6] L. Gong. Enclaves: Enabling secure collaboration over the
enforcement autonomy to individual member enclaves.
Internet. In Proceedings of the Sixth USENIX Unix and
To support the changing nature of a collaborative
Network Security Symposium, pages 149-159, San Jose, CA,
arrangement, we provided a dynamic policy update
July 1996.
mechanism.
The SVE infrastructure allows multiple organizations [7] M. Hayden. The Ensemble System. Ph.D. dissertation.
to share their distributed application resources, while Cornell University, Ithica, New York. Available as technical
retaining organizational autonomy over local resources. report TR98-1662, 1998.
While we demonstrated an approach to fine-grained
[8] C. Lai, L. Gong, L. Koved, A. Nadalin, and R. Schemers.
access control for secure collaborative computing, we also
User authentication and authorization in the Java platform. To
identified significant problems that remain to be solved,
appear in Proceedings of the 15th Annual Computer Security
particularly in the area of policy development, before such
Applications Conference, Phoenix, AZ, December 1999.
collaboration will be convenient. The SVE infrastructure
offers a platform and conceptual basis for further [9] G. Lamperillo. Architecture and concepts of the MPOG.
exploration of these problems and experimentation with Technical Report NAI #0768, NAI Labs at Network Associates,
new solutions. Inc., June 1999.
Acknowledgements [10] M. Pietrek. Learn system-level win 32 coding Techniques
by writing an API spy program. In Microsoft Systems Journal,
vol. 9, no. 12, pages 17-44, 1994.
We would like to thank David Chieu for his patience
and persistence in implementing the DCOM and [11] M. Reiter. Secure agreement protocols: Reliable and
Microsoft IIS interceptors. Yongjian Wang produced the atomic group multicast in Rampart. In Proceedings of the
first versions of our administrative GUIs, giving us a Second ACM Conference on Computer and Communication
better understanding of SVE administrative issues. Debbie Security, pages 68-80, Fairfax VA, November 1994.
Sturdevant produced several of the diagrams for this
[12] P. Rosenzweig, M. Kadansky, and S. Hanna. The Java
paper. Bob Rice and Dennis Hollingworth reviewed drafts
reliable multicast service: a reliable multicast library. Technical
of the paper, and their suggestions have helped us improve
Report #TR-98-68, Sun Microsystems, Inc., September 1998.
the presentation. This work was supported under DARPA
contract #F30602-97-C-0269.
[13] E. J. Sebes and T. C. Vickers Benzel. Sigma: Security for
distributed object interoperability between trusted and untrusted
References systems. In Proceedings of the 12th Computer Security
Applications Conference (ACSAC ’96), pages 158-168, San
Diego, CA, December 1996.
[1] Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: A
communication sub-system for high availability. In Proceedings
[14] D. Sterne, G. Tally, D. McDonnell, P. Pasturel, D. Sames,
of the 22nd International Symposium on Fault-Tolerant
D. Sherman, and E.J. Sebes. Scalable access control for
Computing, pages 76-84, July 1992. distributed object systems. In Proceedings of the 8th USENIX
Security Symposium, August 1999.
[2] D. M. Balenson, D. K. Branstad, P. Dinsmore, M. Heyman,
and C. Scace. Dynamic cryptographic context management
[15] P. Srisuresh and L. A. Sanchez. Policy framework for IP
(DCCM) report 3: Cryptographic context negotiation protocol.
security. Internet Draft draft-ietf-ipsec-policy-framework-
Technical Report TISR #0757, TIS Labs at Network Associates,
00.txt, February 1999.
Inc., February 1999.
16 of 16