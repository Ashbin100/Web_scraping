Building Adaptive and Agile Applications Using Intrusion Detection and
Response (cid:0)
JosephP. Loyall,ParthaP. Pal, RichardE. Schantz
BBN Technologies
10 MoultonStreet
Cambridge, MA02138
(cid:1) jloyall,ppal, rschantz
(cid:2)
FranklinWebber
410West GreenStreet,#1
Ithaca,NY
Franklin.Webber@computer.org
@bbn.com
Abstract
TraditionalIntrusionDetectionSystems(IDSs)mostly
workoff-line,withoutanydirectruntimeinteractionor
coordinationwiththeapplications(andwithotherIDSs)
that they aim to protect. Including intrusion detection
and response in the repertoire of an adaptive applica-
tion extends its range of adaptivity and increases its
chancesforsurvival. Inthispaperweshowhowintru-
siondetection andresponse can beusedto buildagile,
intrusion-awareapplicationsundertheQualityObjects
(QuO)adaptivedistributedmiddlewareframework.
1. Introduction
Most current intrusion detection research focuses on
detectingandrecoveringfromintrusionsonhostsornet-
works,ratherthansurvivabilityoftheapplicationsrun-
ning on them. There has recently been effortto enable
intrusiondetectionsystems (IDSs)to interoperate[23],
but for the most part, current IDSs work in isolation
from other IDSs, the applications that theyare protect-
ing, and thesecurity managerswhosepoliciestheycan
influence.
We have developed a framework, Quality Objects
(QuO),for buildingapplicationsthat areawareoftheir
environment and can adapt to changes in it. QuO ap-
plicationscanspecifytheirnon-functionalrequirements
(e.g., security, performance, or dependability require-
ments), measure what is being provided, access inter-
faces for controlling the desired level of service, and
adapttochangesinlevelsofservice.Whilethisresearch
wasoriginallyperformedintheareasofnetworkquality
ofserviceandopenimplementation,wehavealsobeen
applying it to the areas of survivable applications and
(cid:3)
security.
UsingtheQuOframework,wesupportthefollowing
desirablesystemlevelbehaviorstoimprovethesurviv-
abilityofapplications:
ThisworkissponsoredbyDARPAundercontractsno. F30602-
97-C-0276andF30602-98-C-0187.
(cid:4)
The development of intrusion- and security-aware
applications. These applications can aid IDSs
andsecuritymanagers,byrecognizingapplication-
level patterns of usage that might indicate intru-
sions or security breaches. QuO includes support
forinsertingprobesthroughoutanapplication’sim-
plementation for measuring the level of service
provided. These probes can also gather informa-
tion useful to IDSs and security systems, both for
recognizing intrusions and for gathering informa-
tionabouttheircausesandsources.
(cid:4)
Thedevelopmentofsurvivableapplications.These
applications can adapt to changing conditions in
their environment, including reported intrusions
andchangesinsecuritypolicies.Thisenablesthem
toavoidpotentialintrusions,continueinthefaceof
degradedservice, and recoverfrom intrusions and
faults.
(cid:4)
IntegrationandinterfacingofmultipleIDSsatthe
applicationlevel.WhilemanyIDSsaregoodatde-
tectingcertaintypesofintrusions,a1998DARPA
ISOevaluationshowedthat multipleIDSscovera
larger space of potential intrusions [5]. However,
mostIDSsarenotdesignedtoworkinconjunction
with others. An application built within the QuO
framework can interface to multiple mechanisms
andmanagers,includingmultipleIDSs. QuOpro-
videsacapability,calledsystemconditionobjects,
for providing a common interface to mechanisms
and managers that have proprietary interfaces. In
thismanner,QuOapplicationscanaccessinforma-
tionfrommultiple IDSsthatdetectdifferenttypes
ofintrusions. Letusemphasizethattheideaofin-
1terfacing uniformly with multiple IDSs at the ap-
plicationlevelisnottocomeupwithabetterIDS,
rathertoincreasethecoverageandsecurityofthe
application. This is complementary to the Com-
monIntrusionDetectionFramework(CIDF)effort
[23],whichisdevelopingaframeworkforIDS-to-
IDS communication with anaim to perfect the art
ofintrusiondetection. CIDFdoesnotprovideany
supportforapplication-IDScooperation.
(cid:4)
a local object. The method call is handled by a local
stub,orproxy,whichmarshalsthedatafordeliverytoa
localObjectRequestBroker(ORB).TheORBsendsthe
methodcallacrossthenetworkusinganInter-ORBPro-
tocol,suchastheInternetInter-ORBProtocol(IIOP),to
anORB localtotheservantobject. ThatORBdelivers
themethodcalltoaskeleton,whichunmarshalsthedata
anddeliversthemethodcalltotheobject’simplementa-
tion. Uponcompletionofthemethod’sprocessing,any
returnvalues aredeliveredback to theclient by the re-
Integration of IDSs and other resource managers.
verseprocess.
IDSs and other managers, such as security pol-
icy managers or dependability managers, perform
complementary activities and could cooperate to
providehigherlevelsofservice. Forexample,ase-
curitypolicymanagercoulduseintrusiondetection
informationprovidedbyanIDStodynamicallyde-
termine whether to move to a stricter level of ac-
cesscontrol. Likewise,anIDScoulduseinforma-
tion from a fault detection or dependability man-
ager to determine where and what type of intru-
sionstolookfor. QuOprovidessupportforbuild-
ingapplicationsthataccessmanagersinmanydif-
ferent complementary dimensions (e.g., security,
intrusion detection, and dependability) to achieve
higherlevelsofserviceandadaptability.
This paper describes the QuO framework and our
initial experiments in building adaptive, agile, surviv-
able applications using it. We describe our experi- Figure 1. The CORBA Distributed Object
encestodateinintegratingIDSs,securitymanagers,and Model
othermechanismsandmanagers. Section2providesan
overview of the QuO framework. Section 3 describes
DOCmiddlewareeffectivelyhidesmanyofthecom-
the integration of an IDS into adaptive QuO applica-
plexitiesof distributedcomputing suchas remote loca-
tions. Section 4 describes the integration of a depend-
tion interoperability, heterogeneity, common services,
ability manager into the framework for the purpose of
andsynchronization,exposingonlythefunctionalinter-
intrusiondetectionandrecovery.Section5describesthe
faces of components. However, there are increasingly
integration of a security manager into the QuO frame-
moredistributed applicationsthat must controlorreact
work. Section6describesexperiencetodatefromthese
tohowservicesaredelivered,notjustwhatservicesare
researchandintegrationefforts. Section7describesre-
delivered. Applications such as national security, mili-
latedresearchprojects. Finally,Section8presentssome
tary,healthcare,medical,multimedia,andfinancialsys-
concludingremarksandfutureplannedactivities.
tems often have critical requirements, such as security,
dependability,andrealtimeperformance. DOCmiddle-
2. Overviewof QuO
ware falls short in providing support for these require-
Thedistributedobjectcomputing(DOC)paradigmis ments (as does all other forms of middleware)because
themostadvanced,mature,flexiblecontextavailableto- it hides the details necessary to specify, measure, and
day for the development of large-scale, network-based control quality of service (QoS) and does not provide
systems. In DOC, software is broken up into collec- support for building systems that can adapt to changes
tions of objects dispersed throughout the network, and that affect QoS. Because of this, developers of critical
client objects invoke operations on servant objects to applicationsoftenfindthemselvesprogrammingaround
accomplishtheinteractionsandfunctionalityneededto the distributed object infrastructure, effectivelygaining
achievethegoalsofarunningapplication. TheCORBA little or no advantage from the middleware. The prob-
DOCmodel[18]isillustratedinFigure1. Aclientob- lemgetsworsewhenanapplicationisdistributedovera
jectinvokesamethodcallonaremoteobjectasifitwere WAN,whichisinherentlymoredynamic,unpredictable,
2andunreliablethanaLAN.
Figure 2. The QuO Remote Method Call
Model
We have developed Quality Objects (QuO), a DOC
framework for developing distributed applications that
canspecifytheirQoSrequirements,thesystemelements
that need to be monitored and controlled to measure
andprovideQoS,andbehaviorforadaptingtochanges
in QoS. In this way, QuO opens up distributed ob-
jectimplementations[10],providingcontrolofboththe
functionalaspectsofaprogramanditsimplementation
strategies,whichareoftenhiddenbehindthefunctional
interfaces.QuOprovidesthecapabilitiesfordeveloping
DOCapplicationsthatcandothefollowinginaddition
totheirfunctionalbehavior:
(cid:4) Specify operating regions and service require-
ments.Thiscanincludespecifyingthelevelsofde-
siredsecurityorintrusionawareness(whichmight
changedynamicallybaseduponchangesintheen-
vironment), operating modes, normal and abnor-
mal operating regions, and known attack signa-
tures.
(cid:4)
Measure environmental and system conditions.
Theapplicationcaninsertandutilizeprobesinthe
system in order to measure resources, characteris-
tics,andbehavior.Theapplicationcanalsoreceive
information from IDSs, security policy managers,
andotherpropertymanagers.
(cid:4)
elsofserviceandtonotifyofeventsthatmightin-
dicate intrusions or other problems. The applica-
tion can also access system resource management
controlinterfacestoachieveitsdesiredlevelofser-
vice.
Access to control interfaces. The application can
pass information to IDSs, security policy man-
agers, andotherpropertymanagerstorequestlev-
(cid:4)
Adapt and reconfigure. The system can adapt
to changing conditions at all levels, coordinated
throughtheQuOmiddleware. Forexample, inre-
sponse to an intrusion alert from an IDS, a secu-
rity policy manager might respond by tightening
its access control. Meanwhile, the QuO middle-
ware can reconfigure so that the application is us-
ing servant objects only on trusted hosts. If this
causes overloading of the trusted hosts, the appli-
cationcanadaptbychangingtoamodeinwhichit
isonlyperformingcriticaloperationsorisaccept-
ingthedegradedperformance.
The QuO functional path, illustrated in Figure 2, is
a superset of the CORBA functional path illustrated in
Figure1.
Theoperatingregionsandservicerequirementsofthe
applicationareencodedincontracts,whichdescribethe
possiblestatesthesystemmightbeinandactionstotake
whenthestatechanges.
QuOinsertsdelegatesintheCORBAfunctionalpath.
The delegates project the same interfaces as the stub
(client-side delegate) and the skeleton (server-side del-
egate), butsupportadaptivebehavioruponmethodcall
andreturn. Thatis, thedelegatechecks thestateofthe
system,asrecordedbyasetofcontracts,andchoosesa
behaviorbaseduponit.
Systemconditionobjectsprovideinterfacestosystem
resources,mechanisms,andmanagers. Theyareusedto
measurethestatesofparticularresources,mechanisms,
ormanagersthatarerelevanttocontractsinthesystem
andtopass informationtocontrolinterfacesto achieve
thelevelsofdesiredservices. Systemconditionobjects
providetheabilitytoaccessdifferentIDSorsecurityin-
terfacesinaconsistentmanner. Theyalsoplayarolein
translating between application-levelconcepts, such as
critical operating modes, to resource and mechanism-
level concepts, such as encryption methods or access
descriptions. Higher-levelsystemconditionobjectscan
interfacetoother,lower-levelsystemconditionobjects,
formingatreeofsystemconditionobjectsthattranslate
mechanismdataintoapplicationdata.
QuO provides a suite of Quality Description Lan-
guages (QDL), similar to CORBA’s Interface Descrip-
tion Language (IDL), and code generators, similar to
the stub and skeleton generators of IDL compilers, for
describing and generating the components of QuO ap-
plications [13], [14]. In addition, QuO providesa run-
3time kernel, which coordinates contract evaluation and simplecustomdevelopedIDS,andapplication-specified
provides other runtime QuO services [26]. QuO also intrusiondetectionareallintegratedtoprovideintrusion
providesanextensivelibraryofinstrumentationprobes, awareness and adaptive behavior in response to intru-
as well as the support to insert them throughout the siondetectionattheapplication level. Thisapplication
remote method invocation path, for gathering perfor- isfairlysimple,butillustratesanumberofimportantca-
mance,statistic,andvalidationinformation. pabilities,includingthefollowing:
Figure3.TheQuOGateway
QuO also provides a general object gateway com-
ponent, which supports interfacing to below-the-ORB
mechanisms and special-purpose transports, as well as
providing a lower level point for object level decision
making. Theobjectgateway,illustratedinFigure3and
described in more detail in [20], intercepts IIOP mes-
sagesfromtheclientsideORBanddeliversIIOPmes-
sages totheserverside ORB(on themessagesend; on
themessagereturntheprocessisreversed). Inthemid-
dle,ittranslatestheIIOPintothespecialpurposetrans-
port protocol (e.g., group multicast in a replicated, de-
pendablesystem)orperformsappropriateadaptationor
control(e.g.,inanaccesscontrolsystem,authenticating
thesenderandverifyingaccessrightstothedestination
object).
3. Integrationof IDSwithQuO
ByintegratingIDSswithQuOweaddintrusiondetec-
tionandresponsetotherepertoireofQuOapplications’
adaptivity. Asaresult,agilityandsurvivabilityofQuO
applications are enhanced. In this section, we describe
anexperimentdemonstratinghowacommercialIDS,a
(cid:4)
Integration of commercial and non-commercial
IDSsusingtheQuOframework.
(cid:4)
An application seamlessly interfacing to multiple
IDSs, enabling the IDSs to cooperate through the
application layer and increasing intrusion cover-
age.
(cid:4)
Anapplicationparticipatingintheintrusiondetec-
tionprocess,byrecognizingconditionsthatcanin-
dicate intrusions but that are not detected by the
IDSs.
(cid:4)
Anapplication adapting to survivepotentialintru-
sions,triggeredbyoutputsoftheIDSs.
Incontrast, theapplicationcanuse theIDSsasmecha-
nisms to turn on, turn off, or change the level of intru-
sion detection provided based upon its operating mode
andsecurityneeds.
3.1. Overview of the Experimental Survivable
Application
Wedevelopedanexampleapplicationtodemonstrate
IDS integration with QuO. This experimental applica-
tion implements a simple inventory with a fixed set of
inventory items, as illustrated in Figure 4. The inven-
tory data is stored as files in a designated data direc-
tory. Two servers manage the inventory: one more se-
cure than the other. The client program, representing
the inventory control system, provides a user interface
through which users can identify themselves (i.e., log
in),addorconsumeitemsintheinventory,andlogout.
Both servers can respond to requests from the clients,
but the more secure one authenticates (using a simple
authentication scheme) each request and grants access
only to certain clients. This is an example of the alter-
nativebehaviorsthattheQuOmiddlewareisintendedto
mediate.Innormalmode,allclientrequestsareserviced
by the non-authenticating (and therefore faster) server.
As conditions indicate that intrusions are more likely,
theinventorycontrolsystemadaptstousetheauthenti-
catingserverandthen,eventually,maycutoffallaccess
tonon-privilegedusers. Theclientandserverprograms
are simple CORBA objects. No intrusion detection or
adaptationisprogrammedintothem. Forthisexample,
all adaptation is built into the QuO middleware layer.
We utilize three intrusion detection instruments in this
example:
4Figure 4. Storage and Runtime View of the
InventoryApplication
(cid:4)
Tripwire, a commercial file system integrity
checker[11];
(cid:4)
FileCounter,asimple,customdevelopeddirectory
accesschecker;and
(cid:4)
projectsavalueindicatingtotheQuOcontractindicat-
ingwhetheradatafilehasbeenlostoradded.
Deviation from normal operating behavior often
points toward potential problems. For instance, if a
server returns a value that does not make any sense in
the current context, the client may become suspicious
that the server has been compromised. Similarly, if it
takes an abnormal amount of time to fulfill a request
to the inventory server, the client may become suspi-
cious that there is a problem in the network, a host, or
in the server. It is straightforwardto encode such nor-
mal operating ranges in QuO’s contract regions and to
specify adaptive behavior to trigger when the applica-
tion falls outside normal ranges. In this example, we
use the contract and a simple system condition object
(called TimeTaken) to measure the average round trip
timeofmethodcallsand watchwhetheritfallsoutside
of the expected range. As we stated earlier, there may
be a variety of causes of this abnormal behavior, only
someofwhicharetheresultofintrusions. Determining
the actual cause falls somewhere between system trou-
bleshootingandintrusiondetection.
3.2.BasicIntegrationArchitecture
The example application includes the three system
condition objects described in Section 3.1: IDSValue,
FileAddedOrDeleted, and TimeTaken. IDSValue, il-
lustrated in Figure 5, provides the QuO interface to
Tripwire. Tripwire can be initialized to monitor spe-
Specifications, encoded into the QuO contract re-
gions, indicating the expected round trip response cific sections of a file system for particular attributes,
time range and recognizing when client requests such as permissions or modification times, of the files
are being abnormally delayed (possibly because and directories in that section. Tripwire computes a
they are being intercepted, or because of host or database upon initialization. Atruntime, it recomputes
networkattacks). Notethatsuchadelay,byitself, the database, compares the newly computed database
is not a good indicator for an intrusion: a benign againstthe initial one, and presents a result set that in-
network congestion could cause a false positive. dicateswhatoccurredinthefilesystemsectionbetween
This merely serves as an example of an indicator theruns.
ofpotentialproblemsforanintrusionawareappli- Inourexample,wewrapTripwirewithaCORBAob-
cation. ject interface that runs Tripwire periodically and ana-
lyzesitsoutput. Ifthereisanychangeinthefilesystem
We use Tripwire to monitor the file system section sectionthisCORBAobjectreturnsavalue1,otherwise
that stores the source and executable code of this ap- itprojectsavalue0.TheIDSValuesystemconditionob-
plicationandFileCountertomonitorthedatadirectory. jectishookedtothisCORBAobject. Oneofitsthreads
WeusesystemconditionobjectstointerfacetoTripwire pollsTripwire’sCORBAwrappertogetthelatestvalue.
and FileCounter, each of which normally provides its The other thread responds to requests from QuO con-
own custom interface. These system condition objects tractsforthelatestvalue.
projectvaluesfromtheIDSstotheQuOlayerandpro- Ofcourse,iftheIDSsystemwereaCORBAobjectal-
vide common access to the control interfaces provided ready,thennoCORBAwrapperisnecessary. Theother
bytheIDSs. Tripwire’ssystemconditionobject(called IDS component is a CORBA object that monitors files
IDSValue) projects a value to the QuO contract indi- in a directory. FileCounter produces a value 1 if a file
cating whether the integrity of the code store has been is added or deleted in that directory, 0 otherwise. We
violated (in Tripwire’s view). Similarly, FileCounter’s have used this as a simple custom developed IDS and
system condition object (called FileAddedOrDeleted) integrateditwithQuOalongwithTripwire, inorderto
5Figure5. Interfacinga System Condition Ob-
jectwithaCOTSIDS
experimentwithmultipleIDSinputs.
TheQuOcontractusedinthisexampledefinesthefol-
lowing operating regions, each defined in terms of the
systemconditionobjectsdescribedabove:
(cid:4)
NORMAL :
(cid:5)(cid:7) (cid:6)(cid:9) (cid:8)(cid:11) (cid:10)(cid:13) (cid:12)(cid:14) (cid:6)(cid:16) (cid:15)(cid:18) (cid:17)(cid:18) (cid:12)(cid:14) (cid:19) (cid:20) (cid:21)(cid:23) (cid:22)(cid:24) (cid:22)(cid:24) (cid:10)(cid:26) (cid:25)(cid:28) (cid:27)
and
(cid:5)(cid:30) (cid:29) (cid:31)" !$ #% (cid:15)’ &) (* (cid:12)% +, (cid:22) (cid:27)
and
(cid:4)
(cid:22)2 (cid:27)
(cid:5)(cid:7) -. (cid:8)/ &(cid:7) (cid:12)(cid:28) 0(cid:16) 12 12 (cid:12)(cid:14) 1’ 35 46 (cid:31)7 (cid:12)(cid:28) &(cid:7) (cid:12)(cid:14) 89 (cid:12)(cid:28) 1" +
TIME SUSPECT :
(cid:21)(cid:24) (cid:22)(cid:24) (cid:22)(cid:23) (cid:10)= (cid:25)(cid:28) (cid:27)
(cid:5)) (cid:6)(cid:16) (cid:8): (cid:10)(cid:26) (cid:12)(cid:14) (cid:6)(cid:16) (cid:15)(cid:18) (cid:17)(cid:18) (cid:12)(cid:14) (cid:19) ;< +
and
(cid:5)(cid:30) (cid:29) (cid:31)" !$ #% (cid:15)’ &) (* (cid:12)6 !? > + (cid:22)2 (cid:27)
and
(cid:4)
(cid:5)(cid:30) -. (cid:8)(cid:11) &(cid:30) (cid:12)(cid:28) 0(cid:16) 12 1 (cid:12)(cid:28) 1’ 35 4(cid:28) (cid:31)" (cid:12)(cid:14) &(cid:30) (cid:12)(cid:14) 89 (cid:12)(cid:14) 1@ +A (cid:22) (cid:27)
ACCESS SUSPECT :
(cid:5)(cid:30) (cid:29) (cid:31)" !$ #% (cid:15)’ &) (* (cid:12)6 !? >B +D C(cid:14) (cid:27)
xor
(cid:4)
(cid:5)(cid:30) -. (cid:8)(cid:11) &(cid:30) (cid:12)(cid:28) 0(cid:16) 12 1 (cid:12)(cid:28) 1’ 35 4(cid:28) (cid:31)" (cid:12)(cid:14) &(cid:30) (cid:12)(cid:14) 89 (cid:12)(cid:14) 1@ +, C(cid:14) (cid:27)
INTRUSIONLIKELY:
(cid:5)(cid:7) (cid:29)2 (cid:31)" !? #% (cid:15)’ &(cid:7) (E (cid:12)6 !? >F +G C(cid:14) (cid:27)
and
(cid:5)(cid:30) -. (cid:8)(cid:11) &(cid:30) (cid:12)(cid:28) 0(cid:16) 12 1 (cid:12)(cid:28) 1’ 35 4(cid:28) (cid:31)" (cid:12)(cid:14) &(cid:30) (cid:12)(cid:14) 89 (cid:12)(cid:14) 1@ +, C(cid:14) (cid:27)
Theapplication adaptsitsbehaviorbasedonthecur-
rentregionasfollows:
(cid:4)
NORMALregion: clientrequestsareforwardedto
thenon-authenticatingserver.
(cid:4) TIME SUSPECT region: A warning message is
displayed to the user notifying of the unusual de-
lay and urgingcaution in using the inventorysys-
tem. Theclient’srequestsarestillforwardedtothe
non-authenticatingserver.
(cid:4)
maynotbegranted. Clients’requestsarenowfor-
warded to the authenticating server, which grants
accessonlytoprivilegedusers.
ACCESS SUSPECT region: A warning message
is displayed to the user stating that a potential ac-
cessviolationisdetectedandthatrequestsmayor
(cid:4)
INTRUSIONLIKELYregion:Awarningmessage
isdisplayedstatingthatitishighlylikelythatthere
wasanintrusionthatcouldhavecompromisedthe
codeanddatastoreoftheapplication,andallclient
requests are returned without making any remote
call. This implies that only some inventory oper-
ations (i.e. that could be handled locally, for ex-
ampleaqueryaboutaninventoryitemcouldbean-
swered,withsomedegreeofaccuracy,basedonthe
valuelastseen)areavailableatthisregion.Onecan
extend the range of available operations by using
varioustechnologiessuchasobjectcaching[27]or
maintainingalocalreplicaoftheinventoryserver.
Figure 6. Intrusion Aware Inventory Applica-
tionandItsRuntimeBehavior
Inaddition,ifatanytimethereturnvalueisnegative
(undernormalcircumstances,theservershouldneverre-
turn a negativevalue) that value is reported to the user
and the contract region is switched to ACCESS SUS-
PECT. All of these adaptive behaviors are specified in
QuO’sspecificationlanguages. Figure6presentsapic-
torialrepresentationofthefullIDSawareinventoryap-
plicationaftertheQuO-IDSintegration.
64. Integration of QuO and Other Property
Managers
Therearenumeroustoolsandmechanisms,whichwe
generically refer to as property managers, that man-
age low level system resources. These property man-
agers provide the capabilities that QuO applications
mustmeasureandcontrolinordertoachieveandadapt
to levels of service in the system. For example, we
have developed a bandwidth management system that
usesRSVPtoreservenetworkbandwidth,providingim-
provednetwork response for the application [1]. Simi-
larly, we have built an availability example around the
Proteus dependability management system [3], which
usesgroupcommunication,replication,andfaultrecov-
eryto providehigher levelsofavailability to theappli-
cation. Theseintegratedpropertymanagerscanbeused
todevelopadaptable,survivableapplicationsinthefol-
lowingways:
(cid:4)
They can provide information indicating anoma-
lous behavior and its causes. In general, more
precise information means improved adaptive re-
sponse. For example, unusual delay (which we
have used as an indicator of a potential problem)
couldbecausedbythenetwork,byacompromised
object, a crashed object, a compromised host or a
crashedhost.Givenadditionalinformation,theap-
plicationcouldadaptintelligently.
(cid:4)
intrusion-awareapplication,faultmaskingmayhidepo-
tentialcluesforintrusion.
In conjunction with our research, the University of
Illinois has developed a fault notification interface for
Proteus. Using this interface we have developed a
CORBA object, called FaultObserver,that receivesno-
tification from Proteus about faults such as the unsuc-
cessful start of a replica, crash of a replica, and crash
ofahost. Eachnotificationconsistsofasetoffaultin-
formation which can be stored and analyzed to recog-
nizepatternsoffailuresthatmightindicateanintrusion.
ThefollowingaretwoexamplesconditionsthatFaultO-
bservercurrentlyrecognizes:
They could provide the application more adapta-
tionopportunities. Forexample,ifitisthenetwork
thatisthesourceofanabnormaldelay,theQuOap-
plicationcanattempttoreservebandwidth,ifsuch
amanagerisavailable.
We havebegun integratingthe Proteusdependability
manager [19] into the QuO-IDS example described in
Section3,inordertoillustratehowotherpropertyman-
agers working in concert with IDSs and adaptable ap-
plications can produce more flexible, survivable appli-
cations.
The QuO-IDS integration example as described in
Section3,althoughsurvivableinthefaceofsometypes
ofintrusions,ishardlydependable. Ifoneoftheserver
objectsdies,thewholeapplicationdies. UsingthePro-
teus dependability manager, it is possible to make the
application more dependable in the sense that it can
tolerate a certain number and type of faults. Proteus
achieves that by replicating the server objects on mul-
tiplehosts. However,inthecourseofitsfaultrecovery,
Proteus usually hides faults from the application. That
is, when an object crashes, Proteus restarts it and up-
datesitsstate,tomaintainalevelofdependabilitytrans-
parenttotheapplication. Inthecontextofasurvivable,
(cid:4) POTENTIALINTRUSIONOFHOSTx:thisindi-
catesthateitherthehostnamedxcrashedorreplica
startattemptsonthishostwereunsuccessful.
(cid:4)
POTENTIAL COMPROMISE OF OBJECT o:
this indicates that either a replica of object o has
crashed or attempts to start a replica of object o
havebeenunsuccessful.
Figure7.IntegratingProteusintheContextof
IntrusionDetectionandResponse
Figure7showsthreeSystemConditionsthatwehave
hooked up to the FaultObserver object. Each of the
toptwoprojectsthevalueofthePOTENTIALINTRU-
SIONconditionsforoneofthetworeplicationhostsand
the bottom one projects the value of the POTENTIAL
COMPROMISEconditionforaserverobject.
7Letusconsiderasimpleclient-serverapplicationthat
usesProteustoreplicatetheserverandinaddition,also
maintainsanon-replicatedserver. Replicationprovides
the fault tolerance and dependability,whereas the non-
replicatedservermakesitpossiblefortheapplicationto
bypass the replication mechanism if it chooses to. A
contract for this application may include the following
regions predicated on the system condition objects de-
scribedabove:
(cid:4)
HOST SUSPECT: the HOST INTRUDED condi-
tionistrueforoneorbothreplicationhosts.
(cid:4)
SERVER SUSPECT: the OBJECT COMPRO-
MISEDconditionistrueforthenon-authenticating
server.
Theapplication’sadaptivebehaviormayinclude:
(cid:4)
IftheapplicationisintheSERVERSUSPECTre-
gion, the client’srequestswillberedirected to the
differentnon-replicatedserverobject.
(cid:4)
5.1.Object-OrientedDomainTypeEnforcement
(OO-DTE)
OO-DTE [24] is an object-oriented, policy-driven
mechanismforfine-grainedaccesscontrolindistributed
systems. Itispolicy-drivenbecauseitbasesaccesscon-
trol decisions on a single, explicit, written policy gov-
erninganentiredistributedapplication. Theapplication
developer describes the access controls once, and OO-
DTEenforcesthesecontrolsconsistentlyatalllocations
where the application runs. This approach eliminates
theneed fora developerto setoperatingsystem access
controlsmanuallyoneveryhost.
OO-DTEisobject-orientedbecauseitcontrolsaccess
in terms of objects and the clients that use them. It
is fine-grained because it allows control over access to
each object and each object method individually. The
protection it offers is therefore more flexible than that
offeredbyfirewalls,forexample.
OO-DTEdoesnotassumethatanapplication’scom-
ponents are all trusted to the same degree. Instead,
each client and object must authenticate each other us-
If the application is in HOST SUSPECT region,
ingcryptographicmeans(currentlySSL[16]).
Proteus will be asked not to place replicas in the
intrudedhost(s). 5.2.ProtectingQuOApplications
In addition to the notification of crash faults, which QuO applications use the OO-DTE mechanisms di-
Proteus currently provides, the University of Illinois is rectly for protection. The developer writes a security
alsoworkingonprovidingnotificationforothertypesof policy that controls both the access of users to the ap-
faults,suchastimingandvaluefaults,thatcouldprove plicationand accessofapplication componentsto each
usefulforasurvivableapplication. other. The security policy refers to methods declared
inCORBA IDL,and in this way, itis likeQuO’sother
5. Integrationof QuOand Security specificationlanguages. Thesecuritypolicymustcover
all of the interfaces used in the application, including
The survival of a QuO application depends on more
thoseusedbyQuOcallbacksandbyQuOdelegatesfor
than just QuO. Attacks on QuO’s environment, includ-
adaptivebehaviors.
ing operating systems, networks, and the CORBA im-
plementation, all have the potential to completely dis-
5.3.ProtectingQuOInfrastructure
able QuO and any application it supports. We assume
thattheenvironmenthassomeresistancetosuchattacks. TheQuOinfrastructure, consistingofQoScontracts,
We do not assume, however, that the environment of- systemconditionobjects,andakernel,isbuiltfromthe
fersuncircumventablesecurity,becausesuchsecurityis same CORBA mechanisms as QuO applications. Just
not commonly available. We rely on the environment asapplicationclientsuseCORBAtoinvokemethodson
to slow down attackers and make their attacks visible application objects, so QuO delegates use CORBA to
to IDSs. QuO applications can then respond to many invokemethodsforaccessingsystemconditionobjects,
attacks by adapting and reconfiguring, as described in for initializing contracts, and for causing the kernel to
previoussections. evaluatecontracts.
ToenhancethedefensesofaQuOapplicationwealso The QuO infrastructure is therefore subject to the
offer access control. The application designer can use same kinds of attack as is every application. For ex-
access control at the CORBA level to ensure that only ample, a malicious program could try to trigger QuO’s
authorizedusersandprogramsmayinvoketheapplica- adaptation mechanisms at the wrong time by changing
tion and that unauthorized interference with the appli- thevalueofasystemcondition,ortodisableQuOalto-
cation’sinternalmechanismsisnotpossible. QuOinte- getherbychangingQoScontracts. WeprotecttheQuO
gratesaccesscontroltechnology,intheformofNetwork infrastructure using OO-DTE access control just as for
Associates’OO-DTE,forthispurpose. applications. TheQuOinfrastructurecode mustusean
8ORB or ORBs with OO-DTE enabled (in fact, if this trolrunsinadelegateintheclient’saddressspace,and
were not so, OO-DTE would not work because the in- thereforemaybecircumventediftheclientismalicious.
frastructureandthedelegatescouldnotestablishmutual
authentication)andthesecuritypolicymustdescribeac- 6. Experience to Date
cesscontrolforinfrastructuremethods.Thepolicymust
Although this paper reports on work in progress, we
prohibitthedelegatesfromdamagingtheinfrastructure
havetothispointdevelopedsomeexperienceaboutthe
butstillgivethemtheaccesstheyneedforadaptation.
nature of application assisted intrusion detection, and
TheneedtoprotecttheQuOinfrastructurehasimpli-
thefeasibilityoftheapproachtosurvivabilitywhichin-
cations for the design of QuO. We assume that threats
tegratestogetheranumberofmorelocalizedprotection
to QuO come from application software and not from
andsecuritymechanismstoachievemoreeffectivecov-
code within the QuO infrastructure we supply. Then
erage. In this section we discuss four of these areas:
QuO must not allow application software to run in the
usingmultiplecomplementaryIDSs,integratingoffthe
same process address space as the QuO infrastructure.
shelf IDSs, integrating security property management,
OO-DTE cannot protect QuO from malicious code in
and application strategies that can complement infras-
the same address space because that code may bypass
tructurebaseddetectionandprotectionmechanisms.
CORBA altogether and directly access QuO code and
data structures. So the infrastructure we supply with 6.1. Multiple, Complementary IDSs and Man-
theQuOdistributioncanbeconsideredpartofatrusted agers
computingbase (TCB) [4] and alluntrustedextensions
It has been shown from an experiment conducted by
to that infrastructure and applications are outside this
MITLincolnLaboratoryfor DARPA thatmultipleIDS
TCBandmustruninotheraddressspaces.Forexample,
systemscanbemoreeffectiveinidentifyingrealattacks.
theQuOkernelcannotberunsecurelyinthesamepro-
MITLLevaluatedanumberofIDSs,testingthemona
cessasanapplicationclient,eventhoughtodosowould
number of different types of attacks, and scoring each
enhanceperformance.
according to the number of attacks that it detected and
5.4.DynamicAccessControl the number of false alarms it raised. The results indi-
cated that while none of the IDSs overwhelmingly de-
Access control, just like other QoS properties man- tected most of the attacks, the (hypothetical) combina-
agedbyQuO,mayneed tobechangedat runtime. For tionofthebestdetectorsforeachattackresultedinmore
example,ifanIDSnotifiesQuOofapossibleintrusion, than two orders of magnitude reduction in false alarm
itmaybedesirabletogointoanalertmodethatallows rateswhileimprovingdetectionaccuracyovercommer-
the intruder to be more easily identified. Nonessential cial and Governmentkeyword-basedsystems [5]. This
processes may be stopped, access controls tightened, providesthemotivationforamodelwheretherearemul-
andotherQoSattributessettopreestablishedvalues. In tiple IDSs operating concurrently, and the need to or-
this example and others, the security policy is simply ganizeandintegratetheiroperationtoachieveintended
oneaspectofQoS. applicationorientedimprovementsinsurvivability.
There are currently two ways to change access con- Oneofthe strengthsof theQuOframeworkisthat it
trolsdynamicallyinQuO: provides simplified support for interfacing to multiple
managersandmechanisms. Partofourcurrentdevelop-
1. usingOO-DTE’spolicydistributiontools;
mentandexperimentationinvolvesintegratingmultiple
2. usingQuO’sQDLlanguages. managersandmechanisms. Thefirstexamplewedevel-
oped, described in Section 3, combined a commercial
Forthefirstapproach,anewpolicyispushedfroma offthe shelf IDS with a custom developed(butsimpli-
central security policy manager component to all OO- fied) one tailored for the specific need. We are now in
DTE interceptors, which then begin implementing it. the process of developing a demonstration application
Forthesecondapproach,QuO’sspecificationlanguages that uses the Proteus dependability manager in combi-
areusedtospecifyanalternatebehaviorinwhichaccess nation with the Tripwire IDS. This has two potential
tosomemethodisdenied,asillustratedintheadaptable, application survivability benefits. First, fault detection
survivableexampleinSection3. informationcollectedroutinelyaspartofdependability
The approach of changing access controls is prefer- support can be used to aid the intrusion detection sys-
able. It applies globally, whereas the second approach tem,andsecond,thereconfigurabilityofreplicationas-
ispurelylocaltothedelegatesaffectedbythespecifica- setscanbeusedtohelprecoverfromdetectedintrusions.
tion.Thefirstapproachisalsomoretrustworthythanthe Theexamplesthatwehavedeveloped,despitehaving
second, where the code implementing the access con- limited interaction between managers, have delivered
9theexpectedbenefits. Somemanagers,suchasmultiple
IDSs,securitypolicymanagers,anddependabilityman-
agersarecomplementaryandcanproducehigherlevels
ofservicewhenusedtogether.
6.2.IntegratingCOTSIDSs
If the concept of using multiple special purpose IDS
systems in concert is to be viable and extensible, then
weneedtobeabletotakeofftheshelfIDSsystemsand
easilyinsert themintovariousapplicationcontexts. To
test our approach to this type of integration, we used
the example described in section 3. The collection of
intrusiondetectionsystemsavailabletouswaslimited,
largely to those sufficiently mature under development
as part of the DARPA Information Survivability pro-
gram, and those inexpensivelyavailable commercially.
Fromthesewechosetwotoworkwith:Tripwire,acom-
mercially available ID discussed earlier (and success-
fullyintegratedwithourconceptexample),andJAM,an
experimentalIDunderdevelopmentwithintheDARPA
program.
JAM [25] is essentially a classifier system that em-
ployslearningandmeta-learningtechniquestobuildand
refinetheclassifier. JAMhasbeenusedsuccessfullyto
learnintrusionpatternsinsystemtraces[5].
Oneof themajor problemswe encountered in trying
to integrate JAM with QuO is a mismatch of modes of
operation. JAMcurrentlyoperatesinabatchmode. Al-
thoughitispossibletoaskittoclassifyadatasetinan
interactivemanner,thecurrentversiondoesnotprovide
any easy way to do it. Off-line usage provides only a
smallexperimentalfootprinttocomplementthecurrent
runtimeadaptationinQuO,eitherasasourceofinputs
forcontractevaluationorasamechanismtoprovideits
service. BecauseJAMisgearedtowardsstandaloneus-
agewith aGUI and notembeddedusageasenvisioned
inintegratingintoaQuOenvironment,itdidnothavean
appropriateAPIwhichcouldeasilybeusedtointegrate
intoQuO’ssystemconditionconstructs. Additionally,it
turns out to be a complexjob to create the data defini-
tion and data sets that JAM would need in the context
of and training for a new application such as integrat-
ing with QuO. Because of these issues, the experiment
tointegrateJAMasoneoftheIDsystems inouradap-
tiveapplicationcontexthasbeenpostponed,pendingthe
additionofonlineusageinterfacestoJAM.
In general, the issues we encountered in integrating
with Tripwire and in trying to use JAM fall into two
broadcategories:
(cid:4)
choice. The minimal requirement is that it should
be possible to run the IDS from a CORBA object
andcommunicateresultsinandout. Aruntimeser-
viceoraprogrammableAPIsmakethistaskeasier,
but human oriented interfaces have been encapsu-
latedsuccessfullyaswell,mostoftenwithlessflex-
ibility.
Interface Requirements: How does an application
interface with a COTS IDS? The best possibility
wouldbearuntimeserviceprovidedbytheCOTS
IDS.AprogrammableAPIwouldbethenextbest
(cid:4)
Integration Architecture: What is an appropriate
levelofintegration?Wethinkthatthewaywehave
architectedthe integrationby means ofa CORBA
wrapper that acts as a peer of a QuO component
is a general pattern of usage that will be repeated
withotherCOTSsystems. Dependingonthelayer
in which the QuO component operates, the COTS
systemmayprovideinputstocontractevaluationor
mayprovidesomeservice. IftheCOTSsystemis
alreadyaCORBA objectitself, noCORBA wrap-
perwillbeneeded.
6.3.IntegratingSecurityPropertyManagement
BasedonourexperiencethusfarwithusingOO-DTE
inQuO,wecanmakeseveralobservations.
First, we learned that incorporating OO-DTE access
control into QuO was straightforward. Because OO-
DTE is implemented as CORBA interceptors, integrat-
ingitrequiredonlyminimalchangestoQuOcode. Us-
ingOO-DTEsuccessfullywaslargelyamatterofsetting
upthepolicyandcryptographiccertificatescorrectlyfor
eachapplication.
Second,weexpectthatusingOO-DTEwillnolonger
be straightforward in the presence of mechanisms that
supportotherproperties. Forexample:
(cid:4)
Althoughaccesscontrolinthepresenceoffaulttol-
erant replication is conceptually simple (just give
each replica the same access rights), the actual
implementation appears harder. In addition to
handlingapplication-levelinvocations,thereplicas
mustrun some replica coordination protocol. It is
notyetclearwhataccessrightsarerequiredinthis
protocol.
(cid:4)
Using access control in the presence of a realtime
ORB [21] will mean porting the access control
mechanismstoanalternativeORBandensuringin-
teroperabilitybetweenORBs.
Third,buildingsecurity-awareQuOapplicationswill
meanallowingapplicationsto havedirectaccesstothe
security policy to inspect it and possibly to modify it.
Currentlythisaccessisnotpossible. Tomakeitpossible
we must encapsulate the OO-DTE policyin a CORBA
object and define access methods for the policy. Once
10thatisdone,theaccessrightsthemselvesmustbeaccess DTE, and combinations of IDSs in concert to create
controlledaccordingtosomemeta-levelsecuritypolicy. moreintrusion-aware,adaptive,survivableapplications.
6.4. Applications Participating in Intrusion De- 7. Related Work
tection
7.1.OO-DTE
OurworkwiththeQuOframework,variousproperty
managers, and the integration of ID and security has Section 5.1 describes the OO-DTE access control
shown that many of the QoS properties with which an technologythatweareusinginQuO.Otherrelatedtech-
application is concerned are the same QoS properties nologies, however, are also under development at Net-
thatcanindicateanintrusionorattack. Forexample,by workAssociates:
definition denial of service attacks will manifest them-
selvesbyanapplicationlosingsomeserviceuponwhich
it is dependent. Likewise, flooding attacks, attacks on
particular hosts, networks, or processes can manifest
themselves as changes in the system conditions moni-
toredbyQuOapplications.
We illustrated in our example application described
in Section 3 that QuO applications can specify normal
andabnormalpatternsofbehaviorsintheirregionsand
recognizewhenthesystemisoperatingoutsidethesere-
gions. Manyofthese,especiallyifcodedcarefully,can
indicate patterns of attack. Slow service, loss of net-
work resources, abnormal responses by server objects,
etc. can all indicate potential attacks. The application
can aid IDSs by alerting them toward potential intru-
sionsthatshouldbeanalyzedorbyindicatingconditions
inwhichmultipleIDSsshouldbedeployed.
In addition, QuO’s system condition objects and in-
strumentation normally used for bottleneck identifica-
tion and to drive resource management decisions, can
also be used to collect system information over time
that might recognize intrusions that are difficultto rec-
ognizefromsmallwindowsorgroupsofevents,suchas
slowdegradationsinservice. Thisinformationcanfeed
into off-line analysis capability, such as that currently
providedby JAM. One weakness ofanomaly detection
IDSs is that they can be trained by intruders over time
to recognize anomalous behavior as normal. An appli-
cationcouldaidindetectingthesetypesofintrusionsby
collectinginformationindicatingslow,deliberatedegra-
dationsofserviceorchangesinbehaviorpatterns.
Finally, we have also shown, in the example appli-
cation described in Section 4, that other property man-
agersandmechanismscanbeusefulinintrusiondetec-
tion. We have concentrated our initial efforts on using
theProteusdependabilitymanager,whichinnormalus-
age would attempt to mask faults that could indicate
intrusions, to collect information about fault patterns,
as a means of helping recognize intrusions. However,
other mechanisms, such as resource management, re-
altime scheduling, and instrumentation, could also be
focused on the job of intrusion detection. We intend
to continue these experiments, by using Proteus, OO-
(cid:4)
an alternate implementation of OO-DTE that de-
pends ona modified Unixkernel for greater secu-
rityassurance;
(cid:4)
analternateimplementationofOO-DTEthatoffers
coarsergranularityaccesscontrolbutdependsona
firewallforenforcement.
EnhancementstoOO-DTEthatwouldsupportmulticas-
ting are also under consideration. Each of these OO-
DTEtechnologiesofferspossibleimprovementstoQuO
security.
7.2.IntrusionDetectionSystemResearch
Therearenumerousresearcheffortsdevelopingintru-
sion detection systems. Most of these are anomaly de-
tection systems, misuse detection systems, or a combi-
nation of the two. Anomaly detection systems identify
thenormalbehaviorofasystem,oftenthroughtraining,
and detect behavior that deviatesfrom normal. Misuse
detectionsystemsdetectknownpatternsofattack,such
as exploitation of known security holes or recognition
ofvirussignatures. Forexample,Columbia’sJAMisan
agent-based misuse detection system that uses known
patterns of fraudulent use of transaction systems and
modelsofanomalousorerranttransactionbehaviorsto
protectfinancialinformationsystems[25]. MCNC’sJi-
Naoisananomalydetectionsystemthatidentifiesnor-
malprofilesofnetworkroutingandmanagementproto-
cols and monitors the executionof protocols in routers
and switches to recognize deviations from the normal
profile [9]. SRI’s Emerald system is a combination
anomaly and misuse detection system [17]. UC Davis
hasdevelopedaprototypecalledGrIDS[22]thatusesa
graphbasedapproachtodetectanomalousactivitieson
hostcomputersandnetworktrafficbetweenthem.
Most of these IDSs work by examining patterns of
systemcallsornetworktraffic.Inalmosteverycase,the
IDS is working on behalf but completely independent
of the applications, with no interaction or involvement
from the applications. In contrast, we are examining
the ways in which the interaction and cooperation be-
tweenIDSs, applications, and other property managers
11canimproveboththedetectionbytheIDSsandthesur- 8. Conclusions and FurtherWork
vivability of the applications. In a slightly related way
This work is at the intersection of three distinct but
researchersatRSTCorp. areusingapplicationprogram
related themes. First, is the integrated resource man-
behaviorprofilesforintrusiondetection[8].
agement theme, under the organizing paradigm of im-
Computational immunology is a special case of
proved Quality of Service, one dimension of which is
anomaly detection based on an analogy with biologi-
concernedwithsecurityattributes. Thesecondisadapt-
cal immune systems. In this approach, an IDS creates
ableapplicationbehavior,motivatedprominentlybythe
a knowledge of “self” through training, with the intent
changingoperatingenvironmentsandQoSrequirements
of distinguishing that “self” from “other”, i.e., system
frequentlyfoundinmodern,highlyinternetworkeddis-
attackers. Work in this area is being done at the Uni-
tributed applications. Third is the advancement of im-
versity of New Mexico [7] and ORA. The latter have
proved infrastructure for identifying, isolating and re-
developedaCORBAimmunesystemthatdefines“self”
spondingtoinformationattacksleadingtomoresurviv-
intermsofcorrelationsbetweenmethodinvocations.
ableapplications. Wedescribedexperimentalresultsin
7.3.QoS/Quorum concept demonstrations linking these three ideas as a
means of describing the technical concepts underlying
Thereareanumberofothercomplementaryresearch each.
effortsinQoSfordistributedsystems,manybeingper- Our interim conclusions to date are along each of
formed under the auspices of DARPA’s Quorum pro- these threads, and have reinforced the original notions
gram. Similar to the Universityof Illinois’ and BBN’s thatledtothiswork:
work in dependability [3], the Eternal project is exam-
ining the use of replication and group communication 1. Security issues can indeed be developed and con-
in CORBA applications [15]. The DIRM [1] project trolled within a common QoS umbrella, making
created a capability for distributed applications to re- it both more feasible and practical to coordinate
serve network bandwidth in wide-area networks, and security strategyalong withresourcemanagement
adapt during runtime to changing network resource re- strategies for other common attributes such as de-
quirement and availability. The Darwin [2] project pendabilityandrealtimeperformance.
concentrates on network resource management and the
2. Adaptive behavior, along with infrastructure to
QoSME [6] project developed a Quality of Service (in
supportit,isbothfeasibleandpractical,asameans
thenetworkcontext)managementenvironment.Finally,
of providing more user satisfying application be-
the TAO [21] and Time-triggered Method Objects [12]
havior under changing circumstances and require-
projects are examining the realtime aspects of QoS in
ments.
distributedsystems.
3. An environment where applications work in a co-
7.4.CIDF
hesive and complementary way to the infrastruc-
TheCommonIntrusionDetectionFramework(CIDF) turecomponentsthatareservicingthemisbothde-
effort[23],sponsoredbyDARPA,isdevelopingacom- sirableandfeasible,andopensupawidespacefor
mon data format and encoding scheme for communi- tradeoffstudies regarding the most effective com-
cating intrusion event, analysis, and response informa- plementary coverage of multiple objectives and
tion between IDSs and IDS components. CIDF’s ID performanceandcostconstraints.
dataformat,calledGeneralizedIntrusionDetectionOb-
Atamoredetailedtechnicallevel,ourconclusionsin-
jects(GIDOs),canrepresentsystemevents(suchassys-
cludethattheQuOenvironmentcanbeeffectivelyused
tem log entries), the results of event analysis by IDSs
tosupportadaptivesecuritypolicy,interoperationofoff
(such as the recognition of a potential intrusion), and
theshelfIDsystemsforimprovedcoverage,andrecon-
responses to events in a standard format that can be
figurableapplicationbehavior,whichcanleadtoamuch
transported compactly and understood by other CIDF-
moresurvivablesetofapplicationservices.
compliant components. An Internet Engineering Task
Thereareavarietyofnextstepsbeingpursued. Chief
Force (IETF) working group, the IETF Intrusion De-
amongtheseare:
tection Working Group (IDWG), has grown out of the
CIDF effort. CIDF concentrates on the interaction and 1. Trial usage of the experimental middleware and
cooperation between IDS components. Our research is propertymanagersavailablecurrently,torefineand
complementarytothis,byexaminingtheinteractionbe- evaluateboththesoftwareengineeringandperfor-
tween IDSs and applications and IDSs and other prop- mance issues of QuO and the integrated mecha-
ertymanagers. nisms.
122. Enabling thetechnology for developingand pack- [6] P. Florissi. QoSME: Quality of service
aging useful, reusable adaptive behaviors, so that management environment. Internet URL
theymaybeexportedfromoneenvironmenttoan- http://www.cs.columbia.edu/dcc/quosockets/,1998.
other. [7] S.Forrest,S.A.Hofmeyr,andA.Somayaji. Computer
immunology. CommunicationsoftheACM,40(10),Oc-
3. Largerscaleexperimentswithmultiple,morepow- tober1997.
erfulIDsystemsprovidingvaryingdegreesofcom- [8] A. K.Ghosh, A.Schwartzbard, and M.Schatz. Using
program behavior profiles for intrusion detection. In
plementary and overlapping coverage, and the in-
ProceedingsoftheWorkshopontheStateoftheArtand
tegrationwithmorepowerfulandflexibleresponse
FutureDirectionsofIntrusionDetectionandResponse,,
mechanismstocontroladaptivereconfiguration.
February1999.
[9] J. F. Jou, S. F. Wu, F. Gong, W. R. Cleaveland, and
4. Methods for coordinating application level infor-
C. Sargor. Architecture design of a scalable intrusion
mation collection and behavior with system level
detection system for the emerging network infrastruc-
resource management policies and strategies for
ture. Technical report, MCNC,Dep. ofComputer SC.
thevariousQoSdimensionsunderinvestigation.
North CarolinaState University, April 1997. available
fromhttp://www.anr.mcnc.org/JiNao.html.
5. Integratingtheindividualviewpointsofthesystem
[10] G.Kiczales. Beyondtheblackbox: Openimplementa-
components into a more cohesive overall system
tion. IEEESoftware,January1996.
behavior.
[11] G. Kim andE.Spafford. Thedesignand implementa-
tionofTripwire:Afilesystemintegritychecker. InPro-
9. Acknowledgements ceedingsofthe2ndACMConferenceonComputerand
CommunicationsSecurity,1994.
The authors would like to acknowledge the other [12] K. Kim. Realtime object-oriented distributed software
membersoftheQuOteam: JohnZinky,MarkBerman, engineering and TMO. International Journal of Soft-
David Karr, James Megquier, Richard Shapiro, David ware Engineering and Knowledge Engineering, July
Bakken, and Rodrigo Vanegas; members of the Uni- 1999. toappear.
versity of Illinois Proteus and AQuA teams: William [13] J. P.Loyall, D. E.Bakken, R. E.Schantz, J. A. Zinky,
D.Karr,R.Vanegas,andK.R.Anderson. QuOaspect
Sanders, Michele Cukier, and Jennifer Ren; and mem-
languages and their runtime integration. Proceedings
bersoftheOO-DTE developmentteamat NAILabsat
of the Fourth Workshop on Languages, Compilers and
NetworkAssociates:DurwardMcDonell,DavidSames,
RuntimeSystemsforScalableComponents,May1998.
and GreggTally - all of whom contributed to the work
[14] J. P. Loyall, R. E. Schantz, J. A. Zinky, and D. E.
describedinthispaper. Bakken. Specifying and measuring quality of service
in distributed object systems. In Proceedings of The
References 1st IEEE International Symposium on Object-oriented
Real-time distributed Computing (ISORC 98), April
[1] BBN Distributed Systems Research Group, DIRM 1998.
project team. DIRM technical overview. Internet [15] L.Moser, M.Melliar-Smith,andP.Narasimhan. Con-
URL http://www.dist-systems.bbn.com/projects/DIRM, sistentobjectreplicationintheEternalsystem. Theory
1998. andPracticeofObjectSystems,4(2):81–92,1998.
[2] P.Chandra,A.Fisher,C.Kosak,T.S.Ng,P.Steenkiste, [16] Netscape Corporation. Secured
E.Takahasi,andH.Zhang. Darwin: Resourcemanage- socket layer. Internet URL
mentforvalue-addedcustomizablenetworkservice. In http://home.netscape.com/security/techbriefs/ssl.html,
ProceedingsoftheSixthIEEEInternationalConference 1999.
onNetworkProtocols(ICNP’98),Austin,October1998. [17] P. G. Neumann and P. A. Porras. Experience with
[3] M. Cukier, J. Ren, C. Sabnis, D. Henke, J. Pistole, EMERALD to date. In Proceedings of the 1st Usenix
W.Sanders,D.Bakken,M.Berman,D.Karr,andR.E. WorkshoponIntrusionDetectionandNetworkMonitor-
Schantz. AQuA:Anadaptivearchitecturethatprovides ing,April1999.
dependable distributed objects. In Proceedings of the [18] OMG.CORBA/IIOP2.3,OMGTechnicalDocument98-
17thIEEESymposiumonReliableDistributedSystems, 12-01. ObjectManagementGroup, Framingham.MA,
pages245–253,October1998. December1999.
[4] DOD. Trusted Computer System Evaluation Criteria. [19] C. Sabnis, M. Cukier, J. Ren, P. Rubel, W. Sanders,
UnitedStateDepartmentofDefense,WashingtonD.C., D.Bakken,andD.Karr. Proteus: Aflexibleinfrastruc-
December1985. turetoimplementfaulttoleranceinAQuA. InProceed-
[5] Dynacorp IS. Results of the DARPA ings of the IFIP International Working Conference on
evaluation of intrusion detection sys- Dependable Computing for Critical Applications, Jan-
tems. Internet URL http://www.dyncorp- uary1999.
is.com/darpa/meetings/id98dec/Files/MIT-LL1999.
13[20] R. E. Schantz, J. A. Zinky, D. A. Karr, D. E. Bakken, [25] S.Stolfo,A.Prodromidis,S.Tselepis,W.Lee,D.Fan,
J. Megquier, and J. P. Loyall. An object-level gate- and P.Chan. JAM:Javaagents formetalearningover
way supporting integrated-property quality of service. distributed databases. In Proceedings of KDD-97 and
In Proceedingsof The2nd IEEE International Sympo- AAI 97 Workshop on AI Methods in Fraud and Risk
siumonObject-orientedReal-timedistributedComput- Management,1997.
ing(ISORC99),May1999. [26] R. Vanegas, J. A. Zinky, J. P. Loyall, D. Karr, R. E.
[21] D. Schmidt, D. Levine, and S. Mungee. The design Schantz,andD.E.Bakken. QuO’sruntimesupportfor
oftheTAOrealtimeObjectRequestBroker. Computer qualityofserviceindistributedobjects. Proceedingsof
Communications,21(4),April1998. Middleware 98, the IFIP International Conference on
[22] S. Staniford-Chen, S. Cheung, R. Crawford, M. Dil- DistributedSystemsPlatformandOpenDistributedPro-
ger, J. Frank, J. Hoagland, K. Levitt, C. Wee, R. Yip, cessing,September1998.
and D. Zerkle. GrIDS -a graph based intrusion detec- [27] J.Zinky,D.Bakken,L.O’Brien,V.Krishnamurthy,and
tion system for large networks. In Proceedings of the M.Ahmed.PASS-aserviceforefficientlargescaledis-
19thNationalInformationSystemsSecurityConference, seminationoftimevaryingdatausingCORBA. InPro-
September1996. ceedings of the 19th International Conference on Dis-
[23] S.Staniford-Chen,B.Tung,andD.Schnackenberg.The tributedComputing,Austin,June1999.
common intrusion detection framework. In the Infor-
mationSurvivabilityWorkshop,October1998. Position
Paper.
[24] D.F.Sterne,G.W.Tally,C.D.McDonell,D.L.Sher-
man,D.L.Sames,P.X.Pasturel,andE.J.Sebes. Scal-
able access control for distributed object systems. In
Proceedingsofthe8thUsenixSecuritySymposium,Au-
gust1999.
14