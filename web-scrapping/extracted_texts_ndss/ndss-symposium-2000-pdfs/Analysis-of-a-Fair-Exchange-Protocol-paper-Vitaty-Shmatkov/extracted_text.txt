Analysis of a Fair Exchange Protocol
VitalyShmatikov JohnC.Mitchell
ComputerScienceDepartment
StanfordUniversity
Stanford,CA94305-9045
(cid:0)
shmat,jcm
(cid:1)
@cs.stanford.edu
Abstract
Weanalyzeanoptimisticcontractsigningprotocolof
Asokan,Shoup,andWaidnerasacasestudyintheap-
plicability of formal methods to verification of fair ex-
change protocols. After discussing the challenges in-
volved in formalizing fairness, we use Mur
(cid:2)
weshallrefertoastheASWprotocol. Incontrasttose-
curityprotocolsthatinvolvesecrecyandauthentication,
the correctness conditions for the contract signing pro-
tocol involve mutual fairness and verifiability of third
party. These conditions present interesting challenges
foraformalanalysistool. Inparticular,thirdpartyver-
ifiability is difficult to formalize as a protocol invari-
, a finite- ant. Other challenges include the need to consider in-
stateanalysistool,todiscoveraweaknessintheproto- tentionally malicious protocol participants and the fact
col that enables a malicious participant to produce in- thatsomeofthepropertiesclaimedfortheprotocolde-
consistentversionsofthecontractormountareplayat- pendonresilienceofthecommunicationchannels, i.e.,
tack. We show that the protocol can be repaired, and the properties only hold if all messages are eventually
thattheconfidentialityassumptionaboutthecommuni- delivered to their intended recipients. The protocol is
cation channelsmay be relaxed while preserving secu- also interesting because it contains several interdepen-
rityagainsttheconventionalDolev-Yaointruder. dentsubprotocolsthatmustbeanalyzedtogether.While
Heintze et al. [13] have used the FDR model checker
to verify properties of the NetBill [8] and Digicash [7]
1. Introduction protocols, the correctness conditions they establish are
differentincharacterfromtheonesweconsiderhere.
With continuing growth of electronic commerce on WeuseMur
theInternet,theissuesoftrustandfairnessarebecoming
increasinglyimportant. Thecurrentproliferationofon-
line auction venues, Internet shopping malls, and other
sitesthatactasbrokersbetweenindividualusersand/or
commercial entities makes it difficult, if not altogether
infeasible, for a user to establish the credibility of a
counterparty in a commercial transaction on the Inter-
net. E-commerceprotocolsareincreasinglyrequiredto
providesomesortofmutualguaranteestoprotocolpar-
ticipants, ensure fairness, or furnish participantswith a
proofthatatransactionhastakenplace.
Formalmethodshavebeenwidelyusedtoanalyzethe
security properties of key exchange and authentication
protocols [14, 22, 18, 5, 21]. In particular, finite-state
analysishasbeensuccessfullyappliedtoprotocolssuch
asNeedham-Schroeder,Kerberos,SSL,andothers[15,
17,16,19,20]. However,lessattentionhasbeenpaidto
fairexchangeandrelatedprotocols.
Inthispaper,weanalyzetheoptimisticcontractsign-
ingprotocolofAsokan,Shoup,andWaidner[1],which
(cid:2) ,afinite-stateanalysistool,todiscover
apotentialweaknessintheprotocol. Thisweaknessen-
ables a malicious protocol participant to obtain a valid
contract while the honest participant, even if it resorts
to the help of the trusted third party, can only obtain
a replacement contract which is inconsistent with the
one possessed by the malicious participant. The same
weakness also allows the intruder to stage a replay at-
tack. Whileitisunclearifthisviolatestheintentionsof
the protocol designers, it seems clear that the protocol
wouldbemoreusefuliftheseattackswerenotpossible.
Fortunately,asmallchangetooneofthemessagespre-
ventsboth attacksand therefore improvestheprotocol.
Wealsoshowthatsomeassumptionsaboutthecommu-
nicationchannelscanberelaxedwithoutviolatingfair-
nessorotherintendedpropertiesoftheprotocol.
We start by giving an overview of Mur (cid:2) (section 2)
and discussing the general notion of fair exchange and
thechallengesitpresentstofinite-stateanalysis(section
3). Insection4,wedescribethecontractsigningproto-
col. Section5containstheresultsofMur (cid:2) analysis. Insection6,wesuggestmodificationstotheprotocolthat
preventtheattacksdiscoveredbyMur
(cid:2)
,andsummarize
ourconclusionsinsection7.
2. Overviewof Mur (cid:3)
Mur
(cid:2)
[10] is a verification tool for analyzing finite-
state systems. Originally developed for hardware ver-
ification, Mur
(cid:2)
has been successfully used for analyz-
ing security protocols [19, 20, 23]. The Mur
(cid:2)
input
languageisasimplehigh-levellanguagefordescribing
nondeterministicfinite-statemachines. Theinputmodel
consists of the description of variables that define the
stateofthesystemandasetofguardedrulesthatrepre-
sentactions. Whilethereisnoexplicitnotionofprocess,
a process can be implicitly modeled by a set of related
rules. Communication between processes is modeled
by shared variables. The Mur
(cid:2)
system automatically
checks,byexplicitstateenumeration,ifeveryreachable
stateofthemodelsatisfiesagivensetofinvariants.
To analyze a security protocol in Mur
(cid:2)
, it is neces-
sarytocombinethefinite-statemodeloftheprotocolex-
pressed intheMur
(cid:2)
language withtheintrudermodel,
specifythestartstateoftheprotocol,andformallystate
protocol invariants as boolean conditions that must be
true in every state reachable from the start state. The
intruder model typically consists of a set of variables
that contain the intruder’s knowledge and a set of ac-
tionsthattheintrudermay take. We useaverysimple,
mechanicalintrudermodel. Theintruder isassumed to
have full control over the network and allowed to take
the following actions: (1) overhearevery message, de-
cryptencryptedmessagesifithasthekey,storepartsof
messageinitsinternaldatabase, (2)interceptmessages
and remove them from the network, (3) generate mes-
sages using any combination of its initial knowledge,
partsofoverheardmessages,knownkeys,etc. Ifatany
moment there are several possible actions that the in-
trudercantake,oneischosennondeterministically.The
Mur
(cid:2)
system will analyze all states that are reachable
viaanyinterleavingofenabledactions.
Ourintruder model has nonotionofpartial informa-
tion or probability. It cannot perform cryptanalysis or
statisticaltestsofthenetworktraffic,anditfollowsthe
“blackbox”cryptographymodel:anencryptedmessage
canbereadonly ifthedecryptingkeyisknown,other-
wise its contents are assumed to be invisible to the in-
truder (who is still capable of storing the message and
replayingitlaterinadifferentcontext).Intherestofthe
paper,werefertothisintrudermodelastheDolev-Yao
intruder,following[11].
IfMur
(cid:2)
However, when Mur
findsareachablestateinwhichaninvariant
is violated, the tool exhibits the attack by printing the
sequence of stepsfrom the start stateto the error state.
(cid:2)
fails to find an invariant viola-
tion,thisisnotaproofthattheprotocoliscorrect.Since
Mur
(cid:2)
can only consider finite models, only a bounded
number of protocol instances can be analyzed. There-
fore, anattack that requires a largenumber ofprotocol
instanceswillnotbediscoveredwhenasmallernumber
is considered. Certain kinds of attacks, suchas attacks
involvingcryptanalysis,arealsobeyondthescopeofthe
model.
3. FairExchange
Intuitively,aprotocolisfairifnoprotocolparticipant
cangainanadvantageoverotherparticipantsbymisbe-
having.Forexample,aprotocolinwhichtwopartiesex-
changeoneitemforanotherisfairifitensuresthatatthe
endoftheexchange,eithereachpartyreceivestheitem
itexpects,orneitherreceivesanyinformationaboutthe
other’sitem[1].Fairexchangeprotocolsareusedforap-
plicationssuchasonlinepaymentsystems[8],inwhich
a payment is exchanged for an item of value, contract
signing[4, 1], inwhich partiesexchange commitments
toacontractualtext,certifiedelectronicmail[2,24,9],
andotherpurposes.
There are several categories of fair exchange proto-
cols. Gradual exchange protocols [4, 6] work by hav-
ingthepartiesreleasetheiritemsinsmall installments,
thus ensuring that at any given moment the amount of
knowledgeonbothsidesisapproximatelythesame.The
drawbackofthisapproachisthatalargenumberofcom-
munication stepsis required. Gradual exchangeis also
problematic if the items to be exchanged have“thresh-
old”value(eithertheitemisvaluable,oritisnot).
Anothercategoryoffairexchangeprotocolsisbased
on the notion of a trusted third party [8, 24, 9]. The
trusted third party supervises communication between
theprotocolparticipantsandensuresthatnoparticipant
receivestheitemitwantsbeforereleasingitsownitem.
Variationsofthisapproachincludefairexchangeproto-
colswithasemi-trustedthirdparty[12].Themaindraw-
back of the third party solution is that the third party
may become the communication bottleneck if it has to
be involved in all instances of the protocol in order to
guarantee fairness. The protocol may also need to im-
posedemandsonthecommunicationchannels,e.g.,by
requiring that all messages are eventually delivered to
theirintendedrecipients.
Recently, several protocols have been proposed for
optimistic fair exchange [1, 3]. While these protocols
still requirea trusted third party, the third party is only
neededwhenmessagesaredelayedoroneoftheparties
misbehaves. This may ease the communication bottle-
neck,makingfairexchangeprotocolsmorepracticalfor
realisticapplications.Fairexchangeprotocolspresentseveralchallengesfor 4.1.Objectives
formalanalysisingeneral,andfinite-statetechniquesin
Theoptimisticcontractsigningprotocolisdesignedto
particular. Tobeginwith,thecorrectnessconditionsare
enabletwoparties,called
often subtle and it is difficult to extract precise state-
ments from informal protocol specification. There are
also inherent subtleties in modeling dishonest parties
andpartiallyfaultycommunicationchannels.Sincefair-
ness involves protection against the actions of a mali-
cious participant, it is necessary to allow protocol par-
ticipantstobecomemaliciousandtrytocheatthehon-
estparties. Inouranalysis,wemodeldishonestpartici-
pantsbyhavingthemrevealtheirprivateinformationto
theintruder. Thisappearstobeanaccuratemethod,al-
thoughitdependsongivingtheintrudersufficientpower
tousetherevealedinformationeffectively.Thecommu-
nication channels present another challenge. In other
protocols, unreliable communication channels are typ-
ically modeled by giving the intruder full control over
the channel. In the traditional approach, the intruder
is able to intercept any message, break messages into
components, andcreatenewmessages withinthecryp-
tographicconstraintsoftheformalintrudermodel. Fair
exchangeprotocols,however,mayrelyoncommunica-
tion assumptions that would be violated by the tradi-
tionalintruder model. Forexample, itmay berequired
thatallmessagesdepositedinthechannelareeventually
delivered,buttheintrudermaystillbeabletodelayand
re-schedulethem.
4. OptimisticContract SigningProtocol
Thissectiondescribestheoptimisticcontractsigning
protocoldesignedbyAsokan, Shoup, and Waidner [1].
Westartbydescribingtheobjectivesoftheprotocoland
theassumptionsunderwhichtheprotocoloperates. We
thendefinetheprotocolitselfandformalizethecorrect-
ness conditions posed by the designers of the protocol.
Thenotation has been changed fromthe original paper
tofacilitateexplanation.
A common point of confusion about this protocol is
thenotionof“contract.” Ingeneral,onemightexpecta
contract to be a pair of digital signatures of an agreed
upon text, one signature from each party negotiating
the contract. Inthe ASW protocol, normaltermination
withoutuseofthethirdpartywillproduceacontractthat
contains twodigital signaturesand additionaldata pro-
ducedintherunoftheprotocol. However,thecontracts
produced by the third party are not necessarily of this
form.InordertounderstandtheASWprotocol,itisim-
portantto keepin mind notonly thesteps ofeachsub-
protocol (discussed below), but also the forms of con-
tractthattheprotocoldesignershaveestablishedforthe
protocol.
(cid:4)
(originator)and
(cid:5)
(respon-
der),toobtaineachother’scommitmentonapreviously
agreed contractual text. The protocol is asynchronous,
allowingeither
(cid:4)
, or
(cid:5)
to contact the third party. The
third party may decide, on the basis of communication
ithasreceived,whethertoissueareplacementcontract
oranaborttoken. Aborttokensarenotaproofthatthe
exchangehasbeencanceled(seesections4.3and5.1.4
below)butapromiseby
(cid:6)
nottoresponddifferentlyin
thefuture.
4.2.Assumptions
Theprotocol usesdigitalsignaturesanda hashfunc-
tion. Wewrite
(cid:7)(cid:9) (cid:8)(cid:11)(cid:10)(cid:13) (cid:12)(cid:15) (cid:14)(cid:15) (cid:16)(cid:17) (cid:16)(cid:18) (cid:16)(cid:19)
foramessagesignedbyparty
(cid:20)
andassumethatallprotocolparticipantshavetheability
verify signatures produced by any party. We also as-
sumethatthereexistsacollision-resistantone-wayhash
function,
(cid:21)(cid:22) (cid:14)(cid:23) (cid:19)
.
Prior to executing the protocol, we assume that the
partiesagreeoneachother’sidentity,theidentityofthe
trustedthirdparty
(cid:6)
,andthecontractualtext. Itisalso
assumed that every protocol participant knows every-
bodyelse’ssignatureverificationkey. Thisimpliesthat
theprotocolmustbeprecededbythe“handshake”phase
in which a key exchange and/or authentication proto-
colisexecutedtoestablishthesharedinitialknowledge.
However,sinceitisnotnecessaryforthehandshakepro-
tocoltoguaranteefairness,wedonotconsideritaspart
ofthisstudy.
The original paper [1] is self-contradictory in its de-
scription of the assumptions about the communication
channels between protocol participants. It first states
thatthecommunicationchannelsbetweenanytwopro-
tocol participants are assumed to be confidential, i.e.,
eavesdroppers will not be able to determine the con-
tentsofmessagestravelingthroughthesechannels.This
canbeachievedbyencryptingallmessageswiththein-
tendedrecipient’spublickey. Later,however,thepaper
states that no assumptions are made about the commu-
nication channel between
(cid:4)
and
(cid:5)
. In [1], it is also
assumedthatthechannelsbetweeneachparticipantand
thetrustedthirdparty
(cid:6)
isresilient,i.e.,anymessagede-
posited into the channelwill eventuallybe deliveredto
itsintendedrecipient. However,therearenotimeguar-
antees: the intruder can succeed in delaying messages
by an arbitrary, but finite amount of time. In section 5
below, we analyze the protocol under various assump-
tionsaboutthequalityofcommunicationchannels.
Implicitintheprotocoldescription[1]istheassump-
tion that the trusted third party
(cid:6)
must maintain a per-
manent database with the status of every protocol runthat it has ever been asked to abort or resolve. (Each
run can be identified by the first message
(cid:24)(cid:26) (cid:25)(cid:28) (cid:27)
— see
belo
(cid:29)
w.) Abort and resolverequestsare processedby
(cid:6)
onthefirst-come,first-servedbasis. Therefore,inorder
to ensure fairness, (cid:6) must always beable to determine
whether a particular instance of the protocol has been
abortedorresolvedalready.
4.3.Protocol
The optimistic contract signing protocol consists of
threeinterdependentsubprotocols:exchange,abort,and
resolve.Theparties(
(cid:4)
and
(cid:5)
)starttheexchangebyfol-
lowingthe exchangesubprotocol. If both (cid:4) and (cid:5) are
honestandmessagesarereceivedintimetosatisfyboth
parties,bothobtainavalidcontractuponthecompletion
oftheexchangesubprotocol. Theoriginator (cid:4) alsohas
theoptionofrequestingthetrustedthirdparty (cid:6) toabort
anexchange that (cid:4) has initiated. Intuitively,anhonest
(cid:4) mightchoosetodothisifaresponsefrom (cid:5) isnotre-
ceivedafterareasonablewaitingperiod. However,nei-
thertime,noranyconditionsgoverningthisdecisionare
includedintheprotocoldefinition. Toabortthetransac-
tion, (cid:4) executestheabort subprotocolwith (cid:6) . Finally,
either (cid:4) , or (cid:5) may individually request that (cid:6) resolve
the exchange by issuing a replacement contract. They
requestthisactionbyexecutingtheresolvesubprotocol
with (cid:6) .
Attheendoftheprotocol,eachpartyisguaranteedto
end up with a valid contract or an abort token. As de-
scribedbrieflyabove,theprotocoldefinitionin[1]pro-
videstwoformsofcontract: (cid:30) (cid:31)" !$ #& %( ’* )+ %, (cid:31)" !(cid:17) -(cid:17) %( ’* .0 /
(standardcontract) 1, 2436 5 (cid:30)7 (cid:31)" ! # %, (cid:31)8 ! - /
(replacementcontract)
where (cid:24)(cid:26) (cid:25)6 (cid:27)$ 9(cid:15) (cid:24)(cid:26) (cid:25)$ :6 9< ;(cid:22) => 9< ;(cid:22) ? aredefinedbelow. Notethat
the protocol definition does not consider a signed con-
tractualtextbyitselfavalidcontract.
Aborttokenshavethefollowingform:
1, 2@36 5 (cid:30)B A$ C( D(cid:18) E(cid:15) FH G, IJ %, (cid:31)8 K # /
where
(cid:24)M LN (cid:27)
isdefinedbelow.
An abort token should not be interpreted as a proof
thattheexchangehasbeencanceled. Theprotocoldoes
notpreventadishonest
(cid:4)
fromobtaininganaborttoken
after signing the contract with
(cid:5)
(in this case,
(cid:4)
may
haveboththeaborttokenandthecontract,while
(cid:5)
ofthetrusted thirdparty(T). Theyarealso assumedto
knoweachother’spublic verificationkey. Specifically,
only
hasthecontract). Theprotocolisdesigned,however,to
prevent one party from receiving only the abort token,
inanysituationwheretheothercanreceiveavalidcon-
tract.
Exchangesubprotocol. Asmentionedearlier,itisas-
sumedthatpriortoinitiatingtheexchange,thetwopar-
ties agree on the contractual text (text) and the identity
(cid:4)
knowsthekey
O ?
thatcanbeusedtoverifymessages
signedby
(cid:5)
,and
(cid:5)
knows
O =
.
When communication is not blocked or delayed and
neither party tries to cheat the other,
(cid:4)
and
(cid:5)
execute
thefollowingsubprotocol:
PR
Sa
PR
Sa
QT
Qb
QT
Qb
S
P
S
P
(cid:31)8
(cid:31)8
(cid:31)8
(cid:31)8
!
!(cid:18)
!(cid:17)
!(cid:17)
#
-
c
d
U
U
U
U
1,
1,
’*
’
243
243
)
.
)
.
(cid:30)(cid:18)
(cid:30)
V
(cid:31)"
)
!$
%(cid:15)
#&
V
%,
.
[]
%X
\^
WY
’]
%&
.
FH G, Z(cid:18)
/_
F& %, [] \^ ’ )‘ _ /
Inthefirststepofthesubprotocol, (cid:4) commitstothe
contractual text by hashing a random number
; =
, and
signing a message that contains both
(cid:21)e (cid:14)f ; = (cid:19)
and text.
;e = is calledthecontractauthenticator. While (cid:4) does
notactuallyrevealthevalueofthe contractauthentica-
tortotherecipientofmessage (cid:24)(cid:26) (cid:25)(cid:28) (cid:27) , (cid:4) iscommittedto
it. As in a standard commitment protocol, we assume
thatthehashfunctionis2nd-preimageresistant: itisnot
computationally feasiblefor
(cid:4)
to find a differentnum-
ber
;h g=
suchthat
(cid:21)(cid:22) (cid:14)H ;i g= (cid:19)k jl (cid:21)(cid:22) (cid:14)H ;(cid:22) =m (cid:19)
.
In the second step, (cid:5) replies with its own commit-
ment. Finally, (cid:4) and (cid:5) exchange the actual con-
tract authenticators. At the end of this subprotocol,
both
(cid:4)
and
(cid:5)
obtain a standard contract of the form (cid:0)
(cid:24)M (cid:25) (cid:27) 9< ; = 9(cid:9) (cid:24)M (cid:25) : 9< ; ? (cid:1) .
Abortsubprotocol. Anhonestordishonest
(cid:4)
mayat-
tempttocanceltheexchange. Thisallowsanhonest
(cid:4)
totimeout,ifaresponsefrom (cid:5) isnotreceived.Tocan-
cel, (cid:4) sendsanabortrequesttothetrustedthirdparty (cid:6)
by signing the first message (cid:24)(cid:26) (cid:25) (cid:27) of the exchange to-
gether with aborted. It is not clear from the protocol
description[1]whattheexactformatofaborted is,but
for the purposes of our analysis we assume that it is a
predefinedbitstring.
If (cid:6) hasnotpreviouslybeenrequestedtoresolvethis
instanceoftheprotocol,
(cid:6)
marks
(cid:24)M (cid:25) (cid:27)
asabortedinits
permanent database and sends an abort token to
(cid:4)
. If
(cid:24)(cid:26) (cid:25)6 (cid:27)
isalready markedas resolved,i.e., somebody had
resolvedtheexchangewith
(cid:6)
beforebysubmittingvalid
(cid:24)(cid:26) (cid:25) (cid:27)
and
(cid:24)(cid:26) (cid:25) :
,
(cid:6)
sends
(cid:4)
areplacementcontract.
PR
W
Q
QT
Wn
P
(cid:31)8
(cid:31)8
Ko
Kp
#
-
U
U
1,
E,
243
G(cid:9) q<
u‘
ym
)
D(cid:18)
v
z
(cid:30)B A$
rs(cid:18) G(
1x wk
w{
C( D(cid:18) E(cid:15) FH G, IJ %, (cid:31)" !$ #(cid:9) /
Ip t
(cid:30)7 (cid:31)" ! %X (cid:31)" !#1, 2@36 5
(cid:30)B A$ C( D(cid:18) E(cid:15) FH G, IJ %,1, 2@3 5
A$ C( D(cid:18) E(cid:9) FH G, I U} |, ~( (cid:127)w
/-
(cid:31)8
v
K # /
Although an honest
(cid:4)
may send an abort request to
(cid:6)
if it does not receive
(cid:24)(cid:26) (cid:25)(cid:128) :
within a reasonable time,
thereisnoguaranteethat
(cid:4)
willbeabletoabort. Ifthe
exchange has been already resolved by someone whoknowsboth
(cid:24)M (cid:25)6 (cid:27)
and
(cid:24)(cid:26) (cid:25)$ :
,
(cid:6)
willnotgranttheabortre-
questandwillsend
(cid:4)
areplacementcontractinstead—
evenif
(cid:4)
hasnotreceived
(cid:24)M (cid:25) :
.
Notealsothat
(cid:5)
cannotsenda validabortrequest to
(cid:6) since (cid:24)M L (cid:27) hastobesignedbythesamekeyas (cid:24)M (cid:25) (cid:27) .
This does not put (cid:5) at a disadvantage since it has the
optionofsimplyignoringallmessagesfrom (cid:4) .
Resolvesubprotocol. Eitherpartymayrequestthat
(cid:6)
resolvetheexchange. Inordertodoso, theparty must
possess both (cid:24)M (cid:25) (cid:27) and (cid:24)M (cid:25) : . Therefore, (cid:5) can send a
resolverequest at any time after receiving
(cid:24)(cid:26) (cid:25)(cid:28) (cid:27)
, and
(cid:4)
candosoatanytimeafterreceiving
(cid:24)M (cid:25)$ :
. When
(cid:6)
re-
ceives a resolve request, it checks whether
(cid:24)M (cid:25) (cid:27)
is al-
readymarkedasaborted.Ifitis,
(cid:6)
replieswiththeabort
token,otherwiseitmarks (cid:24)M (cid:25)6 (cid:27) asresolvedandgenerates
a replacement contract by counter-signing the resolve
request.
P
W
% Sa
Qb
Q
P %
Wn
S
(cid:31)8
(cid:31)8
(cid:129)
(cid:129)(cid:17)
#
-
U
U
)(cid:131) (cid:130).1, 2@3
A$ C( D(cid:18) E(cid:9) FH G,
u‘ v 1x w6
yk z w(cid:132)
(cid:30)7
Ip
1,
1,
E,
(cid:31)8
t
243
243
G(cid:9) q<
!
5
5
D(cid:18)
%, (cid:31)"#
(cid:30)(cid:23) A$ C( D(cid:18)
(cid:30)(cid:11)(cid:31)8 !
rs(cid:18) G( I
! /-
E(cid:15) FH G, IJ %(
%X (cid:31)" !#
U(cid:133) |, ~(w
(cid:31)8
/-
(cid:127)
Ko
v
#/
Although this contract has a different form than the
contractproducedbytheexchangesubprotocol,thepro-
tocoldesignassumesthatinanytransactionrequiringa
contract, either form would be accepted as binding. In
otherwords,theprotocoldesignersconsiderthedefini-
tion of contract to be part of the protocol specification
and choose to use two forms of valid contract in their
protocol.
Thefirstrequestreceivedby
(cid:6)
determinestheperma-
nentstatusoftheprotocol.After
(cid:6)
resolvesorabortsthe
protocolforthefirsttime,itshouldsendidenticalreplies
in response to all futurerequests. If the firstrequest to
reach
(cid:6)
isanabortrequestfrom
(cid:4)
,
(cid:6)
’sresponsetoall
requests will be the abort token. If the first request to
reach (cid:6) isaresolverequestfrom (cid:4) or (cid:5) , (cid:6) ’sresponse
to all requests will be the replacement contract. This
leads to an implicit race condition which is not, how-
ever, a violation of fairness requirements as defined in
section4.4.2.
4.4.Correctnessconditions
Thedesignersmakethefollowingclaimsfortheopti-
misticcontractsigningprotocol:
4.4.1. Claim 1: If the communication channel be-
tween
(cid:4)
and
(cid:5)
colhascompleted,eachhastheother’scommitmentand
authenticator,i.e.,
isresilient,theprotocolsatisfiesthefol-
lowingrequirement:
Effectiveness. Ifbothpartiesbehavecorrectlyanddo
notwanttoabandontheexchange,thenwhentheproto-
(cid:4)
has
(cid:21)(cid:22) (cid:14)H ;(cid:22) ?+ (cid:19)
and
;(cid:22) ?
, while
(cid:5)
has
(cid:21)e (cid:14)f ; = (cid:19)
and
; =
.
4.4.2. Claim 2: If the communication channels be-
tween (cid:4) and (cid:6) ,and (cid:5) and (cid:6) areresilient,theoptimistic
contractsigningprotocolsatisfiesthefollowingrequire-
ments:
Strong fairness. When the protocol has completed,
eitherboth (cid:4) and (cid:5) havevalidcontracts,orneitherone
does.
Timeliness. At the beginning of the exchange, every
participant can be sure that the protocol will be com-
pletedwithinfinitetime. Atcompletion,thestateofthe
exchangewilleitherbefinal,or,inthewordsofthepro-
tocoldesigners, anychangestoitwillnot“degradethe
leveloffairness”achievedbytheparticipantsofar. For
example,ifapartyhasnotbeencheatedattheendofthe
protocol,itcannotbecheatedlateron.
Non-repudiability. After an effective exchange (see
above),eachparticipant (cid:134) willbeabletoprovetheori-
ginof the validcontract it has received,and provethat
(cid:134) ’s protocol counterparty has received (cid:134) ’s authentica-
tororavalidreplacementcontractfrom (cid:6) .
Verifiabilityof third party. If the trusted third party
(cid:6)
canbeforcedtoeventuallysendavalidreplytoevery
request,thenanyparticipantwhoischeatedasaresultof
(cid:6)
’smisbehaviorwillbeabletoprovethat
(cid:6)
misbehaved
inanexternaldispute.
There areno otherguarantees claimed for the proto-
col. Inparticular,considerthefollowing:
(cid:135) After (cid:4) sendsoff (cid:24)(cid:26) (cid:25)6 (cid:27) ,thereisnoguaranteethatit
will be able to abort the exchange. This has been
verifiedbyMur (cid:2) analysis: if (cid:5) computes (cid:24)(cid:26) (cid:25)(cid:128) : and
executesthe resolve subprotocol with (cid:6) while the
intruderdelaystheabortrequestfrom (cid:4) to (cid:6) ,then
(cid:6)
willissue a replacement contract inresponse to
(cid:4)
’s abort request. Therefore,
(cid:4)
must accept the
risk that the exchange will be resolved as soon as
it releases its commitment into the network, even
if it never hears from
(cid:5)
! In this sense, the proto-
col is disadvantageous to (cid:4) , since (cid:5) can always
ensurethattheexchangewilleventuallybeaborted
bysimplyignoring (cid:24)M (cid:25)6 (cid:27) .
(cid:135)
There is no provision in the protocol for
(cid:5)
to re-
quest that the exchange be aborted. In this sense,the protocol is disadvantageous to
(cid:5)
. After
(cid:5)
sendsoffitscommitmentaspartof
(cid:24)M (cid:25)$ :
,ithasno
option to abort the protocol. In contrast,
(cid:4)
does
havesuchanoption,butnoguarantee(seeabove).
5. Analysis
After implementing a Mur
(cid:2)
model of the three sub-
protocolsdescribedinsection4.3,wecombineditwith
an intruder model of the form described in section 2.
Correctness conditions of section 4.4 were represented
byinvariantsthatmustholdineverystatereachableby
theprotocol. WethenusedMur
(cid:2)
toperformthefinite-
stateanalysisoftheprotocol.
Our first attempt to analyze the protocol failed be-
causeaccordingtotheprotocolspecification,thetrusted
thirdparty
(cid:6)
isalwaysreadytoacceptabortandresolve
requests. Therefore,ifoneofthepartiesiscorrupt(i.e.,
theintruderhasaccesstoitssigningkey—seesection
5.1.4 below),then in everystateof the protocol the in-
trudercangenerateanewresolveor,if
(cid:4)
isthecorrupt
party, abort request and send it to
(cid:6)
. The trusted third
partywillthenaddtherequesttoitsdatabase,resulting
inanew,largerstate. Thismakesthestatespaceofthe
protocolinfinite. Theonlysolutionistoarbitrarilylimit
thenumberoftimestheintrudercangeneratearequest
to
(cid:6)
inthecourseofoneinstanceoftheprotocol. This
restrictionisnotnecessaryiftherearenocorruptparties,
sincethereisonlyafinitenumberoffrivolousrequests
that can be computed by the intruder. However, Mur (cid:2)
analysis is slowed down considerably if in every state
there is an enabled rule allowingthe intruder to send a
requestto (cid:6) .
Thissectiondescribestheresultsofouranalysiswith
theintruderlimitedtonomorethan2requeststo
(cid:6)
Infact,theprotocolspecification[1]saysthatthepro-
tocolprovidesfairnessifthecommunicationchannelbe-
tween
per
protocolinstance. Wearecurrentlyinvestigatingtheef-
fectsofincreasingtheboundonthenumberofintruder-
generatedrequests.
5.1.Fairness
We started the analysis by verifying the strong fair-
nesspropertyoftheprotocol(seesection4.4). Asare-
minder,strongfairnessguaranteesthatwhentheproto-
colhascompleted,eitherbothprotocolparticipantshave
validcontracts,orneitheronedoes.
5.1.1.Confidentialchannels,oneinstanceofthepro-
tocol: First, we analyzed one run, or instance of the
protocol under the assumption that all communication
channels are confidential. This prevents the intruder
fromlearninganythingfromthe messagesastheypass
through the network. The only operation the intruder
canperforminthissettingistostoreamessageandre-
playitlater.
(cid:4)
and
(cid:5)
, or those between
(cid:4)8 9< (cid:5)
and
(cid:6)
, is re-
silient, i.e., any message deposited in the channel will
eventually be delivered to the recipient. Resilience is
notasafetypropertyandrequiresspecialefforttomodel
with Mur
(cid:2)
. Adding liveness properties to Mur
(cid:2)
(e.g.,
bymeansofrulesthatareenabledonlyin“final”states
wherenootherrulesapply)isatopicofcurrentresearch.
For the purposes of this study, we made all protocol
invariantsconditionalontheprotocol’ssuccessfulcom-
pletion.Therefore,inorderforanattackontheprotocol
to succeed, the intruder must deliver messages to their
intended recipients so that the latter are convincedthat
theyhavesuccessfullycompletedtheprotocol. Aslong
as one of the parties is in a state where it’s waiting for
a message, the protocol is not complete, and there are
nofairnessguarantees. Thisapproximationofresilience
actually strengthens the intruder by not requiring it to
eventuallyforwardallintercepted messagestotheirin-
tended recipients. Therefore, if Mur
(cid:2)
did not find any
attack on the protocol in our model, it would not have
found any attacks in the model where the channels are
bothconfidentialandresilient.
Mur
(cid:2)
did not discover any violations of strong fair-
nessbyanalyzingasingleinstanceoftheprotocolunder
the channel confidentiality assumption. It did discover
thattheintrudercanachievethefollowing:
(cid:135)
Prevent (cid:4) from aborting the protocol by delaying
its abort request to (cid:6) until (cid:5) computes (cid:24)(cid:26) (cid:25)(cid:128) : , and
thensubmitting (cid:24)M (cid:25)6 (cid:27) and (cid:24)(cid:26) (cid:25)$ : (ostensiblyfrom (cid:5) )
to (cid:6) , thusresolvingtheprotocol. Then (cid:4) willre-
ceiveareplacementcontractinresponsetoitsabort
request.
(cid:135)
Force
(cid:4)
to submit an abort request to
(cid:6)
by inter-
cepting
(cid:24)(cid:26) (cid:25)$ :
.
(cid:135)
Force
(cid:5)
(respectively,
(cid:4)
) to submit a resolve re-
questto
(cid:6)
byintercepting
(cid:24)(cid:26) (cid:25)(cid:128) (cid:136)
(
(cid:24)(cid:26) (cid:25)(cid:128) (cid:137)
).
(cid:135)
Resolve the protocol directly by submitting a re-
solve request to
(cid:6)
once both
(cid:24)(cid:26) (cid:25)6 (cid:27)
and
(cid:24)(cid:26) (cid:25)$ :
have
beensentintothenetworkaspartoftheexchange
subprotocol.
None of the above, however, is a violation of strong
fairnessasdefinedinsection4.4.2.
5.1.2.Confidentialchannels,twoinstancesofthepro-
tocol: After increasing the bound on the number of
protocol instances, Mur
(cid:2)
discovered the following re-playattack:
(cid:138)
observesaninstanceoftheprotocol Pl
Sl
Pl
Sl
Q(cid:139)
Q(cid:139)
Q(cid:139)
Q(cid:139)
S
P
S
P
(cid:31)8
(cid:31)8
(cid:31)8
(cid:31)8
!(cid:28)
!
!
!
#
-(cid:128)
c$
d
U
U
U
U
1,
1,
’
’*
243
243
)
.
)
.
(cid:30)(cid:18)
(cid:30)
Vo
(cid:31)"
)+
!
%(cid:15)
#
Vo
%,
.‘
[(cid:140)
%X
\^
WY
’
%
.(cid:141)
FH G, Z(cid:18)
/_
F< %, [] \^ ’* ) _ /
Later...
(cid:138)
Sl
Q(cid:139)
Q(cid:139)
S
P
(cid:31)8
(cid:31)8
!
!7
#7
(cid:143)-
U
U
1,
1,
243
243
)
.
(cid:30)(cid:18)
(cid:30)
V
(cid:31)"
)
!$
%(cid:15)
#
V
%,
.
[(cid:140)
%X
\^
WY
’e
% FH G, Z(cid:18)
(cid:143) /(cid:145)_.
F< (cid:138)%, []
(cid:144)
\^ ’ )(cid:142) _ /
getsit
(cid:138)
Sl
Q(cid:139)
Q(cid:139)
S
P
(cid:31)8
(cid:31)8
!(cid:17)
!
c
(cid:143)d
U
U
’*
’
)
(cid:143).
(cid:138)
(cid:144)
(cid:146)
getsit
(cid:146)
To stage this attack, the intruder must observean in-
stance of the protocol, recording all messages sent by
(cid:4)
. After the protocol completes, the intruder can ini-
tiate another instance of the protocol by replaying the
recorded
(cid:24)M (cid:25)6 (cid:27)
.
(cid:5)
willrespondwithanew
(cid:24)(cid:26) (cid:25)$ g:
,towhich
theintruderrespondswiththeold
(cid:24)M (cid:25)$ (cid:136)
.Theresultofthis
attackisthattheintrudercanget (cid:5) tocommittothetext
ofanoldcontractwith
(cid:4)
without
(cid:4)
’sor
(cid:6)
’sknowledge.
Theprotocolasdescribedin[1]containsnoprotection
againstthiskindofattack. Perhapsthiswasaconscious
decision on the part of the protocol designers who did
not intend the protocol to be secure against replay at-
tacks. If the contractual text contains a timestamp, ex-
pirationdate,orsomeotherinformationthatmighthelp
indeterminingitsfreshness,
(cid:5)
maybeabletodetectthe
attack. It can be argued that any well-written contract
mustcontainsuchinformation. However,thisshouldbe
statedexplicitlyaspartoftheprotocolspecificationand
notleftfortheprotocolusertoinfer.
The attack we discovered is different from the sim-
plerone in whicha malicious
(cid:5)
keepsthe oldcontract
towhich
(cid:4)
hadpreviouslycommittedandtriestoreuse
it. Incase of our replayattack, thenew contractis dif-
ferent fromtheoldone. Recallthatastandardcontract
isthecombinationof
(cid:24)(cid:26) (cid:25) (cid:27)
,
(cid:24)(cid:26) (cid:25) :
,andcontractauthenti-
cators:
(cid:0)
(cid:24)(cid:26) (cid:25) (cid:27) 9(cid:15) (cid:24)(cid:26) (cid:25) : 9(cid:9) ; = 9(cid:9) ; ? (cid:1)
. Since
(cid:24)(cid:26) (cid:25) :
isdifferentin
the second instance of the protocol, the contract is dif-
ferent. This implies that
(cid:4)
cannot even obtain a valid
replacement contract by requesting it from the trusted
third party since in order to do so, it needs
(cid:24)(cid:26) (cid:25)$ g:
which
it never receives. In fact,
(cid:4)
is not even aware that an
exchangebetween
(cid:5)
andtheintruderhastakenplace.
Thereplayattacksucceedsevenif both
(cid:4)
and
(cid:5)
are
honest. Suppose that
(cid:4)
is a retailer who periodically
purchases supplies from
(cid:5)
online using the contract
signingprotocol. Allpurchasecontractsareexactlythe
same, as is often the case in real life, and it is agreed
(offline)thatallcontractsexpireimmediatelyuponful-
fillment (i.e.,
(cid:5)
receives the order, fills it, and forgets
about it). Then the intruder can use the replay attack
to impersonate
(cid:4)
on its behalf, convincing
and submit a false purchase contract
(cid:5)
that
(cid:4)
has committed to a
newpurchaseandproviding
(cid:5)
withafalseproofof
(cid:4)
’s
commitment.
Note that there is no need for the intruder to involve
the trusted third party in the protocol in order to stage
thereplayattack. This meansthatthere willbenoevi-
denceoftheattacksuchascouldhavebeenprovidedby
aresolverequestkeptby
(cid:6)
.
Themainweaknessoftheprotocolisthefactthat
(cid:4)
’s
message (cid:24)(cid:26) (cid:25)(cid:128) (cid:136) thatcontainsthecontractauthenticatoris
sentinresponseto (cid:5) ’scommitmentmessage (cid:24)(cid:26) (cid:25)$ : butis
not related to it in any way, making it possible for the
intrudertoreplayanold
(cid:24)M (cid:25)$ (cid:136)
. Aneasyfixthatprevents
thereplayattackisdescribedinsection6.
5.1.3.Standardchannels: Afterrepairingtheproto-
col to prevent the replay attack, we performed Mur (cid:2)
analysis without the confidentiality assumption on the
channels but still within the constraints of the standard
Dolev-Yao intruder model (see section 2). Mur (cid:2) did
notdiscoveranynew attacks. This canbeattributed to
the fact that messages (cid:24)M (cid:25) (cid:27) (cid:147): , (cid:24)(cid:26) L (cid:27)& (cid:147): , and (cid:24)(cid:149) (cid:148) : are all
signed,and (cid:24)(cid:149) (cid:148) (cid:27) containssignedmessagesasitscompo-
nents. Assuming that everyprotocol participant knows
everybodyelse’s correct public key(this is a necessary
requirementforthe protocolto succeed eveninthe ab-
sence of the intruder), signatures prevents the intruder
from modifying messages in transit. Since no signing
keysaretransmittedaspartoftheprotocol,theintruder
cannot gain the ability to sign messages unless one of
thepartiesleaksitskey.Therefore,theintruderisjustas
powerfulasinthecaseofconfidentialchannels.
This result suggests that the channel confidentiality
assumption can be relaxed. The protocol ensures fair-
nessevenifthechannelsarecontrolledbyaDolev-Yao
intruder.
5.1.4.Corruptprotocolparticipant: Finally,wean-
alyzedtheprotocolundertheassumptionthatoneofthe
participants is corrupt. We modeled this by giving the
intruderaccesstothecorruptparty’sprivateinformation
suchasitsprivatekeyanditscontractauthenticatoreven
beforethelatterisdivulgedaspartoftheexchangesub-
protocol.
Clearly,fairnessforthecorruptpartycannotbeguar-
anteedinthiscase.Forinstance,iftheintruderisableto
signmessageswith
(cid:4)
’sprivatekey,itisthenabletoim-
personate
(cid:4)
inanyexchangeandconvince
(cid:5)
that
(cid:4)
has
committedtoacontract.Protocolinvariantsmustbefor-
mulatedcarefullysoastoavoidspuriouslyflaggingthis
situationasanerror. Therealquestioniswhethershar-
ing its private key with the intruder allows the corrupt
participant to gain an unfair advantage over the other
party.Mur
(cid:2)
discoveredthatacorrupt
(cid:4)
canobtainbothan
aborttokensignedby
(cid:6)
andavalidcontractwith
(cid:5)
. In
addition,
(cid:4)
doesnotrequireassistancefromtheintruder
todothis. Itcansimplyexecutetheexchangesubproto-
col with
(cid:5)
and then the abort subprotocol with
(cid:6)
. As
aresult, (cid:5) obtainsavalidcontractwith (cid:4) ,while (cid:4) ob-
tainsacontractwith
(cid:5)
and
(cid:6)
’saborttoken. Sinceboth
parties have the contract, this is not a violation of fair-
ness asdefined in section 4.4.2, but italso implies that
aborttokensmaynotbeacceptedasaproofthatcontract
negotiationfailed.
Mur
(cid:2)
also discoveredthe followingattack, in which
a malicious
(cid:5)
obtains a contract which is inconsistent
withthatobtainedby
(cid:4)
.
Pl
Sl
Q(cid:139)
Q(cid:139)
S
P
S
(cid:31)"
(cid:31)"
!
!
#(cid:17)
-$
U
U
1,
1,
243
243
)
.
(cid:30)(cid:17)
(cid:30)7
V
(cid:31)"
)
!
%(cid:15)
#
V
%,
.
[]
%X
\^
WY
’
%
.(cid:141)
FH G, Z(cid:18)
/_
F(cid:9) %, [(cid:140) \^ ’ )(cid:142) _ /
computesnewrandom
’ (cid:143).
and (cid:31)" ! (cid:143)- U 1, 243 . (cid:30) (cid:31)" ! # %( [(cid:140) \^ ’ (cid:143). _ /
,but
keepsthemsecret
Pl Q(cid:139) S
S
(cid:31)" !7 c U ’* )
sendsnothing
Pl
W
Q
Q(cid:139)
W(cid:150)
P
(cid:31)8
(cid:31)8
Ko
Kp
#
-
U
U
1,
1,
243
2436
)
5
(cid:30)
(cid:30)7
(cid:31)"
(cid:31)8
!$
!(cid:28)
#
#<
%,
%,
(cid:31)"
(cid:31)"
!(cid:17)
!(cid:17)
-
-
/
/
In this attack, (cid:5) computes two different responses
(cid:24)(cid:26) (cid:25)(cid:128) : and (cid:24)(cid:26) (cid:25)$ g: to (cid:4) ’s initial message (cid:24)(cid:26) (cid:25)6 (cid:27) using dif-
ferent random numbers ;(cid:22) ? and ;i g? . It sends out
(cid:24)(cid:26) (cid:25)(cid:128) : and keeps the other secret. After it receives
(cid:4)
’s contract authenticator
;e =
,
(cid:5)
does not respond at
all. It has already obtained a valid standard contract (cid:0)
(cid:24)(cid:26) (cid:25)6 (cid:27)(cid:128) 9(cid:9) ;e => 9(cid:15) (cid:24)(cid:26) (cid:25)$ g: 9< ;i g? (cid:1)
. Since
(cid:4)
does not receive
(cid:24)M (cid:25)(cid:128) (cid:137)
from
(cid:5)
, it requests trusted third party
(cid:6)
to resolve the
protocol.
(cid:6)
issues a replacement contract by counter-
signing
(cid:24)(cid:26) (cid:25) (cid:27)
and
(cid:24)(cid:26) (cid:25) :
. However,
(cid:4)
’s contract is dif-
ferent fromthatpossessedby
(cid:5)
becauseitcontainsthe
hashofadifferentrandomnumber:
; ?
ratherthan
;i g?
.
Clearly,thisisa problem,sinceeachpartypossesses
a valid contract, but the two contracts are inconsistent.
Recallthattheprotocolemploysa non-standarddefini-
tionofcontracts(section4.3),accordingtowhichavalid
contract is more than a signed contractual text. Even
thoughthecontractualtextsinthetwocontractsarethe
same, the random numbers and commitments are dif-
ferent,anditisunclearhowthecontractsshouldbeen-
forcedorinterpreted,giventhatbotharevalidaccording
totheprotocolspecification.Theoriginalpaper[1]does
notsayanythingabouthowthissituationshouldbehan-
dled.
The problem is caused by the same weakness of the
protocol that makes the replay attack described in sec-
tion 5.1.2 possible.
(cid:4)
’s contract authenticator
;e =
is
sent in response to
(cid:24)M (cid:25)$ :
it. This enables
but is not explicitly linked to
(cid:5)
to use
;e =
with a different message
(cid:24)(cid:26) (cid:25)$ g:
to form a valid contract without revealing its own
commitmentto
(cid:4)
. Themodificationoftheprotocolde-
scribedinsection6preventsthisattack.
5.2.Timeliness
Eventualcompletionoftheprotocolisguaranteedby
channel resilience. Since we did not fully model re-
silience, it is possible for the intruder in our model to
preventtheprotocolfromcompleting, butthis attackis
trivial.
The concept of “fairness degradation” is not defined
inthepaper[1]andthusdifficulttoformalizesothatit
canbecheckedbyafinite-stateanalysistool. Basedon
our informal understanding of the protocol, if fairness
isachievedattheendoftheprotocol, thenitcannotbe
lost since the protocol provides no means of invalidat-
ingacontract. Ifapartyhasthevalidcontractoncethe
protocolcompletes,thenitcannotbecheatedregardless
of whether the other party has the contract or not. If
a party does not have a valid contract, then the other
partymustnothaveacontracteither(otherwise,thereis
nofairness). Theonlyremainingquestioniswhetherit
ispossibletoreuseinformationfromaninstanceofthe
protocolthatdidnotresultinavalidcontractinanother
instancethatdoesproduceavalidcontract(thenevenif
the first instance of the protocol was fair, fairness will
be lost in the second instance). Mur (cid:2) did not find any
attacksofthisnature.
5.3.Non-repudiability
Non-repudiabilitycondition(seesection4.4)requires
thatafteranhonestpartycompletestheprotocol,itmust
be able to prove the origin of the valid contract it re-
ceives. Since the ability to prove something is impos-
sible to formalize, we did not attempt to verify non-
repudiability with Mur
(cid:2)
. One can use informal rea-
soningtoconcludethatsincecommitmentmessagesare
signedanditisassumedthatthesignatureschemeisse-
cure,
(cid:4)
’ssignatureon
(cid:24)M (cid:25)6 (cid:27)
,
(cid:5)
’ssignatureon
(cid:24)(cid:26) (cid:25)(cid:128) :
,and
(cid:6)
’ssignatureon
(cid:24)(cid:149) (cid:148)(cid:128) :
provetheoriginofanyvalidcon-
tract, whether it is a standard contract computed by
(cid:4)
and
(cid:5)
, or a replacement contract issued by
(cid:6)
. Non-
repudiability of receipt is conditional on fairness: if
(cid:4)
has a valid contract at the completion of the protocol,
then
(cid:5)
musthaveavalidcontract,too(otherwise,there
is no fairness). Therefore,
(cid:5)
must have received
(cid:4)
’s
contractauthenticatororareplacementcontractfrom
(cid:6)
.
(cid:5)
’snon-repudiabilityofreceiptissymmetric. Unfortu-
nately,thissortofreasoningisdifficulttoverifywitha
finite-statetool.5.4.Verifiabilityoftrustedthirdparty
The optimistic contract signing protocol is not in-
tendedtoguaranteefairnessifthetrustedthirdparty
(cid:6)
is
corrupt.However,verifiabilityofthirdpartyimpliesthat
ifoneoftheparticipantslosesfairnessasaresultof
(cid:6)
’s
misbehavior,itshouldbeabletoprovethismisbehavior
toanindependentarbiter.
Verifiability only holds if the trusted third party is
guaranteedtosendavalidresponsetoallrequests. Our
Mur
(cid:2)
model approximates this guarantee by making
all protocol invariants, including verifiability of third
party, conditional on the protocol’ssuccessful comple-
tion. Therefore, in order to succeed, any attack staged
bytheintruder,possiblyactingincollusionwithcorrupt
(cid:6)
,mustinvolvegeneratingavalidresponsetoeveryre-
questsentbyanhonestparticipant. Otherwise,thehon-
est participant will not complete the protocol, and the
attackwillfail. Also, verifiability isonly possibleif
(cid:4)
is notified when
(cid:5)
tries to enforce a contract and vice
versa. If a protocol participant doesnot knowthat it is
being cheated, it cannot go after
(cid:6)
to prove its misbe-
havior.
Before formulating a formal protocol invariant that
could be verified with the help with Mur (cid:2) , we had to
determine what it means to be able to prove (cid:6) ’s mis-
behavior. Based on our interpretation of the protocol
description in [1], we believe that the cheated protocol
participantcanprovethat
(cid:6)
misbehavedifandonlyifit
canproducetwodocuments,bothsignedby
(cid:6)
,thatcon-
tradicteachother. Morespecifically,thecheatedpartic-
ipantmustbeabletodemonstrateanaborttokensigned
by (cid:6) and a replacement contract for the same instance
oftheprotocol,alsosignedby
(cid:6)
.Since
(cid:6)
issupposedto
processallabortandresolverequestsonthefirst-come,
first-served basis and the initial request determines the
status of the protocol in perpetuity, it should never be
thecasethat
(cid:6)
issuesbothanaborttokenandareplace-
mentcontractforthesameinstanceoftheprotocol.
Basedontheaboveinterpretation,webelievethatver-
ifiabilityofthirdpartyisviolatedifandonlyif thefol-
lowing conditions hold (the conditions are formulated
assumingthat
(cid:4)
isthecheatedparty;theconditionsfor
(cid:5)
aresymmetric):
(cid:135)
(cid:6)
iscorrupt(modeledbygivingtheintruderaccess
to
(cid:6)
’ssigningkey).
(cid:135)
(cid:5)
has
(cid:4)
’scontractauthenticator.
(cid:135)
(cid:4)
has neither
(cid:5)
’scontract authenticator,nor a re-
placementcontractsignedby
(cid:6)
.
If
(cid:5)
has a replacement contract signed by
(cid:6)
instead
of a standard contract with
(cid:4)
then
’s contract authenticator,
(cid:6)
is always verifiable! Suppose that
(cid:5)
tries to
enforce its replacement contract. When
(cid:4)
goes to
(cid:6)
and requests to either abort, or resolve the protocol,
(cid:6)
mustsend
(cid:4)
avalidresponse. If
(cid:6)
sendsareplacement
contract,thenthereisnofairnessviolationand
(cid:4)
isnot
cheatedsincebothpartiespossessthesamecontract. If
(cid:6)
sendsanaborttoken,then
(cid:4)
isindeedcheated(since
(cid:5)
hasacontractand
(cid:4)
doesnot),but
(cid:4)
canthenprove
(cid:6)
’s misbehavior by demonstrating its abort token and
(cid:5)
’sreplacementcontract,bothsignedby
(cid:6)
.
However,if
(cid:5)
has a standard contract with
(cid:4)
’s con-
tractauthenticator,then
(cid:5)
’scontractisnotsignedby
(cid:6)
,
and
(cid:4)
cannotprove
(cid:6)
’smisbehaviorsinceitcannotpro-
ducetwoinconsistentdocumentssignedby
(cid:6)
.Thiscase
satisfiestheconditionslistedabove.
Mur
(cid:2)
didnotdiscoveranystatesreachablebythepro-
tocol that satisfy the conditions. We conclude that the
thirdpartyisindeedverifiable.
6. Repairingthe Protocol
The optimistic contract signing protocol can be re-
pairedsoastopreventtheattacksdescribedinsections
5.1.2and5.1.4byexplicitlylinkingmessage
(cid:24)M (cid:25)$ (cid:136)
with
message (cid:24)M (cid:25) : . This is a standard technique to ensure
thatanold (cid:24)(cid:26) (cid:25) (cid:136) cannotbereplayedbytheintruderinre-
sponsetoafresh
(cid:24)M (cid:25)$ :
andthat
(cid:5)
canobtainastandard
contractonlywiththesamecontractauthenticatorthatit
hassentto
(cid:4)
aspartof
(cid:24)M (cid:25) :
. Asimilarchangemustbe
madeto
(cid:24)(cid:26) (cid:25)(cid:128) (cid:137)
topreventasymmetricreplayattack.
PR
Sa
PR
Sa
QT
Qb
QT
Qb
S
P
S
P
(cid:31)8
(cid:31)8
(cid:31)8
(cid:31)8
!(cid:28)
!
!
!(cid:17)
#
-(cid:18)
c(cid:128)
d
U
U
U(cid:153)
U(cid:153)
1,
1,
(cid:152)
(cid:152)
243
243
(cid:154)(cid:11)(cid:155)N
(cid:154)(cid:11)(cid:155)
)
.
(cid:156)
(cid:158)(cid:159)
(cid:30)(cid:18) Vo
(cid:30) (cid:31)"
(cid:30)(cid:17) ’
(cid:30)(cid:17) ’
)(cid:151) %(cid:15) Vo .(cid:142)
! %, []#
%, [])
%, [(cid:140).
%X WY
\^ ’
\^ (cid:157)"
\^ (cid:157)
%&
.(cid:141)
(cid:158)
(cid:156)+
FH G, Z(cid:18)
/_
/_
/_
F& %, [] \^ ’* ) _ /
7. Conclusions
Applicationofformaltechniquestofairexchangepro-
tocols involveschallenges that are not usually encoun-
tered in the analysis of secrecy and authentication pro-
tocols. Correctnessconditionssuchasfairnessandver-
ifiability of third party are difficult to understand and
formalize, communication channels must satisfy non-
safetypropertiessuchasresilience,protocolparticipants
mayintentionallymisbehave.Thispaperpresentsacase
study in the formal analysis of fair exchange, using a
finite-stateanalysistooltoverifyanoptimisticcontract
signing protocol and to discover gray areas and weak-
nesses.Inadditiontofindingweaknessesintheprotocol
thatcan be exploitedbya Dolev-Yaointruder,we sug-
gestandanalyzearepairthatpreventstheseattacks. We
believe that our work extends the area of applicability
offinite-stateanalysisandprovidesanexampleofhowformalmethodscanbeprofitablyusedtostudyavariety
ofsecurityprotocols.
References
[1] N. Asokan, V. Shoup, and M.Waidner. Asynchronous
protocols for optimistic fair exchange. In Proc. IEEE
SymposiumonResearchinSecurityandPrivacy,pages
86–99,1998.
[2] A.BahremanandJ.D.Tygar. Certifiedelectronicmail.
In Proc. Internet Society Symposium on Network and
DistributedSystemsSecurity,pages3–19,1994.
[3] FengBao,R.H.Deng, andWenboMao. Efficientand
practicalfair exchange protocolswith off-line TTP. In
Proc.IEEESymposiumonResearchinSecurityandPri-
vacy,pages77–85,1998.
[4] M.Ben-Or,O.Goldreich,S.Micali,andR.L.Rivest. A
fairprotocolforsigningcontracts.IEEETransactionson
InformationTheory,36(1):40–46,1990.
[5] D. Bolignano. Towards a mechanization of crypto-
graphicprotocolverification. InProc.9thInternational
ConferenceonComputerAidedVerification,pages131–
142,1997.
[6] E.F.Brickell,D.Chaum,I.B.Damgard,andJ.vande
Graaf.Gradualandverifiablereleaseofasecret.InProc.
Advances in Cryptology – Crypto ’87, pages 156–166,
1987.
[7] D.Chaum,A.Fiat,andM.Naor. Untraceableelectronic
cash. In Proc. Advances in Cryptology – Crypto ’88,
pages319–327,1988.
[8] B.Cox,J.D.Tygar,andM.Sirbu. NetBillsecurityand
transactionprotocol. InProc.1stUSENIXWorkshopon
ElectronicCommerce,pages77–88,1995.
[9] R.H. Deng, LiGong, A. A.Lazar, andWeiguoWang.
Practicalprotocolsforcertifiedelectronicmail. J.Net-
workandSystemsManagement,4(3):279–297,1996.
[10] D.Dill. TheMur
(cid:160)
[15] G.Lowe. BreakingandfixingtheNeedham-Schroeder
public-key protocolusingCSP andFDR. InProc.2nd
InternationalWorkshoponToolsandAlgorithmsforthe
Construction and Analysis of Systems, pages 147–166.
Springer-Verlag,1996.
[16] W.Marrero,E.M.Clarke,andS.Jha. Modelchecking
forsecurityprotocols. TechnicalReportCMU-SCS-97-
139,CarnegieMellonUniversity,May1997.
[17] C.Meadows.AnalyzingtheNeedham-Schroederpublic-
keyprotocol:Acomparisonoftwoapproaches. InProc.
European Symposium On Research In Computer Secu-
rity,pages365–384.Springer-Verlag,1996.
[18] C.Meadows.TheNRLProtocolAnalyzer:Anoverview.
J.LogicProgramming,26(2):113–131,1996.
[19] J. C. Mitchell, M. Mitchell, and U. Stern. Automated
analysisofcryptographicprotocolsusingMur
verificationsystem. InProc.8thIn-
ternationalConferenceonComputerAidedVerification,
pages390–393,1996.
[11] D. Dolev and A. Yao. On the security of public key
protocols. IEEE Transactions on Information Theory,
29(2):198–208,1983.
[12] M.FranklinandM.Reiter. Fairexchangewithasemi-
trusted third party. In Proc. 4th ACM Conference on
Computer and Communications Security, pages 1–6.
ACMPress,1997.
[13] N. Heintze, J. D. Tygar, J. M. Wing, and H.-C. Wong.
Modelcheckingelectroniccommerceprotocols.InProc.
USENIX1996WorkshoponElectronicCommerce,pages
147–164,1996.
[14] R. Kemmerer, C. Meadows, and J. Millen. Three sys-
temsforcryptographicprotocolanalysis. J.Cryptology,
7(2):79–130,1994.
(cid:160)
.InProc.
IEEESymposiumonResearch inSecurityandPrivacy,
pages141–151.IEEEComputerSocietyPress,1997.
[20] J.C.Mitchell, V.Shmatikov, andU.Stern. Finite-state
analysisofSSL3.0. InProc.7thUSENIXSecuritySym-
posium,pages201–215,1998.
[21] L. Paulson. The inductive approach to verifying cryp-
tographic protocols. J. Computer Security, 6:85–128,
1998.
[22] A. W. Roscoe. Modelling and verifying key-exchange
protocolsusingCSPandFDR. InProc.8thIEEECom-
puter Security Foundations Workshop, pages 98–107.
IEEEComputerSocietyPress,1995.
[23] V.ShmatikovandU.Stern. Efficientfinite-stateanalysis
for large security protocols. In Proc.11th IEEE Com-
puter Security Foundations Workshop, pages 106–115,
1998.
[24] J. Zhou and D. Gollmann. A fair non-repudiationpro-
tocol. InProc.IEEE Symposiumon Research inSecu-
rityandPrivacy,pages55–61.IEEEComputerSociety
Press,1996.