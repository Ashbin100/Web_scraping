A First Step towards the
Automatic Generation of Security Protocols
Adrian Perrig and Dawn Song
CMU, UCB
Adrian Perrig and Dawn Song NDSS - APG 1Difficulties in the Design of Security Protocols
(cid:15)
Usually ad-hoc, lacking formalism. Hidden assumptions weaken
security.
(cid:15)
Error-prone. A Classic Example: Needham-Schroeder public key
authentication protocol [NS78], in which Gavin Lowe discovered a
flaw 18 years later! [Low96]
(cid:15)
Limited proof of security, low confidence
(cid:15)
Limited search capability of designer, results in suboptimal protocols
(cid:15)
Slow process. Fixing flaws can be expensive
Adrian Perrig and Dawn Song NDSS - APG 2Automatic Protocol Generation
(cid:15)
User enters security requirements and system specification and APG
outputs the optimal secure protocol
Security Properties
Automatic
Protocol Correct
Generation Protocols
(APG)
Metric Initial
Function Setup
System Requirements
(cid:15)
APG consists of a protocol generator and a protocol verifier, for
which we use Athena
Protocol
Protocol Candidate
Verifier
Generator Protocols Athena
Adrian Perrig and Dawn Song NDSS - APG 3Advantages of APG
(cid:15)
Fully automatic, no user intervention
(cid:15)
High confidence
(cid:15)
High Quality
(cid:15)
Flexible
(cid:15)
Custom-tailored security protocols for each application
Adrian Perrig and Dawn Song NDSS - APG 4Grammar to Generate Security Protocols
(cid:15)
Grammar for representing messages in authentication protocols
M
A
e s
t o
s a
m
g
i
e
c
:
:
:
:
=
=
A t o m i c j E n c r y p t e d j C o n c a t e n a t e d
Principalname
j
Nonce
E n c r y p t e d : : = ( M e s s a g e ;
j K e y
Key
K e y : : =
)
PublicKey
j
PrivateKey
j
SymmetricKey
(cid:15)
C o n c a t e n a t e d : : = M e s s a g e ; M e s s a g e j M e s s a g e ; C o n c a t e n a t e d
Message representation through a tree structure
Concat
A B Encr
Concat Kb
A B
Adrian Perrig and Dawn Song NDSS - APG 5Metric Function to describe System Requirements
(cid:15)
Metric reflects the utility function, which defines the cost of a
protocol
(cid:15)
Assign a cost to each operation
Operation Sample 1 Sample 2
Sending cost per atomic element 1 3
Nonce generation 1 1
Symmetric encryption/decryption 3 1
Asymmetric encryption/decryption 7 2
(cid:15)
E.g. the cost of the message
A ; B ; f A ; B g K A B
is 8 (Sample 1).
(cid:15)
A correct protocol with the minimal cost is the optimal protocol (with
respect to the metric function).
Adrian Perrig and Dawn Song NDSS - APG 6Sacrifice Completeness to Achieve Practicality
(cid:15)
Vast protocol space
– Even for two-party mutual authentication protocols might take
years for a protocol verifier to explore
– Our goal is to make APG interactive
(cid:15)
Limiting the depth of the messages reduces the protocol space
(cid:15)
Don’t consider permutation of message components
f A ; N A g K A B (cid:17) f N A ; A g K A B
Adrian Perrig and Dawn Song NDSS - APG 7The Athena security protocol verifier [Son99]
(cid:15)
Automatic verifier for security protocols
(cid:15)
Model checker / theorem prover hybrid
(cid:15)
Uses the Strand Space Model [THG98]
(cid:15)
Athena either proves correctness (without a bound on the number of
sessions) or gives a counterexample
(cid:15)
Highly efficient, on the order of 10 prot/s (3 parties, 4 rounds)
Adrian Perrig and Dawn Song NDSS - APG 8Case Study: Automatic Generation of
Two-Party Mutual Authentication Protocols
(cid:15)
Explore two-party mutual authentication protocols for different
settings
– Authentication using either symmetric or asymmetric keys
– Principals are either bandwidth-limited or communication-limited
(cid:15)
Good starting point - large number of known protocols to compare
against
Adrian Perrig and Dawn Song NDSS - APG 9Overcome the Protocol Space Explosion Problem
(cid:15)
Despite the optimisations, the protocol space is still vast
(cid:15)
Solution: Add a simple and fast protocol verifier to the generator
(cid:15)
Look for simple impersonation attacks
(cid:15)
Recognize simple replay attacks
(cid:15)
Result: Fast to check, yet highly effective
Type Cost Generated I.A. R.A. Comb. Cand. Corr.
Symmetric 10 19856 12098 18770 19449 407 2
Asymmetric 14 46518 46378 40687 46408 110 1
Adrian Perrig and Dawn Song NDSS - APG 10Impersonation Attack Module
(cid:15)
Each principal has an impersonator,
I A
for
A
,
I B
for
(cid:15)
B
Each impersonator is updated as follows
– Knows all principal names
– Knows all public keys
– Receives all of its principal’s nonces
– Eavesdrops messages and reads what it can decrypt
(cid:15)
Example protocol:
I A
P r o t o c o l : A
B
A
!
!
!
B
A
B
:
:
:
N
N
N
A
B
A
;
;
;
A
f
N
N
B
A ; A ; B g K A B
can easily impersonate
A
Adrian Perrig and Dawn Song NDSS - APG 11Replay Attack Module
(cid:15)
Detects attacks where an eavesdropper can impersonate a principal
by replaying messages from a previous run
(cid:15)
Example protocol:
(cid:15)
P r o t o c o l : A
B
A
!
!
!
B
A
B
:
:
:
A
f
N
N
;
A
f
A
;
N
;
B
A
N
;
B
A
;
g
A
K
;
A
B
B
g K A B
An adversary can impersonate
A
by replaying messages 1 and 3
Adrian Perrig and Dawn Song NDSS - APG 12Results: Symmetric-Key Authentication Protocols
(cid:15)
Minimal protocols (cost
= 1 0
) for sample 1 costs
(cid:15)
Optimal protocols for computation-limited systems
P
P
r
r
o
o
t
t
o
o
c
c
o
o
l
l
:
:
A
B
A
A
B
A
!
!
!
!
!
!
B
A
B
B
A
B
:
:
:
:
:
:
N
f
N
N
f
N
N
N
A
B
A
B
;
A
;
A
A
;
A
;
N
N
B
B
;
;
A
B
g
g
K
K
A
A
B
B
Adrian Perrig and Dawn Song NDSS - APG 13Results: Symmetric-Key Authentication Protocols II
(cid:15)
For bandwidth-limited devices, we want to minimise communication
overhead
(cid:15)
Increasing the sending cost reveals the following optimal protocol
P r o t o c o l : A
B
A
!
!
!
B
A
B
:
:
:
f
f
N
N
N
B
A
A
;
;
A
N
g
B
K
g
A
K
B
A B
Adrian Perrig and Dawn Song NDSS - APG 14Results: Asymmetric-Key Authentication Protocols
(cid:15)
In the case of asymmetric keys, the fixed version of the
Needham-Schroeder protocol is optimal for communication-limited
and computation-limited settings
P r o t o c o l : A
B
A
!
!
!
B
A
B
:
:
:
f
f
N
N
N
B
A
A
;
;
A
N
g
B
K
;
B
B g K A
Adrian Perrig and Dawn Song NDSS - APG 15Remaining Challenges / Future Work
(cid:15)
Current work is on three-party authentication protocols
(cid:15)
Protocol space grows exponentially in protocol complexity
(cid:15)
Automatic generation of source code
(cid:15)
Repair of flawed protocols, protocol optimisation
Adrian Perrig and Dawn Song NDSS - APG 16Conclusions
(cid:15)
Initial results look promising, APG needs further study
(cid:15)
Even though two-party mutual authentication protocols were
intensely studied, APG discovered novel and efficient protocols
(cid:15)
APG generates custom-tailored optimal protocols for each
application
Adrian Perrig and Dawn Song NDSS - APG 17References
[Low96] G. Lowe. Breaking and fixing the Needham-Schroeder
public-key protocol using FDR. In Tools and Algorithms for
the Construction and Analysis of Systems, volume 1055 of
Lecture Notes in Computer Science, pages 147–166.
Springer-Verlag, 1996.
[NS78] R. Needham and M. Schroeder. Using encryption for
authentication in large networks of computers.
Communications of the ACM, 21(12):993–999, 1978.
[Son99] Dawn Song. Athena: An automatic checker for security
protocol analysis. In Proceedings of the 12th Computer
Science Foundation Workshop, 1999.
[THG98] F.Javier Thayer, Jonathan C. Herzog, and Joshua D. Guttman.
Strand spaces: Why is a security protocol correct? In
Adrian Perrig and Dawn Song NDSS - APG 18Proceedings of 1998 IEEE Symposium on Security and
Privacy, 1998.
Adrian Perrig and Dawn Song NDSS - APG 19