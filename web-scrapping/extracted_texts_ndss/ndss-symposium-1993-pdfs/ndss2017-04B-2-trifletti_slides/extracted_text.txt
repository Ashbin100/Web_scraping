Constant Round
Maliciously Secure 2PC
with Func8on-independent
Preprocessing using LEGO
Jesper Buus Nielsen, Thomas Schneider and Roberto TrifileIOutline
1. Intro to Secure Two-party Computa5on
2. Protocol Overview
3. Experimental Results
2Secure 2PC
​𝑃↓1 ​𝑃↓2
𝑥
𝑦
​
𝑓(𝑥,𝑦) ℱ↓2PC 𝑓(𝑥,𝑦)
↑𝑓
Nothing but the output 𝑓(𝑥,𝑦) is revealed to the par5es.
Task: realize above scenario using a cryptographic protocol.
Powerful: can build most other crypto from secure computa5on.
Applica5ons:
◦ Privacy preserving data analysis
◦ Secure outsourcing
◦ Company benchmarking
◦ Satellite collision detec5on
3Example Applica8on: Secure outsourcing
𝑦
𝑧
​𝑧↓1
​𝑦↓2
​𝑥↓2
​𝑦↓1
​𝑧↓2
𝑥
​𝑥↓1
𝑓(𝑥,𝑦,𝑧)
​𝑆↓1 ​𝑆↓2
1 honest server: No client info can leak
Secret sharing: 𝑥=​𝑥↓1 +​𝑥↓2
2PC
4Security models
Two main types
◦ Semi-honest: The servers run the protocol/code as prescribed. Guaranteed that data cannot leak if
servers do not collude.
◦ Protects against breaches “aPer-the-fact”, but not if a server is taken over during computa5on.
◦ Malicious: No assump5ons on server behavior. As long as one server is honest, data cannot leak.
◦ Protects against online aTacks, robustness.
Security at a price
◦ Malicious security much harder/expensive than semi-honest. OPen 10-100x in computa5on/
communica5on.
5In this Work
First implementa5on of constant round malicious 2PC with func,on-independent preprocessing
◦ Allows the servers to run up to 90% of the total computa5on independent of clients and func5on(s).
◦ Func5on-dependent computa5on matches the semi-honest se\ng.
◦ Improves clients’ experience as latency is significantly reduced.
Show for the first 5me that LEGO technique for malicious 2PC is highly prac5cal.
◦ Up to 50x faster than previous protocols if ignoring cost of independent preprocessing.
◦ Within factor 3x if comparing total costs.
6Garbling Schemes [BHR12]
G=(𝐺𝑏,𝐸𝑛𝑐,𝐸𝑣,𝐷𝑒𝑐)
𝑑
𝐶 𝐷𝑒𝑐
𝐺𝑏 𝑧=𝐶(𝑥)
𝐹 𝑍
𝐸𝑣
𝑒
𝑋
𝐸𝑛𝑐
𝑥
• Privacy: Given (𝐹,𝑋,𝑑), only learn 𝐶(𝑥).
• Op5miza5on: Free-XOR [KS08], no data
transfer for XOR gates.
7Semi-honest: Yao’s garbled circuits
(𝐹,𝑒,𝑑)←𝐺𝑏(𝐶)
(​𝑋↓1↑0 ,​𝑋↓1↑1 ,…,​𝑋↓𝑛↑0 ,​𝑋↓𝑛↑1 )←𝑒
​𝑃↓𝐶 ​𝑃↓𝐸
𝑋←𝐸𝑛𝑐(𝑥,𝑒)
𝑥 𝑦
(𝐹,𝑋,𝑑)
​𝑋↓𝑗↑0
​𝑦↓𝑗
​ℱ↓OT
​𝑋↓𝑗↑​𝑦↓𝑗 𝑌←(​𝑋↓1 ,​𝑋↓2 ,​𝑋↓𝑛 )
​𝑋↓𝑗↑1
𝑍←𝐸𝑣(𝐹,𝑌)
𝑧←𝐷𝑒𝑐(𝑍,𝑑)
𝑧=𝐶(𝑥,𝑦)
8Malicious adversary
Yao’s garbled circuits completely break against malicious behavior.
◦ ​𝑃↓𝐶 can garble ​𝐶↑′ ≠𝐶 and ​𝑃↓𝐸 would never know.
◦ Selec5ve Failure ATack: Make ​𝑃↓𝐸 abort depending on his input (thus leaking informa5on about 𝑦).
9Malicious: “Standard” Cut-and-choose
Main idea
◦ Send mul5ple garblings ​𝐹↓1 ,​𝐹↓2 ,…,​𝐹↓𝑚 , check some, evaluate the rest.
◦ Not trivial to ensure nothing can go wrong.
Replica5on cost
◦ [Bra13,HKE13,Lin13]: 𝑠 circuits gives ​2↑−𝑠 security.
◦ 40-80x blowup in communica5on/computa5on.
Amor5za5on
◦ [LR15,RR16]: 𝑂(​𝑠⁄log​(#𝐶) ) circuits gives ​2↑−𝑠 , i.e. cut-and-choose overhead is amor5zed over
mul5ple individual computa5ons of 𝐶.
10LEGO
[NO09] introduced LEGO technique for maliciously secure 2PC based on cut-and-choose of Garbled Circuits.
Considers gates instead of circuits for cut-and-choose.
◦ Asympto5c improvement, 𝒪(​𝑠⁄​log(⁠|𝐶|) ) vs 𝒪(𝑠).
◦ Allows preprocessing that is independent of 𝐶.
◦ Requires “soldering” individual gates to form a circuit using homomorphic commitments.
[NO09] downsides
◦ Expensive public-key opera5ons for each gate of the circuit.
◦ Incompa5ble with op5miza5ons of Yao’s garbled circuits.
[FJNNO13, FJNT15, FJNT16] Improvements
◦ Eliminate public-key opera5ons for each gate.
◦ Compa5ble with all known op5miza5ons.
◦ Efficient XOR-homomorphic commitment scheme based on ECC and OT.
Folklore: LEGO is asympto,cally efficient, but not prac,cal due to the commitment overhead.
11Outline
1. Intro to Secure Two-party Computa5on
2. Protocol Overview
3. Experimental Results
12Phase 1: Preprocessing
𝑛⋅ AND ​𝑃↓𝐶 ​𝑃↓𝐸 𝑛⋅ AND
Send Gates G={​𝐺↓𝑖 } and commit to all inp/out wires
Send check-set 𝑉⊂𝐺
Check that they
Decommit to input and output wires of gates in 𝑉
correspond to AND gates
Permuta5on 𝐵 specifying bucke5ng If OK!
Decommit solderings of remaining gates in according to 𝐵
Very parallelizable!
X 𝑛
Everything so far independent of final func,onality 𝐶
13Phase 2: Func8on soldering
𝐶 ​𝑃↓𝐶 ​𝑃↓𝐸 𝐶
Decommit solderings of |𝐶| buckets so they compute 𝐶
X 𝑛
Data transfer cost:
◦ 2⋅|𝐶| decommits
◦ With [FJNT16] commit scheme: 2⋅|𝐶|⋅𝑘+𝑐 (~1 garbled circuit).
𝐺𝑏(𝐶)=
◦ Non-LEGO: 𝒪(𝑠⋅|𝐶|⋅𝑘)
𝑘 comp. security param, 𝑠 stat. security param.
14Phase 3: Evalua8on
𝑥 ​𝑃↓𝐶 ​𝑃↓𝐸 𝑦
​𝑋↓𝑗↑0
​𝑦↓𝑗
​ℱ↓OT
​𝑋↓𝑗↑​𝑦↓𝑗
​𝑋↓𝑗↑1
​(𝑋↓𝑖↑​𝑥↓𝑖 ,𝑑)
𝑋
Highlights:
◦ LEGO: Single set of input keys vs. non-LEGO: one per eval circuit.
◦ Op5mal 2 rounds (3 if ​𝑃↓𝐶 gets output)
𝐺𝑏(𝐶)=
◦ Computa5on: Evalua5ng 𝒪(​𝑠⁄​log(⁠|𝐶|) ) garbled circuits.
𝑍=𝐸𝑣(𝐹,𝑋)
𝑧=𝐷𝑒𝑐(𝑍,𝑑)
15Outline
1. Intro to Secure Two-party Computa5on
2. Protocol Overview
3. Experimental Results
16Observa8ons
The overhead of the commitments dominate the preprocessing phase, ~70% of total 5me.
◦ Spent great care op5mizing the commitment scheme implementa5on.
◦ Includes u5lizing efficient BitMatrix transposi5on and Intel AVX instruc5ons for compu5ng several linear
combina5ons in parallel over hundreds of millions of values.
Clear that network bandwidth is the major boTleneck.
17Performance Comparison (AES-128)
ms/AES
0 10 20 30 40 50
1
32
128
1024
[WMK17]: “Faster Two-Party Computa5on Secure Against Malicious Adversaries in the Single-Execu5on Se\ng”, Eurocrypt 17
[RR16]: “Faster Malicious 2-party Secure Computa5on with Online/Offline Dual Execu5on”, USENIX 16
Source: h"ps://github.com/AarhusCrypto/TinyLEGO
18
SEA#
Amor5zed Func5on-Dependent Time
ms/AES
0 20 40 60 80 100 120
1
[WMK17]
[RR16]
32
This
128
1024
SEA#
Amor5zed Total Time
[WMK17]
[RR16]
This
AWS c4.8x instances, LANIn Conclusion
LEGO is compe,,ve with state-of-the-art 2PC,
and even surpasses previous best results if u,lizing func,on-independent preprocessing.
19Thank you
20References
[BHR12] Mihir Bellare, Viet Tung Hoang, Phillip Rogaway: Founda>ons of Garbled Circuits, CCS 2012.
[KS08] Vladimir Kolesnikov, Thomas Schnieder: Improved Garbled Circuit: Free XOR Gates and Applica>ons,
ICALP 2008
[NO09] Jesper Buus Nielsen, Claudio Orlandi: LEGO for Two Party Secure Computa>on, TCC 2009.
[FJNNO13] Tore Kasper Frederiksen, Thomas P. Jakobsen, Jesper Buus Nielsen, Peter Sebas5an Nordholt, Claudio
Orlandi: MiniLEGO: Efficient Secure Two-Party Computa>on From General Assump>ons, Eurocrypt
2013.
[FJNT15] Tore Kasper Frederiksen, Thomas P. Jakobsen, Jesper Buus Nielsen, Roberto Trifile\:
TinyLEGO: An Interac>ve Garbling Scheme for Maliciously Secure Two-party Computa>on, ePrint
2015.
[FJNT16] Tore Kasper Frederiksen, Thomas P. Jakobsen, Jesper Buus Nielsen, Roberto Trifile\: On the
Complexity of Addi>vely Homomorphic UC Commitments, TCC-A 2016.
[RR16] Peter Rindal, Mike Rosulek: Faster Malicious 2-Party Secure Computa>on with
Online/Offline Dual Execu>on, USENIX 2016.
[WMK17] Xiao Wang, Alex J. Malozemoff, Jonathan Katz: Faster Two-Party Computa>on Secure Against
Malicious Adversaries in the Single-Execu>on Se[ng, Eurocrypt 2017.
21