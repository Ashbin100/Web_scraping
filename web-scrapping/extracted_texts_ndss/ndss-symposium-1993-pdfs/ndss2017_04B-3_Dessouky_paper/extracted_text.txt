Pushing the Communication Barrier in Secure
Computation using Lookup Tables
Ghada Dessouky∗, Farinaz Koushanfar†, Ahmad-Reza Sadeghi∗, Thomas Schneider‡,
Shaza Zeitouni∗, Michael Zohner‡
∗TU Darmstadt, System Security Lab, Email: name.surname@trust.tu-darmstadt.de
†University of California, Adaptive Computing and Embedded Systems Lab, Email: fkoushanfar@ucsd.edu
‡TU Darmstadt, Engineering Cryptographic Protocols Group, Email: name.surname@crisp-da.de
Abstract—Secure two-party computation has witnessed sig- functionevaluationandisindependentofthepertinentfunction
nificant efficiency improvements in the recent years. Current and the parties’ private inputs. It allows to pre-compute all
implementations of protocols with security against passive ad- communication-intensive symmetric cryptographic operations
versaries generate and process data much faster than it can be and oblivious transfers (OTs, cf. §II-C) to generate helper
sent over the network, even with a single thread. This paper
data. The online phase begins when the parties secret-share
introduces novel methods to further reduce the communication
their private inputs and lasts throughout the evaluation of the
bottleneckandroundcomplexityofsemi-honestsecuretwo-party
function circuit using the pre-computed helper data until the
computation. Our new methodology creates a trade-off between
finaloutputiscomputed.Themaindifferenceofbothprotocols
communication and computation, and we show that the added
computing cost for each party is still feasible and practicable in isthattheroundcomplexityoftheonlinephaseisconstantfor
light of the new communication savings. We first improve com- Yao’s protocol, but linear in the depth of the circuit in GMW.
municationforBooleancircuitswith2-inputgatesbyfactor1.9x
whenevaluatedwiththeprotocolofGoldreich-Micali-Wigderson In recent years, the practical efficiency of secure two-
(GMW). As a further step, we change the conventional Boolean partycomputationschemeshasbeendramaticallyimprovedby
circuit representation from 2-input gates to multi-input/multi- orders of magnitudes, making solutions ready for deployment
outputlookuptables(LUTs)whichcanbeprogrammedtorealize in practice [BCD+09], [BJSV15], [Sec15], [SHS+15]. One of
arbitrary functions. We construct two protocols for evaluating the key enablers for these improvements has been the efficient
LUTs offering a trade-off between online communication and instantiation of underlying cryptographic primitives, which
total communication. Our most efficient LUT-based protocol
decreased the computational cost per cryptographic operation
reduces the communication and round complexity by a factor
close to negligible [BHKR13], [GLNP15]. While the com-
2-4x for several basic and complex operations. Our proposed
putation has been dramatically reduced, the communication
scheme results in a significant overall runtime decrease of up to
improvements have been smaller, shifting the bottleneck in
a factor of 3x on several benchmark functions.
current protocol implementations towards communication. In
I. INTRODUCTION particular, the work of [BHKR13] computes at the speed of
nearly2Gbit/secondperthread.Ithasbeenshownin[ZRE15]
Secure computation allows two or more parties to evaluate thattoday’sbestinstantiationofYao’sprotocolof[ZRE15]has
a public function on their private inputs without revealing any hitalowerboundoftwoκ-bitciphertextsperANDgateinthe
informationexceptwhatcanbeinferredfromtheoutput.Inthe Boolean circuit, where κ is the symmetric security parameter.
context of secure two-party computation with security against
passive(semi-honest,honestbutcurious)adversaries,themost In contrast, for the GMW protocol, it has been shown that
prominentprotocolsareYao’sgarbledcircuits[Yao86]andthe itisstillpossibletoachievecommunicationlessthantwoκ-bit
protocol by Goldreich-Micali-Wigderson (GMW) [GMW87]. ciphertexts per AND gate [KK13]. The GMW protocol allows
Yao’s garbled circuits protocol securely evaluates a function, that all symmetric cryptographic operations are pre-computed
representedasBooleancircuit,inaconstantnumberofrounds. in the setup phase without knowing the function beforehand,
TheBooleancircuitconsistsofXORgates,whichcanbeeval- unlike Yao’s protocol, and thus offers the possibility of a very
uated for free [KS08], and AND gates, for which the parties efficient online phase. Therefore, GMW is the candidate of
have to send data. The GMW protocol also works on Boolean choice in our work and the basis of our improved protocols.
circuitswhereXORgatescanbeevaluatedlocallywithoutany However, the multi-round online phase of GMW greatly re-
communicationandisdividedintwophases:asetupphaseand duces its practicality for many real-world secure computation
anonlinephase.Thesetupphaseisexecutedpriortotheactual applications. In order to speed up this online phase, recent
work of [IKM+13], [DZ16] has introduced protocols that
use multi-input tables rather than traditional 2-input Boolean
Permission to freely reproduce all or part of this paper for noncommercial gates to reduce the number of communication rounds. To pre-
purposes is granted provided that copies bear this notice and the full citation
compute these tables, the communication complexity in the
on the first page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the first-named author setup phase was extremely increased, which is a common
(for reproduction of an entire paper only), and the author’s employer if the approach for improving the online phase. However, the large
paper was prepared within the scope of employment. communication overhead introduced by these protocols is
NDSS ’17, 26 February - 1 March 2017, San Diego, CA, USA
particularly intolerable for most practical purposes and real-
Copyright 2017 Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23097 worldapplicationsandwouldscaleverypoorlyasthefunctionsize grows. Furthermore, the protocols are mostly theoretical Compiler for LUT-based Secure Computation. Since we
with no evaluation of applicability besides AES in [DZ16]. move away from 2-input Boolean gates, we require new op-
timized LUT-based circuit representations of functions. How-
In summary, the main bottlenecks in passively secure two-
ever, building such circuits by hand is tedious, challenging,
party computation today are the setup communication (which
and error-prone. Instead, we construct an automated toolchain
dominatesthetotalcommunication)andtheonlineroundcom-
that transforms high level function descriptions into a LUT
plexity,bothofwhichareoftenatatrade-off.Existinggeneral
representation.Morespecifically,were-purposehardwaresyn-
purpose schemes achieve either low setup communication or
thesistoolsforsecurecomputationasfirstshownin[SHS+15],
low online round complexity, but not both.
[DDK+15], but for LUT-based synthesis tools, which we
customize and manipulate to automatically and efficiently
A. Our Contributions generate multi-input multi-output LUT representations. An in-
depthdescriptionofthehardwaresynthesistoolleveragedand
Inthispaper,wepresentamoreholisticend-to-endsolution
how we re-purpose it can be found in §V.
that significantly reduces the communication complexity in
semi-honest secure two-party computation, while simultane-
ously maintaining a low number of communication rounds. Evaluation on Basic Operations and Applications. We
demonstrate the improved efficiency and practicality of our
LUT protocols by evaluating a wide range of functionalities.
LUT-based Secure Computation. We replace the function
Our protocols are shown to improve on the communication
representation as 2-input Boolean gate circuit by a more
compact multi-input lookup table (LUT)-based representation. of floating point operations by factor 2-4x and the round
complexity by factor 3-4x. We report and discuss our ex-
This enables the evaluation of more complex functions by
tensive evaluation results for basic operations in §VI and
representing the entire functionality as a compact graph of
more complex applications in §VII. For some operations, our
interconnected LUTs. We propose protocols to evaluate LUT-
most efficient LUT protocol achieves as little as half a κ-bit
based circuits which reduce the communication overhead sig-
ciphertext communication per AND gate. In terms of actual
nificantly by a factor 4x compared to state-of-the-art Yao’s
runtime,ourprotocolsachieveupto3xfasterruntimeforAES
protocol [ZRE15] and the round complexity by factor 4x
and private set intersection.
compared to the GMW protocol. Using multi-input gates in
secure computation has been investigated before, but previous
works incurred a drastic communication overhead even for
B. High-Level Idea of Our Scheme
a small number of inputs and only considered this approach
for special functions such as the AES S-box, rendering their We construct a toolchain, presented in Fig. 1, that com-
protocols unpractical, non-generic, and unscalable for real- piles functions described in a high-level hardware descrip-
worldapplications[HEKM11],[KK12],[IKM+13],[MPS15], tion language into a mixed representation of LUTs and 2-
[DZ16]. In contrast, we generalize our protocols to enable input Boolean gates using a hardware synthesis tool that
computation of any functionality making them more practical we customize and re-purpose for our setting. These circuit
and scalable for real-world applications. representations can then be evaluated in a communication-
efficient manner using our OP-LUT or SP-LUT protocols for
LUT Protocols. We construct two protocol variants for eval- LUT gates and using GMW with our N-MT pre-computation
uating LUT-based circuits, called OP-LUT and SP-LUT, that method for 2-input Boolean gates. Note that the LUT pro-
offeratrade-offbetweenimprovedonlinecommunication(OP- tocols can be freely combined with GMW at no additional
LUT) and improved setup/total communication (SP-LUT). cost, since all schemes are based on XOR secret sharing.
Our LUT protocols can also be used to evaluate 2-input Our protocols are based on the
(cid:0)N(cid:1)
OT extension protocol
1
Boolean gates using the GMW protocol at no additional cost, of [KK13] which runs in the setup phase that we further
since all use XOR-based secret sharing. This allows that we optimize in terms of both communication and computation.
can effectively and seamlessly combine the benefits of both We evaluate our protocols on various basic operations and
representations with our protocols. Further details on their applications in secure computation and show that our LUT
construction can be found in §IV. protocolsoftenachievesignificantlybettercommunicationand
round complexity than traditional 2-input Boolean gate repre-
More Efficient (cid:0)N(cid:1) OT Extension. A key building block for sentations. Our synthesized LUT representations and imple-
our LUT protocol1 s is the 1-out-of-N oblivious transfer exten- mentations are available within the ABY framework [DSZ15]
sion protocol, denoted as
(cid:0)N(cid:1)
OT extension. We use the most
at http://github.com/encryptogroup/ABY.
1
communication-efficient OT of [KK13] as a starting point and
introduce further optimizations to reduce both its computation
C. Outline
and communication overhead. We propose a protocol called
N-MT (multiplication-triple generation based on
(cid:0)N(cid:1)
OT), We provide preliminaries and background in §II. Next,
whichleveragesouroptimizationstoachieveacommu1
nication we describe in more detail our improved
(cid:0)N(cid:1)
OT extension
1
reduction per AND gate by a factor of 1.9x from 256 bits to protocol in §III, followed by a description of our LUT-
134bitsintheGMWprotocol,forsecurityparameterκ=128, based representation and protocols in §IV. Our customized
in comparison to the traditional 2-MT (multiplication-triple hardware synthesis approach is given in §V. Finally, we show
generation based on
(cid:0)2(cid:1)
OT) of [ALSZ13] and a reduction an extensive evaluation of our toolchain for basic operations
1
by a factor of 1.2x compared to the protocol of [KK13]. We in§VIandapplicationsin§VII.Wegiverelatedworksin§VIII
describe our optimization techniques in detail in §III. before we conclude and give future works in §IX.
2Input P Input P
0 1
HW Synthesis Representation
SP-LUT OP-LUT N-MT
Functionality
LUT
in HDL
(cid:0)N(cid:1)OTExtension
LUT 1
Output
Fig.1. Ourtoolchainforcompilingahigh-levelhardwaredescriptionlanguageintoanetworkof2-inputBooleangatesandLUTsandevaluatingthemusing
ourcommunication-efficientSP-LUT,OP-LUT,andN-MTprotocols,whichbuildonourimproved(cid:0)N(cid:1)
OTextensionprotocol.
1
II. PRELIMINARIES only. Due to their nature, these protocols are called OT
extension protocols. The communication cost of today’s most
A. Notation efficient 1-out-of-2 OT extension protocol is C((cid:0)2(cid:1) OTm)=
1 n
We denote the two parties as P and P or sender P and mκ + 2mn bits [ALSZ13], [KK13]. The implementation
0 1 S
receiverP andthesymmetricsecurityparameterasκ,which of [ALSZ13] is able to compute one million OTs per second.
R
we fix to κ=128 throughout this paper.
RandomOT.RandomOTisaspecial-purposeOTfunctional-
B. LUT-based Boolean Circuits ity, tailored for more efficient secure computation. In contrast
to the standard OT functionality, in a 1-out-of-N random OT,
Inourcontext,aLookupTable(LUT)isthesetofallfunc-
denoted
(cid:0)N(cid:1)
R-OT, the sender inputs no messages to the OT
tions that map δ ≥2 input bits to σ output bits (cf. Fig. 2 for 1
protocol, but receives the messages as a random output of
anexample).Usingthisrepresentation,complexfunctionalities
the protocol itself, while the receiver still inputs its selection
can be built as a compact graph of interconnected LUTs.
string to choose one. This allows to remove the last message
Boolean Circuit Lookup Table in the OT which decreases the communication to
C((cid:0)2 1(cid:1)
R-
OTm)=mκ bits [ALSZ13], [KK13].
n
a b c a b c
a b c d
D. Yao’s Garbled Circuits
0 0 0 0
∧ ⊕ 0 0 1 0 Yao’s garbled circuits protocol [Yao86] allows two parties
0 1 0 0
LUT 0 1 1 0 to securely evaluate any function, represented as a Boolean
1 0 0 0 circuit. One party, the circuit garbler, assigns symmetric keys
∧
1 0 1 0 corresponding to 0 and 1 to the wires of the Boolean circuit.
1 1 0 1
The garbler then garbles the circuit by encrypting the keys
1 1 1 0
d d of the output wires of each gate using the keys of the gate’s
input wires. These encryptions form the garbled tables of the
Fig.2. Afunction withδ =3inputand σ =1outputbitsrepresented as circuit and are transferred to the evaluator, together with the
Booleancircuitwith2-inputgates(left)andlookuptable(right). keysthatcorrespondtobothparties’inputwirestothecircuit.
The evaluator then iteratively decrypts the correct output keys
C. Oblivious Transfer ofthegatesusingthecorrespondinginputkeysandobtainsthe
outputofthecircuitusingamapping,providedbythegarbler.
In 1-out-of-N oblivious transfer, denoted
(cid:0)N(cid:1)
OT, a Several optimizations for Yao’s garbled circuits have been
1
sender P S inputs N messages (x 1,...,x N) from which a re- proposed, most notably: point-and-permute [MNPS04], free-
ceiver P R with selection input r ∈[1...N] obtains message x r XOR [KS08], fixed-key AES garbling [BHKR13], and half-
obliviously such that P S does not learn P R’s choice r and P R gates [ZRE15]. Overall, the garbler has to send 2κ bits to the
does not learn any information about x i with i (cid:54)= r. By evaluatorperANDgate,whichcanbedoneinthesetupphase
(cid:0)N 1(cid:1) OTm n we denote m invocations of (cid:0)N 1(cid:1) OT, where each if the function is known. In the online phase, the evaluator
of the N messages has length n bits. OT is a fundamental locally decrypts the garbled table and computes the output in
primitive in cryptography and heavily used in secure compu- a constant number of communication rounds.
tation. In [IR89] it was shown that OTs cannot be based on
one-way functions, i.e., OT requires at least some public-key
E. Goldreich-Micali-Wigderson
cryptography. Today’s fastest public-key based OT protocol of
[CO15] is able to compute 10,000 OTs per second. TheGMWprotocol[GMW87]forsecurecomputationalso
represents a function as a Boolean circuit and secret shares
OT Extension. In [IKNP03] it was shown that it is pos- the values on the wires between the parties using an XOR-
sible to “extend” a few (around κ) public-key base-OTs to based secret-sharing scheme. XOR gates can be evaluated for
an arbitrary number of OTs using symmetric cryptography free locally by XORing the shares while AND gates require
3one interaction step between the parties using a multiplication optimization mechanisms to effectively reduce both, its com-
triple. A multiplication triple (MT) is a set of shares of the putation and communication overhead.
form (c ⊕ c ) = (a ⊕ a ) ∧ (b ⊕ b ), where P holds In this section, we give an overview of the
(cid:0)N(cid:1)
OT proto-
0 1 0 1 0 1 i 1
the shares labeled with i, for i ∈ {0,1}. MTs can be pre- col (§III-A), outline how to more efficiently instantiate the
computedusing(cid:0)2(cid:1) R-OT2 atthecostof2κbitsofcommuni- underlying error correcting code (§III-B) and sample random
1 1
cation [ALSZ13] and are used in the online phase to evaluate choice bits of the receiver to reduce the communication
AND gates at the cost of 4 bits communication. In §III-E overhead (§III-C). Next, we present our optimizations of
we show how to pre-compute MTs with less communication the underlying symmetric cryptographic primitives to reduce
overhead using the
(cid:0)N(cid:1)
OT extension of [KK13]. For details the computation overhead (§III-D). Finally, we show how
1
on the GMW protocol please refer to [DSZ15]. to optimize the evaluation of AND gates and reduce the
communication overhead in the setup phase of the GMW
F. Size and Depth of Boolean Circuits protocol (§III-E). We call our resulting protocol that combines
our proposed optimizations for more efficient evaluation of
Forourlaterevaluationin§VI-A,weboundthemultiplica- AND gates N-MT. We give a full description of the (cid:0)N(cid:1) OT
tive size (the number of AND gates) and depth (the highest extension protocol of [KK13] in Prot. 1. 1
number of ANDs from any input to any output) of a Boolean
circuit. For many functionalities, a low multiplicative size
A. Protocol Description
and a low multiplicative depth are two mutually exclusive
goals. Hence, we first outline the case for Boolean circuits In the
(cid:0)2(cid:1)
OT extension protocol of [IKNP03], the parties
1
with δ input bits and σ =1 output bit, since this allows us to use multiple base-OTs to obliviously transfer shares of the
settighterupperbounds,andthenexaminethecaseforσ >1. receiver’s selection bits. The main observation of the
(cid:0)N(cid:1)
OT
1
protocol of [KK13] was that this approach can be generalized
Boolean Circuits with One Output Bit. It was shown to have both parties share a ρ-bit codeword from a code Γρ
in [TP14] that any functionality with δ ≤ 5 input bits can be with codewords of Hamming distance κ. These codewords
realizedbyaBooleancircuitwithatmostδ−1ANDgates.For encode the receiver’s selection strings and constitute the main
functionswithδ >5inputs,aboundonthemaximumnumber component of the communication workload of the OT exten-
of AND gates is still unknown but, according to [TP14], sion protocol.
“no specific δ-variable function has yet been proven to have For N = 2, a repetition code can be used, which has 2
multiplicative complexity larger than δ − 1 for any δ”. We codewords of size ρ = κ. In this case, the
(cid:0)N(cid:1)
OT protocol
bound the number of AND gates in a Boolean circuit C of [KK13] is identical to the
(cid:0)2(cid:1)
OT
protocol1
of [IKNP03].
1
with δ inputs by S(C) ≤ δ − 1. In [BB94] it was shown For 2 < N ≤ 2κ, the authors of [KK13] propose to use a
that every Boolean circuit of multiplicative size n has an Walsh-Hadamardcodewhichhascodewordsofsizeρ=2κto
equivalentBooleancircuitofmultiplicativedepthO(logn)and achievearelativeHammingdistanceofκ.Theyshowthat,for
size O(nα) for arbitrary α > 1. We bound the multiplicative appropriatechoiceofparameters(κ=128,ρ=256,N =16),
depth of a circuit C with δ inputs by D(C)≤log 2(δ). g oe nn lyer 3a 2ti 0ng bit(cid:0) s2
1
o(cid:1) fO cT oml 1og m2 uN nif cr ao tm ionth we hir il(cid:0) eN
1
th(cid:1) eO (cid:0)2T (cid:1)p Or Tot oo fco [Il Kre Nq Pu 0ir 3e ]s
,
1
Boolean Circuits with Multiple Output Bits. Finding a [ALSZ13] requires 520 bits.
size- or depth-optimal Boolean circuit for functionalities with For N > 2κ, a linear error-correcting code achieves the
σ > 1 outputs is a hard problem for a larger number of best performance. In particular, when N = poly(κ), the
inputs δ [BP12] and determining a minimal upper bound is communication cost for the OT extension part of (cid:0)N(cid:1) OT
1
a complex task out of scope of this paper. A more tractable invocationsdecreasesasymptoticallyfromO(κlogN)toO(κ)
approach to find a possible upper bound is to build optimal compared to a (cid:0)2(cid:1) OT instantiation.
Boolean circuits for each output bit separately. In this paper, 1
wetakethisapproachandassumethataBooleancircuitC with
B. Our Size-Optimized Codes
δ input and σ output bits has at most size S(C)≤σ(δ−1) if
optimized for size and D(C)≤log δ if optimized for depth. The efficiency gains from the
(cid:0)N(cid:1)
OT extension protocol
2 1
of [KK13] for N >2 are due to efficient instantiations of the
III.
MOREEFFICIENT(cid:0)N(cid:1)
OTEXTENSION
underlying codes. For 2 < N ≤ 2κ, [KK13] uses a Walsh-
1 Hadamard code, which has codewords of size ρ = 2κ = 256
In order to evaluate a function using our LUT protocols, bits to achieve a Hamming distance of κ = 128 between
we pre-compute the LUTs using OT. However, using the codewords. However, for N =2i, with 2≤i≤8, the Walsh-
standard
(cid:0)2(cid:1)
OT extension protocol of [IKNP03], [ALSZ13] Hadamardcodeisnotsize-optimalwithregardtothecodeword
1
to pre-compute the LUTs would result in a higher commu- size ρ. Hence, we propose to use more size-efficient codes
nication overhead than evaluating traditional Boolean circuits. in order to further decrease the communication. We base our
Therefore, for improved communication efficiency, we make code choices on the list of efficient codes in [SS06] and give
use of the
(cid:0)N(cid:1)
OT extension protocol of [KK13]. Although the codeword sizes for N = 2i for 1 ≤ i ≤ 12 in Tab. I.
1
the [KK13] OT extension protocol is very communication- In particular, for N = 4 we use a parity check code, for
efficient,itincursasignificantcomputationoverhead:N sym- N ∈{8,16,32,64,128,256},weuseaSimplexcode,forN =
metric operations compared to 2log N symmetric operations 512, we use a Reed-Muller code, for N ∈ {1,024,2,048},
by the
(cid:0)2(cid:1)
OT extension protocol
of2
[IKNP03], [ALSZ13]. In we use a narrow-sense BCH-code, and for N = 4,096, we
1
this paper, we take the OT extension protocol of [KK13] as use the concatenation of a Denniston code and a Simplex
a starting point for improving communication and introduce code (see [SS06] for more details). The OT communication
4PROTOCOL1((cid:0)N(cid:1) OTextensionprotocol[KK13]): Overall, this enables us to further reduce the communication
• C (γo 1m ,.m
..,o1
γn NI )np wu itt h: ρS -y bm itm coet dr eic wos re dc su .rity parameter κ; code Γρ = wfo ir
th(cid:0)N
(cid:0)1
N(cid:1)
(cid:1)O RT -b Oy Tlo tog 2 fuN rthb ei rts r. eF duu crt ehe thrm eco ore m, mth uis nic ca an tib oe nc oo vm erb hi en ae dd
.
• InputofPS:mtuples(x1 j,...,xN
j
)ofn-bitstrings. 1
• Input of PR: m selection integers r =(r1,...,rm) with rj ∈
[N]. D. Pipelined AES-256
• O itir va ec ,l aes pa sen ud doc -r ry ap nt do og mra gp eh nic erap tr oi rm Gitiv :e {s: 0,A 1n }κide →al(cid:0) {2 1 0(cid:1) ,1O }T mρ κ ap nri dm a- In OT extension [IKNP03], [KK13], both parties process
correlation-robustfunctionH:[m]×{0,1}ρ→{0,1}n. severalvaluetuplesthatarecorrelatedbyaconstantXORoff-
1) PS initializesarandomvectors=(s1,...,sρ)∈R{0,1}κ and setusingacorrelation-robustfunction(CRF)(cf.H inStep5
2)
TP hR ec ph ao rto is ee ss inρ vop kai ers
(cid:0)2
1o (cid:1)fs Oe Ted
ρ
κs ,( wk hi0 e, rk ei1 P) S∈R ac{ ts0 a, s1} thκ e.
receiver with
a bn ed enS it ne sp tan6 tiain tedPr wot i. th1 a). hW ash hil fe unth cte ioC n,R mF oreha es ffit cra ied nit tio Ana El Sly
-
inputsandPR actsasthesenderwithinputs(k i0,k i1)forevery based constructions have been used to replace it [KSS12],
1≤i≤ρ. [BHKR13], [GLNP15]. When using the most efficient, fixed-
3)
PG C cP
j
RR ( )=k wi c0fo [ o) ic tr mh1m ( | pw cs . ujh . tt e ew . =r s|eo c aγmi nm rt ds ] j,× i s( f- ew ot nh rρ h de
1
scb ro e ≤i ut lu i itm m is =≤a n it -r ttii ρh isce ⊕c ats o ni l
d
GT ua m (1n k= d n
≤
i1ii )st[ jst ⊕c1 ≤j i| c-. at im. h n. td o.| rt o iρ Ptw s] Sjw i -s fti oht th rj r) o et vwi a en r= id ys k t
(cid:0)
bh
2
1e ie t(cid:1)y
.
b HOA lo oTE c wS k ee- vl xi e en tn
e
rs ,g nta t
s
in h nioti no ta hft ei po A rn (cid:0)oE NtS[
o
(cid:1)B , coH i O. leK T. o,R
f
e11 x23
[
t8 eI] K, n-b sNt i ih t oP,e n0w 3i on h
]
fp icu
w
[h Kt hs Ki es u
n
1ffir 3e
κ
]cs ,et sr w=ic f et oe r n1d e2th e8to de
-
1≤i≤ρ. 1
4) F tho ar te qv ie =ry (1 s≤ i·i ci≤ )⊕ρ, tP i.S
)
definesqi=(si·ui)⊕G(k isi).(Note wto hip cr hoc pe rs es vec no td se tw heord us seo of fs fiiz xe edρ -ke>
y
A1 E28 S.b Fi ats llif no gr bN ack> to2 a,
Let Q=[q1|...|q(cid:96)] denote the m×(cid:96) bit matrix where its i-th hash function or AES-256 with key schedule [KSS12] greatly
columnisqi.Letqj denotethej-throwofthematrixQ.(Note decreases performance by about an order of magnitude, as
thatqi=(si·ci)⊕ti andqj =(cj∧s)⊕tj.) depictedinTab.II.Furthermore,the(cid:0)N(cid:1)
OTprotocolrequires
5) Forp∈[N],PS computesy jp=xp
j
⊕H(j,qj⊕γp)andsends
N invocations of an expensive
CRF1
(instantiated via AES-
(y1,...,yN)forevery1≤p≤N and1≤j≤m.
6)
Foj r1≤jj
≤m,PR computesxj =y
jrj
⊕H(j,tj).
2 in5 v6 ocw ati it oh nske oy fsc ahe cd hu el ae peo rr CSH RA F-2 (5 in6 s) taa ns tio atp ep dos ve id
a
t Ao E2 Sl -o 1g 2N
8)
7) Output:PR outputs(x1,...,xm);PS hasnooutput.
when using
(cid:0)2(cid:1)
OT. In particular, for our protocols in §IV
1
we use N =256, which requires 256 CRF invocations when
improvements achieved by adopting our reduced codeword using
(cid:0)N(cid:1)
OT compared to 16 invocations when using
(cid:0)2(cid:1)
sizes are the largest for N = 4 (reduced by 64 bits) and OT.
Usi1
ng AES-256 with key schedule instantiation for
(cid:0)N1(cid:1)
1
decreasewithN growingtowards256(reducedby1bit).Note OT and the pipelined AES-128 instantiation of [GLNP15] for
thatusingsize-optimizedcodesdoesnotincreasecomputation
(cid:0)2(cid:1)
OT, this results in a computational overhead of 480x.
1
or reduce security over using the Walsh-Hadamard codes.
Primitive Width Time[ms] Pipe-Time[ms]
N 2 4 8 16 32 64 AES-128[BHKR13] 128 158 54
OurSize-EfficientCodes[bits] 128 192 224 240 248 252 AES-128+KS[GLNP15] 128 1,460 358
[KK13]Codes[bits] 128 256 256 256 256 256 AES-256+KS[KSS12] 256 1,625 476
N 128 256 512 1024 2048 4096 SHA-256 arbitrary 2,487 -
OurSize-EfficientCodes[bits] 254 255 256 264 268 270 TABLEII. INSTANTIATIONSOFACORRELATION-ROBUSTFUNCTION
[KK13]Codes[bits] 256 256 - - - - WITHINPUTWIDTHINBITSAND(PIPELINED)RUN-TIMEFOR107
TABLEI. COMMUNICATIONFOR(cid:0)N(cid:1) OTWITHSIZE-OPTIMAL INVOCATIONS.
1
CODES[SS06]COMPAREDTOTHOSEUSEDIN[KK13]. We improve the performance of the CRF instantiation
based on AES-256 with key schedule by pipelining the AES-
C. Random Choice Bits 256 key expansion and encryption routines as well as pipelin-
ing multiple invocations of AES, similar to the approach of
In all
(cid:0)N(cid:1)
OT protocol invocations throughout this work, [GLNP15] for AES-128. Thereby, we manage to decrease the
1
the receiver samples and inputs a random selection string computation time for AES-256 by factor 4, which reduces
r ∈ [1...N]. However, we observe that the communication the computational overhead compared to
(cid:0)2(cid:1)
OT to 140x.
fromR receiver to sender can be reduced by having the (cid:0)N(cid:1) OT When evaluating a (cid:0)256(cid:1) OT107 using the [K1 K13] protocol,
1 1 1
protocol sample r randomly during the execution and output thisreducestheevaluationtimefrom79sto22s.Forρ>256,
ittothereceiver.Inordertorandomlysampler,wetransform we instantiate the CRF with SHA-256.
the code Γρ into a systematic form, similar to [FJJBT16]. A promising line of research is given in [GM16], which
In the systematic form, the input data is embedded into the outlines how to obtain cryptographic permutations with larger
codeword, i.e., the integer s ∈ {0,1}log 2N is a sub-string of block sizes based on fixed-key AES-128. Due to security
codeword c s. Assume that s is embedded in the first log 2N concerns, however, we refrain from using their instantiations
positions of each c s. We can now let the receiver compute the but point it out as a future alternative to explore.
choice bits r in the j-th OT as r = r ||...||r with
j j j,1 j,log2N
r
i
=G(k i0) j⊕G(k i1)
j
in Step 2 in Prot. 1. Consequently, we
E. Multiplication Triples from
(cid:0)N(cid:1)
OT
can change Step 3 and Step 4 to avoid sending the u values 1
j
for these positions. In particular, we have P perform Step 3 To improve the communication in secure computation,
only for log N <i≤ρ and P compute
inR
Step 4: the work of [KK13] proposed to use their
(cid:0)N(cid:1)
OT protocol
2 S 1
to reduce (cid:0)N(cid:1) OT1 to (cid:0)2(cid:1) OTlog 2N . They achieved a
qi =(cid:26) G(k isi), if 1≤i≤log 2N communicati1 on savl io ng g2N of up t1 o 1.6x1 per (cid:0)2 1(cid:1) OT2 1, from 256
(s ·ui)⊕G(ksi), else. bits to 160 bits, when setting κ = 128 and N = 16. In this
i i
5work, we further improve on their communication savings by is that two parties hold secret shares T0 and T1 of a lookup
using our optimized
(cid:0)N(cid:1)
OT protocol to directly compute a table T, whose entries were randomly rotated across both
multiplication triple (M1 T), which corresponds to a (cid:0)4(cid:1) OT1. dimensions using r,s such that T0[i]⊕T1[i] = T[r⊕s⊕i],
For this reduction, we evaluate (cid:0)N(cid:1) OT1 which1 we ca1 n for all 0 ≤ i < 2δ. Each of the parties knows a secret share
directly transform to
(cid:0)4 1(cid:1) OTl 1og 4(N1 )
.
Welo vg a4 r( yN p)
ossible choices
o (Tf 0th ,e r)tr au nth d-t Pa 1bl ke na os ww se (l Tl 1a ,s st )h .e rotation value, i.e., P 0 knows
for N in Tab. III and observe that the highest improvement
of 1.9x is obtained for N = 16, where one MT can be Pre-Computation. During the setup phase, the truth-table T
computed at the cost of 134 bits in the setup phase, and 2 needs to be shared such that P holds (T0,r) and P holds
0 1
MTs at the cost of 268 bits as shown in Tab. III. Compared (T1,s). A possible method for pre-computing the table was
to the protocol in [KK13], our N-MT protocol reduces the outlined in [DZ16]: Both parties evaluate a Boolean circuit
communication by factor 1.2x from 160 bits to 134 bits. representing the table once for every possible input, resulting
Adding the 4 bits for the evaluation in the online phase, the in an overhead of factor 2δ compared to a Boolean circuit
total communication is now as low as 138 bits per AND gate. evaluation.1 In more detail, the parties represent the table T
as Boolean circuit C : {0,1}δ (cid:55)→ {0,1}σ. Then, P and P
N 4 8 16 32 64 128 256 0 1
choose their random rotations values r,s∈ {0,1}δ, securely
#Triples 1 1.5 2 2.5 3 3.5 4 R
2-MT 256 384 512 640 768 896 1,024 evaluateC(r⊕s⊕i)=z0⊕z1 andsetT0[i]=z0 andT1[i]=
i i i
N-MT 194 223 268 339 438 759 1,271 z1 for all i∈[0...2δ−1]. Assuming the upper bound of δ−1
Improvem. 1.32 1.72 1.91 1.89 1.75 1.18 0.81 i
AND gates for a Boolean circuit with δ inputs from §II-F and
TABLEIII. COMMUNICATIONFORGENERATINGMULTIPLICATION
TRIPLESUSING(cid:0)2(cid:1) R-OT[ALSZ13](2-MT)AND(cid:0)N(cid:1)
OT[KK13]WITH
the optimized multiplication triple generation at 138 bits per
OUROPTIMIZ1 ATIONS(N-MT).BESTRESULTSM1 ARKEDINbold. ANDgatefrom§III-E,thisresultsinanoverallcommunication
of at most 138(δ−1)2δ bits.
IV. LUT-BASEDSECURECOMPUTATION
In this section, we discuss how to model the functionality Online Evaluation. In the online phase, the OTTT protocol
as network of interconnected LUTs with multiple input bits of [IKM+13] takes as input two δ-bit share values x0 and x1
that can be evaluated in a constant number of rounds per such that x=x0⊕x1 and evaluates a function f, represented
layer of LUTs (§IV-A). We first summarize the one-time truth asalookuptableT.Thepartiesholdshares(T0,r)and(T1,s)
table (OTTT) approach of [IKM+13] with pre-computation of of a permuted lookup table T such that T0[i]⊕T1[i]=T[r⊕
[DZ16] (§IV-B). We then present our Online-LUT (OP-LUT) s ⊕ i], where r,s ∈ {0,1}δ and for all 0 ≤ i < 2δ. To
R
scheme, which is optimized for an efficient online phase but evaluateT,thepartiesexchangeu=x0⊕randv =x1⊕sand
has high communication in the setup phase (§IV-C). Next, computetheshared resultz0 =T0[u⊕v] and z1 =T1[u⊕v].
we give the Setup-LUT (SP-LUT) protocol that dramatically To see that z = T[x] = z0 ⊕ z1, observe that z0 ⊕ z1 =
reduces the communication in the setup phase but slightly T0[u⊕v]⊕T1[u⊕v]=T0[r⊕s⊕x]⊕T1[r⊕s⊕x]=T[x].
increases the communication in the online phase (§IV-D).
PROTOCOL2(OTTTEvaluation[IKM+13],[DZ16]):
Finally, we show how to optimize the online phase of the
• Common Input: Input bit-size δ; Output bit-size σ; N = 2δ;
SP-LUT protocol to achieve better round and communication
Truth-tableT :{0,1}δ (cid:55)→{0,1}σ.
complexityandhowtocomputeLUTswithoverlappinginputs • InputofP0:x0∈{0,1}δ.
more efficiently (§IV-E). We give a summary of the commu- • InputofP1:x1∈{0,1}δ.
nication costs for these protocols in Tab. IV. Pre-Computation[DZ16]:
1) ThepartiesrepresentT ascircuitC:{0,1}δ (cid:55)→{0,1}σ.
A. Lookup-Tables 2) P0 choosesr∈R{0,1}δ andP1 choosess∈R{0,1}δ.
3) P0 andP1 computez i0⊕z i1=C(s⊕r⊕i)andsetT0[i]=z i0
Forourprotocolsinthissection,weassumethattheparties andT1[i]=z1 forall0≤i<N.
i
have XOR secret-shared their private inputs and represent 4) Output:P0 outputs(T0,r);P1 outputs(T1,s).
Note:∀iwith0≤i<NitholdsthatT0[i]⊕T1[i]=T[r⊕s⊕i].
the functionality as network of LUTs and XOR gates. In
OnlineEvaluation[IKM+13]:
our context, a δ-input bit LUT with σ output bits is a table
that maps an δ-bit secret-shared input to σ-bit secret-shared
1) P0 sendsu=x0⊕r toP1;P1 sendsv=x1⊕stoP0.
2) P0 setsz0=T0[u⊕v];P1 setsz1=T1[u⊕v].
output and can thereby be used to represent any function 3) Output:P0outputsz0;P1outputsz1,s.t.z0⊕z1=T[x0⊕x1].
f : {0,1}δ (cid:55)→ {0,1}σ. In contrast to Boolean circuits based
on 2-input gates, LUT-based circuits do not use internal logic
operations to map inputs to outputs and their evaluation costs C. Online-LUT (OP-LUT)
depend only on the number of inputs and outputs. We show
howtopre-computeandevaluateaδ-bitinputLUTinthenext We propose another method for pre-computing the shared
sections. As in GMW, XOR gates can be evaluated locally permutedtable,whichperformsbetterforsmallnumberofin-
by both parties XORing their respective shares. Moreover, we
putsδ.Insteadofevaluatingacircuitonallpossibleinputs,one
can reduce the number of output bits if one output bit can be can directly transfer all possible choices of the rotated truth-
computed as a linear combination of other outputs.
tableviaouroptimized(cid:0)N(cid:1)
OTprotocoldescribedin§III.We
1
call this protocol OP-LUT and describe it in Prot. 3.
B. One-Time Truth Tables (OTTT)
1Note that the evaluated circuit can be optimized by removing duplicate
InthissectionwedescribetheOTTTprotocolof[IKM+13] gates [KSS12]. Assuming that the last gate in the circuit is an AND gate
(otherwise, one could remove that last gate from the LUT), we expect the
with circuit-based pre-computation from [DZ16], which is
circuitaftertheduplicateremovaltohaveatleastoneANDgateperinstance,
giveninProt.2.Thehigh-levelideabehindtheOTTTprotocol i.e.,2δ ANDgatesforthe2δ parallelevaluations.
6#Inputsδ 2 3 4 5 6 7 8 Asymptotic
SetupCommunication[bits]
OTTT[IKM+13] ≤552σ ≤2,208σ ≤6,624σ ≤17,664σ ≤44,160σ ≤≈217σ ≤≈218σ ≤138(δ−1)2δσ
OP-LUT(§IV-C) 16σ+190 64σ+221 256σ+236 1,024σ+243 4,096σ+246 ≈214σ ≈216σ C((cid:0)N(cid:1)OT1 )−δ
SP-LUT(§IV-D) 190 221 236 243 246 247 247
C((cid:0)1 N(cid:1)R-OσN
T)−δ
1
OnlineCommunication[bits]
OTTT/OP-LUT 4 6 8 10 12 14 16 2δ
SP-LUT 4σ+2 8σ+3 16σ+4 32σ+5 64σ+6 128σ+7 256σ+8 2δσ+δ
TotalCommunication(Setup+Online)[bits]
OTTT[IKM+13] ≤554σ ≤2,214σ ≤6,632σ ≤17,674σ ≤44,172σ ≤≈217σ ≤≈218σ
OP-LUT(§IV-C) 16σ+194 64σ+227 256σ+244 1,024σ+253 4,096σ+258 ≈214σ ≈216σ
SP-LUT(§IV-D) 4σ+192 8σ+224 16σ+240 32σ+248 64σ+252 128σ+244 256σ+255
TABLEIV. SETUP,ONLINEANDTOTALCOMMUNICATIONFORAδ-INPUTLUTWITHσOUTPUTSFORTHEOTTTPROTOCOL[IKM+13],
ONLINE-LUT(OP-LUT)ANDSETUP-LUT(SP-LUT).BESTRESULTSMARKEDINbold.
Pre-Computation. P chooses its share T0 ∈ ({0,1}δ (cid:55)→ they wish to perform secure computation ad-hoc. In order to
0 R
{0,1}σ) and its rotation value r ∈ {0,1}δ of the permuted enableLUT-basedsecurecomputationeveninsettingswithno
R
table and computes the shares of P for all possible rotation pre-computation, we suggest a new protocol for securely pre-
1
values: (X ,...,X ), with X = T[r⊕s(cid:48) ⊕i]⊕T0, for computing and evaluating LUTs. This protocol, called Setup-
0 N−1 s(cid:48)
all i ∈ [0...2δ −1]. P then engages in a (cid:0)N(cid:1) OT1 with P LUT(SP-LUT),achievesmuchbettertotalcommunicationbut
0 1 N 1
whoinputss∈ {0,1}δ aschoicebitsandobliviouslyobtains increases the online communication compared to the OTTT
R
T1 =X =T[r⊕s⊕i]⊕T0. and OP-LUT protocols. The general idea of SP-LUT is sim-
s
ple: Pre-compute
(cid:0)N(cid:1)
OT in the setup phase and obliviously
The communication cost for the pre-computation thereby 1
transfer all possible outcomes of the LUT in the online phase.
becomes independent of the circuit representation but it scales
We give a full description of the protocol in Prot. 4.
withfactor22δ asopposedto138(δ−1)2δ forthecircuit-based
pre-computation. Overall, the
(cid:0)N(cid:1)
OT-based pre-computation
1 Compared to the OP-LUT approach, the SP-LUT protocol
performs better for δ < 10, while the circuit-based pre-
only requires correlated randomness in the form of a pre-
computation performs better for δ ≥ 10 (cf. Tab. IV). The
computed
(cid:0)N(cid:1)
OT, which requires only little communication
security of this pre-computation method is guaranteed by 1
in the setup phase at the cost of 2δ bits of communication
oblivioustransfer:NeitherdoesP learninformationaboutthe
0 during the online phase. However, the total communication
rotationvalueoroutputshareofP ,sincetherotationvalueis
1 of SP-LUT is much lower than that of OP-LUT, since only
used as selection string, nor does P learn information about
1 single bits need to be transferred instead of full truth-tables
therotationvalueorshareofP ,sinceP gainsnoinformation
0 1 (cf. Tab. IV). The security of the SP-LUT protocol is similar
on any other than the selected truth-table.
to that of the GMW protocol [GMW87]: Both parties operate
PROTOCOL3(Online-LUT(OP-LUT)-ourwork): on secret-shared data by sacrificing a pre-computed OT on
InputsandOracles: random data.
• Common Input: Symmetric security parameter κ; number of
inputsδ;N =2δ;Truth-tableT :{0,1}δ (cid:55)→{0,1}σ. PROTOCOL4(Setup-LUT(SP-LUT)-ourwork):
• InputofP0:x0∈{0,1}δ. InputsandOracles:
• InputofP1:x1∈{0,1}δ. • Common Input: Symmetric security parameter κ; number of
• Oracles:Bothpartieshaveaccesstoa(cid:0)N(cid:1) OT1 functionality. inputsδ;N =2δ;Truth-tableT :{0,1}δ (cid:55)→{0,1}σ.
Pre-Computation: 1 σN •
•
I In np pu ut to of fP P0 1: :x x0 1∈ ∈{ {0 0, ,1 1} }δ δ.
.
1) P0 choosesr∈R {0,1}δ andT0 ∈R ({0,1}δ (cid:55)→{0,1}σ).P1 • Oracles:Bothpartieshaveaccesstoa(cid:0)N(cid:1) R-OT1 functionality.
2) c P Th 0 0o [o ic ]s o ,e ms fops ru∈ t ae lR s l0({ X ≤0, 01 i, ,} .. sδ . (cid:48),. X <N N− .1), with X s(cid:48)[i] = T[r⊕s(cid:48)⊕i]⊕ Pre- 1C )ompu Pt 0at aio nn d: P1 invokethe(cid:0)N 1(cid:1) R-OT1
σ
func1 tionalityσ whereP0 plays
3) t wP h0 ie thsa e in nnd pd ueP tr1 swi ain t nhv do ik one up tu pt th use t( T(cid:0) XN 1 10(cid:1) , =.O .. X,T X1 σ sN N s.t− .fu X1n ) sc a [t ii no ]dn =a Pli 1 Tty [p rlw a ⊕yh sse ⊕r te h ieP ]⊕r0 e Tcp e 0l ia v [iy e ]s r
,
t srh ane ∈ds o {e m 0n ,d 1e b }r it δsan a(d nm dP 0 m1 ,. e.p s.,l sa amy gs eNt m−he 1 s) .re ac ne dive Pr. 1F rr eo cm eivt eh se aO rT a, nP do0 mre cc he oiv ice es
forall0≤i<N. 2) Output:P0 outputs(m0,...,mN−1);P1 outputs(ms,s).
4) Output:P0 outputs(T0,r);P1 outputs(T1,s). OnlineEvaluation:
OnlineEvaluation(sameasOTTTinProt.2): 1) P1 sendsu=s⊕x1 toP0.
2
31
)
))
P
OP 00 utss pee utn
s
td :s
z
P0u 0== ouTx tp00
u[u
t⊕
s⊕
zr 0vt ;o
]
P;P 1P1 o1; uP
s
tpe1
t us
ts sze zn
1
1d
=
,s sv
.T
t.=
1 z[
0ux ⊕1
⊕
z⊕
v
1]s
.
=to TP [x0 0.
⊕x1].
42
3
))
)
(P
P
Ov0
1
u0 t,
c
pc
.
oh
.
um.o
t,
:o
pv
Ps uNe
t
0es
−
s
o1z uz)0
t,
1
pw
u=∈
th
sR
e
v
zr xe
01
;{
v
P⊕0 i, 1=1
m
o}
uT
sσ
t.
p[i
ua
⊕
tn sd
zx
10c ,o
]
sm
⊕
.tp .mu zt 0e i⊕s
⊕u
zan 1⊕d =zs 0e T.n [d xs 0⊕V x1=
].
D. Setup-LUT (SP-LUT)
While the OTTT and OP-LUT approaches achieve a good
online communication, their pre-computation cost scales with E. Optimizations
at least 2δ, where δ is the number of input bits of a LUT.
Thisgreatlyhinderstheapplicabilityoftheseapproacheswhen Inthefollowing,wediscusstwooptimizationsforourLUT
pre-computation is not negligible, i.e., when the parties do protocols: Switching roles to reduce the round complexity for
not have a pre-established communication channel or when SP-LUT and combining LUTs with overlapping inputs.
7Reducing the Online Round Complexity. The SP-LUT and its generalization to GMW [DDK+15], hardware synthe-
protocol in §IV-D pre-computes
(cid:0)N(cid:1)
OT in a setup phase and sis tools are a key enabler for making secure computation
1
then uses these pre-computed values in the online phase to protocols more practical by automating and speeding the
securelyevaluatethefunction.Initsvanillaversion,theonline process of generating compact and correct Boolean circuits
phaseconsistsoftworounds:1)thereceiversendsitsupdated and optimizing them for low size [SHS+15] and/or low depth
choice bits to the sender and 2) the sender rotates its pre- [DDK+15] depending on the protocol used. In this work,
computed masks and sends the updated correlations to the we extend this approach further by exploiting LUT-based
receiver. Thereby, we overall require 2D(C) communication synthesis tools to serve the different requirements of our
roundsintheonlinephase,whereD(C)isthehighestnumber LUT protocols. However, such tools do not generate the LUT
of LUTs from any input to any output of the circuit. representations we require by default, and require heavy re-
In order to reduce the number of communication rounds, we purposingtoadaptthemtoourprotocols.Inthefollowing,we
let both parties switch roles in the online phase after each brieflyintroducehardwaresynthesisandafterwardsdiscussthe
communication round, similar to [Hua12]. More specifically, particular synthesis tool we use and how we customize it for
assume P plays the sender and P plays the receiver in the our purposes.
0 1
first round. P first sends its updated choice bits u to P ,
1 1 0
who plays the receiver in the second round and replies with A. Hardware Synthesis Tools
the updated correlations V and the updated choice bits of the
1
second round u . P then updates its local shares using V , Hardware synthesis is the process of transforming an
2 1 1
switches to the role of the sender and replies with its updated abstractformoffunctiondescriptionintoafunctionallyequiv-
correlations V , and then again switches to the role of the alent logic implementation using different optimization and
2
receiver and sends its updated choice bits u for the third technology mapping algorithms, which have been the subject
3
communication round, etc. Overall, this reduces the number of research in electronic design automation for decades. The
of communication rounds from 2D(C) to D(C)+1. circuitimplementationgeneratedusuallydependsonthetarget
hardware platform and manufacturing technology. Common
Multi-Out LUTs. Note that in our LUT-based approach, target hardware platforms include Application Specific Inte-
we can efficiently combine two or more LUTs that have grated Circuits (ASICs) and Field Programmable Gate Arrays
the same or even only some common inputs. Consider a (FPGAs). While ASIC synthesis tools have been the focus
functionality which has σ LUTs with one output bit each and of previous works [SHS+15], [DDK+15], since the proto-
the same δ input bits. When naively applying our approach, cols therein required circuits with 2-input gates, our work
we would generate σ δ-input LUTs, one for each output bit. focuses on exploiting multi-input LUT-based synthesis tools
However, since we build on a
(cid:0)N(cid:1)
OT protocol, we can whichformthecoreofFPGA-basedsynthesissoftware.ASIC
1
amortizethecostforcomputingtheOTprotocolbysendingσ synthesis tools can also map to multi-input gates, given that
output bits during the OT protocol. More specifically, instead the gates are defined in custom libraries. However, this is
ofperforming(cid:0)N 1(cid:1) OTσ 1,wewouldperform(cid:0)N 1(cid:1) OT1 σ,thereby tedious, impractical, and would require very large libraries to
saving σ−1 executions of the OT protocol. This optimization accommodate all possible LUTs for each input size. Hence,
naturally extends to an arbitrary number of output bits σ. we opt to use LUT-based synthesis tools instead.
Overall, for a functionality with δ input bits and σ output
bits,wecantherebydecreasetherequiredcommunicationfrom There exists a spectrum of commercial FPGA synthesis
σ(256+2δ)to256+σ2δ.In§VII-Aweusethisoptimizationto tools such as Synplify by Synopsys [Syn], Quartus by Al-
decrease the communication for the 8-input and 8-output AES tera [Alt], XST [Xil09] and Vivado Synthesis [Xil] tools by
S-boxbyafactorof1.8from4,096bitto2,304bit.Similarly, Xilinx.However,thesetoolssynthesizeLUT-basedcircuitsthat
we can combine two or more LUTs which share a sub-set of targettheirdevices’specificssuchasthenumberofphysically
inputs. For instance, consider the case where one LUT has possible inputs to an LUT (a maximum of 6-input LUTs
δ =3 inputs x ,x ,x and a second LUT has δ =4 inputs for most current FPGA devices). For our protocol, we aim
1 0 1 2 2
x ,x ,x ,x . In this case, we can combine both LUTs to one to generate up to 8-input LUTs and this, to the best of our
0 1 3 4
LUT with δ =5 inputs and thereby replace the (cid:0)23(cid:1) OT1 and knowledge, is not available in mainstream commercial tools.
1 1 Mapping circuits to variable-input LUTs is, however, being
(cid:0)24(cid:1) OT1 by a (cid:0)25(cid:1) OT1 which reduces communication from
1 1 1 2 investigated by the Berkeley Logic Synthesis and Verification
488 bits to 312 bits.
Group who develop ABC [Ber], a growing open-source soft-
ware for synthesis and verification of binary logic circuits.
V. LUT-BASEDCIRCUITSYNTHESIS ABC provides an experimental implementation of different
mapping and optimization algorithms based on optimal-delay
Hand-optimizing circuit representations for secure compu-
DirectedAcyclicGraph(DAG)-basedtechnologymappingfor
tation is a laborious and time-consuming task which leaves
both standard gates and LUTs. In this work, we leverage the
room for errors in the crafted circuit constructions. This only
mapping of ABC, coupled with Yosys [Wol]. We use Yosys
becomesmorechallengingforourLUTprotocolswhereLUT-
as an open-source framework for front-end processing of our
based circuit representations are required, instead of Boolean
Verilogcircuitdescriptionstomapthemintoanetworkoflow-
circuitswith2-inputgates.Insteadofreinventingthewheeland
level logic operations in an intermediate format. Then, ABC
recreating compilers from scratch, it is much more intuitive to
structures this network into a DAG and maps it into LUTs in
useexistinghardwaresynthesistools.Thisapproach,whichwe
a delay-optimized fashion.
also follow in our work, allows to automatically generate and
optimize circuits even for complex functionalities that cannot However, for generating circuit netlists of more complex
be easily hand-optimized. As shown in TinyGarble [SHS+15] functionalities, such as floating-point operations, we utilize
8built-in Intellectual Property (IP) libraries in the Synopsys the input-output dependencies. Each LUT is allocated to its
DesignCompiler(DC)[Syn10],acommercialASICsynthesis layer according to its topological depth in the circuit. LUTs
tool.SynopsysDCgeneratesBooleannetlistsofthesecircuits, withinthesamecircuitlayerwhichshareoneormorecommon
whichwefurtherprocesswiththeYosys-ABCtoolchaintore- inputs are grouped together into a single multi-output LUT
map them to LUT-based representations. incrementally. Each final multi-output LUT is defined by a set
In the following, we focus on the Yosys-ABC toolchain and of a maximum of 4 or 8 inputs, and the number of grouped
our customizations to tailor its output to the requirements of LUTs, their truth-table values, and the subset of inputs on
our LUT protocols. which the output of the included LUT depends. In a second
optimizationround,LUTswhichhavenosharedinputsbutcan
becombinedtogetherwhilestillhavingaunionofamaximum
B. Customizing LUT-based Synthesis
of 4 or 8 inputs are grouped together. It is important to only
ABC is very fitting for our purposes because it maps group LUTs within the same layer to avoid grouping across
circuits to variable δ-input LUTs in a generic manner and layers that may increase the circuit depth.
allows the user to determine the maximum input size δ Furthermore, ABC maps circuit descriptions into LUTs only,
max
allowed, regardless of any target-specific FPGA architecture whereasourprotocolsallowfunctionrepresentationswithboth
details. The Yosys-ABC toolchain works by structuring the LUTs and XORs. In the post-processing, we map 2-input
Boolean circuit network into a specific type of Directed LUTsthatrepresenttheXORfunctionintoexplicitXORgates.
Acyclic Graph (DAG) consisting of 2-input, 1-output nodes, Extracting all XORs to reduce the overall number and inputs
and then maps this graph into δ-input LUTs by computing sizes to LUTs is an interesting direction for future research.
δ-feasible cuts for each graph node. A cut of a node n is a
set of nodes (called leaves of the respective cut), such that
VI. EVALUATION
each path from the circuit primary inputs to node n passes
through at least one of these leaves. A cut is δ-feasible if the Inthissectionwetheoreticallycomparetheperformanceof
numberofleavesinitdoesnotexceedδ.FPGAmappingeither our LUT-based approaches to Boolean circuits (§VI-A). Since
enumerates all or some selected cuts of each node according itisnotpossibletogivegenericstatementsabouttheefficiency
to the optimization metric. Then, depth-optimized mapping is comparison between our LUT protocols and Boolean circuits,
performedtoselecttheoptimalcuts,followedbyarearecovery we then give an empirical performance comparison on typical
heuristics,afterwhichthecutsaremappedtoLUTsaccording basic operations (§VI-B). All protocols are evaluated for 128-
to their sizes. Additional details on the DAG-based delay- bit symmetric security, i.e., κ=128.
optimized technology mapping using δ-feasible cuts can be
found in [RME+12], [MCCB07], [MCB07]. A. Comparison to Boolean Circuits
For the generation of our netlists, we limit the maximum
number of LUT inputs to δ =4 for OP-LUT and δ =8 In the following, we theoretically compare our LUT repre-
max max
forSP-LUT,sinceitprovidesagoodperformancetrade-offas sentation with a 2-input Boolean circuits representation. We
wedescribelaterin§VI-A.Weoptimizefordepth,followedby first discuss the advantages of finding an efficient function
arearecovery,andensurethatthecircuitsremaintopologically representationasinterconnectedLUTscomparedtoaBoolean
ordered. circuit. Then, we compare the communication and round
complexity of a single δ-input LUT with σ = 1 output bit
to a Boolean circuit equivalent. Finally, we discuss both rep-
C. Generating Multi-Output LUTs
resentations when realizing functionalities with σ > 1 output
Extending hardware synthesis tools beyond their original bits.Westressthat,eventhoughwediscussandcomparethem
purposes and tailoring their output to serve the purposes separately, our LUT protocols can be easily combined with
of secure computation requires radical engineering and cus- Boolean circuits using GMW at no cost, achieving the best of
tomizations. As discussed in §IV-E, our LUT protocols are both worlds.
significantly optimized by combining LUTs with overlapping
inputs and hence multiple output bits. However, ABC does Efficient Function Representations. Finding an efficient
not support mapping to multi-output LUTs by default (and BooleancircuitrepresentationwithlownumberofANDgates
neither do commercial hardware synthesis tools except for 2- and small multiplicative depth has been subject to extensive
output LUTs). This remains largely an open and unsolved research. E.g., [BP05] have shown a lower bound on the
research area, without efficient tools. Some research efforts number of AND gates for the Hamming weight functionality
such as the work in [MMRR10] propose δσ-feasible cuts and [ARS+15] have developed a block-cipher with a small
mapping to control both the number of inputs δ and the number of AND gates and a small AND depth. Such efficient
number of outputs σ in mapping circuit cuts. However, their Boolean representations, however, are non-trivial to identify
implementation is not available and their approach focuses on for more complex functions. Representing the function as
contributing to AIG-based mapping algorithms in general and a LUT would reduce the complexity of finding an efficient
is not specifically focused on mapping to multi-output LUTs. representation to some extent, since the costs for securely
We handle this by post-processing the ABC-generated single- evaluating a LUT only depend on the number of inputs
outputLUTcircuitstomapthemtomulti-outputLUTcircuits. and outputs and not on its internal functionality. Hence, the
Asalreadymentioned,wemapcircuitdescriptionstovariable- optimizationprocesscanbestoppedafterthefunctionalityhas
input LUT-based netlists with an allowed maximum of 4 or 8 been separated into connected LUTs and does not need to
inputs per LUT using ABC. The generated circuits are then identify an efficient representation of the functionality as it is
post-processed and layered from input to output according to thecaseforBooleancircuits.Asanexample,considertheAES
9#Inputsδ 2 3 4 5 6 7 8 9 10 11
N-MT[bits] 138 276 414 552 690 828 966 1,104 1,242 1,518
OP-LUT[bits] 210 291 500 1,277 4,354 ≈214 ≈216 ≈218 ≈220 ≈222
OP-LUT/N-MT 0.66 0.95 0.85 0.43 0.16 0.05 0.01 <0.01 <0.01 <0.01
SP-LUT[bits] 196 232 256 280 326 372 511 768 1,288 2,316
SP-LUT/N-MT 0.70 1.19 1.62 1.97 2.12 2.23 1.89 1.44 0.96 0.66
TABLEV.
COMMUNICATIONOFOP-LUT(§IV-B)WITH(cid:0)N(cid:1)
OTANDSP-LUT(§IV-D)COMPAREDTOABOOLEANCIRCUITEVALUATEDWITH
1
N-MTFORAδ-INPUTTOσ=1OUTPUTBITFUNCTIONWITHδ−1ANDGATESAND138BITCOMMUNICATIONPERANDGATE(§III).THERESULTSFOR
OP-LUTANDSP-LUTTHATACHIEVETHEBESTPERFORMANCECOMPAREDTON-MTAREMARKEDINBOLD.
S-box, which has 8 input bits and 8 output bits. While [BP12] Add-RC, Brent-Kung Add-BK, and Ladner-Fischer Add-
have used a special Greedy-approach to identify a small LF) [SZ13], multiplication (ripple-carry Mul-RC and Ladner-
Boolean circuit, a LUT representation could be obtained by Fischer Mul-LF) [SZ13], equality (EQ), greater-than (sequen-
simply evaluating the S-box on all 28 possible inputs. tial GT-Seq and tree-based GT-Tree) [SZ13], floating point
operations [DDK+15], and the AES S-Box [BP12]. For each
Single-OutputFunctionalities.Thecommunicationcomplex- functionality,wegivethetotalcommunication(setup+online)
ity of a Boolean circuit component with δ inputs depends in bytes and the online round complexity (the setup round
on the number of AND gates in its function representation, complexity is constant). We compare Yao’s garbled circuits
which we bounded by δ −1 (cf. §II-F). The communication (256 bits per AND gate, cf. [ZRE15]) and the 2-MT multipli-
complexity of a δ-input LUT, on the other hand, only depends cationtriplegeneration(260bitsperANDgate,cf.[ALSZ13],
on δ. Building on these observations, we outline the best decreased to 256 to match Yao’s communication), the N-MT
achievable communication ratio for a δ-input functionality of triple generation (138 bits per AND gate, cf. §III-E), our OP-
our OP-LUT and SP-LUT protocols to a Boolean circuit, LUTprotocol(usingδ ∈[2,4]inputLUTs,cf.§IV-C)andour
evaluated using N-MT, in Tab. V. We observe that the best SP-LUT approach (using δ ∈ [2,8] input LUTs, cf. §IV-D).
communication ratio for OP-LUT is factor 0.95 for δ = 3 NotethatforSP-LUTweomittheextraroundthatisaddeddue
and for SP-LUT is factor 2.2 for δ = 7. Hence, we limit the to the role-switching optimization (cf. §IV-E), since it amor-
possible LUT sizes for OP-LUT to δ ∈[2,4] and for SP-LUT tizes over the whole protocol execution. Also, we omit Yao’s
toδ ∈[2,8].Note,however,thatusingLUTswithmoreinputs garbled circuits in the round complexity comparison, since it
canresultinbetteroverallperformanceduetoimprovedround has constant rounds for every functionality. We generate the
complexity. LUT representations of the basic operations using optimized
circuit descriptions fed into our automated toolchain (cf. §V).
The round complexity when evaluating a Boolean circuit
We present the results for 32-bit operations in Fig. 3.
using GMW depends on the AND depth, which we bounded
bylog δ (cf.§II-F).Aδ-inputLUT,ontheotherhand,always
2
requires one communication round, independently of δ (plus
one global communication round for the whole circuit with FromtheresultswecanobservethatourSP-LUTprotocol
SP-LUT). Hence, for basic operations, we expect a significant nearly always has the lowest communication, achieving up to
decrease in rounds by factor log δ. factor2lesscommunicationthantheN-MTgeneration,which
2
isthenextbest.OurOP-LUTprotocolalwaysperformsworse
Multi-Output Functionalities. For functionalities with multi- thantheN-MTgenerationbutmostofthetimesachieveslower
ple outputs, we assume that an optimal circuit is constructed communication than Yao’s garbled circuits and the regular 2-
for each output bit separately, resulting in a Boolean circuit MTgeneration.TheonlyoperationswhereourLUTprotocols
withσ(δ−1)ANDgates(cf.§II-F).However,manyfunctions performworsethantheBooleancircuit-basedprotocolsarethe
can be optimized and computed more efficiently. In contrast, ripple-carry adder (Add-RC), the multiplication circuits (Mul-
our LUT protocols can easily be extended to handle function- RC and Mul-LF), and the sequential greater-than (GT-Seq),
alities with multiple outputs without requiring an additional where our SP-LUT approach performs similar to Yao and 2-
logic optimization step (cf. §IV-E) but at the cost of at least MT. As discussed in §VI-A, this is probably due to the low
σ2δ bits communication, which cannot be reduced via logic multiplicative complexity of the ripple-carry addition as well
optimization. Hence, a Boolean representation can achieve as the high number of outputs per LUT. Also notably, our
bettercommunicationformulti-outputbitfunctionalitieswhere LUT protocols require less communication for the tree-based
thenumberofANDgatescanbehighlyoptimized(e.g.,ripple- greater-than (GT-Tree) than for the sequential greater-than
carry addition), while our LUT representation achieves better (GT-Seq), even though the GT-Tree circuit has around three
communication for functionalities with many AND gates per timesmoreANDsthantheGT-Seqcircuit.Hence,buildingon
input and output bits (e.g., the AES S-box). Nevertheless, certain circuit structures results in more efficient LUT circuits
our LUT representation needs fewer communication rounds, and there is still potential for further optimizations.
independently of the number of outputs.
B. Basic Operations
Regarding the round complexity, we emphasize that our
A general comparison between our LUT protocols and LUT approaches are almost always better than 2-input gate
2-input gate Boolean circuit-based techniques is difficult to Boolean circuits, except for the ripple-carry adder (Add-RC)
perform, since the performance of both is very function- evaluated with OP-LUT. On average, OP-LUT reduces the
dependent. To highlight the improvements, we compare the number of communication rounds by factor 2x while SP-LUT
efficiency of several basic operations: addition (ripple-carry even reduces them much further by factor 3-4x.
108,000
7,000
6,000
5,000
4,000
3,000
2,000
1,000
0
]setyB[
noitacinummoC
CR−ddA KB−ddA FL−ddA qeS−TG eerT−TG TG−PF QE xoB−S
350,000
Yao/2−MT
N−MT
OP−LUT 300,000
SP−LUT
250,000
200,000
150,000
100,000
50,000
0
(a) CommunicationSmallOperations
]setyB[
noitacinummoC
CR−luM FL−luM ddA−PF luM−PF 2pxE−PF 2goL−PF viD−PF trqS−PF
Yao/2−MT
N−MT
OP−LUT
SP−LUT
(b) CommunicationLargeOperations
35
30
25
20
15
10
5
0
sdnuoR#
CR−ddA KB−ddA FL−ddA qeS−TG eerT−TG TG−PF QE xoB−S
2/N−MT 350
OP−LUT
SP−LUT 300
250
200
150
100
50
0
(c) RoundsSmallOperations
sdnuoR#
CR−luM FL−luM ddA−PF luM−PF 2pxE−PF 2goL−PF viD−PF trqS−PF
2/N−MT
OP−LUT
SP−LUT
(d) RoundsLargeOperations
Fig.3. TotalCommunication (a,b)usingYao’s garbledcircuits (§II-D)and 2-MT(§II-E),our N-MT(§III),our OP-LUT(δ ≤4 inputs,cf.
§IV-C)andourSP-LUT(δ≤8inputs,cf.§IV-D)androundcomplexityintheonlinephase(c,d)foraBooleancircuitsevaluationusingGMW
(MT),OP-LUT,andSP-LUTfor32-bitoperationsandthe8-bitAESS-box.Yao’sroundcomplexityisconstantandthereforenotincluded.
VII. APPLICATIONS We run the experiments using 4 threads on each machine,
average the results over 10 executions, and dismiss outliers
InthissectionweevaluatetheconcretebenefitsofourLUT
with more than twice the runtime. For Yao’s garbled circuits,
protocols on two practical examples: privacy-preserving AES
weperformmulti-threadingbysplittingtheoriginalcircuitinto
(§VII-A) and private set intersection (§VII-B). We compare
four separate parts that are evaluated in parallel. The variance
our OP-LUT and SP-LUT protocols to a Boolean 2-input gate
in the LAN setting was ≈1% and in the WAN setting ≈5%.
circuit,evaluatedusingYao’sgarbledcircuitsandGMWusing
the 2-MT and N-MT pre-computation in a LAN and WAN Implementationfeatures.OurLUTprotocolsworkinthepre-
setting and summarize our results in Tab. VI.
processing model, where setup and online phase are executed
separately. Both phases can be combined in case of an ad-hoc
Benchmark environment. We implement our OP-LUT with execution, resulting in a lower total time. To process a shared
(cid:0)N(cid:1)
OT pre-computation and SP-LUT protocols in the ABY value,ourLUTprotocolsneedtoread,process,andstoreata-
1
framework of [DSZ15], written in C++. We benchmark the bleentry,incontrasttoBooleancircuit-basedprotocols,which
protocols in two settings: a LAN setting, consisting of two can process multiple shares at once. Thereby, the amortization
Intel i7 Haswell PCs connected by a Gigabit network, and a thathappenswhenthesamecircuitisevaluatedalargenumber
WAN setting, consisting of a Google n1-standard-4 instance oftimesinparallelislesscomparedtoaBooleancircuit-based
with 4 vCPUs and an Amazon m3Xlarge instance with 4 evaluation. Finally, our LUT protocols pre-compute and store
vCPUs which are connected by a network with 28 MBit tables, which results in a larger memory footprint compared
bandwidth and 122 ms ping latency on average. We argue to GMW, which only stores single bits. However, the storage
that the WAN setting presents a practical MPC setting, since requirement is still much lower than for pre-computed Yao’s
the machines are controlled by two different cloud providers garbledcircuitsandthetablegenerationandevaluationcanbe
and located at two different continents in the US and Europe. pipelined, similar to garbled circuits [HEKM11].
11Network LAN WAN
AESEncryption
#Blocks 1 1,000 1 1,000
Protocol Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT
Setup[s] 0.007 0.003 0.004 0.003 0.003 1.395 0.822 0.688 0.781 0.970 0.300 0.423 0.396 0.502 0.180 50.758 25.552 13.719 19.315 2.699
Online[s] 0.003 0.006 0.005 0.006 0.137 0.028 0.024 0.453 0.228 2.397 1.642 0.790 2.234 2.808 2.102 11.080
Total[s] 0.010 0.009 0.010 0.008 0.009 1.561 0.850 0.720 0.805 1.419 0.528 2.823 2.793 2144 0.970 52.992 28.360 16.526 21.417 13.779
Sent[MB] 0.194 0.184 0.140 0.127 0.055 172 169 96 103 44 0.194 0.184 0.140 0.127 0.055 172 169 96 103 44
PrivateSetIntersection
SetSizes 256 16,384 256 16,384
Protocol Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT
Setup[s] 0.113 0.069 0.057 0.062 0.267 3.180 2.117 1.784 1.819 5.878 2.414 1.157 1.069 1.237 0.901 61.834 31.347 16.533 18.730 9.857
Online[s] 0.026 0.003 0.004 0.022 1.227 0.079 0.132 0.781 0.802 0.457 0.348 0.693 36.750 1.867 1.742 4.789
Total[s] 0.139 0.072 0.060 0.066 0.310 4.407 2.195 1.862 1.951 6.659 3.217 1.705 1.526 1.585 1.594 98.584 33.214 18.400 20.472 14.089
Sent[MB] 6.923 4.320 2.475 2.971 1.247 339.2 209.4 119.6 144.0 58.6 6.923 4.320 2.475 2.971 1.247 339.2 209.4 119.6 144.0 58.6
TABLEVI. SUMMARYOFOURAPPLICATIONRESULTSONAESANDPSIFORYAO’SGARBLEDCIRCUITS(§II-D),2-MT(§II-E)ANDOUR
N-MT(§III-E)FORGMW,ANDOUROP-LUT(§IV-C)ANDSP-LUT(§IV-D)PROTOCOLS.BESTRESULTSMARKEDINbold.
A. AES Encryption circuit for 256 elements has 44,352 δ = 4 to σ = 1 LUTs
and 5,544 δ = 2 to σ = 1 LUTs and the circuit for 16,384
One of the most widely used benchmark examples for se-
elements has 2,123,388 δ = 4 to σ = 1 LUTs and 353,898
cure computation is AES, which has applications in encrypted
δ =2toσ =1LUTsandbothhaveadepthof4.TheSP-LUT
passwordauthentication[Sec15].Weassumethataclientholds
circuit for 256 elements has 16,632 δ =8 to σ =1 and 5,544
eitheroneor1,000plaintexts,whichshouldbeencryptedwith
δ =5 to σ =1 LUTs and the circuit for 16,384 elements has
an expanded key, held by a server. We use the Boolean AES
707,796 δ = 8 to σ = 1 and 353,898 δ = 6 to σ = 1 LUTs
S-box circuit from [BP12] which has 34 AND gates and a
and both have a depth of 3.
multiplicative depth of 4. The OP-LUT representation of the
S-box consists of a network of δ = 2 to σ = 1, δ = 3 to As shown in Tab. VI, the overall best performing protocol
σ = 2, and δ = 4 to σ = 4 LUTs which requires 795 bytes for the PSI experiments in the LAN and PSI(256) WAN
of communication and has 3 communication rounds. The SP- settingsisourN-MTgeneration.InthePSI(256)WANsetting,
LUT representation of the AES S-box uses a δ = 8 input to our LUT protocols are only slightly slower, while in the
σ =8 output LUT to evaluate an S-box. PSI(16,384) setting, our SP-LUT protocol achieves the best
performance. The reason for the poor performance of SP-
FromtheresultsinTab.VI,wecanobservethatnoprotocol
LUT in the LAN setting is its high computation overhead,
consistently performs best across all experiments. This can be
which is due to the high number of δ = 8 to σ = 1
explainedbyavaryingbottleneck,dependingontheevaluated
LUTs, which is around factor 5 higher than for the N-MT
function and the setting. In the AES(1,000) LAN setting, the
protocol. Nevertheless, in the WAN setting, where communi-
N-MT protocol performs best since it has a good balance
cation becomes the bottleneck, the computation overhead of
betweencomputationandcommunication.IntheAES(1)WAN
our SP-LUT protocol amortizes and it performs better than
setting, Yao’s protocol performs best, since it has the lowest
the standard 2-MT generation. Yao’s garbled circuits protocol
number of communication rounds. Finally, in the AES(1,000)
performs poorly in the LAN and WAN settings, since it has
WAN setting, the SP-LUT protocol performs best, since it has
larger communication per AND gate than the other protocols
the lowest communication. The 2-MT and N-MT approaches
and the number of input wires to the circuit, which require
have the same online phase but the setup phase of the N-MT
κ bit communication in the online phase, is as high as the
protocol is more efficient due to the lower communication.
number of AND gates. Finally, the Boolean circuits protocols
For AES(1000), Yao’s protocol performs worst since its com-
have a fast online time in the LAN setting, since the number
munication is uni-directional from garbler to the evaluator as
of communication rounds is low, but OP-LUT achieves better
opposed to the other protocols, where the communication is
online time in the WAN setting, due to the higher latency.
evenly divided between both parties.
VIII. RELATEDWORK
B. Private Set Intersection
In this section, we discuss related work on improving
Intheprivate-setintersection(PSI)application,twoparties secure computation (§VIII-A), secure computation protocols
want to identify the intersection of their private sets without that represent the functionality as network of multi-input
revealing any element that is not in the intersection. PSI gates (§VIII-B), and Boolean circuit compilers (§VIII-C).
can be used for computing the revenue of online advertise-
ment, for finding common contacts, or for genomic computa-
A. Efficient Secure Computation
tions [PSSZ15]. For our experiments, we use the circuit-based
PSI protocol of [PSSZ15], which computes the intersection One of the main reasons why secure computation was
betweentwosetsbyfirstmappingtheelementsintohashtables believed to be inefficient was the high number of symmetric
andthenperformingapair-wisecomparisonbetweeneachbin cryptographic primitive invocations. In particular, in Yao’s
of the hash tables. We compute the intersection between two garbled circuits the circuit garbler requires 4 invocations to
sets of either 256 or 16,384 elements with length 32-bit. The garble an AND gate while for GMW, both parties require 6
Boolean circuit for sets of 256 elements has 138,600 AND invocationstogenerateamultiplicationtripleduringOTexten-
gates and for sets of 16,384 elements has 6,724,062 AND sion.Adramaticimprovementonthecomputationefficiencyof
gates and both have a multiplicative depth of 5. The OP-LUT secure computation protocols has come with the introduction
12of the AES-NI processor extensions [KSS12], [BHKR13], storage in the length of the function’s input. [DZ16] tailors
[GLNP15]. Currently, the most efficient instantiation is the the pre-computed randomness to AES S-boxes to allow
fixed-keyAESgarblingof[BHKR13],whichimposesanideal an efficient online evaluation of AES with security against
permutationassumptiononAES.Alternativeinstantiationsthat malicious adversaries. Their setup phase, however, becomes
require weaker assumptions and use pipelining techniques to very communication intensive, since all possible outcomes for
improve efficiency have been given in [GLNP15]. In [ZRE15] every AES S-box have to be pre-computed once. We present
it was shown how to reduce the communication in Yao’s and analyze the efficiency of [IKM+13] with pre-computation
garbledcircuitsto2κbitsperANDgateanditwasproventhat using [DZ16] in §IV-B and give a protocol that improves on
this matches the lower bound. In [KKS16] the authors utilize thecommunicationcomplexityinthesetupphaseforpractical
the fact that AND gates in Yao’s garbled circuits where one input sizes in §IV-C.
party knows the plaintext input can be garbled at lower cost FastGC[HEKM11]usedYao’sprotocoltoevaluatemulti-input
to reduce the communication for specific circuits. gates. Using the garbled row reduction technique [NPS99],
One approach to circumvent the high cost for certain opera- this approach requires κσ · (2δ − 1) bits communication in
tions are mixed-protocols, which mix secure computation pro- the setup phase for a LUT with δ input and σ output bits
tocolsthatoperateonarithmeticandBooleancircuits.Thereby, and, in the online phase, requires constant rounds and no
a function can be divided in sub-blocks that are evaluated in communication. However, a traditional 2-input gate Boolean
thesecurecomputationprotocolforwhichtherepresentationis circuit evaluation using Yao’s protocol is more efficient than
more efficient. The TASTY framework [HKS+10] combined a multi-input gate evaluation, since the communication for
additively homomorphic encryption and Yao’s garbled circuits multi-input garbled tables scales exponentially in δ.
protocol. The ABY framework [DSZ15] used OT instead of A concurrent and independent work introduces
homomorphic encryption to compute the multiplication. Our TinyTable [DNNR16], a malicious secure computation
work can be combined with these approaches to achieve protocol that uses pre-computed tables for secure evaluation
anotherdegreeoffreedomwhenconstructingmixed-protocols. of functions. TinyTable was shown to achieve better online
communication for 2-input AND gates in the semi-honest
model. For tables with more inputs, its online phase was
B. Multi-Input Gates in Secure Computation
evaluated only on the AES SBox. In order to pre-compute
The gate-evaluation secret sharing approach (GESS) the tables, [DNNR16] uses the same idea as [DZ16], outlined
[Kol05] is an information theoretic variant of garbled circuits in §IV-B, namely to pre-compute the circuit once for every
that can be based on OT and performs secure computation in input combination, which results in a large communication
a constant number of rounds. The idea of GESS is to process overhead in the setup phase.
the circuit from the outputs to the inputs such that shares A recent work [GLMY16] proposes to garble a circuit as
on the output wires determine the shares on the input wires, independent smaller sub-components, which reduces the
which leads to a quadratic size increase in circuit depth for communication cost in the online phase but results in a
shares on the input wires. Sliced-GESS [KK12] efficiently multi-round protocol and more overall communication.
extends GESS to circuits with higher depth at the cost of an An ongoing and independent work outlines a polynomial-
increased number of communication rounds by slicing the based garbling scheme in Yao’s protocol [MPS15]. The
circuitintosub-circuitsofconstantdepth,whichareconnected scheme requires the function to be represented as building
via a string selection OT (security against a covert client can blocks with multiple inputs instead of 2-input gates. We view
be achieved using longer strings as selection bits in the OTs). their work as orthogonal to ours, since they focus on the
The efficiency of sliced-GESS is not experimentally evaluated constant-round Yao’s protocol while our approach focuses on
and its performance is highly affected by the topology of multi-round secret-sharing based protocols.
the evaluated circuit and is best for rectangular circuits with The authors of [KKW16] showed how to efficiently overlay
constant width where each gate has 2 outputs. According a large number of switch branches in secure computation
to an unpublished full version2, the best performance for and propose to evaluate switch statements in GMW using
such a rectangular circuit is (112+κ)/3 = 80-bit per gate, the
(cid:0)N(cid:1)
OT protocol of [KK13]. This idea is similar to our
1
where each slice has depth d(cid:48) =3, κ=128 and with the OT multi-input LUT protocols but specifically tailored to switch
extension optimization of [KK13], [ALSZ13], which reduces statements, while our LUT protocols can be used to evaluate
the number of sent ciphertexts from two to one. In contrast generic functionalities.
to GESS, the performance of our approach is less dependent New garbling techniques that allow Yao’s garbled circuits
on the topology of the overall circuit and independent of the protocol to evaluate several functions more efficiently than a
function computed in the slices. regular linear garbling scheme were given in [BMR16]. In
[IKM+13] outlines a scheme called one-time truth tables particular, the authors showed that their garbling techniques
(OTTTs), which relies on representing the whole function allows a more efficient evaluation of arithmetic circuits and
as a single truth-table and allows the evaluation of an multi-input threshold gates in Boolean circuits. For general
arbitrary-size truth-table in a constant number of rounds and Boolean circuit constructions, the authors give a construction
with linear communication complexity in the input length that is of theoretical interest since it circumvents the 2κ lower
during the online phase using correlated randomness that bound of [ZRE15] when evaluating a single AND gate but
is pre-computed in the setup phase. However, the scheme does not generalize to arbitrary circuits.
scales poorly for functions with large input size as the
setup phase requires super-polynomial communication and
2Availableathttp://www.cs.technion.ac.il/∼ranjit/papers/slicegess.pdf.
13C. Boolean Circuit Compilers ACKNOWLEDGMENTS
This work has been partially funded by the European
Circuit compilers abstract the complexity of designing Union’s7thFrameworkProgram(FP7/2007-2013)undergrant
Boolean circuits by compiling a high level language (such agreement n.609611 (PRACTICE), by the German Federal
as Java or C or Verilog) into a Boolean circuit. CBMC- MinistryofEducationandResearch(BMBF)withinCRISP,by
GC [HFKV12] uses a model checker to generate a Boolean the DFG as part of project E3 within the CRC 1119 CROSS-
circuit from a description in C. The portable circuit for- ING.ThisworkisinpartssupportedbyNSFawards1619261
mat (PCF) [KSMB13] compiles high level code into an and 1649423 and AFOSR/MURI FA9550-14-1-0351.
assembler-like representation. The programming framework
ObliVM [LWN+15] introduces a special purpose language REFERENCES
which is compiled into a memory-trace oblivious program
basedonBooleancircuitsandORAM.TinyGarble[SHS+15], [ALSZ13] G. Asharov, Y. Lindell, T. Schneider, and M. Zohner. More
efficient oblivious transfer and extensions for faster secure
[DDK+15] presents a radically different approach of lever- computation. InCCS’13,pages535–548.ACM,2013.
aging already established hardware synthesis tools within a
[Alt] Altera Inc. Quartus prime design software.
fully automated toolchain to compile a circuit description in https://www.altera.com/products/design-software/fpga-design/
a hardware description language such as VHDL or Verilog quartus-prime/overview.html.
into a Boolean circuit. In our work, we go beyond the [ARS+15] M. Albrecht, C. Rechberger, T. Schneider, T. Tiessen, and
TinyGarble approach and utilize and re-purpose LUT-based M. Zohner. Ciphers for MPC and FHE. In EUROCRYPT’15,
volume9056ofLNCS,pages430–454.Springer,2015.
synthesis tools which are used to map circuit implementations
[BB94] M.L.BonetandS.R.Buss. Size-depthtradeoffsforBoolean
onFieldProgrammableGateArrays(FPGAs)togenerateLUT
fomulae. InformationProcessingLetters,49(3):151–155,1994.
representations for a wide range of functions.
[BCD+09] P. Bogetoft, D. L. Christensen, I. Damga˚rd, M. Geisler, T. P.
Jakobsen,M.Krøigaard,J.D.Nielsen,J.B.Nielsen,K.Nielsen,
J. Pagter, M. I. Schwartzbach, and T. Toft. Secure multiparty
computationgoeslive. InFC’09,volume5628ofLNCS,pages
325–343.Springer,2009.
[Ber] Berkeley Logic Synthesis. ABC: a system for
IX. CONCLUSIONANDFUTUREWORK
sequential synthesis and verification, release 70930.
http://www.eecs.berkeley.edu/∼alanmi/abc/.
The current bottleneck in most implementations of semi- [BHKR13] M.Bellare,V.Hoang,S.Keelveedhi,andP.Rogaway. Efficient
honestsecuretwo-partycomputationprotocolsarethenetwork garblingfromafixed-keyblockcipher. InS&P’13,pages478–
492.IEEE,2013.
bandwidth and latency. In this work, we show how to signif-
[BJSV15] D. Bogdanov, M. Jo˜emets, S. Siim, and M. Vaht. How the
icantly reduce the communication as well as the round com-
Estoniantaxandcustomsboardevaluatedataxfrauddetection
plexity at the cost of increased computation. For secure com-
system based on secure multi-party computation. In FC’15,
putation on Boolean circuits, we reduce the communication volume8975ofLNCS,pages227–234.Springer,2015.
from 2κ-bit to nearly a single κ-bit ciphertext per AND gate. [BMR16] M. Ball, T. Malkin, and M. Rosulek. Garbling gadgets for
Furthermore, we outline how to significantly improve round boolean and arithmetic circuits. In CCS’16, pages 565–577.
complexityandthecommunicationcomplexitybyrepresenting ACM,2016.
the functionality as a network of lookup tables (LUTs). We [BP05] J. Boyar and R. Peralta. The exact multiplicative complexity
of the Hamming weight function. Electronic Colloquium on
introduce two protocols, OP-LUT and SP-LUT, for evaluating
ComputationalComplexity(ECCC’05),TR05(049),2005.
LUTs and a compiler that leverages a hardware synthesis tool
[BP12] J. Boyar and R. Peralta. A small depth-16 circuit for the
that we customize to automatically translate functions from
AES S-box. In Information Security and Privacy Research
a high-level description to a LUT representation. Finally, we (SEC’12), volume 376 of IFIP Advances in Information and
show that our SP-LUT protocol achieves a remarkable 3- CommunicationTechnology,pages287–298.Springer,2012.
4x better round complexity and reduces the communication [CO15] T. Chou and C. Orlandi. The simplest protocol for oblivious
beyond even the one κ-bit per AND gate boundary that we transfer. InProgressinCryptology–LATINCRYPT’15,volume
9230ofLNCS,pages40–58.Springer,2015.
achievebyevaluatingaBooleancircuitusingGMWevenwith
our improved pre-computation for many basic operations. In [DDK+15] D. Demmler, G. Dessouky, F. Koushanfar, A.-R. Sadeghi,
T.Schneider,andS.Zeitouni.Automatedsynthesisofoptimized
addition, our LUT protocols can be freely combined with a
circuitsforsecurecomputation. InCCS’15,pages1504–1517.
BooleancircuitevaluationusingGMW,incurringnoadditional ACM,2015.
costs and achieving the benefits of both representations. [DNNR16] I. Damga˚rd, J. B. Nielsen, M. Nielsen, and S. Ranellucci.
Gate-scrambling revisited - or: The TinyTable protocol for 2-
party secure computation. Cryptology ePrint Archive, Report
We see multiple interesting research questions for fu-
2016/695,2016.
ture work: A) Is it possible to improve the LUT compiler?
[DSZ15] D.Demmler,T.Schneider,andM.Zohner.ABY-aframework
Even though the hardware synthesis tools already generated
for efficient mixed-protocol secure two-party computation. In
optimized circuits with good performance, we see potential NDSS’15.TheInternetSociety,2015.
in extracting XOR gates from LUTs, since XORs can be [DZ16] I. Damga˚rd and R. W. Zakarias. Fast oblivious AES:
evaluated for free. This would result in LUTs with less inputs A dedicated application of the MiniMac protocol. In
and outputs. B) Is it possible to combine the efficient setup AFRICACRYPT’16, volume 9646 of LNCS, pages 245–264.
Springer,2016.
phase of our SP-LUT approach with the efficient online phase
[FJJBT16] T. Kasper Frederiksen, T. P. Jakobsen, Nielsen J. B, and
of our OP-LUT approach and thereby obtain a protocol that
R.Trifiletti. OnthecomplexityofadditivelyhomomorphicUC
achieves both, an efficient setup as well as an efficient online
commitments. InTCC’16,volume9562ofLNCS,pages542–
phase? C) Do our protocols extend to stronger adversaries? 565.Springer,2016.
14[GLMY16] A.Groce,A.Ledger,A.J.Malozemoff,andA.Yerukhimovich. IEEE/ACM International Conference on Computer-Aided De-
CompGC:Efficientoffline/onlinesemi-honesttwo-partycompu- sign(ICCAD’07),pages354–361.IEEE,2007.
tation. CryptologyePrintArchive,Report2016/458,2016. [MMRR10] O.Martinello,F.S.Marques,R.P.Ribas,andA.I.Reis. KL-
[GLNP15] S.Gueron,Y.Lindell,A.Nof,andB.Pinkas. Fastgarblingof cuts: A new approach for logic synthesis targeting multiple
circuitsunderstandardassumptions.InCCS’15,pages567–578. outputblocks.InDesign,AutomationTestinEuropeConference
ACM,2015. Exhibition(DATE’10),pages777–782.IEEE,2010.
[GM16] S. Gueron and N. Mouha. Simpira v2: A family of efficient [MNPS04] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — a
permutationsusingtheAESroundfunction. CryptologyePrint securetwo-partycomputationsystem. InUSENIXSecurity’04,
Archive,Report2016/122,2016. pages287–302.USENIX,2004.
[GMW87] O. Goldreich, S. Micali, and A. Wigderson. How to play any [MPS15] T.Malkin,V.Pastro,andA.Shelat. Thewholeisgreaterthan
mental game or a completeness theorem for protocols with thesumofitsparts:Lineargarblingandapplications.Workshop
honestmajority. InSTOC’87,pages218–229.ACM,1987. talkatSecuringComputationWorkshopinBerkley,2015. On-
line:https://simons.berkeley.edu/talks/tal-malkin-2015-06-10.
[HEKM11] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure
two-party computation using garbled circuits. In USENIX [NPS99] M.Naor,B.Pinkas,andR.Sumner.Privacypreservingauctions
Security’11,pages539–554.USENIX,2011. andmechanismdesign.InElectronicCommerce(EC’99),pages
129–139.ACM,1999.
[HFKV12] A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith. Secure
[PSSZ15] B. Pinkas, T. Schneider, G. Segev, and M. Zohner. Phasing:
two-party computations in ANSI C. In CCS’12, pages 772–
Private set intersection using permutation-based hashing. In
783.ACM,2012.
USENIXSecurity’15,pages515–530.USENIX,2015.
[HKS+10] W. Henecka, S. Ko¨gl, A.-R. Sadeghi, T. Schneider, and
[RME+12] S. Ray, A. Mishchenko, N. Een, R. Brayton, S. Jang, and
I.Wehrenberg.TASTY:ToolforAutomatingSecureTwo-partY
C.Chen. MappingintoLUTstructures. InDesign,Automation
computations. InCCS’10,pages451–462.ACM,2010.
TestinEuropeConferenceExhibition(DATE’12),pages1579–
[Hua12] Y.Huang.Practicalsecuretwo-partycomputation.Ph.D.Thesis, 1584.IEEE,2012.
2012. Online:https://yhuangpress.files.wordpress.com/2014/02/
[Sec15] Dyadic Security. Dyadic’s DSM web suite use-cases,
dissertation.pdf.
2015. Online: https://www.dyadicsec.com/wp-content/uploads/
[IKM+13] Y. Ishai, E. Kushilevitz, S. Meldgaard, C. Orlandi, and 2015/06/dyadicwhitepaper.pdf.
A.Paskin-Cherniavsky. Onthepowerofcorrelatedrandomness [SHS+15] E. M. Songhori, S. U. Hussain, A.-R. Sadeghi, T. Schneider,
insecurecomputation.InTCC’13,volume7785ofLNCS,pages
andF.Koushanfar.TinyGarble:Highlycompressedandscalable
600–620.Springer,2013. sequential garbled circuits. In S&P’15, pages 411–428. IEEE,
[IKNP03] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending 2015.
oblivioustransfersefficiently. InCRYPTO’03,volume2729of [SS06] R. Schu¨rer and W. Schmid. Monte Carlo and Quasi-Monte
LNCS,pages145–161.Springer,2003. Carlo Methods 2004, chapter MinT: A Database for Optimal
[IR89] R. Impagliazzo and S. Rudich. Limits on the provable conse- NetParameters,pages457–469. Springer,2006. Online:http:
quences of one-way permutations. In STOC’89, pages 44–61. //mint.sbg.ac.at.
ACM,1989. [Syn] SynopsysInc. FPGA-baseddesign. http://www.synopsys.com/
[KK12] V. Kolesnikov and R. Kumaresan. Improved secure two- tools/implementation/fpgaimplementation/pages/default.aspx.
partycomputationviainformation-theoreticgarbledcircuits. In [Syn10] Synopsys Inc. Design compiler, 2010. http://www.synopsys.
SCN’12,volume7485ofLNCS,pages205–221.Springer,2012. com/Tools/Implementation/RTLSynthesis/DesignCompiler.
[KK13] V.KolesnikovandR.Kumaresan. ImprovedOTextensionfor [SZ13] T. Schneider and M. Zohner. GMW vs. Yao? Efficient secure
transferring short secrets. In CRYPTO’13, volume 8043 of two-party computation with low depth circuits. In FC’13,
LNCS,pages54–70.Springer,2013. volume7859ofLNCS,pages275–292.Springer,2013.
[KKS16] C. Kempka, R. Kikuchi, and K. Suzuki. How to circumvent [TP14] M. S. Turan and R. Peralta. The multiplicative complexity of
the two-ciphertext lower bound for linear garbling schemes. Boolean functions on four and five variables. In Lightweight
In ASIACRYPT’16, volume 10032 of LNCS, pages 967–997. Cryptography for Security and Privacy (LightSec’14), volume
Springer,2016. 8898ofLNCS,pages21–33.Springer,2014.
[KKW16] W.S.Kennedy,V.Kolesnikov,andG.T.Wilfong. Overlaying [Wol] C. Wolf. Yosys open synthesis suite. http://www.clifford.at/
circuit clauses for secure computation. Cryptology ePrint yosys/.
Archive,Report2016/685,2016. [Xil] XilinxInc.Vivadodesignsuite-hlxeditions.http://www.xilinx.
[Kol05] V. Kolesnikov. Gate evaluation secret sharing and secure one- com/products/design-tools/vivado.html.
roundtwo-partycomputation. InASIACRYPT’05,volume3788 [Xil09] Xilinx Inc. XST synthesis overview, 2009.
ofLNCS,pages136–155.Springer,2005. http://www.xilinx.com/support/documentation/sw manuals/
[KS08] V.KolesnikovandT.Schneider. Improvedgarbledcircuit:Free xilinx11/ise c using xst for synthesis.htm.
XOR gates and applications. In ICALP’08, volume 5126 of [Yao86] A.C.Yao.Howtogenerateandexchangesecrets.InFOCS’86,
LNCS,pages486–498.Springer,2008. pages162–167.IEEE,1986.
[KSMB13] B.Kreuter,A.Shelat,B.Mood,andK.Butler.PCF:Aportable [ZRE15] S. Zahur, M. Rosulek, and D. Evans. Two halves make a
circuit format for scalable two-party secure computation. In whole: Reducing data transfer in garbled circuits using half
USENIXSecurity’13,pages321–336.USENIX,2013. gates. InEUROCRYPT’15,volume9057ofLNCS,pages220–
250.Springer,2015.
[KSS12] B. Kreuter, A. Shelat, and C. Shen. Billion-gate secure com-
putation with malicious adversaries. In USENIX Security’12,
pages285–300.USENIX,2012.
[LWN+15] C.Liu,X.Wang,K.Nayak,Y.Huang,andE.Shi. ObliVM:A
programming framework for secure computation. In S&P’15,
pages359–376.IEEE,2015.
[MCB07] A. Mishchenko, S. Chatterjee, and R. K. Brayton. Improve-
ments to technology mapping for LUT-based FPGAs. IEEE
TransactionsonComputer-AidedDesignofIntegratedCircuits
andSystems(TCAS’07),26(2):240–253,2007.
[MCCB07] A. Mishchenko, S. Cho, S. Chatterjee, and R. Brayton. Com-
binational and sequential mapping with priority cuts. In
15