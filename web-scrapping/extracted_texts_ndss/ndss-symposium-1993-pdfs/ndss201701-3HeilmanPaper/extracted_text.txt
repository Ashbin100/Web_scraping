TumbleBit: An Untrusted Bitcoin-Compatible
Anonymous Payment Hub
Ethan Heilman∗, Leen AlShenibr∗, Foteini Baldimtsi†, Alessandra Scafuro‡ and Sharon Goldberg∗
∗Boston University {heilman, leenshe}@bu.edu, goldbe@cs.bu.edu
†George Mason University foteini@gmu.edu
‡North Carolina State University ascafur@ncsu.edu
Abstract—This paper presents TumbleBit, a new uni- leads to a total loss of anonymity. Compromise of
directional unlinkable payment hub that is fully com- anonymity-enhancing technologies is not unknown. In
patible with today’s Bitcoin protocol. TumbleBit allows 2016,forexample,researchersfoundmorethan100Tor
partiestomakefast,anonymous,off-blockchainpayments nodes snooping on their users [37]. Moreover, users of
through an untrusted intermediary called the Tumbler. mix services must also contend with the potential risk
TumbleBit’s anonymity properties are similar to classic
of “exit scams”, where an established business takes in
Chaumian eCash: no one, not even the Tumbler, can link
new payments but stops providing services. Exit scams
a payment from its payer to its payee. Every payment
havebeenknowntooccurintheBitcoinworld.In2015,
madeviaTumbleBitisbackedbybitcoins,andcomeswith
a Darknet Marketplace stole 11.7M dollars worth of
a guarantee that Tumbler can neither violate anonymity,
norstealbitcoins,nor“printmoney”byissuingpayments escrowed customer bitcoins [44], while btcmixers.com
to itself. We prove the security of TumbleBit using the mentions eight different scam mix services. Thus, it is
real/ideal world paradigm and the random oracle model. crucial that anonymity-enhancing services be designed
Security follows from the standard RSA assumption and in a manner that prevents bitcoin theft.
ECDSA unforgeability. We implement TumbleBit, mix
payments from 800 users and show that TumbleBit’s off- TumbleBit: An unlinkable payment hub. We present
blockchain payments can complete in seconds. TumbleBit, a unidirectional unlinkable payment hub
that uses an untrusted intermediary, the Tumbler T,
I. INTRODUCTION to enhance anonymity. Every payment made via Tum-
bleBit is backed by bitcoins. We use cryptographic
One reason for Bitcoin’s initial popularity was the techniques to guarantee Tumbler T can neither violate
perception of anonymity. Today, however, the sheen of anonymity, nor steal bitcoins, nor “print money” by
anonymity has all but worn off, dulled by a stream of issuing payments to itself. TumbleBit allows a payer
academic papers [31], [42], and a blockchain surveil- Alice A to send fast off-blockchain payments (of de-
lance industry [26], [22], that have demonstrated weak- nomination one bitcoin) to a set of payees (B ,...,B )
1 Q
nesses in Bitcoin’s anonymity properties. As a re- of her choice. Because payments are performed off
sult, a new market of anonymity-enhancing services the blockchain, TumbleBit also serves to scale the
has emerged [35], [17], [1]; for instance, 1 million volumeandvelocityofbitcoin-backedpayments.Today,
USD in bitcoins are funneled through JoinMarket each on-blockchain bitcoin transactions suffer a latency of
month [35]. These services promise to mix bitcoins ≈ 10 minutes. Meanwhile, TumbleBit payments are
from a set of payers (aka, input Bitcoin addresses A) sent off-blockchain, via the Tumbler T, and complete
toasetofpayees(aka,outputbitcoinaddressesB)ina inseconds.(Ourimplementation1 completedapayment
mannerthatmakesitdifficulttodeterminewhichpayer in 1.2 seconds, on average, when T was in New York
transferred bitcoins to which payee. and A and B were in Boston.)
To deliver on this promise, anonymity must also
TumbleBit Overview. TumbleBit replaces on-
be provided in the face of the anonymity-enhancing
blockchain payments with off-blockchain puzzle solv-
serviceitself—iftheserviceknowsexactlywhichpayer ing,whereAliceApaysBobBbyprovidingBwiththe
ispayingwhichpayee,thenacompromiseoftheservice solution to a puzzle. The puzzle z is generated through
interaction between B and T, and solved through an
Permission to freely reproduce all or part of this paper for non- interaction between A and T. Each time a puzzle is
commercial purposes is granted provided that copies bear this notice solved, 1 bitcoin is transferred from Alice A to the
and the full citation on the first page. Reproduction for commercial
Tumbler T and finally on to Bob B.
purposes is strictly prohibited without the prior written consent of the
Internet Society, the first-named author (for reproduction of an entire
Theprotocolproceedsinthreephases;seeFigure1.
paper only), and the author’s employer if the paper was prepared
within the scope of employment. In the on-blockchain Escrow Phase, each payer Alice
NDSS ’17, 26 February - 1 March 2017, San Diego, CA, USA
Copyright 2017 Internet Society, ISBN 1-891562-46-0 1https://github.com/BUSEC/TumbleBit/
http://dx.doi.org/10.14722/ndss.2017.23086Alice Tumbler Bob TumbleBit provides k-anonymity within an epoch—no
{ Puzzle-Promise
:1 e saw o rc 3 BTC 3 BTC Protocol (c, Z ) Z o trn ae n, sfn eo rst e thv ae tn wth ee reT su um ccb el se sr fuT ll, yc ca on ml pin lek teo dne duo rf int ghe thk e
h PsE
Escrow Transaction Escrow Transaction
epoch to a specific pair of payer and payee (A,B).
{ Z=Blind(Z )
:2
e
satn
e
m y
Z R S A - PP ru oz tz ol ce o-S lolver
1 BTC from A to B
R neS wA-p “u Rz Szl Ae s po ulv zi zn lg e. soA lvt et rh ”e pc ro or te oco of lT tu hm atbl meB ayit i bs eou or
f
h Pa P ϵ independent interest. This protocol allows Alice A to
{ Unblind( ϵ )=ϵ ϵ pay one bitcoin to T in fair exchange2 for an RSA
:3
e sa
h
Ptu
o
-h sa
C 2
BTCCash-out Transaction
1 BTC 2 BTC
Cash-out Tra
nσ sa=
c
tD ioe nc ϵ
1
(
B
c T)
C
e kx eyp .o Fn ae in rti ea xti co hn ano gf ea pr“ ep vu ez nz tl se a” cv ha elu ate inz gu Tnd fre or mT c’s lais mec ir ne gt
A’s bitcoin without solving the puzzle. Our protocol
is interesting because it is fast—solving 2048-bit RSA
Fig.1. OverviewoftheTumbleBitprotocol.
puzzles faster than [30]’s fair-exchange protocol for
A opens a payment channel with the Tumbler T by solving 16x16 Sudoku puzzles (Section VIII))—and
escrowing Q bitcoins on the blockchain. Each payee because it supports RSA. The use of RSA means that
Bob B also opens a channel with T. This involves blinding can be used to break the link between the
(1) T escrowing Q bitcoins on the blockchain, and user providing the puzzle (i.e., Bob B) and the user
(2) B and T engaging in a puzzle-promise protocol requesting its solution (e.g., payer Alice A).
that generates up to Q puzzles for B. During the off-
Cryptographic protocols. TumbleBit is realized by
blockchainPaymentPhase,eachpayerAmakesuptoQ
interleaving the RSA-puzzle-solver protocol with an-
off-blockchain payments to any set of payees. To make
other fair-exchange puzzle-promise protocol. We for-
a payment, A interacts with T to learn the solution
mally prove that each protocol is a fair exchange.
to a puzzle B provided. Finally, the Cash-Out Phase
Our proofs use the real/ideal paradigm in the random
closes all payment channels. Each payee B uses his Q(cid:48)
oraclemodel(ROM)andsecurityreliesonthestandard
solved puzzles (aka, TumbleBit payments) to create an
RSA assumption and the unforgeability of ECDSA
on-blockchain transaction that claims Q(cid:48) bitcoins from
signatures. Our proofs are in the full version [20].
T’s escrow. Each payer A also closes her escrow with
T, recovering bitcoins not used in a payment.
A. TumbleBit Features
Anonymity properties. TumbleBit provides unlinkabil-
ity: Given the set of escrow transactions and the set of Bitcoin compatibility. TumbleBit is fully compati-
cash-out transactions, we define a valid configuration ble with today’s Bitcoin protocol. We developed (off-
as a set of payments that explains the transfer of funds blockchain) cryptographic protocols that work with the
from Escrow to Cash-Out. Unlinkability ensures that if verylimitedsetof(on-blockchain)instructionsprovided
the Tumbler T does not collude with other TumbleBit by today’s Bitcoin scripts. Bitcoin scripts can only
users, then T cannot distinguish the true configuration be used to perform two cryptographic operations: (1)
(i.e., the set of payments actually sent during the Pay- validate the preimage of a hash, or (2) validate an
ment Phase) from any other valid configuration. ECDSA signature on a Bitcoin transaction. The limited
functionality of Bitcoin scripts is likely here to stay;
TumbleBit is therefore similar to classic Chaumian
indeed, the recent “DAO” theft [39] has highlighted the
eCash [12]. With Chaumian eCash, a payee A first
security risks of complex scripting functionalities.
withdraws an eCash coin in exchange for money (e.g.,
USD) at an intermediary Bank, then uses the coin to No coordination. In contrast to earlier work [28], [43],
payapayeeB.FinallyB redeemstheeCashcointothe if Alice A wants to pay Bob B, she need not interact
Bankinexchangeformoney.Unlinkabilityensuresthat with any other TumbleBit users. Instead, A and B need
theBankcannotlinkthewithdrawalofaneCashcointo only interact with the Tumbler and each other. This
the redemption of it. TumbleBit provides unlinkability, lack of coordination between TumbleBit users makes
withTumblerT playingtheroleoftheChaumianBank. it possible to scale our system.
However, while Tumbler T need not be trusted, the
Performance. We have implemented our TumbleBit
Chaumian Bank is trusted to not (1) “print money”
system in C++ and python, using LibreSSL as our
(i.e.,issueeCashcoinstoitself)or(2)stealmoney(i.e.,
cryptographic library. We have tumbled payments from
refuse to exchange coins for money).
800 payers to 800 payees; the relevant transactions are
TumbleBit: As a classic tumbler. TumbleBit can also visibleontheblockchain.Ourprotocolrequires327KB
beusedasaclassicBitcointumbler,mixingtogetherthe
transferofonebitcoinfromℵdistinctpayers(AliceA) 2True fair exchange is impossible in the standard model [38]
toℵdistinctpayees(BobB).Inthismode,TumbleBitis and thus alternatives have been proposed, such as gradual release
mechanisms, optimistic models, or use of a trusted third party. We
runasinFigure1withthepaymentphaseshrunkto30
follow prior works that use Bitcoin for fair exchange [4], [24], [25]
seconds,sotheprotocolrunsinepochsthatrequiretwo
and treat the blockchain as a trusted public ledger. Other works use
blocks added to the blockchain. As a classic tumbler, thetermContingentPaymentorAtomicSwaps[27],[5].
2Scheme PreventsTheft Anonymous ResistsDoS ResistsSybils MinimumMixingTime BitcoinCompatible NoCoordination?
Coinjoin[28] (cid:88) smallset × × 1block (cid:88) ×
Coinshuffle[43],[34] (cid:88) smallset × × 1block (cid:88) ×(p2pnetwork)
Coinparty[49] 2/3usershonest (cid:88) some1 (cid:88)(fees) 2blocks (cid:88) ×
XIM[9] (cid:88) (cid:88) (cid:88) (cid:88)(fees) hours (cid:88) ×(usesblockchain)
Mixcoin[11] TTPaccountable ×(TTP) (cid:88) (cid:88)(fees) 2blocks (cid:88) (cid:88)
Blindcoin[48] TTPaccountable (cid:88) (cid:88) (cid:88)(fees) 2blocks (cid:88) (cid:88)
CoinSwap[29] (cid:88) ×(TTP)2 (cid:88) (cid:88)(fees) 2blocks (cid:88) (cid:88)
BSC[21] (cid:88) (cid:88) (cid:88) (cid:88)(fees) 3blocks × (cid:88)
TumbleBit (cid:88) (cid:88) (cid:88) (cid:88)(fees) 2blocks (cid:88) (cid:88)
TABLEI. ACOMPARISONOFBITCOINTUMBLERSERVICES.TTPSTANDSFORTRUSTEDTHIRDPARTY.WECOUNTMINIMUMMIXING
TIMEBYTHEMINIMUMNUMBEROFBITCOINBLOCKS.ANYMIXINGSERVICEINHERENTLYREQUIRESATLEASTONEBLOCK.
1COINPARTYCOULDACHIEVESOMEDOSRESISTANCEBYFORCINGPARTIESTOSOLVEPUZZLESBEFOREPARTICIPATING.
ofdataonthewire,and0.6secondsofcomputationona Decentralization also makes it easy for an attacker to
singleCPU.Thus,performanceinclassictumblermode create many Sybils and trick Alice A into mixing with
is limited only by the time it takes for two blocks to them in order to deanonymize her payments [10], [47].
be confirmed on the blockchain and the time it takes TumbleBit sidesteps these scalability limitations by not
for transactions to be confirmed; currently, this takes requiring coordination between mix users. The full
≈20minutes.Meanwhile,off-blockchainpaymentscan version [20] discusses the other tumblers in Table I-A.
complete in seconds (Section VIII).
After this paper was first posted, Dorier and Ficsor
began an independent TumbleBit implementation.3
B. Related Work
TumbleBit is related to work proposing new anony- II. BITCOINSCRIPTSANDSMARTCONTRACTS
mous cryptocurrencies (e.g., Zerocash [33], [7], Mon-
In designing TumbleBit, our key challenge was
ero [2] or Mimblewimble [23]). While these are very
ensuring compatibility with today’s Bitcoin protocol.
promising, they have yet to be as widely adopted as
WethereforestartbyreviewingBitcointransactionsand
Bitcoin. On the other hand, TumbleBit is an anonymity
Bitcoin’s non-Turing-complete language Script.
service for Bitcoin’s existing user base.
Transactions. A Bitcoin user Alice A is identified by
Off-blockchainpayments. Whenusedasanunlinkable her bitcoin address (which is a public ECDSA key),
payment hub, TumbleBit is related to micropayment and her bitcoins are “stored” in transactions. A single
channelnetworks,notablyDuplexMicropaymentChan- transaction can have multiple outputs and multiple in-
nels [13] and the Lightning Network [40]. These sys- puts. Bitcoins are transferred by sending the bitcoins
tems also allow for Bitcoin-backed fast off-blockchain held in the output of one transaction to the input of a
payments. Payments are sent via paths of intermedi- differenttransaction.Theblockchainexiststoprovidea
aries with pre-established on-blockchain pairwise es- public record of all valid transfers. The bitcoins held
crow transactions. TumbleBit (conceptually) does the in a transaction output can only be transferred to a
same. However, while the intermediaries in micropay- single transaction input. A transaction input T double-
3
ment channel network can link payments from A to spends a transaction input T when both T and T
2 2 3
B, TumbleBit’s intermediary T cannot. Our earlier point to (i.e., attempt to transfer bitcoins from) the
workshop paper [21] proposed a protocol that adds same transaction output T . The security of the Bitcoin
1
anonymity to micropayment channel networks. Tum- protocol implies that double-spending transactions will
bleBit is also related to concurrent work proposing not be confirmed on the blockchain. Transactions also
Bolt [18], an off-blockchain unlinkable payment chan- includeatransactionfeethatispaidtotheBitcoinminer
nel.However,whileTumbleBitisbothimplementedand that confirms the transaction on the blockchain. Higher
Bitcoin comptabile, Bolt [18] and [21] are not. Our full fees are paid for larger transactions. Indeed, fees for
version [20] has more discussion on [18], [21]. confirming transactions on the blockchain are typically
expressed as “Satoshi-per-byte” of the transaction.
Bitcoin Tumblers. Prior work on classic Bitcoin Tum-
blersissummarizedinTableI-A.CoinShuffle(++)[43], Scripts. Each transaction uses Script to determine
[34] both perform a mix in a single transaction. Bit- the conditions under which the bitcoins held in that
coin’s maximum transaction size (100KB) limits Coin- transaction can be moved to another transaction. We
Shuffle(++) to 538 users per mix. These systems are build“smartcontracts”fromthefollowingtransactions:
alsoparticularlyvulnerabletoDoSattacks,whereauser - T : One party A offers to pay bitcoins to any party
offer
joins the mix and then aborts, disrupting the protocol thatcansignatransactionthatmeetssomeconditionC.
for all other users. Decentralization also requires mix The T transaction is signed by A.
offer
users to interact via a peer-to-peer network in order - T : This transaction points to T , meets the
fulfill offer
to identify each other and mix payments. This coor- condition C stipulated in T , and contains the public
offer
dination between users causes communication to grow key of the party B receiving the bitcoins.
quadratically [9], [10], limiting scalability; neither [43]
nor [34] performs a mix with more than 50 users. 3https://github.com/NTumbleBit/NTumbleBit
3T is posted to the blockchain first. When T and PK (i.e., doesn’t know the corresponding secret
offer fulfill 2
is confirmed by the blockchain, the bitcoins in T keys), we also timelock the T transaction for a time
fulfill escr
flow from the party signing transaction T to the window tw. Thus, if a valid T is not confirmed by
offer cash
party signing T . Bitcoin scripts support two types the blockchain within time window tw, the escrowed
fulfill
of conditions that involve cryptographic operations: bitcoinscanbereclaimedbyA.Therefore,A’sbitcoins
are escrowed until either (1) the time window expires
Hashing condition: The condition C stipulated in
and A reclaims her bitcoins or (2) a valid T is
T is: “T must contain the preimage of value cash
offer fulfill confirmed. TumbleBit uses 2-of-2 escrow to establish
y computed under the hash function H.” Then, T
fulfill pairwise payment channels, per Figure 1.
collects the offered bitcoin by including a value x such
that H(x) = y. (We use the OP_RIPEMD160 opcode
so that H is the RIPEMD-160 hash function.) III. TUMBLEBIT:ANUNLINKABLEPAYMENTHUB
Signing condition: The condition C stipulated in T Ourgoalistoallowapayer,AliceA,tounlinkably
offer
is: “T must be digitally signed by a signature that send 1 bitcoin to a payee, Bob B. Naturally, if Alice
fulfill
verifies under public key PK.” Then, T fulfills A signed a regular Bitcoin transaction indicating that
fulfill
this condition if it is validly signed under PK. The Addr A pays 1 bitcoin to Addr B, then the blockchain
signing condition is highly restrictive: (1) today’s Bit- would record a link between Alice A and Bob B
coin protocol requires the signature to be ECDSA over and anonymity could be harmed using the techniques
the Secp256k1 elliptic curve [41]—no other elliptic of [31], [42], [8]. Instead, TumbleBit funnels payments
curves or types of signatures are supported, and (2) frommultiplepayer-payeepairsthroughtheTumblerT,
the condition specifically requires T itself to be using cryptographic techniques to ensure that, as long
fulfill
signed. Thus, one could not use the signing condi- as T does not collude with TumbleBit’s users, then no
tion to build a contract whose condition requires an one can link a payment from payer A to payee B.
arbitrary message m to be signed by PK.4 (Tum-
bleBit uses the OP_CHECKSIG opcode, which re- A. Overview of Bob’s Interaction with the Tumbler
quiresverificationofasinglesignature,andthe“2-of-2
multisignature” template ‘OP_2 key1 key2 OP_2 WeoverviewTumbleBit’sphasesundertheassump-
OP_CHECKMULTISIG’whichrequiresverificationofa tion that Bob B receives a single payment of value
signature under key1 AND a signature under key2.)5 1 bitcoin. TumbleBit’s Anonymity properties require
all payments made in the system to have the same
Script supports composing conditions under denomination; we use 1 bitcoin for simplicity. In our
“IF” and “ELSE”. Script also supports timelocking full version [20] we also discuss how Bob can receive
(OP_CHECKLOCKTIMEVERIFY opcode [46]), where multiple payments of denomination 1 bitcoin each.
T also stipulates that T is timelocked to time
offer fulfill
window tw. (Note that tw is an absolute block height.) TumbleBit has three phases (Fig 1). Off-blockchain
This allows the party that posted T to reclaim their TumbleBit payments take place during the middle Pay-
fulfill
bitcoin if T is unspent and the block height is ment Phase, which can last for hours or even days.
fulfill
higher than tw. Section VIII-A details the scripts used Meanwhile, the first Escrow Phase sets up payment
channels, and the last Cash-Out Phase closes them
in our implementation.
down; these two phases require on-blockchain transac-
2-of-2 escrow. TumbleBit relies heavily on the tions. All users of TumbleBit know exactly when each
commonly-used 2-of-2 escrow smart contract. Suppose phase begins and ends. One way to coordinate is to use
that Alice A wants to put Q bitcoin in escrow to block height; for instance, if the payment phase lasts
be redeemed under the condition C 2of2: “the fulfilling for 1 day (i.e., ≈144 blocks) then the Escrow Phase is
transaction includes two signatures: one under public whenblockheightisdivisibleby144,andtheCash-Out
key PK 1 AND one under PK 2.” Phase is when blockheight+1 is divisible by 144.
To do so, A first creates a multisig address 1: Escrow Phase. Every Alice A that wants to send
PK (1,2) for the keys PK 1 and PK 2 using the Bit- payments (and Bob B that wants to receive payments)
coin createmultisig command. Then, A posts an
during the upcoming Payment Phase runs the escrow
escrow transaction T escr on the blockchain that sends phase with T. The escrow phase has two parts:
Q bitcoin to this new multisig address PK . The
(1,2)
T transaction is essentially a T transaction that (a)PayeeB askstheTumblerT tosetupapayment
escr offer
requires the fulfilling transaction to meet condition channel. T escrows 1 bitcoin on the blockchain via
C . We call the fulfilling transaction T the cash- a 2-of-2 escrow transaction (Section II) denoted as
2of2 cash
outtransaction.GiventhatAdoesn’tcontrolbothPK
1
T
escr(T,B)
stipulating that 1 bitcoin can be claimed by
any transaction signed by both T and B. T is
escr(T,B)
4Thisiswhy[21]isnotBitcoin-compatible.[21]requiresablind timelocked to time window tw , after which T can
2
signaturetobecomputedoveranarbitrarymessage.Also,ECDSA-
reclaim its bitcoin. Similarly, the payeer A escrows 1
Secp256k1doesnotsupportblindsignatures.
5Unlike cryptographic multisignatures, a Bitcoin 2-of-2 multisig- bitcoinina2-of-2escrowwithT denotedasT escr(A,T),
natureisatupleoftwodistinctsignaturesandnotajointsignature. timelocked for time window tw 1 such that tw 1 <tw 2.
4(b) Bob B obtains a puzzle z through an off- of the corresponding RSA secret key d. Every user of
blockchaincryptographicprotocolwithT whichwecall TumbleBit validates (e,N) using π.
thepuzzle-promiseprotocol.Conceptually,theoutputof
this protocol is a promise by T to pay 1 bitcoin to B B. Overview of Alice’s Interaction with the Tumbler
in exchange for the solution to a puzzle z. The puzzle
We now focus on the puzzle-solving protocol be-
z is just an RSA encryption of a value (cid:15)
tween A and the Tumbler T to show how TumbleBit
z =f ((cid:15),e,N)=(cid:15)e mod N (1) allows A to make many off-blockchain payments via
RSA
onlytwoon-blockchaintransactions(aidingscalability).
where (e,N) is the TumbleBit RSA public key of
the Tumbler T. “Solving the puzzle” is equivalent During the Escrow Phase, Alice opens a payment
to decrypting z and thus obtaining its “solution” (cid:15). channelwiththeTumblerT byescrowingQbitcoinsin
Meanwhile, the “promise” c is a symmetric encryption anon-blockchaintransactionT escr(A,T).Eachescrowed
under key (cid:15) bitcoin can pay T for the solution to one puzzle. Next,
c=Enc (σ) duringtheoff-blockchainPaymentPhase,Amakesoff-
(cid:15)
blockchain payments to j ≤ Q payees. Finally, during
where σ is the Tumbler’s ECDSA-Secp256k1 signature the Cash-Out Phase, Alice A pays the Tumbler T by
onthetransactionT cash(T,B) whichtransfersthebitcoin posting a transaction T cash(A,T)(j) that reflects the new
escrowed in T escr(T,B) from T to B. (We use ECDSA- allocation of bitcoins; namely, that T holds j bitcoins,
Secp256k1forcompatibilitywiththeBitcoinprotocol.) while A holds Q−j bitcoins. The details of Alice A’s
Thus, the solution to a puzzle z enables B to claim 1 interactionwithT,whicharebasedonatechniqueused
bitcoinfromT.TopreventmisbehaviorbytheTumbler
in micropayment channels [36, p. 86], are as follows:
T, ourpuzzle-promise protocolrequires T toprovide a
proof that the puzzle solution (cid:15) is indeed the key which 1: Escrow Phase. Alice A posts a 2-of-2 escrow
decrypts the promise ciphertext c. The details of this transaction T escr(A,T) to the blockchain that escrows Q
of Alice’s bitcoins. If no valid transaction T is
protocol, and its security guarantees, are in Section VI. cash(A,T)
posted before time window tw , then all Q escrowed
1
2:PaymentPhase. OnceAliceAindicatessheisready bitcoins can be reclaimed by A.
to pay Bob B, Bob B chooses a random blinding factor
r ∈Z∗ and blinds the puzzle to 2:PaymentPhase. AliceAusesherescrowedbitcoins
N tomakeoff-blockchainpaymentstotheTumblerT.For
z =rez mod N. (2) each payment, A and T engage in an off-blockchain
puzzle-solver protocol (see Sections V-A,V-C).
Blinding ensures that even T cannot link the original
puzzlez toitsblindedversionz.BobB thensendsz to Once the puzzle is solved, Alice signs and gives T
A. Next, A solves the blinded puzzle z by interacting a new transaction T (i). T (i) points to
cash(A,T) cash(A,T)
with T. This puzzle-solver protocol is a fair exchange T and reflects the new balance between A and
escr(A,T)
that ensures that A transfers 1 bitcoin to T iff T gives T (i.e., that T holds i bitcoins while A holds Q−i
a valid solution to the puzzle z. Finally, Alice A sends bitcoins). T collects a new T (i) from A for
cash(A,T)
thesolutiontotheblindedpuzzle(cid:15)backtoBobB.Bob each payment. If Alice refuses to sign T (i),
cash(A,T)
unblinds (cid:15) to obtain the solution then the Tumbler refuses to help Alice solve further
puzzles. Importantly, each T (i) for i = 1...j
(cid:15)=(cid:15)/r mod N (3) cash(A,T)
(for j <Q) is signed by Alice A but not by T, and is
andacceptsAlice’spaymentifthesolutionisvalid,i.e., not posted to the blockchain.
(cid:15)e =z mod N.
3: Cash-Out Phase. The Tumbler T claims its bit-
3: Cash-Out Phase. BobB usesthepuzzlesolution(cid:15) coins from T escr(A,T) by signing T cash(A,T)(j) and
todecrypttheciphertextc.FromtheresultB cancreate posting it to the blockchain. This fulfills the condi-
atransactionT
cash(T,B)
thatissignedbybothT andB. tion in T escr(A,T), which stipulated that the escrowed
B postsT totheblockchaintoreceive1bitcoin coins be claimed by a transaction signed by both A
cash(T,B)
from T. and T. (Notice that all the T cash(A,T)(i) point to the
same escrow transaction T . The blockchain
Our protocol crucially relies on the algebraic prop-
escr(A,T)
will therefore only confirm one of these transactions;
erties of RSA, and RSA blinding. To make sure that
otherwise, double spending would occur. Rationally,
the Tumbler is using a valid RSA public key (e,N),
the Tumbler T always prefers to confirm T (j)
TumbleBit also has an one-time setup phase:
cash(A,T)
since it transfers the maximum number of bitcoins to
0: Setup. Tumbler T announces its RSA public T.)BecauseT cash(A,T)(j)istheonlytransactionsigned
key (e,N) and Bitcoin address Addr , together with a bytheTumblerT,acheatingAlicecannotstealbitcoins
T
non-interactive zero-knowledge proof of knowledge π6 by posting a transaction that allocates fewer than j
bitcoins to the Tumbler T.
6SuchaproofcouldbeprovidedusingtheGQidentificationpro-
Remark:ScalingBitcoin. Asimilar(butmoreelaborate)
tocol [19] made non-interactive using the Fiat-Shamir heuristic [14]
intherandomoraclemodel. technique can be applied between B and T so that
5𝓐 1 t 𝓑 1 2 BTC DoS and Sybil protection. TumbleBit uses transaction
3 ?
t fees to resist DoS and Sybil attacks. Every Bitcoin
𝓐 5 ?
2 t 2 ? transaction can include a transaction fee that is paid
t 3 ? 𝓑 2 3 BTC to the Bitcoin miner who confirms the transaction on
𝓐 t 4 ? the blockchain as an incentive to confirm transactions.
3 t 1 ? However, because the Tumbler T does not trust Alice
t
𝓐 6 ? 𝓑 A and Bob B, T should not be expected to pay fees
4 t 5 ? A compatiable interaction graph 3 3 BTC on the transactions posted during the Escrow Phase. To
{Payer puzzle-solver payments {Payee cashouts
this end, when Alice A establishes a payment channel
Tumbler's View withT,shepaysforboththeQescrowedintransaction
T andforitstransactionfees.Meanwhile,when
escr(A,T)
Fig. 2. Our unlinkability definition: The Tumblers view and a theTumblerT andBobB establishapaymentchannel,
compatibleinteractionmulti-graph. the Q escrowed bitcoins in T are paid in the
escr(T,B)
Tumbler T, but the transaction fees are paid by Bob B
only two on-blockchain transactions suffice for Bob
B to receive an arbitrary number of off-blockchain (Section III-A). Per [9], fees raise the cost of an DoS
attackwhereB startsandabortsmanyparallelsessions,
payments. Details are in the full version [20]. Given
locking T’s bitcoins in escrow transactions. This simi-
that each party uses two on-blockchain transactions
larly provides Sybil resistance, making it expensive for
to make multiple off-blockchain playments, Tumblebit
an adversary to harm anonymity by tricking a user into
helps Bitcoin scale.
entering a run of TumbleBit where all other users are
Sybils under the adversary’s control.
C. TumbleBit’s Security Properties
Unlinkability. We assume that the Tumbler T does not
IV. TUMBLEBIT:ALSOACLASSICTUMBLER.
collude with other users. The view of T consists of (1)
the set of escrow transactions established between (a) We can also operate TumbleBit as classic Bitcoin
each payer A and the Tumbler (A es−cro→w,ai T) of value Tumbler. As a classic Tumbler, TumbleBit operates in
j j
a and(b)theTumblerandeachpayeeB (T es−cro→w,bi B ), epoches, each of which (roughly) requires two blocks
i i i
to be confirmed on the blockchain (≈20 mins). During
(2) the set of puzzle-solver protocols completed with
each payer A at time t during the Payment Phase, and
eachepoch,thereareexactlyℵdistinctbitcoinaddresses
j
making payments (payers) and ℵ bitcoin addresses
(3) the set of cashout transactions made by each payer
A and each payee B during the Cash-Out Phase. receiving payments (payees). Each payment is of de-
j i
nomination 1 bitcoin, and the mapping from payers to
An interaction multi-graph is a mapping of pay- payees is a bijection. During one epoch, the protocol
ments from payers to payees (Figure 2). For each itselfisidenticaltothatinSectionIIIwiththefollowing
successful puzzle-solver protocol completed by payer changes: (1) the duration of the Payment Phase shrinks
A j at time t, this graph has an edge, labeled with time toseconds(ratherthanhoursordays);(2)eachpayment
t, from A j to some payee B i. An interaction graph is channel escrows exactly Q = 1 bitcoin; and (3) every
compatible if it explains the view of the Tumbler T, payeeBobB receivespaymentsatanephemeralbitcoin
i.e., the number of edges incident on B i is equal to the address Addr B chosen freshly for the epoch.
totalnumberofbitcoinscashedoutbyB .Unlinkability
i
requires all compatible interaction graphs to be equally
A. Anonymity Properties
likely. Anonymity therefore depends on the number of
compatible interaction graphs. As a classic tumbler, TumbleBit has the same bal-
ance property, but stronger anonymity: k-anonymity
Notice that payees B have better anonymity than
i within an epoch [21], [9]. Specifically, while the
payersA .(ThisfollowsbecausetheTumblerT knows
j blockchainrevealswhichpayersandpayeesparticipated
the time t at which payer A makes each payment.
j in an epoch, no one (not even the Tumbler T) can
Meanwhile, the Tumbler T only knows the aggregate
tell which payer paid which payee during that specific
amount of bitcoins cashed-out by each payee B .)
i epoch. Thus, if k payments successfully completed
A high-level proof of TumbleBit’s unlinkability is during an epoch, the anonymity set is of size k. (This
in Section VII, and the limitations of unlinkability are strongerpropertyfollowsdirectlyfromourunlinkability
discussed in Section VII-C. definition (Section III-C): there are k compatible inter-
actiongraphsbecausetheinteractiongraphisbijection.)
Balance. The system should not be exploited to print
new money or steal money, even when parties collude. Recovery from anonymity failures. It’s not always the
As in [18], we call this property balance, which estab- case that k = ℵ. The exact anonymity level achieved
lishes that no party should be able to cash-out more in an epoch can be established only after its Cash-Out
bitcoins than what is dictated by the payments that Phase. For instance, anonymity is reduced to k =ℵ−1
were successfully completed in the Payment Phase. We ifT abortsanpaymentmadebypayerA .Wedealwith
j
discusshowTumbleBitsatisfiesbalanceinSectionVII. thisbyrequiringBtousesanephemeralBitcoinaddress
6Addr in each epoch. As in [21], Bob B discards
Publicinput:(e,N).
B πprovesvalidityof(e,N)inaone-time-onlysetupphase.
Addr
B
if (1) the Tumbler T maliciously aborts A j’s AliceA TumblerT
payment in order to infer that A was attempting to
Input:Puzzley Secretinput:d
j
pay B (see Section VIII-C); or (2) k-anonymity was 1.PrepareRealPuzzlesR
too small. (In case (2), B can alternatively re-tumble F djor ←j∈ y·[m (r] j, )epic mk or dj∈ NZ∗ N
the bitcoin in Addr in a future epoch.)
B
2.PrepareFakeValuesF
Remark: Intersection attacks. While this notion of k- F δior ←i (∈ ρi[n )e],p mic ok dρ Ni∈Z∗ N
anonymity is commonly used in Bitcoin tumblers (e.g.,
[9], [21]), it does suffer from the following weakness. 3.MixSets.
Randomlypermute 4.Evaluation
Any adversary that observes the transactions posted to {d1...dm,δ1...δn} Fori=1...m+n
theblockchainwithinoneepochcanlearnwhichpayers to{β1...βm+n} −β−1−...−β−m−+→n Evaluateβi:si=β id modN
and payees participated in that epoch. Then, this infor- L Le et tR F b be et th he ei in nd di ic ce es so of ft th he ed δii En –cr Cyp ht ot oh se er re as nu dl ot msi: ki∈{0,1}λ1
mation can be correlated to de-anonymize users across –ci=Hprg(ki)⊕si
epochs (e.g., using frequency analysis or techniques
Committothekeys:hi=H(ki)
used to break k-anonymity [15]). See also [9], [32]. ←c−1,−..−.,−cm−+−−n
←h−1,−..−.,−hm−−+−n
DoS and Sybil Attacks. We use fees to resist DoS 5.IdentifyFakeSetF −F−,ρ−i−∀−i∈−F→ 6.CheckFakeSetF
and Sybil attacks. Alice again pays for both the Q Foralli∈F:
escrowedintransactionT andforitstransaction Verifyβi=(ρi)e modN,
escr(A,T) Ifyes,revealki∀i∈[F].
fees. However, we run into a problem if we want Bob 7.CheckFakeSetF Elseabort.
B to pay the fee on the escrow transaction T . Foralli∈F, ←k−i−∀−i∈−F−
Because Bob B uses a freshly-chosen Bitcoines acr d( dT r, eB s) s V De er ci rf yy pt th sa it =hi H= pH rg(( kk ii )) ⊕ci
Addr B, that is not linked to any prior transaction on Verify(si)e=(ρi) modN
Abortifanycheckfails.
the blockchain, Addr cannot hold any bitcoins. Thus,
B
Bob B will have to pay the Tumbler T out of band. 8.PosttransactionTpuzzle
The anonymous fee vouchers described in [21] provide
Tpuzzleoffers1bitcoinwithintimewindowtw1
undercondition“thefulfillingtransactionis
one way to address this, which also has the additional signedbyT andhaspreimagesofhj∀j∈R”.
feature that payers A cover all fees.
9.Checkβjunblindtoy∀j∈R
−y−,−−rj−∀−j∈−→R Forallj∈R
Verifyβj=y·(rj)e modN
V. AFAIREXCHANGEFORRSAPUZZLESOLVING Ifnot,abort.
WenowexplainhowtorealizeaBitcoin-compatible T10 so. lvP eo cs ot ntr ta an ins sac kti jo ∀n jT ∈so Rlve
fair-exchange where Alice A pays Tumbler T one 11.ObtainPuzzleSolution
Forj∈R:
bitcoin iff the T provides a valid solution to an RSA LearnkjfromTsolve
puzzle.TheTumblerT hasanRSAsecretkeyd andthe Decryptcjtosj=Hprg(kj)⊕cj
corresponding public key (e,N). The RSA puzzle y is I Of bs tj ainis ss o.t l. ut( is oj n)e sj= /rβ jj mm oo dd NN,
providedbyAlice,anditssolutionisanRSAsecret-key whichisyd modN.
exponentiation Fig.3. RSApuzzlesolvingprotocol.H andHprg aremodeledas
randomoracles.Inourimplementation,HisRIPEMD-160,andHprg
(cid:15)=f R− S1 A(y,d,N)=yd modN (4) isChaCha20witha128-bitkey,sothatλ1=128.
ThepuzzlesolutionisessentiallyanRSAdecryptionor
RSA signing operation.
A. Our (Stand-Alone) RSA-Puzzle-Solver Protocol
ThisprotocolisattheheartofTumbleBit’sPayment
Phase. However, we also think that this protocol is
The following stand-alone protocol description as-
of independent interest, since there is also a growing sumes Alice A wants to transfer 1 bitcoin in exchange
interest in techniques that can fairly exchange a bitcoin
for one puzzle solution. Section V-C shows how to
for the solution to a computational “puzzle”. (The full support the transfer of up to Q bitcoins for Q puzzle
version [20] reviews the related work [27], [30], [24],
solutions (where each solution is worth 1 bitcoin).
[6].)SectionV-ApresentsourRSA-puzzle-solverproto-
colasastand-aloneprotocolthatrequirestwoblocksto The core idea is similar to that of contingent pay-
be confirmed on the blockchain. Our protocol is fast— ments [27]: Tumbler T solves Alice’s A’s puzzle y by
solving2048-bitRSApuzzlesfasterthan[30]’sprotocol computing the solution yd mod N, then encrypts the
forsolving16x16Sudokupuzzles(SectionVIII)).Also, solution under a randomly chosen key k to obtain a
theuseofRSAmeansthatourprotocolsupportssolving ciphertext c, hashes the key k under bitcoin’s hash as
blinded puzzles(seeequation(2)),andthuscanbeused h=H(k) and finally, provides (c,h) to Alice. Alice A
to create an unlinkable payment scheme. Section V-C preparesT offeringonebitcoininexchangeforthe
puzzle
shows how our protocol is integrated into TumbleBit’s preimage of h. Tumbler T earns the bitcoin by posting
Payment Phase. Implementation results are in Table II a transaction T that contains k, the preimage of h,
solve
of Section VIII-B. and thus fulfills the condition in T and claims a
puzzle
7bitcoin for T. Alice A learns k from T solve, and uses k party between A and T. F fair-RSA gets a puzzle-solving
to decrypt c and obtain the solution to her puzzle. request (y, 1 bitcoin) from A, and forwards the request
to T. If T agrees to solve puzzle y for A, then T gets
Our challenge is to find a mechanism that allows A
1 bitcoin and A gets the puzzle solution. Otherwise, if
to validate that c is the encryption of the correct value,
T refuses, A gets 1 bitcoin back, and T gets nothing.
without using ZK proofs. Thus, instead of asking T to
Fairness for T is captured because A can request a
provide just one (c,h) pair, T will be asked to provide
m+n pairs (Step 3). Then, we use cut and choose:
puzzle solution only if she sends 1 bitcoin to F fair-RSA.
Fairness for B is captured because T receives 1 bitcoin
A asks T to “open” n of these pairs, by revealing the
only if he agrees to solve the puzzle. The following
randomly-chosen keys k ’s used to create each of the n
i theorem is proved in the full version [20]:
pairs (Step 7). For a malicious T to successfully cheat
A,itwouldhavetocorrectlyguessallthen“challenge” Theorem 1: Let λ be the security parameter, m,n
pairsandformthemproperly(soitdoesnotgetcaught), bestatisticalsecurityparameters,letN >2λ.Letπbea
while at the same time malforming all the m unopened publicly verifiable zero-knowledge proof of knowledge
pairs (so it can claim a bitcoin from A without actually in the random oracle model. If the RSA assumption
solvingthepuzzle).SinceT cannotpredictwhichpairs holds in Z∗ , and if functions Hprg,H are independent
N
A asks it to open, T can only cheat with very low random oracles, there exists a negligible function ν,
probability
1/(cid:0)m n+n(cid:1)
. suchthatprotocolinFigure3securelyrealizesF fair-RSA
in the random oracle model with the following security
However, we have a problem. Why should T agree
guarantees.ThesecurityforT is1−ν(λ)whilesecurity
to open any of the (c,h) values that it produced? If A
for A is 1− 1 −ν(λ).
received the opening of a correctly formed (c,h) pair, (m+n)
n
she would be able to obtain a puzzle solution without
paying a bitcoin. As such, we introduce the notion of C. Solving Many Puzzles and Moving Off-Blockchain
“fakevalues”.Specifically,then(c,h)-pairsthatAasks
T to open will open to “fake values” rather than “real” TointegratetheprotocolinFigure3intoTumbleBit,
puzzles.BeforeT agreestoopenthem(Step7),Amust we have to deal with three issues. First, if TumbleBit
prove that these n values are indeed fake (Step 6). is to scale Bitcoin (Section III-B), then Alice A must
be able to use only two on-blockchain transactions
WemustalsoensurethatT cannotdistinguish“real T and T to pay for the an arbitrary
escr(A,T) cash(A,T)
puzzles” from “fake values”. We do this with RSA number of Q puzzle solutions (each worth 1 bitcoin)
blinding. The real puzzle y is blinded m times with
during the Payment Phase; the protocol in Figure 3
different RSA-blinding factors (Step 1), while the n
only allows for the solution to a single puzzle. Second,
fake values are RSA-blinded as well (Step 2). Finally,
per Section III-B, the puzzle-solving protocol should
Arandomlypermutestherealandfakevalues(Step3).
occur entirely off-blockchain; the protocol in Figure 3
Once Alice confirms the correctness of the opened uses two on-blockchain transactions T puzzle and T solve.
“fake” (c,h) values (Step 7), she signs a transaction Third, the T solve transactions are longer than typical
T offering one bitcoin for the keys k that open all transactions(sincetheycontainmhashpreimages),and
puzzle
ofthem“real”(c,h)values(Step8).ButwhatifAlice thus require higher transaction fees.
cheated, so that each of the “real” (c,h) values opened
To deal with these issues, we now present a fair-
to the solution to a different puzzle? This would not be
exchange protocol that uses only two on-blockchain
fair to T, since A has only paid for the solution to a
transactions to solve an arbitrary number of RSA
single puzzle, but has tricked T into solving multiple
puzzles.
puzzles. We solve this problem in Step 9: once A posts
T ,sheprovestoT thatallm“real”valuesopento Escrow Phase. Before puzzle solving begins, Alice
puzzle
the same puzzle y. This is done by revealing the RSA- posts a 2-of-2 escrow transaction T escr(A,T) to the
blindingfactorsblindingpuzzley.OnceT verifiesthis, blockchainthatescrowsQbitcoins,(perSectionIII-B).
T agreestopostT solve whichrevealsmofthek values T escr(A,T) is timelocked to time window tw 1, and
that open “real” (c,h) pairs (Step 10). stipulates that the escrowed bitcoins can be transferred
to a transaction signed by both A and T.
B. Fair Exchange
Payment Phase. Alice A can buy solutions for up to
Fair exchange exchange entails the following: (1) Q puzzles, paying 1 bitcoin for each. Tumbler T keeps
Fairness for T: After one execution of the protocol A a counter of how many puzzles it has solved for A,
will learn the correct solution yd mod N to at most making sure that the counter does not exceed Q. When
one puzzle y of her choice. (2) Fairness for A: T will A wants her ith puzzle solved, she runs the protocol in
earn 1 bitcoin iff A obtains a correct solution. Figure 3 with the following modifications after Step 8
(so that it runs entirely off-blockchain):
We prove this using the real-ideal paradigm [16].
We call the ideal functionality F fair-RSA and present (1) Because the Payment Phase is off-blockchain,
it the full version [20]. F fair-RSA acts like a trusted transaction T puzzle from Figure 3 is not posted to the
8blockchain.Instead,AliceAformsandsignstransaction VI. PUZZLE-PROMISEPROTOCOL
T and sends it to the Tumbler T. Importantly,
puzzle
We present the puzzle-promise protocol run be-
Tumbler T does not sign or post this transaction yet.
tween B and T in the Escrow Phase. Recall from
Section III-A, that the goal of this protocol is to
(2) Transaction T points to the escrow trans-
puzzle provide Bob B with a puzzle-promise pair (c,z). The
action T ; T changes its balance so that T
escr(A,T) puzzle “promise” c is an encryption (under key (cid:15)) of the
holdsibitcoinandAliceAholdsQ−ibitcoins.T
puzzle Tumbler’sECDSA-Secp256k1signatureσ onthetrans-
is timelocked to time window tw1 and stipulates the
action T which transfers the bitcoin escrowed
sameconditioninFigure3:“thefulfillingtransactionis cash(T,B)
in T from T to B. Meanwhile the RSA-puzzle
signed by T and has preimages of h ∀j ∈R.” escr(T,B)
j z hides the encryption key (cid:15) per equation (1).
(Suppose that T deviates from this protocol, and If Tumbler T just sent a pair (c,z) to Bob, then
instead immediately signs and post T puzzle. Then the Bob has no guarantee that the promise c is actually
bitcoins in T escr(A,T) would be transferred to T puzzle. encrypting the correct signature, or that z is actually
However, these bitcoins would remain locked in T puzzle hidingthecorrectencryptionkey.Ontheotherhand,T
until either (a) the timelock tw expired, at which point cannot just reveal the signature σ directly, because Bob
Alice A could reclaim her bitcoins, or (b) T signs and could use σ to claim the bitcoin escrowed in T
escr(T,B)
posts a transaction fulfilling the condition in T puzzle, withoutactuallybeingpaid(off-blockchain)byAliceA
whichallowsAlicetoobtainthesolutiontoherpuzzle.) during TumbleBit’s Payment Phase.
(3) Instead of revealing the preimages k ∀j ∈R in Tosolvethisproblem,weagainusecutandchoose:
j
an on-blockchain transaction T as in Figure 3, the we ask T to compute many puzzle-promise pairs
solve
Tumbler T just sends the preimages directly to Alice. (c i,z i), and have Bob B test that some of the pairs are
computed correctly. As in Section V-A, we use “fake”
(4) Finally, Alice A checks that the preimages open transactions (that will be “opened” and used only to
avalidpuzzlesolution.Ifso,Alicesignsaregularcash- check if the other party has cheated) and “real” trans-
outtransactionT (perSectionIII-B).T actions(thatremain“unopened”andresultincorrectly-
cash(A,T) cash(A,T)
points to the escrow transaction T and reflects formed puzzle-promise pairs). Cut-and-choose guaran-
escr(A,T)
the new balance between A and T. teesthatBknowsthatatleastoneoftheunopenedpairs
is correctly formed. However, how does B know which
Attheendoftheithpayment,theTumblerT should puzzle z i is correctly formed? Importantly, B can only
havetwonewsignedtransactionsfromAlice:T (i) choose one puzzle z i that he will ask Alice A to solve
puzzle
and T (i), each reflecting the (same) balance of during TumbleBit’s Payment Phase (Section III-A). To
cash(A,T)
bitcoinsbetween T (holding i bitcoins)and A (holding deal with this, we introduce an RSA quotient-chain
Q−ibitcoins).However,AliceAalreadyhasherpuzzle techniquethattiestogetherallpuzzlesz i sothatsolving
one puzzle z gives the solution to all other puzzles.
solutionatthispoint(step(4)modificationabove).What j1
if she refuses to sign T cash(A,T)(i)? In this section, we assume that B wishes to obtain
only a single payment of denomination 1 bitcoin; the
In this case, the Tumbler immediately begins to
protocol as described in Figure 4 and Section VI-A
cash out, even without waiting for the Cash-Out Phase.
suffices to run TumbleBit as a classic tumbler. We
Specifically, Tumbler T holds transaction T (i),
puzzle discuss its security properties in Section VI-B and im-
signed by A, which reflects a correct balance of i
plementationinSectionVIII-B.Inthefullversion[20],
bitcoins to T and Q−i bitcoins to A. Thus, T signs
we show how to modify this protocol so that it allows
T puzzle(i)andpostsittotheblockchain.Then,T claims B to receive arbitrary number of Q off-blockchain
the bitcoins locked in T (i) by signing and posting
puzzle payments using only two on-blockchain transactions.
transaction T . As in Figure 3, T fulfills T
solve solve puzzle
by containing the m preimages k ∀j ∈ R. The bitcoin
j
in T will be transferred to T and then to A. Protocol Walk Through
escr(A,T) puzzle
T andthustotheTumblerT.Theonlyharmdoneis
solve B prepares µ distinct “real” transactions and η
that T posts two longer transactions T (i),T (i)
puzzle solve “fake” transactions, hides them by hashing them with
(instead of just T cash(A,T)), which require higher fees H(cid:48) (Step2-3),permutesthem(Step4),andfinallysends
to be confirmed on the blockchain. (Indeed, this is why
them to T as β ,...,β . T the evaluates each β to
we have introduced the T (i) transaction.) 1 m+n i
cash(A,T) obtain a puzzle-promise pair (c ,z ) (Step 5).
i i
Cash-Out Phase. Alice has j puzzle solutions once Next, B needs to check that the η “fake” (c ,z )
i i
the the Payment Phase is over and the Cash-Out Phase pairs are correctly formed by T (Step 8). To do this,
begins.IftheTumblerT hasatransactionT (j) B needs T to provide the solutions (cid:15) to the puzzles
cash(A,T) i
signed by Alice, the Tumbler T just signs and post this z in fake pairs. T reveals these solutions only after
i
transaction to the blockchain, claiming its j bitcoins. B has proved that the η pairs really are fake (Step 7).
9O prn oc be abth ili is tych lee sc sk ti hs ad non 1e /, (cid:0)B µ+k ηn (cid:1)o .wsthatT cancheatwith TumblerT chooses πfre ps rh ove ep sh ve am lie drP ia tu ylb E oli C fc (Di en S ,p A Nu - )t S: e in( ce p a, 2N 5 o6, nkP e1 -K tik me T ep y eh , -, oπ i n.e) l. . y,b seit tc uo pin phad asd er .ess(SKe Tph,PKe Tph).
η BobB TumblerT.Secretinput:d
Nowweneedournewtrick.Wewanttoensurethat 1 S. igS net buu tp dT oes nc or( tT p,B o) sttransactionTescr(T,B)
ifatleastoneofthe“real”(c i,z i)pairsopenstoavalid t ui nm de el roc thk eed cofo nr dit tw io2 n:o “ff ther ein fg ulfion lle inb git tc ro anin
saction
ECDSA-Secp256k1 signature σ i, then just one puzzle
2.PrepareµRealUnsignedTcash(T,B).
um nu ds et rb ke eysig Pn Ked Bu .”nderkeyPKe Tphand
solution (cid:15) i with i ∈ R, can be used to open this pair. Fori∈1,...,µ: ←T−e−scr−(T−,−B−)
t( oW ge ivn eee td
o
t th hi es pb ae yc ea ru Ase fB orm du es ct ryd pe tc ioid ne ww ith hi och utp ku nz oz wle inz gi C S he th ito =Tos ce Hashr (cid:48)(a (Tn T,d B fo u) lm fii ll= ip ).a Cd asρ hi O← utT{0 F, o1 rm}λ at(ρi)
which pair (c ,z ) is validly formed.) We solve this by 3.PrepareFakeSet.
i i Fori∈1,...,η:
having T provide B with µ−1 quotients (Step 9). This C fth io =ose Hr (cid:48)a (n Fd ao km eFop ra md ar t|i |r← i).{0,1}λ
solves our problem since knowledge of (cid:15) = (cid:15) allows
j1 4.MixSets.
B to recover of all other (cid:15) , since Randomlypermute
ji {ft1,...,ftη,ht1,...,htµ}
toobtain{β1,...βµ+η}
LetRbetheindicesofthehti
(cid:15)
ji
=(cid:15) 1·q 2·,...,·q
i
LetFbetheindicesofthefti
−β−1−..−.β−µ−+→η
Choosesalt∈{0,1}λ
On the flip side, what if B obtains more than one valid Compute: hh FR == HH (( ss aa ltl |t || F|R )) 5.Evaluation.
ECDSA-Secp256k1 signatures by opening the (c ,z ) −h−R−,h−→F Fori=1,...,µ+η:
pairs? Fortunately, however, we don’t need to
wi orri
y
REC anD dS oA mls yig cn hoβ oi seto (cid:15)g ie ∈tσ Zi N= .Sig(SKe Tph,βi)
a bb ito cu ot inth inis. exT ch he ane gs ecr fo ow
r
atr Ean Cs Dac St Aio -n SeT cpes 2cr 5(T 6k,B 1) sio gf nfe ar ts ur1
e
6.IdentifyFakeSet.
←(−c1−,−z1−),−. −.− R. −(− ,c F→µ−+−η−,z−µ−+−η−) C C i.er r .e e ,a a zt te e i=p pr uo (zm (cid:15)z il )i es ee zic m=i f o= R dSH A N(sh (cid:15)k i,((cid:15) ei ,) N⊕ )σi
under an ephemeral key PKeph used only once during −r−i−∀−i∈−F→
thisprotocolexecutionwiththT isspecificpayeeB.Thus, −s−a→lt 7 C. hC ech kec hk RF =ak HeS (se at.
lt||R)andhF=H(salt||F)
even if B gets many signatures, only one can be used 8.CheckFakeSet. For va el rl ifi y∈ βiF =: H(cid:48)(FakeFormat||ri).
toformthecash-outtransactionT thatredeems Foralli∈F ←(cid:15)−i−∀−i∈−F− Abortifanycheckfails
the bitcoin escrowed in T escr(T,B)c .ash(T,B) - - -V V Va a
a
(al l li i
i
)d d da a
a
Dt t te e
e
ect R
p
rh yrSa
o
pt A
m
t(cid:15) σii p
s
ieu< =z czN il H:e pz ri g(= (cid:15)i( )(cid:15) ⊕i)e cimodN
(b)Verifyσi,i.e.,
ECDSA-Ver(PKe Tph,H(cid:48)(fti),σi)=1 9.PrepareQuotients.
B. Security Properties A 1b 0o .r Qt uif oa tin ey ntc Th ee sc tk .fails ←q−2,−..−.,−q−µ For sR et= q2{ =j1 (cid:15) (cid:15), j j. 2 1.. ,, .j .µ .,} q: µ=(cid:15)j(cid:15) µj −µ
1
p Tu hz ezW l iee d- epa arg o la mi fn uis nec ca p tp ir ot ou ntr aoe lc io tt yh le u Fss i pe n rc og mu rr isei et a -y l s- igir d ne eq a iu slir pe pam rr eae sdn eit ngs tm eo df [1 tt 6 hh ] ee . F Ao bz . zr o.j j. rR 2 µt= = i= fz az{ j njj 1 µy1 −·, 1c(. h. q ·. 2 e, ( c)j qe kµ µ} ) fem ac ih lo sme dc ok N de Nqualities:
11.PosttransactionTescr(T,B)onblockchain
full version [20]. F promise-sign is designed to guarantee 12.BeginPaymentPhase.
the following properties: (1) Fairness for T: Bob B Setz=zj1.Sendz¯=z·(r)etoPayerA
learns nothing except signatures on fake transactions.
Fig. 4. Puzzle-promise protocol when Q = 1. (d,(e,N)) are
(2)FairnessforB:IfT agreestocompletetheprotocol,
theRSAkeysforthetumblerT.(Sig,ECDSA-Ver)isanECDSA-
thenBobB obtainsatleastonepuzzle-promisepair.To Secp256k1signaturescheme.WemodelH,H(cid:48) andHshk asrandom
do this, F promise-sign acts a trusted party between B and oracles. In our implementation, H is HMAC-SHA256 (keyed with
T. Bob B sends the “real” and “fake” transactions to salt) . H(cid:48) is ‘Hash256’, i.e., SHA-256 cascaded with itself, which
F promise-sign.F promise-signhasaccesstoanoraclethatcan i Es Cth De Sh Aa -s Sh ecfu pn 2c 5t 6io kn 1.u Hse sd hkin isB Si Htc Aoi -n 5’ 1s 2“ .h Ca as sh h-a On ud t- Ts Fig on r” mp aa tr ia sd si hg om rthw ai nth
d
compute the Tumbler’s T signatures on any messages. fortheunsignedportionofatransactionthatfulfillsT escr(T,B).The
(Thisprovidesproperty(2).)Then,ifTumblerT agrees, protocol uses ρi to ensure the output of CashOutTFormat contains
F promise-sign provides Bob B with signatures on each sufficiententropy.FakeFormatisadistinguishablepublicstring.
“fake” transaction only. (This provides property (1).)
The following theorem is proved the full version [20]:
A. Balance
Theorem 2: Let λ be the security parameter. If
RSA trapdoor function is hard in Z∗ , if H,H(cid:48),Hshk
N The balance was defined, at high-level, in Sec-
are independent random oracles, if ECDSA is strong
tion III-C. We analyze balance in several cases.
existentially unforgeable signature scheme, then the
puzzle-promise protocol in Figure 4 securely realizes Tumbler T∗ is corrupt. We want to show that all the
the F promise-sign functionality. The security for T is bitcoins paid to T by all A j’s can be later claimed
1−ν(λ) while security for B is 1− 1 −ν(λ). by the B ’s. (That is, a malicious T∗ cannot refuse a
(µ+η) i
η payment to Bob after being paid by Alice.) If B suc-
i
cessfully completes the puzzle-promise protocol with
T∗, fairness for this protocol guarantees that B gets
VII. TUMBLEBITSECURITY i
a correct “promise” c and puzzle z. Meanwhile, the
We discuss TumbleBit’s unlinkability and balance fairness of the puzzle-solver protocol guarantees that
properties. See Section III-C for DoS/Sybil resistance. each A gets a correct puzzle solution in exchange for
j
10her bitcoin. Thus, for any puzzle z solved, some B allcolludetoharmsomeotherhonestAand/orB.This
i
can open promise c and form the cash-out transaction can be reduced to one of the two cases above because
T thatallowsB toclaimonebitcoin.Moreover, an honest A will only interact with B∗ and T∗, while
cash(T,B) i i
transaction T has timelock tw and transaction an honest B will only interact with A∗ and T.
escr(A,T) 1 j
T has timelock tw . Since tw < tw , it
escr(T,B) 2 1 2
follows that either (1) T∗ solves A’s puzzle or (2)
B. Unlinkability
A reclaims the bitcoins in T (timelock tw ),
escr(A,T) 1
before T can (3) steal a bitcoin by reclaiming the Unlinkability is defined in Section III-C and must
bitcoins in T (timelock tw ). hold against a T that does not collude with other users.
escr(T,B) 2
We show that all interaction multi-graphs G compatible
CaseA∗andB∗arecorrupt. Considercolludingpayers
j i with T’s view are equally likely.
B∗ and payees A∗. We show that the sum of bitcoins
i j
cashed out by all B∗ is no more than the number of First, note that all TumbleBit payments have the
i
puzzles solved by T in the Payment Phase with all A∗. same denomination (1 bitcoin). Thus, T∗ cannot learn
j
anything by correlating the values in the transactions.
First, the fairness of the puzzle-promise protocol
Next, recall from Section III-A, that all users of Tum-
guarantees that any B∗ learns only (c,z) pairs; thus,
i bleBit coordinate on phases and epochs. Escrow trans-
by the unforgeability of ECDSA signatures and the
actions are posted at the same time, during the Escrow
hardness of solving RSA puzzles, B∗ cannot claim
Phase only. All T cash-out transactions are
any bitcoin at the end of the Escrow Phase. Next, the escr(T,B)
posted during the Cash-Out Phase only. All payments
fairness of the puzzle-solver protocol guarantees that
made from A and B occur during the Payment Phase
if T completes SP successful puzzle-solver protocol i j
j only, and payments involve no direct interaction be-
executionswithA∗,thenA∗ getsthesolutiontoexactly
j j tweenT andB.Thisrulesouttimingattackswherethe
SP puzzles. Payees B∗ use the solved puzzles to
j i Tumbler purposely delays or speeds up its interaction
claimbitcoinsfromT.BytheunforgeabilityofECDSA
with some payer A , with the goal of distinguishing
signatures (and assuming that the blockchain prevents j
some behavior at the intended payee B . Even if the
d tho au nbl me- is np (e tn ,d (cid:80)ing) S, Pal )l c bo itl clu od ining inB toi∗ tac la ,s wh- ho eu rt en to ismo thr ee Tumbler T∗ decides to cash-out with Ai
j
before the
j j Payment Phase completes (as is done in Section V-C
total number of bitcoins escrowed by T across all B∗.
i when A misbehaves), all the B still cash out at the
j i
Case B∗ and T collude. Now suppose that B∗ and same time, during the Cash-Out Phase.
i i
T∗ collude to harm A . Fairness for A still follows
j j Next, observe that transcripts of the puzzle-
directly from the fairness of the puzzle-solver protocol.
promise and puzzle-solver protocols are information-
This follows because the only interaction between A
j theoretically unlinkable. This follows because the puz-
and B∗ is the exchange of a puzzle (and its solution).
i zle z used by any A in the puzzle-solver protocol is
NoothersecretinformationaboutA isrevealedtoB∗. j
j i equally likely to be the blinding of any of the puzzles z
Thus, B∗ cannot add any additional information to the
i thatappearinthepuzzle-promiseprotocolsplayedwith
view of T, that T can use to harm fairness for A .
j any B (see Section III-A, equation (2)).
i
We do note, however, that an irrational Bob B∗ can
misbehavebyhandingAliceA anincorrectpuzzli ez∗. Finally, we assume secure channels, so that T∗
j cannot eavesdrop on communication between A ’s and
In this case, the fairness of the puzzle-solver protocol j
B ’s, and that T∗ cannot use network information to
ensures that Alice A will pay the Tumbler T for a i
correct solution (cid:15)∗ toj puzzle z∗. As such, Bob B will correlate A j’s and B i’s (by e.g., observing that they
i share the same IP address). Then, the above two obser-
be expected to provide Alice A with the appropriate
j vations imply that all interaction multi-graphs, that are
goods or services in exchange for the puzzle solution
(cid:15)∗. However, the puzzle solution (cid:15)∗ will be of no value compatible with the view of T∗, are equally likely.
to Bob B , i.e., Bob cannot use (cid:15)∗ to claim a bitcoin
i
duringtheCash-OutPhase.Itfollowsthattheonlyparty C. Limitations of Unlinkability
harmedbythismisbehaviorisBobB himself.Assuch,
i TumbleBit’s unlinkability (see Section III-C) is in-
we argue that such an attack is of no importance.
spired by Chaumian eCash [12], and thus suffers from
Case A∗ and T collude. Similarly, even if A∗ and T similar limitations. (The full version [20] discusses the
j j
collude, fairness for an honest B still follows from the limitations of Chaumian eCash [12] in more detail.) In
i
fairnessofthepuzzle-promiseprotocol.Thisisbecause whatfollows,weassumethatAlicehasasingleBitcoin
A∗ j’s interaction with B
i
is restricted in receiving a address Addr A, and Bob has Bitcoin address Addr B.
puzzle z, and handing back a solution. While A∗ can
j Alice/Tumbler collusion. Our unlinkability defini-
always give B an invalid solution (cid:15)∗, B can easily
i i tion assumes that the Tumbler does not collude with
check that the solution is invalid (since ((cid:15)∗)e (cid:54)= z
other TumbleBit users. However, collusion between the
mod N) and refuse to provide goods or services.
Tumbler and Alice can be used in a ceiling attack.
Case A∗, B∗ and T collude. Suppose A∗, B∗ and T SupposethatsomeBobhassetupaTumbleBitpayment
j i j i
11channel that allows him to accept up to Q TumbleBit Intersection attacks. Our definition of unlinkability
payments,andsupposethatBobhasalreadyacceptedQ applies only to a single epoch. Thus, as mentioned in
paymentsattimet ofthePaymentPhase.Importantly, Section IV-A and [9], [32], our definition does not rule
0
theTumbler,workingalone,cannotlearnthatBobisno out the correlation of information across epochs.
longer accepting payments after time t . (This follows
0
Abort attacks. Our definition of unlinkability applies
becausetheTumblerandBobdonotinteractduringthe
to payments that complete during an epoch. It does not
PaymentPhase.)However,theTumblercanlearnthisby
accountforinformationgainedbystrategicallyaborting
colludingwithAlice:AliceofferstopayBobattimet ,
0
payments. As an example, suppose that the Tumbler
and finds that Bob cannot accept her payment (because
notices that during several TumbleBit epochs, (1) Alice
Bobhas“hittheceiling”forhispaymentchannel).Now
always makes a single payment, and (2) Bob hits the
theTumblerknowsthatBobhasobtainedQpaymentsat
ceilingforhispaymentchannel.Nowinthenextepoch,
time t , and he can rule out any compatible interaction
0
the Tumbler aborts Alice’s payment and notices that
graphsthatlinkanypaymentmadeaftertimet toBob.
0
Bobnolongerhitshisceiling.TheTumblermightguess
If we can prevent ceiling attacks (e.g., by requiring that Alice was trying to pay Bob.
Bob to initiate every interaction with Alice) then Bob’s
puzzlezcannotbelinkedtoanypayee’sBitcoinaddress
Addr ,...,Addr , even if Alice and the Tumbler
VIII. IMPLEMENTATION
B1 Bι
collude; see the full version [20]. To show that TumbleBit is performant and com-
patible with Bitcoin, we implemented TumbleBit as a
Bob/Tumbler collusion. Bob and the Tumbler can
classic tumbler. (That is, each payer and payee can
collude to learn the true identity of Alice. Importantly,
send/receive Q = 1 payment/epoch.) We then used
thiscollusionattackisusefulonlyifBobcanbepaidby
TumbleBit to mix bitcoins from 800 payers (Alice A)
Alice without learning her true identity (e.g., if Alice is
to 800 payees (Bob B). We describe how our imple-
aToruser).Theattackissimple.Bobrevealstheblinded
mentationinstantiatesourTumbleBitprotocols.Wethen
puzzle value z to the Tumbler. Now, when Alice asks
measure the off-blockchain performance, i.e., compute
that Tumbler to solve puzzle z, the Tumbler knows that
time, running time, and bandwidth consumed. Finally,
this Alice is attempting to pay Bob. Specifically, the
we describe two on-blockchain tests of TumbleBit.
TumblerlearnsthatBobwaspaidbytheBitcoinaddress
Addr that paid for the solution to puzzle z.
A
A. Protocol Instantiation
There is also a simple way to mitigate this attack.
Alice chooses a fresh random blinding factor r(cid:48) ∈ Z N∗ We instantiated our protocols with 2048-bit RSA.
andaskstheTumblertosolvethedouble-blindedpuzzle The hash functions and signatures are instantiated as
described in the captions to Figure 3 and Figure 4.7
z =(r(cid:48))e ·z mod N. (5)
Choosing m and n in the puzzle-solving protocol. Per
Once the Tumbler solves the double-blinded puzzle z,
Theorem 1, the probability that T can cheat is param-
Alice can unblind it by dividing by r(cid:48) and recovering
eterized by
1/(cid:0)m+n(cid:1)
where m is the number of “real”
the solution to single-blinded puzzle z. This way, the m
valuesandnisthenumberof“fake”valuesinFigure3.
Tumbler cannot link the double-blinded puzzle z from
From a security perspective, we want m and n to be
Alice to the single-blinded puzzle z from Bob.
as large as possible, but in practice we are constrained
However, even with double blinding, there is still a by the Bitcoin protocol. Our main constraint is that m
timing channel. Suppose Bob colludes with the Tum- RIPEMD-160 hash outputs must be stored in T puzzle
bler,andsendstheblindedpuzzlevaluez tobothAlice of our puzzle-solver protocol. Bitcoin P2SH scripts
and the Tumbler at time t . The Tumbler can rule out (as described below) are limited in size to 520 bytes,
0
the possibility that any payment made by any Alice which means m≤21. Increasing m also increases the
prior to time t should be linked to this payment to transactionfees.Fortunately,nisnotconstrainedbythe
0
Bob. Returning to the terminology of our unlinkability Bitcoin protocol; increasing n only means we perform
definition (Section III-C), this means that Bob and the more off-blockchain RSA exponentiations. Therefore,
Tumbler can collude to use timing information to rule we chose m = 15 and n = 285 to bound T’s
out some compatible interaction graphs. cheating probability to 2−80. (2−80 equals RIPEMD-
160’s collision probability.)
Potato attack. Our definition of unlinkability does
not consider external information. Suppose Bob sells 7There were slight difference between our protocols as described
potatoes that costs exactly 7 bitcoins, and the Tumbler in this paper and the implementation used in some of the tests. In
knowsthatnootherpayeesellsitemsthatcostexactly7 Figure3,Arevealsblindsrj∀j∈RtoT,ourimplementationinstead
bitcoins.TheTumbler canusethisexternal information revealsanencryptedversionr je∀j∈R.Thischangedoesnotaffect
rule out compatible interaction graphs. For instance, if
performance,sinceAholdbothrj andr je.Also,ourimplementation
omitstheindexhasheshRandhF fromFigure4;thesearetwo256-
Alice made 6 TumbleBit payments, the Tumbler infers
bithashoutputsandthusshouldnotsignificantlyaffectperformance.
that Alice could not have bought Bob’s potatoes. Wehavesinceremovedthesedifferences.
12Choosing µ and η in the puzzle-promise protocol. TumbleBit as a classic tumbler (Table II). Next,
Theorem 2 also allows T to cheat with probability we consider classic Tumbler mode (Section IV). We
1/(cid:0)µ+η(cid:1)
. However, this protocol has no Bitcoin-related consider a scenario where A and B use the same
µ
constraints on µ and η. Thus, we take µ = η = 42 to machine,becauseAliceAwantsanonymizeherbitcoin
achieve a security level of 2−80 while minimizing the by transferring it to a fresh ephemeral bitcoin address
numberofoff-blockchainRSAcomputationsperformed that she controls. Thus, we run (1) A and B in Boston
in Figure 4 (which is µ+η). and T in Tokyo, and (2) A and B in Boston and T
in New York. To prevent the Tumbler T for linking
Scripts. By default, Bitcoin clients and miners only A and B via their IP address, we also tested with
operate on transactions that fall into one of the five (a) B connecting to T over Tor, and (b) both A and
standard Bitcoin transaction templates. We therefore B connected through Tor. Per Table II, running time
conform to the Pay-To-Script-Hash (P2SH) [3] tem- is bound by network latency, but is < 11 seconds
plate. To format transaction T offer (per Section II) as even with when both parties connect to Tokyo over
a P2SH, we specify a redeem script (written in Script) Tor. Connecting to New York (in clear) results in ≈ 1
whoseconditionC mustbemettofulfillthetransaction. secondrunningtime.Computetimeisonly0.6seconds,
This redeem script is hashed and stored in transaction again measured by running A, B and T on the Boston
T offer.TotransferfundsoutofT offer,atransactionT
fulfill machine. Thus, TumbleBit’s performance, as a classic
isconstructed.T fulfill includes(1)theredeemscriptand Tumbler, is bound by the time it takes to confirm 2
(2) a set of input values that the redeem script is run blocks on the blockchain (≈20 minutes).
against. To programmatically validate that T can
fulfill
fulfill T , the redeem script T is hashed, and Performance of TumbleBit’s Phases. (Table III) Next,
offer fulfill
the resulting hash value is compared to the hash value we break out the performance of each of TumbleBit’s
stored in T . If these match, the redeem script is run phases when Q = 1. We start by measuring compute
offer
against the input values in T . T fulfills T if timebyrunningallA,B andT ontheBostonmachine.
fulfill fulfill offer
the redeem script outputs true. All our redeem scripts Then, we locate each party on different machines. We
include a time-locked refund condition, that allows the first set A in Toronto, B in Boston and T in New York
party offering T to reclaim the funds after a time andgetRTTstobe22msfromBostontoNewYork,23
offer
window expires. To do so, the party signs and posts
msfromNewYorktoToronto,and55msfromToronto
a refund transaction T that points to T and toBoston.ThenwesetAinFrankfurt,B inBostonand
refund offer
reclaims the funds locked in T . We reproduce our T in Tokyo and get RTTs to be 106 ms from Boston
offer
scripts in the full version [20]. to Frankfurt, 240 ms from Frankfurt to Tokyo, and 197
ms from Tokyo to Boston. An off-blockchain payment
inthePaymentPhasecompletesinunder5secondsand
B. Off-Blockchain Performance Evaluation most of the running time is due to network latency.
We evaluate the performance for a run of our pro-
C. Blockchain Tests
tocols between one payer Alice A, one payee Bob B
and the Tumbler T. We used several machines: an EC2 Our on-blockchain tests use TumbleBit as a classic
t2.medium instance in Tokyo (2 Cores at 2.50 GHz, tumbler, where payers pay themselves into a fresh
4 GB of RAM), a MacBook Pro in Boston (2.8 GHz ephemeral Bitcoin address. All transactions are visible
processor, 16 GB RAM), and Digital Ocean nodes in on the blockchain. Transaction IDs (TXIDs) are hyper-
New York, Toronto and Frankfurt (1 Core at 2.40 GHz linkedbelow.ThedenominationofeachTumbleBitpay-
and 512 MB RAM). ment (i.e., the price of puzzle solution) was 0.0000769
BTC (roughly $0.04 USD on 8/15/2016). Table IV
Puzzle-solver protocol (Table II). The total network details the size and fees8used for each transaction.
bandwidth consumed by our protocol was 269 Kb,
which is roughly 1/8th the size of the “average web- Test where everyone behaves. In our first test, all
page” per [45] (2212 Kb). Next, we test the total (off- parties completed the protocol without aborting. We
blockchain)computationtimeforourpuzzle-solverpro- tumbled 800 payments between ℵ = 800 payers and
tocol (Section V-A) by running both parties (A and T) ℵ = 800 payees, resulting in 3200 transactions posted
on the Boston machine. We test the impact of network to the blockchain and a k-anonymity of k = 800.The
latency by running A in Boston and T in Tokyo, and puzzle-promise escrow transactions T escr(T,B) are all
then with T in New York. (The average Boston-to- funded from this TXID and the puzzler-solver escrow
Tokyo Round Trip Times (RTT) was 187 ms and the transactions T escr(A,T) are all funded from this TXID.
Boston-to-NewYorkRTTwas9ms.)FromTableII,we
seetheprotocolcompletesin<4seconds,withrunning 8We use a lower transaction fee rate of 15 Satoshi/byte (see
time dominated by network latency. Indeed, even when Table IV) for T puzzle and T solve because we are in less of hurry to
A and T are very far apart, our 2048-bit RSA puzzle have them confirmed. Specifically, if A refuses to sign T cash(A,T),
thenT endsthePaymentPhasewithAearly(evenbeforetheCash-
solvingprotocolisstillfasterthan[30]’s16x16Sudoku OutPhasebegins),andimmediatelypostsT puzzle andthenT solve to
puzzle solving protocol, which takes 20 seconds. theblockchain.SeeSectionV-C.
13TABLEII. AVERAGEPERFORMANCEOFRSA-PUZZLE-SOLVERANDCLASSICTUMBLER,INSECONDS.(100TRIALS).
Compute RunningTime RTT RunningTime RTT
Bandwidth
Time (Boston-NewYork) (Boston-NewYork) (Boston-Tokyo) (Boston-Tokyo)
RSA-puzzle-solvingprotocol 0.398 0.846 0.007949 4.18 0.186 269KB
ClassicTumbler(inclear) 0.614 1.190 0.008036 5.99 0.187 326KB
ClassicTumbler(BoverTor) 0.614 3.10 0.0875 8.37 0.273 342KB
ClassicTumbler(BothoverTor) 0.614 6.84 0.0875 10.8 0.273 384KB
TABLEIII. AVERAGEOFF-BLOCKCHAINRUNNINGTIMESOF Block Height
TUMBLEBIT’SPHASES,INSECONDS.(100TRIALS) 425500 { Escrow Phase
Compute RunningTime RunningTime 425502 Tescr(𝓐, 𝓣) & Tescr(𝓣, 𝓑)
Time (Boston-NewYork-Toronto) (Boston-Frankfurt-Tokyo)
Escrow 0.2052 0.3303 1.5503
{
Payment 0.3878 1.1352 4.3455 425505 Case 2 & 3: Tpuzzle
Cash-Out 0.0046 0.0069 0.0068 425507 Case 3: Tsolve
TABL TrE anI sV ac. tion TRANSAC ST izI eONS SI aZ tE osS hiA /bN yD teFEE FS eeIN (inOU BR TCT )ESTS. 425509 { Case 1: Tescr(𝓐, 𝓣) Refund
T escr 190B 30 0.000057 425511 Case 2: Tpuzzle Refund
T cash 447B 30 0.000134
T refundforT escr 373B 30 0.000111 425514 {
T Tp sou lz vz ele 4 94 07 7B B 1 15 5 0 0. .0 00 00 00 16 37 6 425527 Case 1 & 2: Tescr(𝓣, 𝓑) Refund
T refundforT puzzle 651B 20 0.000130
This test completed in 23 blocks in total, with Escrow Fig.5. Timelineoftestwithuncooperativebehavior,showingblock
heightwheneachtransactionwasconfirmed.
Phase completing in 16 blocks, Payment Phase taking
1 block, and Cash-Out Phase completing in 6 blocks. arefundtransactionafterthetimelockinT expires.
puzzle
Wenote,however,thatourprotocolcould alsohave Tumbler reclaims its bitcoins from its payment channel
completedmuchfaster,e.g.,with1blockfortheEscrow with Bob B 2 via a refund transaction after the timelock
Phase, and 1 block for the Cash Out Phase. A Bitcoin on the escrow transaction T escr(T,B) expires.
block can typically hold ≈ 5260 of our 2-of-2 escrow Case 3: The Tumbler provides Alice A the solution
3
transactions T and ≈ 2440 of our cash-out transac-
escr to her puzzle in the puzzle-solver protocol, and the
tion T cash. We could increase transaction fees to make Tumbler has an T signed by A (Section V-C).
puzzle
sure that our Escrow Phase and Cash-Out phase (each
However, Alice refuses to sign the cash-out transaction
confirming2×800transactions)occurwithinoneblock.
T topayoutfromherescrowwiththeTumbler.
cash(A,T)
In our tests, we used fairly conservative transaction Then,theTumblersignsandpoststhetransactionT
puzzle
fees (Table IV). As a classic Tumbler, we therefore anditsfulfillingtransactionT andclaimsitsbitcoin.
solve
expect TumbleBit to have a higher denomination than Payment from A to B completes but the Tumbler has
3 3
the 0.0000769 BTC we used for our test. For instance,
to pay more in transaction fees. This is because the
transaction fees of 60 Satoshi per Byte (0.0007644 TumblerhastopostbothtransactionsT andT ,
BTC/user)are≈1/1000ofadenominationof0.5BTC.
rather than just T ; see Table
IVpu .zzle solve
cash(A,T)
Test with uncooperative behavior. Our second run of
Remark: Anonymity when parties are uncooperative.
only 10 users (5 payers and 5 payees) demonstrates
Notice that in Case 1 and Case 2, the protocol aborted
how fair exchange is enforced in the face of uncooper-
without completing payment from Alice to Bob. k-
ative or malicious parties. Transactions T and
escr(A,T) anonymity for this TumbleBit run was therefore k =3.
T were timelocked for 10 blocks and T
puzzle escr(T,B) By aborting, the Tumbler T learns that payers A ,A
1 2
was timelocked for 15 blocks. All escrow transactions
were trying to pay payees B ,B . However, anonymity
1 2
T are funded by TXID and all escrow trans-
escr(A,T) of A ,A ,B ,B remains unharmed, since B and
1 2 1 2 1
actions T are funded by TXID. Two payer-
escr(T,B) B were using ephemeral Bitcoin addresses they now
2
payeepairscompletedtheprotocolsuccessfully.Forthe
discardtosafeguardtheiranonymity(seeSectionIV-A).
remaining three pairs, some party aborted the protocol:
Case 1: The Tumbler T (or, equivalently, Alice A 1) ACKNOWLEDGEMENTS
refused to cooperate after the Escrow Phase. Alice A
1 We thank Ethan Donowitz for assistance with the
reclaimsherbitcoinsfromescrowtransactionT
escr(A,T) preliminary stages of this project, and Nicolas Dorier,
via a refund transaction after the timelock expires.
AdamFicsor,GregoryGalperin,OmerPaneth,Dimitris
The Tumbler T reclaims its bitcoins from his payment
Papadopoulos, Leonid Reyzin, Ann Ming Samborski,
channel with Bob B escrow transaction T via
1 escr(T,B) Sophia Yakoubov, the anonymous reviewers and many
a refund transaction after the timelock expires.
members of the Bitcoin community for useful discus-
Case2: TheTumblerabortsthepuzzle-solverprotocol sionsandsuggestions.FoteiniBaldimtsiandAlessandra
bypostingthetransactionT butrefusingtoprovide ScafuroperformedthisworkwhileatBostonUniversity.
puzzle
the transaction T . No payment completes from A This work was supported by NSF grants 1012910,
solve 2
to B . Instead, A reclaims her bitcoin from T via 1414119, and 1350733.
2 2 puzzle
14REFERENCES [24] Ranjit Kumaresan and Iddo Bentov. How to use bitcoin to
incentivizecorrectcomputations. InACM-CCS,2014.
[1] BitcoinFog. Wikipedia,2016.
[25] Ranjit Kumaresan, Tal Moran, and Iddo Bentov. How to use
[2] Monero,https://getmonero.org/home. 2016. bitcointoplaydecentralizedpoker. InACM-CCS,2015.
[3] Gavin Andresen. BIP-0016: Pay to Script Hash. Bitcoin [26] Elliptic Enterprises Limited. Elliptic: The global standard for
ImprovementProposals,2014. blockchainintelligence,2016. https://www.elliptic.co/.
[4] Marcin Andrychowicz, Stefan Dziembowski, Daniel Mali- [27] Gregory Maxwell. Zero Knowledge Contingent Payment.
nowski,andLukaszMazurek. Securemultipartycomputations BitcoinWiki,2011.
onbitcoin. InIEEES&P,pages443–458,2014.
[28] GregoryMaxwell.CoinJoin:Bitcoinprivacyfortherealworld.
[5] ABack,GMaxwell,MCorallo,MFriedenbach,andLDashjr. Bitcoin-talk,2013.
Enabling blockchain innovations with pegged sidechains.
[29] GregoryMaxwell. CoinSwap:transactiongraphdisjointtrust-
Blockstream,https://blockstream.com/sidechains.pdf,2014.
lesstrading. Bitcoin-talk,2013.
[6] WacławBanasik,StefanDziembowski,andDanielMalinowski.
[30] GregoryMaxwell. ThefirstsuccessfulZero-KnowledgeCon-
EfficientZero-KnowledgeContingentPaymentsinCryptocur-
tingentPayment. BitcoinCore,February2016.
rencies Without Scripts. Cryptology ePrint Archive, Report
2016/451,2016. [31] S Meiklejohn, M Pomarole, G Jordan, K Levchenko,
GM Voelker, S Savage, and D McCoy. A fistful of bitcoins:
[7] Eli Ben Sasson, Alessandro Chiesa, Christina Garman,
Characterizingpaymentsamongmenwithnonames. InACM-
Matthew Green, Ian Miers, Eran Tromer, and Madars Virza.
SIGCOMMInternetMeasurementConference,IMC,2013.
Zerocash: Decentralized anonymous payments from Bitcoin.
InIEEESecurityandPrivacy(SP),pages459–474,2014. [32] Sarah Meiklejohn and Claudio Orlandi. Privacy-Enhancing
Overlays in Bitcoin. In Lecture Notes in Computer Science,
[8] Alex Biryukov, Dmitry Khovratovich, and Ivan Pustogarov.
volume8976.SpringerBerlinHeidelberg,2015.
DeanonymisationofClientsinBitcoinP2PNetwork. InACM-
CCS,pages15–29,2014. [33] Ian Miers, Christina Garman, Matthew Green, and Aviel D
Rubin. Zerocoin:Anonymousdistributede-cashfrombitcoin.
[9] George Bissias, A Pinar Ozisik, Brian N Levine, and Marc
InIEEESecurityandPrivacy(SP),pages397–411,2013.
Liberatore. Sybil-resistantmixingforbitcoin. InWorkshopon
PrivacyintheElectronicSociety,pages149–158,2014. [34] Pedro Moreno-Sanchez, Tim Ruffing, and Aniket Kate. P2P
MixingandUnlinkableP2PTransactions. Draft,June2016.
[10] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind
Narayanan, Joshua A Kroll, and Edward W Felten. SoK: [35] Malte Mo¨ser and Rainer Bo¨hme. Join Me on a Market for
Research Perspectives and Challenges for Bitcoin and Cryp- Anonymity. Workshop on Privacy in the Electronic Society,
tocurrencies. InIEEE-SP,2015. 2016.
[11] Joseph Bonneau, Arvind Narayanan, Andrew Miller, Jeremy [36] Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew
Clark, JoshuaA. Kroll, and EdwardW. Felten. Mixcoin: Miller, and Steven Goldfeder. Bitcoin and cryptocurrency
Anonymity for bitcoin with accountable mixes. In Financial technologies. PrincetonUniversityPres,2016.
CryptographyandDataSecurity,2014. [37] GuevaraNoubirandAmiraliSanatinia. Honeyonions:Expos-
[12] DavidChaum. Blindsignaturesystem. InCRYPTO,1983. ingsnoopingtorhsdirrelays. InDEFCON24,2016.
[38] Henning Pagnia and Felix C. Grtner. On the impossibility of
[13] Christian Decker and Roger Wattenhofer. A fast and scalable
fairexchangewithoutatrustedthirdparty,1999.
paymentnetworkwithbitcoinduplexmicropaymentchannels.
In Stabilization, Safety, and Security of Distributed Systems, [39] Morgen Peck. DAO May Be Dead After $60 Million Theft.
pages3–18.Springer,2015. IEEESpectrum,TechTalkBlog,17June2016.
[14] Amos Fiat and Adi Shamir. How to prove yourself: Practical [40] Joseph Poon and Thaddeus Dryja. The bitcoin lightning
solutionstoidentificationandsignatureproblems.InCRYPTO, network:Scalableoff-chaininstantpayments.Technicalreport,
1986. TechnicalReport(draft).https://lightning.network,2015.
[15] Srivatsava Ranjit Ganta, Shiva Prasad Kasiviswanathan, and [41] CerticomResearch.Sec2:Recommendedellipticcurvedomain
Adam Smith. Composition attacks and auxiliary information parameters,2010.
indataprivacy. InACMSIGKDD,pages265–273,2008. [42] Dorit Ron and Adi Shamir. Quantitative analysis of the full
[16] O.Goldreich,S.Micali,andA.Wigderson. Howtoplayany bitcointransactiongraph.InFinancialCryptographyandData
mentalgame. InSTOC.ACM,1987. Security,pages6–24.Springer,2013.
[17] Grams. Helixlight: Helix made simple. https: [43] TimRuffing,PedroMoreno-Sanchez,andAniketKate. Coin-
//grams7enufi7jmdl.onion.to/helix/light. shuffle: Practical decentralized coin mixing for bitcoin. In
ESORICS,pages345–364.Springer,2014.
[18] Matthew Green and Ian Miers. Bolt: Anonymous Payment
Channels for Decentralized Currencies. Cryptology ePrint [44] Jeff Stone. Evolution Downfall: Insider ’Exit Scam’ Blamed
Archive2016/701,2016. For Massive Drug Bazaar’s Sudden Disappearance. interna-
tionalbusinesstimes,2015.
[19] Louis C. Guillou and Jean-Jacques Quisquater. A practical
zero-knowledgeprotocolfittedtosecuritymicroprocessormin- [45] the Internet Archive. Http Archive: Trends, 2015. http:
imizingbothtransmissionandmemory.InEUROCRYPT,1988. //httparchive.org/trends.php.
[20] EthanHeilman,LeenAlshenibr,FoteiniBaldimtsi,Alessandra [46] PeterTodd. BIP-0065:OPCHECKLOCKTIMEVERIFY. Bit-
Scafuro, and Sharon Goldberg. TumbleBit: An Untrusted coinImprovementProposal,2014.
Bitcoin-Compatible Anonymous Payment Hub. Cryptology [47] F. Tschorsch and B. Scheuermann. Bitcoin and Beyond: A
ePrintArchive2016/575,2016. Technical Survey on Decentralized Digital Currencies. IEEE
[21] Ethan Heilman, Foteini Baldimtsi, and Sharon Goldberg. CommunicationsSurveysTutorials,PP(99),2016.
BlindlySignedContracts:AnonymousOn-BlockchainandOff- [48] Luke Valenta and Brendan Rowan. Blindcoin: Blinded, ac-
BlockchainBitcoinTransactions. InWorkshoponBitcoinand countablemixesforbitcoin. InFC,2015.
BlockchainResearchatFinancialCrypto,February2016.
[49] JanHenrikZiegeldorf,FredGrossmann,MartinHenze,Nicolas
[22] ChainalysisInc.Chainalysis:Blockchainanalysis,2016.https: Inden,andKlausWehrle.Coinparty:Securemulti-partymixing
//www.chainalysis.com/. ofbitcoins. InCODASPY,2015.
[23] TomElvisJedusor. Mimblewimble. 2016.
15