Proactive Two-Party Signatures for User Authentication
AntonioNicolosi,MaxwellKrohn,YevgeniyDodis,andDavidMazie`res
NYUDepartmentofComputerScience
{nicolosi,max,dodis,dm}@cs.nyu.edu
Abstract may have the right to initiate signatures of arbitrary mes-
Westudyproactivetwo-partysignatureschemesinthecon- sages, while a server’s role is simply to approve and log
text of user authentication. A proactive two-party signa- whathasbeensigned.Insuchsettings,anattackermaygain
turescheme(P2SS)allowstwoparties—theclientandthe fruitful advantage from the use of even a single key share,
server—jointlytoproducesignaturesandperiodicallytore- unlesssomeseparatemechanismisusedformutualauthen-
freshtheirsharingofthesecretkey. Thesignaturegenera- ticationofthetwoparties. Finally,ordinarytwo-partysig-
tionremainssecureaslongasbothpartiesarenotcompro- natures offer no way to transfer ownership of a key share
mised between successive refreshes. We construct the first fromonepartytoanother—astheoldownercouldneglect
such proactive scheme based on the discrete log assump- toerasetheshareitshouldnolongerbestoring.
tionbyefficientlytransformingSchnorr’spopularsignature Proactivedigitalsignaturesallowprivatekeysharestobe
scheme into a P2SS. We also extend our technique to the updated or “refreshed” in such a way that old key shares
signatureschemeofGuillouandQuisquater(GQ),provid- cannot be combined with new shares to sign messages or
ing two practical and efficient P2SSs that can be proven recovertheprivatekey. Whileanumberofproactivesigna-
secureintherandomoraclemodelunderstandarddiscrete ture protocols have been constructed, most existing proto-
logorRSAassumptions. colsarethresholdschemesdesignedforavariablenumber
We demonstrate the usefulness of P2SSs (as well as of parties. Because these threshold schemes require a ma-
our specific constructions) with a new user authentication jorityofparticipantstobehonest,theydonotscaledownto
mechanism for the Self-certifying File System (SFS) [28]. onlytwoparties.
Based on a new P2SS we call 2Schnorr, the new SFS au- Thispaperdescribes2Schnorr,aproactivesignaturepro-
thentication mechanism lets users register the same public tocol specifically designed for two parties. 2Schnorr is an
keyinmanydifferentadministrativerealms,yetstillrecover efficient protocol that is easy to implement and produces
easily if their passwords are compromised. Moreover, an digital signatures compatible with the Schnorr [32] signa-
audittrailkeptbyasecureauthenticationservertellsusers turescheme. Intherandom-oraclemodel,athree-message
exactly what file servers an attacker may have accessed— version of 2Schnorr is provably secure against existential
includingevenaccountstheusermayhaveforgottenabout. forgeriesassumingonlythatdiscretelogsarehard. Forap-
plications with bounded concurrency, such as user authen-
tication, a two-message version can also be proven secure
under the stronger one-more-discrete-logassumption. The
1.Introduction techniquewedescribeisequallyapplicabletotheGuillou-
Quisquater (GQ) [20] signature scheme, producing two-
Untilnow,littleattentionhasbeengiventoproactivetwo- and three-message 2GQ protocols based on the RSA and
partysignatureschemes(P2SSs).Inanordinarytwo-party one-more-RSA inversion problems, respectively. We will
signaturescheme,aprivatekeyissplitbetweentwoparties, concentrate on 2Schnorr, however, as 2GQ is completely
both of whom must approve and participate in the signing analogous.
ofmessages. Anattackermustcompromisebothpartiesto P2SS signatures have a natural application to the prob-
forge signatureson its own. However, the attacker has the lem of user authentication, particularly for settings with
entirelifetimeofthepublickeytocompromiseeachofthe many administrative realms. Within a large university, for
two parties. Moreover, particularly in the two-party case, example, it is not uncommon for a user to have five or six
theparties’rolesmaybeasymmetric—forinstance,aclient different shell accounts on machines in separate research
groups. On the web, users typically establish accounts at
ThisresearchwassponsoredbytheDefenseAdvancedResearchProjects dozens of different sites over time. Under such circum-
Agency(DARPA)andtheSpaceandNavalWarfareSystemsCenter,San stances, a user whose private key or other credentials get
Diego,undercontractN66001-00-1-8927.compromisedisunlikelytoremembereveryplaceatwhich simultaneouslyaccessserversinmultiplerealms. TheSFS
heneedstoupdatehislogininformation. Someofthesites clientitselfhasnonotionofbelongingtoaparticularrealm.
mayevenbeunavailableatthetimetheusertriestoupdate (In fact, SFS has no client-side configuration options that
them,atwhichpointtheusermayjustgiveupontheprob- woulddifferentiateoneclientfromanother.) Userssimply
lemuntilthenexttimeheneedsoneoftheaccounts. access files based on whatever realms they belong to. If a
Using 2Schnorr, we built a user-authentication mecha- useraccessesafileonaservertheclienthasneverheardof,
nism that addresses these challenges for SFS [28]. SFS is an“automounting”mechanismcausesthefiletospringinto
asecure,globalfilesysteminwhichusersgaintransparent existencebeforetheaccesscompletes.
access to files from many different administrative realms SFSusershavepublicsignaturekeyswhichtheyregister
after logging in with a single password. With the new au- withanyrealmsinwhichtheyhaveaccounts. Userauthen-
thenticationmechanism,everyuserhasanordinarySchnorr tication consists of digitally signing an authentication re-
public signature key on file wherever the user has an ac- questwiththecorrespondingprivatekey. Eachuserrunsa
count. The corresponding private key is split between the program,sfsagent,thatattemptstoauthenticatehertoevery
userandanauthenticationserveroftheuser’schoice. Ifthe fileserversheaccesses.Inthisway,byregisteringthesame
user’s password is ever compromised, he can immediately public key in every administrative realm, a user can trans-
blockfurtherunauthorizedaccesstoall ofhisaccountsby parentlyaccessfilesfrommultiplerealmswithoutworrying
updating his password and private key halves on this sin- aboutadministrative boundaries. Unfortunately, if a user’s
gleauthenticationserver. Moreover,fromtheserver’slogs, privatekeyisevercompromised,theusermayhavetoup-
theusercandetermineexactlywhatserversanattackerhas dateherpublickeyinalargenumberofrealms. Themech-
accessed,whereonthenetworkthoseaccessescamefrom, anism described in this paper makes it considerably more
andwhethertheattackerhaschangedtheuser’slogininfor- difficulttocompromiseauser’skey.
mationatanysites. Thus,evenaccountstheusermayhave SFS comes bundled with a remote execution utility, rex,
forgottenaboutwillbebroughtbacktohisattentionifthere withsimilarfunctionalitytothepopularssh[37]. Between
isanyriskofanattackerhavingaccessedthem. thefilesystemandrex,anySFSuserauthenticationmech-
ThenextsectiondescribesSFSandrelatedworkinuser anismcancoveralargefractionoftheday-to-daynetwork
authentication and proactive signature schemes. Section 3 accessespeoplemaketotheirservers.
describesthe2Schnorrprotocolandgivesaproofofsecu-
rity. Section 4 describes the implementation of our user- 2.2.UserAuthentication
authentication mechanism in SFS. Section 5 reports on
Of widely used network file systems, SFS’s goals are
the performance of 2Schnorr and our user-authentication
probably most similar to those of AFS [22]. AFS is a file
scheme. Section6concludes.
systemdesignedtoworkoverthewide-areanetwork. AFS
hasbeenparticularlysuccessfulinlargeorganizations—for
2.RelatedWork
instancepermittingtheusercommunityofanentireuniver-
A vast number of systems have dealt with the problem sitytoshareaccesstothesamefilesystems. Unfortunately,
of user authentication. This section describes SFS and the AFS does not adapt as well to settings with many differ-
motivation for a new SFS user authentication mechanism. ent administrative realms. AFS’s security is based on the
Wethenhighlightafewothersystemsthathavetackleduser centralizedKerberos[33]authenticationsysteminwhicha
authenticationonalargescale. Finally, wediscussrelated centralauthoritymanagesalloftheaccountsandserversin
workincryptography. agivenadministrativerealm. Cross-realmauthenticationis
possible, but requires cooperation from realm administra-
2.1.SFSOverview
tors. Thus, users must typically type a separate password
SFS is a secure network file system designed for decen- foreachrealminwhichtheywishtoaccessservers. Since
tralized control and easy sharing of files across organiza- thecentralKerberosserverstoresasecretthatiseffectively
tional boundaries. In SFS’s administrative model, servers equivalenttotheuser’spassword,itisinadvisableforusers
are grouped into administrative realms that recognize the tohavethesamepasswordindifferentKerberosrealms.
same set of authorized users. Realms can be as large as The SSH remote login tool supports a mode of au-
an entire campus or as small as a single server behind a thentication based on public keys. The user registers
DSLline. Whileasimplemechanismallows onerealmto his private key with an agent process on the local ma-
“import” or recognize users from another, realms in gen- chine, and stores the corresponding public key in a file
eralneednottrusteachother,coordinatewitheachother,or .ssh/authorized keys in his home directory on the
evenknowofeachother’sexistence. server. SSH public key authentication is very convenient.
EachSFSusermayhave accountsin many differentad- Users therefore typically end up copying their autho-
ministrativerealms.Fromasingleclientmachine,userscan rized keysfiletoalloftheirdifferentaccounts. Unfor-tunately,changingpublickeysrequiresmanyaccountstobe compatible with existing one-party algorithms. Such two-
updated,andusersarelikelytoforgettoupdateaccountson party schemes allow systems to interoperate with verifiers
infrequentlyusedmachines. that cannot be updated to understand new signature types.
PerhapsmostrelevanttoP2SSarethevarioushardware- While 2Schnorr and 2GQ are the first two-party schemes
baseduser-authenticationsystems.Assmartcardsandother compatible with Schnorr and GQ, they are hardly the first
physicalsecuritydevicesgainmorecomputationalpower,it schemestointeroperatewithstandardone-partyalgorithms.
willbecomeincreasinglypracticalforthemtocomputedig- BellareandSanhdu[6]andMacKenzieandReiter[26]con-
italsignatures.Suchconfigurationswillbeevenmoredesir- sider several flavors of two-party generation of the RSA
ableiftheycankeepanaudittrailofallsignedmessagesin (full domain hash) signatures (building on some previous
casethedeviceisstolenorotherwisecompromised. P2SS less formal work, e.g. [10, 18]). The schemes are simple,
schemesenablesuchscenarios,whileadditionallyallowing elegant, and in most cases reducible to the basic RSA as-
userstorecoverfromcompromiseddeviceswithoutchang- sumption. MacKenzieandReiter[27]alsogiveaprotocol
ing their public keys. To compromise a user’s public key fortwo-partygenerationofDSAsignatures[16].Two-party
permanently, an attacker would need to break the user’s signatures can also be viewed as a special case of general
hardwaredevice(orstealabackupoftheuser’sshare)and securetwo-partycomputation[36].
compromisethecentralizedsignatureserverbeforetheuser Resistingcompromise.Two-partysignaturesarealsore-
hadanopportunitytorecoverfromthefirstevent. latedtothenotionofkey-insulatedsignatureschemes[13].
Inthismodel,aserverhelpstheclientupdateitssecretkey
2.3.RelatedCryptography fromperiodtoperiod. Thoughpublickeysremainthesame
across updates, signatures reflect the period in which they
Related work in cryptography includes proactive cryp-
werecreated.Thus,averifiercanrejectsignaturesproduced
tosystems, two-party signature schemes, and in particular
inperiodsduringwhichtheclientwasknowntobecompro-
severalspecializedtwo-partysignatureschemesdesignedto
mised. Withinagivenperiod,theclientperformsallsigna-
remainsecureundervariousmodelsofdevicecompromise.
tures on its own. This has the advantage of not requiring
Proactive signatures. Basic multi-party signature
the server’s cooperation on each signature, but for our ap-
schemes remain secure only as long as a sufficient num-
plication we specifically want all signatures to go through
ber of parties remain uncompromised. Unfortunately, the
theserverforapprovalandlogging. Involvingtheserveron
longer the lifetime of a public key, the more realistic the
each signature also allows for immediate recovery from a
threat that enough parties will be compromised to render
compromisedpassword,withouttheneedtonotifyallveri-
the public key completely insecure. Proactive cryptosys-
fiersofcompromisedperiods.
tems[29,21]addresstheproblembyallowingapotentially
Recent work of Itkis and Reyzin [24] on intrusion-
unbounded number of compromises, so long as not too
resilientsignaturescombinesthepropertiesofkey-insulated
many of them happen simultaneously. Specifically, there
and proactive signatures. However, as in the key insulated
isanefficientshareupdateprotocolwhichallowspartiesto
model,theserveronlyhelpstheclientupdateitssecretkey
refreshthewayinwhichtheysharethesecretkey. Aslong
from one time-period to the next; all the signing is done
asaboundednumberofserversarecompromisedbetween
by the client alone. In the P2SS model, the actual secret
anytwosuccessiverefreshes,thesystemremainssecure.
doesnotchangefromonetimeperiodtothenext;onlythe
Most proactive signatures are threshold schemes, which
sharingofthesecretchanges.
assume an honest majority of players. Such schemes only
The most closely related work was proposed in [25],
functioninthecaseofn(cid:21)3players.Infact,mostthreshold
where MacKenzie and Reiter extend their schemes
techniquesandevendefinitions(e.g., robustness)areinap-
from [26] to allow for delegation of password-checking
plicabletothetwo-partysetting.
services. Their paper describes a protocol for a novel
Two-party signature schemes. Building an ordinary
hardware-based user-authentication mechanism. In their
two-party signature scheme is trivial. Given a secure
model, the server is almost stateless, the device contains
one-party signature algorithm, let the client and server
apasswordprotectedprivatekey, yetanattackerwhocap-
each generate its own key pair—call them hK ;K(cid:0)1i and
c c turesthedevicecannotmountanoff-linepasswordguessing
hK ;K(cid:0)1i, respectively. The two-party public key then
s s attack. Bycontrast, theauthenticationsystemdescribedin
consistsofthetwopublickeyshK ;K i. Atwo-partysig-
c s thispaperassumesastatefulserverandisdesignedtowork
natureofamessagemjustconsistsoftwoindependentsig-
with stateless clients—as in the case of a user with only a
naturesofmusingK(cid:0)1 andK(cid:0)1. Thefirstsignaturecan
c s passwordwhowantstosit down ata new workstationand
onlybeproducedbytheclient,andthesecondonlybythe
accessallofherfiles.
server.
Embedded in the MacKenzie and Reiter protocol is ac-
Mostpreviousworkontwo-partysignatureshastherefore
tually a fully general-purpose P2SS version of RSA. We
focused on the problem of generating signatures that arebelieve that their RSA algorithm could be used to build a eachtime;disclosingorreusingthevalueofkwouldallow
user-authentication system similar to the one described in recoveryofthesecretkeyx.
thispaper. Similarly,our2Schnorrand2GQschemescould Tocheckwhetheragivenhr;siisindeedasignaturefor
replaceRSAwithintheirprotocols. Wenote,however,that somemessagem,itsufficestoknowthecorrespondingpub-
in the case of RSA, proactivization costs some efficiency lic key hp;q;g;yi and verify that gs = rye modp, where
becauseoftheneedtoemploytechniquesfrom[17]toshare e=H(m;r).
thesecretexponentoveramuchlargermodulusthan(cid:30)(n). 2Schnorrisasimpletwo-partyproactivevariationofthe
In both 2Schnorr and 2GQ, the share update protocol is above scheme. We call the two parties the client and the
verysimple: aclientsimplysendsarandomelementofan server. We assume the client is the party that wants the
appropriate group to the server over a secure channel. Of digitalsignature—itstartswiththemessageandendswith
course,thisdoesnotmeanthatproactivizationisgenerally thesignature. Theserversimplywantstologorapproveall
simpleinthetwo-partycase. Indeed,thereseemstobeno signedmessages.
way to “proactivize” the trivialdoublesignaturetwo-party The main issue in generalizing Schnorr to two parties is
scheme.Thequestionofgenericproactivetwo-partysigna- thatifoneparty,saytheserver,couldcontrolthechoiceof
turesisnotastrivialasinthenon-proactivecase.Otherthan oneofthesecretquantitiesxork, ortheirpubliccounter-
thetwo-partyRSAschemein[25],previoustwo-partysig- partsyandr,thentheserverwouldgainanadvantageover
naturesdonotappearto“proactivize”inassimpleamanner theclientandtheresultingschememightnotbesecure.
as2Schnorrand2GQ. Fortunately, the parties need only agree on random val-
ues,ataskusuallyreferredtoascoinflipping[8]. Thiscan
3.The2SchnorrSigningProtocol beimplementedbyfirsthavingeachpartychoosearandom
share,thenexchangingandcombiningthesharestoproduce
This section specifies the 2Schnorr signing protocol and
theagreeduponvalue. Ofcourse,thetwopartiesmightnot
analyzes its security. Like the standard Schnorr signature
reveal their shares simultaneously. To prevent the second
scheme, 2Schnorr relies on a cryptographic hash function,
party,saytheserver,fromchoosingitsshareafterlearning
H, which for the proofs we will assume behaves like a
theclient’s, theservercanfirst“commit”toitsshare, then
randomoracle(acommonassumptionincryptographicre-
“open”thecommitmentuponreceivingtheclient’sshare.
search, first formalized in [4]. Before going into the de-
The simplest commitment scheme for a random share r
tails of 2Schnorr, we briefly describethe standardSchnorr
is to reveal G(r) for some hash function G that behaves
scheme.
likearandomoracle. Theclientcannotlearnanythingfrom
TheSchnorrsignaturescheme[31]wasfirstproposedas
G(r), but will be able to check r’s consistency at the end
an application of the Fiat-Shamir transformation [14]. It
oftheexchange. Gneednotbearandomoracle,however.
canbeinstantiatedonanygroupGofprimeorderinwhich
Any“extractable”commitmentschemewilldo(forinstance
the discrete log problem is believed to be hard. Schnorr
“committing” encryption [12], which can be implemented
has been proven secure under the standard notion of exis-
withoutrandomoracles). However,sinceSchnorrrelieson
tential unforgeability against an adaptive chosen-message
randomoracleH anyway,Gmightaswellbearandomor-
attack[19]intheRandomOracleModel. Thesecurityhas
acle,too. NotefurtherthatGandH takeinputsofdifferent
been analyzed, among other places, in [32, 30]. For con-
lengths, and thus will never be evaluated on the same in-
creteness,wewillconsidercyclicsubgroupsofZ(cid:3)(forlarge
p put. Animplementationcanthereforeusethesamecrypto-
primesp)ofprimeorderq.
graphichashfunction—e.g.,SHA-1[15]—forbothH and
Thekeygenerationalgorithmproducestwolargeprimes
G.
pandq suchthatqj(p(cid:0)1), andanelementg inZ(cid:3) ofor-
p We remark that the use of extractable commitment to
der q. Then it picks a random element x in Z(cid:3), and sets
q chose randomness in Schnorr and GQ generalizes to other
y =gx modp. Thepublickeyishp;q;g;yi,whilethecor-
probabilistic signature schemes in which the security re-
responding private key is x. The group parameters p;q;g
sult depends on honestly chosen public randomness (e.g.,
canbesafelysharedbetweenacommunityofusers,sothat
PSS[5],PFDH[11]).
y byitselfcanbethoughtofasthepublickeycorrespond-
Key generation. A 2Schnorr public key is just an ordi-
ingtoprivatekeyx. Schnorradditionallyreliesonacryp-
nary Schnorr public key, hp;q;g;yi. However, the corre-
tographichashfunction,H,mappingarbitrarystringstoel-
sponding Schnorr private key, x, is split between two key
ements of Z(cid:3). We will assume H has been specified as a
q halves,x andx ,suchthatx(cid:17)x +x (mod q). Apub-
c s c s
parameterofthescheme.
lic2Schnorrkeycanbecentrallygeneratedalongwithtwo
Tosignamessagem,theholderoftheprivatekeyxpicks
halvesforthecorrespondingprivatekeyasfollows:
arandomk 2Z(cid:3) andsetsr =gk modp. Itthencomputes
q
e=H(m;r),s=k+xemodq,andoutputsthesignature
hr;si. Note that k must be kept secret and chosen anewq alargeprime k R Z k R Z
c q s q
gp aa nla er lg ee mr ep nr tim ofe Zsu (cid:3)c oh ft oh ra dt eq rj( qp(cid:0)1) r
c
= gkc modp r
s
= gks modp
p r = r cr s modp e = H(m;r)
x c;x s randomelementsofZ q s c = k c+x cemodq s s = k s+x semodq
y = g(xc+xs) modp s = s +s modq
c s
Thetwoprivatekeyhalvesarex andx .
c s
For distributed key generation between the client and
server, the client chooses p, q, g, and x , computes y =
1 G(r s)
c c
g sex rc vem ro thd ep n, pa icn kd sxse sn ad ns dth see ndse sr tv he er cf lip e; nq t; yg s;G =(y gc x) sg m. odTh pe . Client 2 G(r s);r c;m Server
Finally, the client reveals y , both parties compute y =
c
y cy s modp, and the public key is hp;q;g;yi. To prevent 3 r c;r s;s s
theclientfrom(maliciously)choosing“bad”groupparam-
eters [7], the server may require the client to prove it has
generated the values p;q;g according to some specific al-
Figure 1. 2Schnorr signature protocol. m is the
gorithm. IntheimplementationdescribedinSection4,we
message being signed. k is chosen by the
c
use the method proposed by the NIST in [16], for which
client. k is chosen by the server. The final sig-
s
suchaproofcanbeeasilyprovided.
natureishr;si.
Signature generation. To sign a message m, the client
andtheservereachselectarandomelementofZ —k for
q c
theclient,k fortheserver. Thetwopartiesthenexchange
s
ofthesigningprotocoldoindeedverifycorrectly.
thethreemessagesshowninFigure1. Firsttheserverpicks
atrandomanephemeralprivatekeyk fromZ(cid:3),computes Keyupdate. Theaimofkeyupdatesistotoleratemulti-
s q
plecompromisesofeachparty. Clearly,anyadversarythat
the corresponding ephemeral public key r
s
= gks modp,
compromises both parties between two successive key up-
and sends G(r ) (message 1). Similarly, the client com-
s
dateswilllearntheentirestateofthesystemandcompletely
putes its ephemeral key pair hk ;r i and sends the second
c c
break the security of the public key. However, the system
flowoftheprotocol,consistingofthevalueG(r )itgotin
s
should be able to withstand multiple break-ins as long as
message 1, its ephemeral public key r , and the message
c
onehonestkeyupdatehappensinbetween.
mitwishestosign. Uponreceivingmessage2, theserver
Key updates are considerably simpler in the two-party
checks that r belongs to the group specified by p;q and
c
casethaningeneralproactivesignatures. Sinceeitherparty
g by verifying the equality rq modp =? 1, then computes
c canalreadydestroytheprivatekeybyerasingitsownshare,
r = r r modp, e = H(m;r), s = k + x emodq,
c s s s s thereisnoneedtopreservetheprivatekeywhentheclient
and replies with message 3, which reveals the value of r .
s or server misbehaves. Further simplifying the problem,
The client computesG(r ) and verifies that it matchesthe
s ourupdateprotocolassumesasecurechannelbetweenthe
value received in message 1; if so, it verifies r and com-
s clientandserver,becauseoursystemalreadyrequiressuch
putess inawayanalogoustothatdescribedabovefors .
c s a channel for other purposes. (Otherwise, the client and
Finally,theclientsetss = s +s modq,andobtainsthe
c s servercouldusea2Schnorrsignatureaspartofnegotiating
pairhr;si—anordinarySchnorrsignature.
asecurechannel.)
The protocol in Figure 1 requires three messages. The
Toupdatethekeyhalvesx andx ,theclientpicksaran-
c s
first message can be precomputed and sent to the client in dom(cid:14) 2 Z andsendsittotheserveroverasecurechan-
q
advance, reducing network latency to a single round trip nel. Thenewkeyhalvesx0 andx0 aresimplycomputedas:
fromthetimetheclientreceivesthemessagetobesigned. 0 c 0 s
x =x (cid:0)(cid:14) modq x =x +(cid:14) modq
Asdiscussedlater,however,asystemwithaconstantbound c c s s
This update algorithm is not only simple, but also quite
on the number of concurrent signatures requested by the
effectiveincompletelyre-randomizingthestateofthesys-
client can simply eliminate the first message of the proto-
tem,thussimplifyingtheargumentsforthesecurityproofs
col(andremoveG(r )fromthesecondmessage). There-
s inthefollowingsubsections.
sulting two-message protocol may be more convenient to
GQ signatures. The Schnorr signature scheme is often
implement.
studied together with the GQ scheme, its “twin” based on
Signatureverification.Signatureverificationisidentical
the RSA assumption. The two can be thought of as varia-
to Schnorr. Given a public key hp;q;g;yi, a message m,
tionsofthesamebasictheme. Semantically,thedifference
and a signature hr;si, the signature is valid if and only if
between the two is that in Schnorr, all secrets are drawn
gs (cid:17) rye (mod p), where e = H(m;r). It can be easily from the additive group Z and their public counterparts
q
checkedthatsignaturesobtainedfromanhonestexecution
are obtained by exponentiation on a fixed base; with GQ,private data is instead taken from the multiplicative group generatedbyg.
Z(cid:3) (whereN istheproductoftwobigprimes)andpublic When A asks us to endorse a signature with query
N
quantities are obtained by exponentiating to a fixed expo- fG(r );r ;mg, we compute r = r r modp, and fix the
s c c s
nent. Syntactically,thisisequivalenttoconvertingalladdi- randomoraclevalueofe = H(m;r)suchthatH(m;r) (cid:17)
tionsinSchnorrintomultiplications,andallmultiplications (cid:0)(cid:12) (mod q). Notice that the probability of having al-
(involvingsecrets)intoexponentiations. Amechanicalap- ready set this value due to a previous hash query to H
plicationofsuchconversionrulestoour2Schnorrprotocol is negligible, since up to this point r is a random ele-
s
(described below) yields the 2GQ protocol, which enjoys ment unknown to A (A just saw G(r ), a random value
s
analogous security guarantees based on the RSA assump- that doesn’t not leak any information about r ) and so r
s
tion. is also uniformly distributed in the group generated by g.
Wesets = (cid:11)+(cid:1)emodq,andreturnfr ;s g. IfAwas
s s s
3.1.SecurityagainstMaliciousClients talking to an ordinary server, the server would reply with
s =k +(x +(cid:1))emodq,wherek isthediscretelogof
s s s s
Theorem1 Ifamaliciousclientcanforgeasignaturewith-
r andx isthediscretelogofy . Eventhoughwecannot
s s s
out the approval of the server in probabilistic polynomial
computek andx ,wearestillcomputingthecorrectvalue
s s
time (PPT) with non-negligible probability, then we can
ofs byreturning(cid:11)+(cid:1)e:
s
alsocomputediscretelogsinPPTwithnon-negligibleprob-
ability.
g(cid:11)y(cid:12) (cid:17) r (mod p)
Proof. Let p, q, and g be as in Schnorr public keys. Let s s
y,inthegroupgeneratedbyg,beanelementofwhichwe g(cid:11) (cid:17) r sy s(cid:0)(cid:12) (mod p)
wish to compute the discrete log. Let A be an adversary g(cid:11) (cid:17) gks(gxs)(cid:0)(cid:12) (mod p)
thatbehaveslikea2Schnorrclientbutthenoutputsaforged g(cid:11) (cid:17) gksgxse (mod p)
signature (which the server did not approve) in PPT (with
(cid:11) (cid:17) k +x e (mod q)
non-negligibleprobability). s s
Choosearandomelementx
c
2Z q. Lety
c
=gxc modp (cid:11)+(cid:1)e (cid:17) k s+(x s+(cid:1))e (mod q)
and y = yy(cid:0)1 modp. Give A public key hp;q;g;yi and
s c
privatekeyx . NowaskAtoforgeasignature. BecauseourresponsestoA’soraclequeriesareindistin-
c
Acanmakefourtypesoforaclequerywemustrespond guishablefromthoseofarealserverandrandomoracles,A
to. It can make random oracle queries to the hash func- will output with non-negligible probability some message
tions H and G. It can make update queries to refresh the andforgedsignaturem;hr;si.
keyhalves. Itcanasktheservertostartasignature(corre- We can now rewind A’s state to the first time it queried
spondingtomessage1intheprotocol.) Finally, itcanask therandomoraclefore = H(m;r), andreturnsomenew,
theservertoendorseasignature(i.e., returnthethirdflow randomly chosen value e0 6= e. Such rewinding argu-
intheprotocol.) ment is quite common in analyzing the security of similar
Without loss of generality, we will assume throughout schemes [23, 3, 2]: intuitively, since A only makes poly-
thispaperthatAdoesnotaskforthesamehashquerytothe
nomiallymanyoraclequeriesande0isstatisticallyindistin-
same oracle twice (A could simply store previously com- guishablefrome, thereisanon-negligibleprobabilitythat
puted values in a table). All oracle queries to G are an- Awillagainforgeasignatureforthesamemandr,yield-
sweredwithrandomvalues. AsfororaclequeriestoH,we ingasecondsignaturehr;s0 iform,withs0 6=s. Theexact
replytothemwithrandombutconsistentanswers:however, probabilisticanalysisisbasedontheforkinglemmaof[30],
during certain other queries (described below), we set the andisquitesimilartotheoneforthestandardSchnorrsig-
valueoftherandomoracleH oncertaininputstospecific, naturescheme.
thoughuniformlydistributed,values. Bytheverificationproperty,hr;s;eiandhr;s0 ;e0 isatisfy
Wekeeparunningtotal,(cid:1),ofalltheupdaterequestsA thefollowingtwocongruences:
makes. Initially,(cid:1) = 0,butforeachupdaterequest(cid:14),we
add(cid:14)to(cid:1)(modq). gs (cid:17) rgxe (mod p)
When A makes a start signature query, we choose two gs0
(cid:17)
rgxe0
(mod p)
randomnumbers(cid:11);(cid:12) 2 Z andcomputer = g(cid:11)y(cid:12) mod
q s s
Bymemberwisedivisionoftheabovecongruences,
p. WenowfixsomerandomoutputforthevalueofG(r ),
s
and return this to A. Notice that A cannot learn anything wecancomputex,thediscretelogofy,asfollows:
about r
s
from the random value G(r s), unless it has pre- gs(cid:0)s0
(cid:17)
gx(e(cid:0)e0)
(mod p)
viously asked for the hash of r s to the oracle G; however, 0 0
s(cid:0)s (cid:17) x(e(cid:0)e) (mod q)
thechanceofAhavingalreadyaskedforG(r )isnegligi-
ble,sincer
isuniformlydistributedinthegrous
poforderq x =
(s(cid:0)s0 )(e(cid:0)e0 )(cid:0)1
modq
s3.2.SecurityagainstMaliciousServers 3.3.SecurityagainstMobileAdversaries
In practice, an attacker may compromise both the client
Theorem2 If a malicious server can forge a signature
and the server, as long as there is an honest refresh be-
without the client’s help in PPT with non-negligible prob-
tween two successive compromises. Such a mobile adver-
ability,thenwecanalsocomputediscretelogsinPPTwith
sary can be modeled in two different ways, depending on
non-negligibleprobability.
Proof. Letp;q;g;ybeachallengeinwhichweneedtofind
whetheritseesanycommitmenttothevaluesy candy s. If,
for example, message 3 of a signature is sent in cleartext
the discrete log of y. Let A be an adversary that acts as
over the network and the adversary subsequently compro-
a 2Schnorr server and can forge signatures. We choose a
random x
s
2 Z
q
and compute y
s
= gxs modp and y
c
= mises either the client or the server before an intervening
yy(cid:0)1 modp. GiveApublickeyhp;q;g;yiandprivatekey update, then the adversary can verify that gss = r sy se or
x s,s andaskittoforgeasignature. gss =r s(yy c(cid:0)1)e.
In the model we consider here, the adversary is slightly
As before, A can make four types of oracle query: ran-
dom oracle queries (to H or to G), update queries, asking weaker and cannot see the values of r s and s s commu-
nicated when neither party has been compromised. This
the client to initiate the signature of a particular message,
model was inspired by our implementation, which always
andaskingtheclienttofinishcomputingthesignatureofa
encrypts traffic between the client and server. However,
messageforwhichaninitiatequerywaspreviouslydone.
there is a small subtlety—the adversary may capture en-
Thetworandomoraclesaretreatedasbefore. Forupdate
crypted copies of message 3, and later obtain the session
queries,wearenowevenallowedtochoosearandom(cid:14)our-
key for decrypting them when it compromises the client
selves: sincetheclientrefreshesitskeyhalfbysubtracting
or server. Even if the client and server quickly erase any
(cid:14),here(cid:1)isdefinedastherunningtotalofthevaluesq(cid:0)(cid:14)
keysusedtoencryptmessagestoeachother,inrealitythere
foreachupdate(modq).
will be a small window of vulnerability after the message
WhenAaskstoinitiatetheprotocol,wechoosetworan-
dom numbers (cid:11);(cid:12) 2 Z and compute r = g(cid:11)y(cid:12) modp. istransmittedandbeforethekeyiserased. Forthisreason,
q c s
webelieve thatthestrongeradversaryis actuallythemore
Notice that we allow A to choose the message m it wants
useful model. We will consider such adversaries in future
tosign, butstill, Amustprovideits“commitment”G(r ).
s
work.
SinceGbehaves likearandomoracle, Amusthave asked
One convenient property of the model with weaker ad-
forthevalueofG(r )—otherwiseitwillhaveonlyanegli-
s
versariesisthatasimulatorcanalwaysassumeakeyisre-
giblechanceofguessingthecorrectvalueneededtoopen,
freshedrightbeforeapartyiscompromised—theadversary
inthethirdflowoftheprotocol,thecommitmentsentinthe
first message. Hence, upon receiving an initiate query, we
willhavenowaytonoticethaty candy shavejustchanged.
That, in turn, means that one can assume without loss of
canperformasimplelookupforG(r )inthetablecontain-
s
generalitythattheadversaryalwayscompromiseseitherthe
ingthepairshquery,answeriforalltheoraclequeriesthat
AhasdonetoGsofar.1 Then,wecomputer =r r modp client or the server, which reduces the number of cases to
c s
consider. (Ifthereisaperiodwhenneitheriscompromised,
andfixtherandomoraclevalueofe = H(m;r) suchthat
wecanpretendtheadversaryhasaskedtocompromise,say,
H(m;r) (cid:17) (cid:0)(cid:12)(mod q): eisstilluniformlydistributedin
the client; if the adversary then wants to compromise the
Z sincewechose(cid:12) atrandom.
q
server,wepretenditalsoasksforakeyrefresh.)
The complete signature queries are handled virtually
Theorem3 Thethree-message2Schnorrprotocolissecure
identically to the proof of Theorem 1, reversing the s and
againstanadversarythatselectivelycompromisesboththe
c subscripts in variables. The only difference is that when
clientandtheserver, providedanhonestshareupdatehas
completing a signature, we must return hr;si instead of
occurredbeforetheotherpartyhasbeencompromised.
hr ;s i. r and s are easy to compute given r ;r ;s ;s ,
c c c s c s
Proof. To prove the theorem, we might assume that if a
allofwhichwehave.
SincetheinteractionofAwiththeoraclesthussimulated mobile PPT adversary A could forge a signature, then we
is indistinguishable from a real attack on the 2Schnorr
couldconstructanewalgorithmA0thatcouldcomputedis-
cretelogswithnon-negligibleprobability. Inthiscase,our
signing protocol, with non-negligible probability A will
forge a signature hr;si for a message m that the client
constructionofA0wouldinvolveansweringA’srandomor-
acle queries, update queries, server initiation queries, and
didn’t finish signing. Therefore, using the same technique
queries corresponding to three flows of the protocol. In
asinTheorem1,wecancomputethediscretelogofywith
non-negligibleprobability.
other words, this new A0 would combine the techniques
in Theorems 1 and 2. To avoid repetition of previous ar-
guments,weinsteaduseahigher-levelapproachandprove
1Aswementioned,wecanreplaceGbyany“extractable”commitment thattheexistenceofaPPTmobileforgercontradictsatleast
whichwouldalsoallowustorecoverrsinoursimulation. oneoftheprevioustwotheorems.Supposethatbyrepeatedlycompromisingtheclientand
server (while always permitting an honest key update in 1 r c;m
between), some PPT adversary A is able to forge signa-
Client Server
tureswithnon-negligibleprobability".IfAoutputsforgery
m;hr;si, it must with all but negligible probability have 2 r c;r s;s s
queried the random oracle for e = H(m;r). Call this the
crucial query. Since the client and server can never be si-
multaneouslycompromised,one(orboth)ofthemwillhave
probability(cid:21) 1=2(cid:0)neglofbeinguncompromisedduring Figure 2. A two-message signature protocol, for
crucialqueries. Wedistinguishthetwocases. applications with a bounded number of concur-
Case 1. Suppose that at least half of the time, A makes rentsignaturerequestsfromtheclient. Thecon-
crucial queries while not in control of the server. In stantsarecomputedasinFigure1.
other words, with probability "=2, after several (non-
simultaneous)compromisesofbothparties,Asuccessfully
forgesasignaturehr;siforsomemessagemafterquerying But the fact that A0 forges signatures with non-negligible
the oracle for e = H(m;r) at a time when the server was
probabilitywhilecompromisingonlytheclientcontradicts
notcompromised.
Theorem1.
We now show how to construct a malicious client A0
Case2.SupposenowthatAismostsuccessfulinitsforgery
that, usingA asablackbox, forgessignatureswithoutthe
whenitasksfortherelevanthashvaluee=H(m;r)while
server’sapprovalwith(non-negligible)probability"=2.
not in control of the client. We can then construct a mali-
A0 is given the public key PK = hp;q;g;yi, the client’s ciousserverA00that,usingAasablackbox,againforgesa
sharex ,andaccesstohashoraclesHandGandtoaserver
c signaturewithprobability"=2(cid:0)negl. Theconstructionis
oracle willing to engage in as many protocol runs as A0
analogoustoCase1,wherewe“swap”thetechniquesused
wishes. In order to forge a signature, A0 runs A, giving tohandleA’scompromiserequests. A00usesthesimulation
itpublickeyPK. EachtimeAasksforaccesstoacompro-
ofTheorem1whenAbreaksintotheclient,whileitgives
misedclient,A0givesAitsownsecretsharex (whichmust
c Ax andreturnsrealvaluesofH whenAcompromisesthe
have been refreshedsince the last server compromise). A0 s
server. ThisleadstoacontradictionofTheorem2.
thenrespondstoanyoraclequeriesfromAbysimplyfor-
Since at least one of the two cases above must occur at
wardingthemtotherealserver,H andGoracles.
least half of the time, it follows that 2Schnorr is secure
When A asks to compromise the server, A0 must give it
againstmobileadversaries.
somesharex andthenemulatetheclientinamannerthat
s
willbeindistinguishablefromarealclient.SinceA0cannot
compromise the server to learn the real value of x , it in-
s 3.4.Two-MessageProtocol
steademploysthetechniquefromTheorem2: A0generates
arandomx s 2Z q andgivesthisx stoA. A0thenrepliesto In certain cases, it may be desirable to compute signa-
A’s H-oracle queries with carefully prepared (though still tureswithonlytwomessages. Ifthereisaconstantbound
uniformly distributed) values, instead of returning values onthenumberofconcurrentsignaturesaclientrequests,the
from the real hash oracle H. Because our coin flipping firstmessagecanbeeliminated(andthesecondflowconse-
protocolensuresrisrandom,thereisonlynegligibleprob- quentlymodifiedremovingthehashvalueG(r )),yielding
s
ability of A using a value of H(m;r) it requested before thesimplertwo-messageprotocolinFigure2.
compromisingtheserver. From Theorem 1, we see that the two-message protocol
Since we are assuming an honest key update will occur issecureagainstamaliciousclient. Indeed,inthiscasethe
betweenanytwoconsecutivebreak-ins,andsinceeachtime malicious client is just less powerful than in the previous
the sharing of the secret key x as x c + x s is completely scenario (since it does not have access to the initiate sig-
re-randomized,thesesimulationswillproceedexactlyasA natureoracle): IfanadversaryAcouldforgesignaturesby
expects. Hence, with probability "=2(cid:0)negl, A will pro- acting as a two-message client, one could trivially build a
duce a forged signature hr;si for some message m. By three-messageadversaryA0intermsofA.
our assumption, A asked for H(m;r) while not in con- Toprovethetwo-messageprotocolsecureagainstama-
troloftheserver,andtheconstructionofA0guaranteesthat
liciousserver,however,wemustrelyonastrongerassump-
e = H(m;r) is a real random oracle response; A0 only tion than the difficulty of computing discrete logs, and as-
“fakes” H when the server is compromised. Thus, hr;si sumeaconstantboundtonthenumberofconcurrentruns
is a real signature for m, one that satisfies the verification oftheprotocol2.Theintuitivereasonbehindthestrengthen-
property. A0 willthereforeoutputhr;siasitsownforgery.
2Moreprecisely,weassumethattheclientiswillingtoinitiateanun-ing of the assumptionsis that in the two-messageprotocol hash oracle H before we even start executing A: we will
theservercancontrolthevalueofrby(maliciously)choos- use these values one after the other to answer A’s queries,
ingr =rr(cid:0)1 modp. Inthisway,theservercanbeableto nomatterwhatspecificvalueit’saskingfor. Also,weran-
s c
computeH(m;r)beforesendingthevaluer totheclient. domlychooseandfixtheentirerandomtapeofA. Finally,
s
This would break the simulation described in the Subsec- wealsochooseupdatevalues(cid:14) randomly, andkeepa run-
tion 3.2, so that the proof does not go through. Still, it is ningsum(cid:1) = (q(cid:0)(cid:14))modq. Toputitdifferently,all
P(cid:14)
notclearhowthisattackcouldhelptheserverinforginga therandomnessweneedfortheentiresimulationischosen
signature hr;si, since the choice of r = rr(cid:0)1 leaves the andfixed.
s c
server with the problem of computing its the discrete log, WhenAasksustoinitiatethesignatureonamessagem,
k ; hence, the server will not be able to compute the cor- wesetr =z forsomechallengez wehavenotyetused,
s c j j
rect s = k +(x +(cid:1))emodq needed to complete the andwesendAthemessagefr ;mg.
s s s c
signaturehr;si. WhenAwishesustocompletethesignatureofsomem,
Indeed, weshow that themodifiedschemeis secure un- itwillsendusfr = z ;r ;s g. Letr = r r modpand
c j s s c s
dertheassumptionthattheknown-targetdiscretelogprob- e = H(m;r). We query our own discrete log oracle to
lem (DL-KT) [1] is hard. The DL-KT problem consists find the discrete log of r (y g(cid:1))e modp. Let s be this
c c c
ofgettingsomenumbernofdiscretelogchallengesinthe logarithm. Letk bethelogofr andx bethelogofy .
c c c c
samegroup,thencomputingtheirdiscretelogswhilemak- Bothk andx areunknowntous. However:
c c
ing at most n (cid:0) 1 queries to a discrete log oracle. Al-
gsc (cid:17) r (y g(cid:1))e (mod p)
thoughtheassumptionthattheDL-KTproblemishardfor c c
any polynomially-bounded n is relatively new, it has al- gsc (cid:17) gkc gxc+(cid:1) e (mod p)
(cid:0) (cid:1)
readybeenusedquiteabitinprovingthesecurityofvarious s (cid:17) k +(x +(cid:1))e (mod q)
c c c
schemes [1, 3, 2, 9]. However, in all these other cases the
Thus, s is exactly as it should have been. We compute
claimed result follows almost trivially from such assump- c
s=s +s modq,andoutputthesignaturehr;si.
tion. Onthecontrary,ourapplicationisconsiderablymore c s
Since we are exactly simulating the attack scenario, A
involved: it requires an additional “twist” in the reduction
will eventually output, with non-negligible probability, a
argument, namely the assumption on the bounded concur-
messagemandforgedsignaturehr;si.
rency,andthedevelopmentofsomenovelideasintheprob-
WethenrewindA’sstatetothetimeitqueriedtherandom
abilisticanalysis.
oracleforthevalueofH(m;r)(saythiswastheith Adid
Theorem4 If a maliciousserver, interacting with a client
totheoracleH.) Callthisquerycrucial. Thistime,instead
with bounded concurrency, can forge a signature without
ofusingthevalueinthe“listofrandomness”weprepared
the client’s help in PPT with non-negligible probability,
before beginning executing A, we discard this value, and
thenwecanalsosolvetheDL-KTprobleminPPTwithnon-
answer such crucial query with a new, random value. We
negligibleprobability.
thencontinuethesimulationasinthefirstexecution:inpar-
Proof. Letp;q;gdefineagroupasusual. Letz ;z ;z ;:::
0 1 2
ticular,wewillcontinueusingour“list”toreplytorandom
be challenges of which we want to compute the discrete
oracle queries, but will use brand new (already prepared)
logs. Let t be the concurrency bound of the client. Let
challengesz .
Abeanadversarythatactsasa2Schnorrserverandforges j
As we will shortly prove in Lemma 5, there is a non-
signatures in PPT. We will compute the discrete logs of
negligibleprobabilitythatAwillforgeagainthesamemes-
n challenges for some number n > 0, while making only
sagemwithrandomnessrbutdifferentvaluesforH(m;r)
n(cid:0)1queriestoadiscretelogoracle.
Wefirstchoosearandomx 2 Z . Lety = z (i.e.,the (plussomeadditionalpropertywillhold;seebelow). Once
s q 0
first challenge), y
s
= gxs modp, and y
c
= yy s(cid:0)1 modp. tw he esc ao mm ee ru ap ndw omith netw sso rs big un ta dt iu ffr ee rs enfo tr hath she vsa am lue esm ee 6=ssa eg 0e (am nd,
WegiveApublickeyhp;q;g;yiandprivatekeyx .Finally
s hences6=s0),itisjustamatterofmodulararithmetictore-
weaskAtoforgeasignature.
coverx(seeTheorem1.) Now,givenx,wecananswerall
Again, A can make four kinds of oracle queries. It can
thechallengesz asfollows.
querytherandomoracle,askforakeyupdate,asktheclient j
For each initiate query that the adversary decided not to
to initiate the protocol on some message, or ask the client
complete (i.e. he initiated a run of the protocol but then it
to complete and output a signature. We emulate the ran-
decided not to complete it), we have used one of the chal-
dom oracle H in a completelyhonest manner, by replying
lengez without“consuming”anyquerytoourdiscretelog
to each query with a random value. More specifically, we j
oracle. Therefore,wecanuseitnowtofindthediscretelog
choosearandom(andsufficientlylong)listofvaluesforthe
ofz . Soweconcentrateontheinitiatequerieswhichwere
j
completedbyA.
boundednumberofconcurrentexecutionsoftheprotocol,butitwillonly
completeoneofthetmostrecentpendingruns. Next,sincey =gx modp=z 0,xitselfistheanswertothechallengez (andwedidnotconsumeanydiscretelog i,buttheithresponsewegavewasdifferent.
0
queriesforgettingx). Moreover,onceweknowbothxand
x ,wecanalsocomputex =x(cid:0)x modq. Givenx ,we
3. Ausedthesame(upto)timportantqueriesinthefirst
s c s c
andsecondrun.
canrecoverthevaluek —thediscretelogofeachz —from
c j
each of the s = k +(x +(cid:1))emodq values we asked
c c c We argue that the above three conditions hold (with
ourdiscretelogoracletocompute.
non-negligible probability) in the following final lemma,
Thereisonlyonesubtleproblem: wehavetoensurethat
whichcompletestheproof.
weconsumeatmostonediscretelogquerypereachvalue
z (for j (cid:21) 1), i.e. per each (completed) initiation query
j Lemma5 Let " be the probability of A successfully pro-
of the adversary. Such queries can be divided into three
ducingaforgeryinonerun,and(cid:14)bethesuccessprobabil-
parts: the queries initiated and completed before the cru-
ityofsatisfyingtheabovethreeconditionsinthe“double”
cialhashqueryi,the(atmostt)queriesinitiatedbeforebut
runofA. AssumealsothatAmakesatmostqhash random
completedafterthecriticalquery, andthequeriesinitiated
oracle queries in one run, and t is the maximum number
andcompletedafterthecriticalquery. Thereisnoproblem
of concurrent signature queries the client initiates. Then
withthefirstandthelastkindofqueries. Indeed,theyboth
(cid:14) (cid:21) "2=qt+1 (cid:0)negl(k). (herek isthesecurityparameter
consumedexactlyonez andutilizedexactlyonecalltothe hash
j andnegl(k)isanegligiblefunctionink).
discrete log oracle (recall, we use fresh z ’s in the second
j Proof. Withoutlossofgenerality,wewillassumethrough-
run).However,thesecondcategorycouldpresentproblems:
out the proof that A always calls the random oracle H
each queryutilizesone z , but can potentiallycall the dis-
j to validate all issued signatures and its final forgery—
crete log oracle twice, i.e. once in each run of A. Here is
otherwiseAhasatmostanegligiblesuccessofprobability,
where we will use that t is bounded (by a constant). For
whichisconsumedinthenegl(k)term.Leti2[1;qhash]be
each such “semi-completed”signature query m , let r be
j j anindexandJ (cid:26)[1;qhash]beasubsetofatmosttindices.
the correspondingrandomnessin the first run, and call the
Let" betheprobabilitythatanexecutionoftheadversary
t hash queries H(m ;r ) important (in the first run). No- i;J
j j willsucceedinforgingasignature,andthatduringthisex-
tice, important queries could appear both before and after
ecutionthecrucialquerycorrespondingtotheforgerywill
thecriticalqueryi,sincetheservercancontroltherandom-
ness by choosing a “cheating” value of r r
r(cid:0)1
modp
bequerynumberi,andthatthesetof(atmostt)important
s;j j c;j querieswillbeexactlyJ. Itfollowsthat: " =".
for each m j, and query H(m j;r j) way before the initia-
Next, recall (cid:14) is the probability of
succP esi s;J ofi; tJ
he above
tion query for m . Similarly, we can define these t im-
j experiment.ForanyiandJ definedasabove,let(cid:14) bethe
portant hash queries in the second run (corresponding to i;J
probabilitythatbothexecutionsoftheadversarywilloutput
the same m , r but possibly different values r0, r0 ).
j c;j j s;j forgeries,andthatinbothexecutionsthecriticalquerywill
However, since we chose all the randomness for our hash
beiandtheimportantquerieswillbeexactlyJ. Again, it
query answers at the beginning and reused this random-
followsthat (cid:14) =(cid:14).
ness in the second run, we do not have to make the ex- Pi;J i;J
Weclaimthatifthesizeoftheuniverseofhashresponses
tratcallstothediscretelogoracleprovidedtheimportant
hassizeL(cid:21)2‘,wehave:
queries in the first and the second run have the same in-
dices. Indeed,inthiscasewewouldreturnthesamevalue (cid:14) (cid:21)"2 (cid:0)" 2(cid:0)‘ (1)
i;J i;J i;J
e fortheimportantqueryjinbothruns,andthereforewill
j
needtocomputethediscretelogoftwoverysimilarvalues AssumingEquation (1) is true, by using Cauchy-Schwartz
r c;j(y cg(cid:1)j)ej modp and r c;j(y cg(cid:1)0 j)ej modp. It is clear inequality3 weget:
thatthesediscretelogsdifferby((cid:1) (cid:0)(cid:1)0 )e modq,which
j j j
bis ya rek tn uo rnw inn gv (a slue, (cid:0)so ((cid:1)we (cid:0)ca (cid:1)n 0c )o em )p mut oe dth qe
.
Wdis ec wre it le lalo rgg us e0 c i; nj (cid:14) = X(cid:14) i;J (cid:21) X("2 i;J (cid:0)" i;J2(cid:0)‘)
c;j j j j i;J i;J
L ine dm eem da b5 ett hh eat s( af mor ea wb ito hu nn od ne -d net) glt ih ge ibi lm ep po rort ba an bt iq liu tye .rieswill = X"2
i;J
(cid:0)"2(cid:0)‘ (cid:21) qt1 +1(cid:0)X"
i;J
(cid:1)2 (cid:0) 2"
‘
To summarize, if we are lucky that the following three i;J hash i;J
conditions hold during the “double” run of A, we utilize "2 " "2
= (cid:0) = (cid:0)negl(k)
onelessdiscretelogquerythanthenumberofdiscretelog qt+1 2‘ qt+1
hash hash
challengeswearecomputing,thusbreakingtheDL-KTas-
sumption: It remains to show the validity of Equation (1). For any
fixediandJ, consideralltherandominputtothesystem,
1. Asucceededthefirsttimeonsomecriticalqueryi.
3Cauchy-Schwartzinequalitystatesthat:
2. Asucceededthesecondtimeonthesamecriticalquery (8N 2N)(8a1;:::;aN (cid:21)0): (cid:2)Pi a2 i (cid:21)1=N (cid:0)Pi ai (cid:1)2 (cid:3)including the random tape of the adversary, the qhash ora- Theorem6 If a mobile bounded-concurrency PPT adver-
cle responses for values of H, and any other randomness sary can forge a 2Schnorr signature with non-negligible
needed by the simulator. Split the random inputs into the probability, then we can also solve the DL-KT problem in
twoparts: thevaluereturnedinresponsetotheithrequest PPTwithnon-negligibleprobability.
for a value of H (call it e), and everything else, which we SketchofProof. Considerthesameexperimentalsetupas
will call R. Now consider a matrix with one column for in Theorem 4. z are the discrete log challenges, t is the
i
every possible value of e, and one row for every possible concurrencyboundoftheclient,andy =z isthefirstdis-
0
value of R. For each cell of the matrix, put a dot in the cretelogchallenge. Next,assumeaPPTmobileadversary
cell if on the corresponding input the adversary outputs a A that can forge 2Schnorr signatures with non-negligible
successfulforgerywithithecrucialqueryandJ thesetof probability. The goal is now to construct an algorithm A0
important queries. Let " be the probability of success that calls upon A to solve the DL-KT problem. When it
i;J;R
conditionedonR,i.e. thedensityofmarksinrownumber runsA,A0 mustrespondtosixdifferentoraclequeries. As
Rofourmatrix. Wehavethat: usual, A0 must respond to random oracle queries to H. It
1 doessobyoutputtingarandomvalueexceptforwhenitis
" i;J = jRjX" i;J;R (2) preprogrammedtooutput(cid:0)(cid:12) =H(m;r)asseenlater.The
R other five queries are specific to the two states that A can
Next, let (cid:14) be the probability of success of the whole bein: server-compromisestate(SCS)orclient-compromise
i;J;R
experiment (with rewinding), conditioned on the fact that state(CCS).
therowwasR,i.e. conditionedonthefactthattherandom- IfAstartstheexperimentinSCS,thenA0 choosesx
s
2
nessusedintheentireexperiment(exceptfortheanswerto Z at random, computes y = yy(cid:0)1 modp, and gives x
q c s s
querynumberi)isdescribedbyR. Wewanttoestimatethe to A. If A starts in CCS, then A0 chooses x
c
2 Z
q
at
probabilitythat,whenweselectedatrandomtheanswerto random, computes y , and sends x . We now consider
s c
theithquerytwice,wegotadotbothtimesandtheanswers bothcases. AcanaskthreeoraclequeriesspecifictoSCS:
chosen—e ande —weredifferent. Indeed, sincei andJ client signature initiation, client signature completion, and
1 2
are fixed, in this case A succeeds twice and uses the same refresh/transition to CCS. In the first two types of queries,
important/criticalqueries. Sincethesetworunsarenowin- A0 follows the simulation used in Theorem 4. It chooses
dependent,theneededprobabilityissimplycomputedas: r =z forsomechallengez notyetusedandrespondsto
c j j
acompletionrequestwithacalltoitsdiscretelogoracle. A
(cid:14) =" ("
(cid:0)2(cid:0)‘)="2
(cid:0)"
2(cid:0)‘
(3)
i;J;R i;J;R i;J;R i;J;R i;J;R canalsorequestakey-refresh,therebytransitioningtoCCS.
Finally,byconditioning(cid:14) i;J onthevalueofR,usingEqua- When A requests a refresh, A0 picks a random x0 c 2 Z q,
tion(2),(3),andCauchy-Schwartzagain,weget: computingy s0 =yg(cid:0)x0 c modp,andsendingx0 ctoA.
In CCS, A only asks two queries: server signature en-
1 1
(cid:14) = (cid:14) = "2 (cid:0) " 2(cid:0)‘ dorsement, and refresh/transition to SCS. A0 endorses sig-
i;J jRjX
R
i;J;R jRj(cid:16)X
R
i;J;R X
R
i;J;R (cid:17)
naturesusingthey s0 itcomputedinthetransition,following
1 " 1 2 " thesamesimulationusedinTheorem1;itgeneratesatran-
= (cid:16)jRjX"2 i;J;R(cid:17)(cid:0) 2i; ‘J (cid:21) (cid:16)jRjX" i;J;R(cid:17)(cid:0) 2i; ‘J dom(cid:11);(cid:12) 2 Z
q
andsetsr
s
= g(cid:11)y s0(cid:12) modp. Whenitcom-
R R putesr = r r modp,A0 storesH(m;r) (cid:17) (cid:0)(cid:12) (mod q)
="2 i;J (cid:0)" i;J2(cid:0)‘ in a table fos r fc uture output. When A requests a refresh A0
Equation(1),andhencetheoverallbound,follows. will generate a new x0 s0 and corresponding y c00 as usual, re-
turningx00toA.
s
The analysis of A0 proceeds as in Theorem 1 and
3.5. Security Against Mobile Adversaries in the Theorem4. WhetherinSCSorCCS,Acannotdistinguish
Two-MessageProtocol between running with A0’s oracle values and running in
a real system. This is guaranteed by A0’s access to the
WenowshowtheequivalentofTheorem3fortheTwo-
discretelogoracleinSCS,theuniformrandomdistribution
Messageprotocol. Unfortunately,ourpreviousanalysisno
longerholds. Inthatearlierproof,wearguedthatA0 could
of(cid:12)inCCS,andtherandomrefreshofthesystembetween
the two states. If A produces a forgery for message m,
effectively simulate a client without knowing its key. In-
it must have at some point computed a crucial query,
deed, A0 could output phony values of H(m;r) because
H(m;r). If this query occurred when A was in CCS, we
coin-flipping assured that r is truly random. In the Two-
usetherewindingargumentgiveninTheorem1tocompute
Messageprotocol,wehavenosuchassurances. Rather,we
x. If in SCS, the rewinding argument given in Theorem 4
need to consider the lower-level details of the previous re-
applies, and A0 can compute x knowing x , thereby
duction. Usingthesamedefinitionofa“mobileadversary” c s
computingx.Ineithercase,A0recoversthediscretelogsof
asabove:Client
AuthID = SHA-1(SessID,Server,...)
Server
User
2. Opaqueauthprotocol
agent authd
agent authd
Pathname
3. Seq#,
1. Seq#,SessID,Server,... AuthID,
Secure Credentials
SFS Client File Server 4. Seq#,Auth#
Channel
SFS client File Server
Secure Channel
Figure3.SFSuser-authenticationarchitecture.
Figure4.Messagesexchangedduringtheuser-
authentication process. The authentication pro-
theotherz afteritrecoversx. AvariationofTheorem4’s tocol between the agent and authd is opaque to
i
bounded concurrency argument applies to guarantee that thecorefilesystemsoftware.
A0 did not exhaust its quota of queries to the discrete log
oracle. Thus, A0 is shown to be a PPT algorithm that can
computeDL-KTwithnon-negligibleprobability. ceeds, the authd informs the file server of the user’s Seq#,
AuthID, and credentials. The server then returns a short
handle Auth# to the client, which the client subsequently
4.Implementation usestotagallfilesystemrequestsonbehalfofthatuser.4
In the original SFS authentication system, authd keeps
Figure 3 illustrates the major components of SFS in-
a mapping of users’ public keys to credentials, while the
volved in user authentication. The file system client and
agent keeps one or more private keys in memory. The
file server communicate over a TCP connection, encrypt-
authentication protocol consists of the user digitally sign-
ingandMACingalltraffictoobtainasecurechannel. User
ing fSeq#, AuthIDg. The original protocol used Rabin-
authenticationitselfisactuallyperformedbyprocessesex-
Williams[34]digitalsignatures.
ternal to the file system. On the client, every user runs an
In addition to validating file server users, SFS’s authd
agent program responsible for authenticating it to remote
playsaseparateroleasarepositoryofusers’encryptedpri-
servers. Ontheserverside,aprogramauthdisresponsible
vate keys. SFS users can store encrypted copies of their
for validating authentication requests and translating them
private keys with the authd of their “primary” SFS server.
intocredentialsmeaningfultothefileserver.
Afterloggingintoaclientmachine,userstypicallyconnect
Whenauseraccessesafileserverforthefirsttime,thefile
to their primary server’s authd over the network, authenti-
systemclientdelaystheaccessandaskstheuser’sagentto
catethemselvesthroughtheSRP[35]securepasswordpro-
authenticatehertotheserver.Theagentthencommunicates
tocol,andthenretrievetheirencryptedprivatekeys. (Users
with the server’s authd to obtain appropriate privileges for
also end up securely downloading server public keys this
the user. The agent and authd communicate through the
way;see[28]fordetails.)
filesystem’ssecurechannel,butthefilesystemviewstheir
messagesasopaquebytearrays. Thus, newauthentication
4.1.Implementing2SchnorrinSFS
protocols can be implemented without modifying the file
systemsoftware. Integrating 2Schnorr in SFS was relatively straight-
Figure 4 shows the interface between the file system, forward,astheoriginaluserauthenticationprotocolalready
agent, and authd. Every secure channel between a client consistedofasimpledigitalsignatureonfSeq#,AuthIDg.
andserverisidentifiedbyauniquesessionID,SessID.Ses- Ontheserverside,wemadeseveralmodificationstoau-
sID, when hashed together with the server’s name, public thd.WeextendedittosupportbothSchnorrandRabinpub-
key,andcertainotherinformation,producesavaluecalled lic keys. We modified the server’s encrypted private-key
AuthID.WhentheSFSclientasksauser’sagenttoauthen- repositoryfunctionality,sothatitnowoptionallyholdsboth
ticate her to a server, it sends the agent the SessID of the anencryptedhalfofauser’sprivatekeyandanunencrypted
sessionwiththatserver,asequencenumber,Seq#,identify- one. WeaddedanoptiontotheRPCbywhichusersupdate
ingtheauthenticationrequestwithinthatsession, andsev- their login information so as to update the two key halves
eral other pieces of information including the name of the wheneveruserschangetheirpasswords. Finally,weadded
server.TheagentcomputesAuthIDandthencommunicates 4SFScouldequallywellhavechosentotagrequestswithSeq#, but
with the server’s authd. If the authenticationprotocolsuc- Auth#isashorterandthereforeslightlymoreconvenientvalue.Client Private Key Halves
Primary server
ext
signing
authd
agent
Accessed file server
File System File Server
verifying
authd
Figure5.ImplementationofproactivesignaturesinSFS
a SIGN RPC that implements the server side of the two- putes s = k e(cid:0)1 modq +x emodq to thwart any
c c c
(cid:0) (cid:0) (cid:1) (cid:1)
message2Schnorrprotocol. timing attacks based on non-constant time of the modular
InordertoaccessthenewSIGNRPC,ausermustfirstau- reduction. s iscomputedsimilarly.
s
thenticatehimselftotheserver.Thesimplestwayisthrough
SRP. When a client downloads a user’s encrypted private 5.Performance
keyhalf,itispermittedtokeeptheconnectionopentothe
server for issuing SIGN requests. The server is currently This section evaluates the performance of 2Schnorr and
willing to endorse two types of message—login requests, its impact on SFS. The two most important effects of
andrequeststochangetheuser’spublickeyonaparticular 2Schnorr are on the responsiveness of the client and on
server. Both types of messages include an AuthID, which consumption of server CPU time. In both cases, we com-
authd computes and verifies. Computing AuthID involves pare the new 2Schnorr authentication protocol to the orig-
hashing, among other things, the name and public key of inalSFSauthenticationprotocol,whichisbasedonanop-
theserverbeingaccessedandthetypeofservicebeingre- timized, non-interactive Rabin signature scheme. While
quested(remotelogin,fileserver,etc.). Authdlogsthisin- 2Schnorr itself is noticeably slower than Rabin, user-
formation,leavingacompleteaudittrailincaseanattacker authenticationisnotonthecriticalpathforfilesystemper-
stealsauser’spassword. formance. Thus, we show that 2Schnorr has an accept-
On the client side, rather than hard-code 2Schnorr into able impact on client responsiveness. Furthermore, while
theagent,weinsteadimplementedanextensionfacilityby 2SchnorrisconsiderablymoreexpensivethanRabinonthe
which arbitrary external programs can plug into the agent server-side,itisstillcheapinabsoluteterms,giventhethe
andoffertoattemptuser-authentication.Figure5illustrates relativeinfrequencyofuserauthenticationrequests.
the complete system. Upon loading the 2Schnorr private Wemeasuredthe2SchnorrandRabinalgorithmsbothin
key half, an external authentication process ext plugs into isolation and as part of a file system access that required
theagent,keepingopenaconnectiontotheuser’sprimary user authentication. We used three separate machines in
authd,whichwecallthesigningauthd. Whentheuserac- our experiments: a verifying-authd server, a signing-authd
cesses a new file server, the agent queries the ext process, server, and a client. The verifying-authd machine served
whichexecutes2Schnorrwiththesigningauthdtoproduce thefilesystemweusedinthefileaccessbenchmark,while
an ordinary Schnorr signature. The verifying authd on the the signing-authd performed the 2Schnorr server-side pro-
server that the user is accessing then verifies the Schnorr tocol (and hence was not used in the Rabin experiments).
signaturetoauthenticatetheuser. Allthreemachineshad1.75GHzAthlonprocessesorsand
Severalotherimplementationdetailsareworthmention- sufficient memory so that no paging activity was detected
ing. Thenewauthdcanactuallystoretwoprivatekeysfora duringanyofthetrials.Thethreemachineswereconnected
user. Thisisimportantsothatauserwhochangesherpub- byswitched100Mbitethernet,withroundtriplatenciesbe-
lic key can access both the old and new private keys for a low0.2msbetweeneverypairofmachines. Theverifying-
time. Ontheclientside,whileextiswaitingfortheserver authdwasrunningFreeBSD4.6.2,whilethesigning-authd
to endorse a signature, it precomputes gkc modp for the andclientwererunningOpenBSD3.1. Allmachinesused
nextsignature,toreducelatency. Also,inordertocompute GMPversion3.1.1forlargeintegerarithmetic.
the value s = k +x emodq, the client actually com- The experiments were conducted using Rabin keys with
c c c
a1024-bitmodulus,andSchnorrkeyswith1024-bitpsand20
15
10
5
0
Rabin Schnorr
)sdnocesillim(
emiT
noitucexE
Verify
Client Sign
Server Sign
End-to-end Protocol
Figure 6. Benchmarks for signing and verifying in the Rabin and Schnorr signature schemes. End-to-end
protocolshowsuserwaittimeforcompleteauthentication.
160-bitqs.Therearenoknownefficientreductionsfromthe tocol, SFS servers cannot scale to 1,000s of new connec-
discrete log problem to factorization or vice-versa. How- tionspersecondanyway.
ever, given today’s fastest algorithms, taking discrete logs Ifwecomparethecostofsigning,thesumofthehalvesof
overthegroupintheSchnorralgorithmshouldberoughly the2Schnorrsignatureprotocolis102%slowerthanRabin.
comparabletofactoringtheRabinmodulus. As2Schnorroverlapsitscalculationofgkc modpwithnet-
To measure system responsiveness, we timed a cd com- worklatencyandservercomputation,thecostofthiscom-
mand on the client to a directory (on the verifying-authd) putation,about1.7msec,isnotreflectedintheCPUtimes
that triggered an authentication. Under normal circum- showninthegraphs. Notethatevengiventhisoverlap,the
stances, a user is authenticated to a remote SFS server as client requires more computation than the signing server.
long as that server is mounted and the user does not add Thereasonisthattheclientmustchecktheserverhasbeen
orremovekeysfromhisagent. Inourexperimentalsetup, honestbeforeoutputingasignature.
however, we reset the user’s agent after every successful Finally,weshouldnotethatkeygenerationwith2Schnorr
authentication. The results of this experiment are shown is significantly slower. We generated keys on the signing-
by the black bars in Figure 6. Without network latency, authdandfoundthatRabinkeyscanbegeneratedinabout
the2Schnorrprotocolis68%slower. However,inabsolute 0.2seconds,while2Schnorrkeysetsrequireabout0.55sec-
terms, 2Schnorr is only 7 msec slower, which is a barely onds to generate a new p, q, g, and y = gx modp. Since
noticeabledelayforthefirstaccesstoafilesystem. Infact, users rarely need to regenerate keys, this slowdown is ac-
when the file system client is not already connected to the ceptable. If an application needs to generate many keys
server, there is additional time to connect and negotiate a (perhaps to create a large batch of user accounts at once),
session key, which further reduces the relative difference 2SchnorrcanactuallybemadefasterthanRabinbyreusing
ofRabinand2Schnorr. Ontheotherhand, hadtherebeen thesamep,q,andgparametersfordifferentkeys.
greater latency between the client and signing-authd, the Though2Schnorrisclearlymoreexpensivethantheorig-
2Schnorrauthenticationtimewouldincreasebythenetwork inal Rabin-based user authentication scheme, the perfor-
roundtriptime. manceisstillperfectlyacceptableforaprocedurethatonly
Figure6 also shows the CPUtimesrequiredto compute needs to be invoked when a user first accesses a new file
and verify digital signatures. Note that verifying in Ra- server. Moreover, we believe the performance impact is
binisnegligible,asnomodularexponentiationisrequired. morethanoffsetbythe2Schnorr’saddedsecurity.
The verifying-authd can verify a Rabin signature in well
under 0.1 msec. By contrast, Schnorr signature verifica- 6.Summary
tion takes approximately 3 msec—a significant increase.
Westudyproactive,two-partysignatureschemes(P2SS)
For this reason, Schnorr might be a bad candidate for a
as an effective tool to address the challenges of user-
verifying-authdserverthatsupportedhugenumbersofusers
authenticationinsettingswithmanyadministrativerealms.
withhighturnover. However,sinceeveryclientconnection
We present a three-message protocol, 2Schnorr, which is
alsorequirestheservertoengageinthekeynegotiationpro-
provablysecureintherandomoraclemodelassumingonlythedifficultyofthecomputationaldiscretelogproblem.For [7] D. Bleichenbacher. Generating ElGamal signatures with-
systemswithaconstantboundonthenumberofconcurrent out knowing the secret key. In Advances in Cryptology—
signature requests, we also give a two-message version of EuroCrypt’96,volume1070ofLectureNotesinComputer
2Schnorr, which we prove secure using the stronger one- Science,pages10–18,Berlin,1996.Springer-Verlag.
[8] M.Blum.Coinflippingbytelephone.InIEEESpringCOM-
more-discrete-logassumption. We argue that similar tech-
PCOM,pages133–137,1982.
niquescanbeusedforaP2SSversionoftheGQsignature
[9] A. Boldyreva. Efficient threshold signature, mul-
scheme.
tisignature and blind signature schemes based on the
To demonstrate the utility of P2SS, we integrated
gap-diffie-hellman-group signature scheme. Available
2Schnorr into SFS, a secure network file system. Using as IACR eprint archive Report 2002/118, http://
2Schnorr, a user whose password is compromised can re- eprint.iacr.org/2002/118/,2002.
cover by simply changing his password on his primary [10] C. Boyd. Digital multisignatures. In IMA Conference on
server. Thiswillimmediatelyblockattackersfromaccess- CryptographyandCoding,pages241–246.OxfordUniver-
ing his accounts in all other administrative realms where sityPress,1989.
[11] J.-S.Coron. OptimalsecurityproofsforPSSandothersig-
he has registered the same public key. Moreover, the user
natureschmes. InAdvancesinCryptology—EuroCrypt’02,
canalsoobtainfromhisprimaryserveralogofallservers
volume2332ofLectureNotesinComputerScience,pages
accessed by the attacker—possibly including accounts the
272–287,Berlin,2002.Springer-Verlag.
user has forgotten about. While 2Schnorr is slower than
[12] I.Damga˚rdandJ.Nielsen. Perfecthidingandperfectbind-
SFS’soriginalRabinsignaturealgorithm,weshowthatthe
ingcommitmentschemeswithconstantexpansionfactor.In
performance impact is quite acceptable, particularly given AdvancesinCryptology—Crypto’02, volume2442ofLec-
theaddedsecurity. ture Notes in Computer Science, pages 581–596, Berlin,
2002.Springer-Verlag.
Acknowledgments [13] Y.Dodis,J.Katz,S.Xu,andM.Yung.Strongkey-insulated
signatureschemes. UnpublishedManuscript,2002.
We thank the anonymous reviewers of this paper, the [14] A.FiatandA.Shamir. Howtoproveyourself:Practicalso-
members of the NYU cryptography reading group, our lutionstoidentificationandsignatureproblems.InAdvances
shepherdDawnSong,andMikeReiterfortheirhelpfulsug- inCryptology—Crypto’86,volume263ofLectureNotesin
ComputerScience,pages186–194,Berlin,1987.Springer-
gestionsonthispaper.
Verlag.
[15] FIPS 180-1. Secure Hash Standard. U.S. Department
References
ofCommerce/N.I.S.T.,NationalTechnicalInformationSer-
vice,Springfield,VA,April1995.
[1] M. Bellare, C. Namprempre, D. Pointcheval, and M. Se-
[16] FIPS 186. Digital Signature Standard. U.S. Department
manko. The one-more-RSA-inversion problems and the
ofCommerce/N.I.S.T.,NationalTechnicalInformationSer-
security of Chaum’s blind signature scheme. Avail-
vice,Springfield,VA,1994.
able as IACR eprint archive Report 2001/002, http://
[17] Y.Frankel,P.Gemmell,P.MacKenzie,andM.Yung.Proac-
eprint.iacr.org/2001/002/,January2001.
tiveRSA. InAdvancesinCryptology—Crypto’97,volume
[2] M.BellareandG.Neven.Transitivesignaturesbasedonfac-
1294ofLectureNotesinComputerScience,pages440–454,
toringandRSA.InAdvancesinCryptology—AsiaCrypt’02,
Berlin,1997.Springer-Verlag.
2002. Toappear.
[18] R.Ganesan. Yaksha:Augmentingkerberoswithpublic-key
[3] M.BellareandA.Palacio. GQandSchnorridentification
cryptography.InProceedingsoftheISOCNetworkandDis-
schemes:Proofsofsecurityagainstimpersonationunderac-
tributedSystemsSecuritySymposium,pages132–143,1995.
tive and concurrent attacks. In Advances in Cryptology—
[19] S. Goldwasser, S. Micali, and R. Rivest. A digital sig-
Crypto’02,volume2442ofLectureNotesinComputerSci-
nature scheme secure against adaptive chosen-message at-
ence,pages162–177,Berlin,2002.Springer-Verlag.
tacks. SIAMJournalofComputing,17(2):281–308,1988.
[4] M.BellareandP.Rogaway.Randomoraclesarepractical:A
[20] L. Guillou and J.-J. Quisquater. A ”paradoxical” identity-
paradigmfordesigningefficientprotocols. InProceedings
basedsignatureschemeresultingfromzero-knowledge. In
oftheFirstACMConferenceonComputerandCommunica-
AdvancesinCryptology—Crypto’88,volume403ofLecture
tionsSecurity,pages62–73,Fairfax,VA,1993.
Notes in Computer Science, pages 216–231, Berlin, 1988.
[5] M. Bellare and P. Rogaway. The exact security of digital
Springer-Verlag.
signatures—howtosignwithRSAandRabin.InU.Maurer,
[21] A. Herzberg, M. Jacobsson, S. Jarecki, H. Krawczyk, and
editor, Advances in Cryptology—Eurocrypt 1996, volume
M.Yung. Proactivepublickeyandsignatureschemes. In
1070ofLectureNotesinComputerScience,pages399–416.
FourthACMConferenceonComputerandCommunication
Springer-Verlag,1996.
Security,pages100–110.ACM,1997.
[6] M. Bellare and R. Sandhu. The security of prac-
[22] J. H. Howard, M. L. Kazar, S. G. Menees, D. A. Nichols,
tical two-party RSA signature schemes. Available
M. Satyanarayanan, R. N. Sidebotham, and M. J. West.
as IACR eprint archive Report 2001/060, http://
Scale and performance in a distributed file system. ACM
eprint.iacr.org/2001/060/,July2001.
Transactions on Computer Systems, 6(1):51–81, February
1988.[23] G.ItkisandL.Reyzin. Forward-securesignaturewithop- [30] D.PointchevalandJ.Stern. SecurityArgumentsforDigi-
timal signing and verifying. In Advances in Cryptology— talSignaturesandBlindSignatures. JournalofCryptology,
Crypto’01,volume2139ofLectureNotesinComputerSci- 13(3):361–396,2000.
ence,pages332–354,Berlin,2001.Springer-Verlag. [31] C.Schnorr. Efficientidentificationandsignatureforsmart
[24] G. Itkis and L. Reyzin. SiBIR: Signer-base intrusion- cards. InAdvancesinCryptology—Crypto’89,volume435
resilientsignatures.InAdvancesinCryptology—Crypto’02, of Lecture Notes in Computer Science, pages 235–251,
volume2442ofLectureNotesinComputerScience,pages Berlin,1990.Springer-Verlag.
499–514,Berlin,2002.Springer-Verlag. [32] C. Schnorr. Efficient signature generation by smart cards.
[25] P. MacKenzie and M. Reiter. Delegation of cryptographic JournalofCryptology,4(3):161–174,1991.
servers for capture-resilient devices. In Eight ACM [33] J.G.Steiner,B.C.Neuman,andJ.I.Schiller.Kerberos:An
Conference on Computer and Communication Security, authentication service for open network systems. In Pro-
pages 10–19. ACM, 2001. Full version available at: ceedingsoftheWinter1988USENIX,pages191–202,Dal-
ftp://dimacs.rutgers.edu/pub/dimacs/ las,TX,February1988.USENIX.
TechnicalReports/TechReports/2001/2001- [34] H.C.Williams. AmodificationoftheRSApublic-keyen-
37.ps.gz. cryptionprocedure.IEEETransactionsonInformationThe-
[26] P.MacKenzieandM.Reiter. Networkedcryptographicde- ory,IT-26(6):726–729,November1980.
vicesresilienttocapture. InProceedingsofthe2001IEEE [35] T.Wu. Thesecureremotepasswordprotocol. InProceed-
SymposiumonSecurityandPrivacy,2001. ings of the 1998 Internet Society Network and Distributed
[27] P.MacKenzieandM.Reiter. Two-partygenerationofDSA
SystemSecuritySymposium,pages97–111,SanDiego,CA,
signature. InAdvancesinCryptology—Crypto’01,volume
March1998.
2139ofLectureNotesinComputerScience,pages137–154, [36] A.Yao. Howtogenerateandexchangesecrets. InProceed-
Berlin,2001.Springer-Verlag. ingsofthe27thIEEESymposiumonFoundationsofCom-
[28] D.Mazie`res,M.Kaminsky,M.F.Kaashoek,andE.Witchel.
puterScience,pages162–167,1986.
Separating key management from file system security. In
[37] T.Ylo¨nen. SSH–secureloginconnectionsovertheInter-
Proceedingsofthe17thACMSymposiumonOperatingSys-
net.InProceedingsofthe6thUSENIXSecuritySymposium,
tems Principles, pages 124–139, Kiawa Island, SC, 1999.
pages37–42,SanJose,CA,July1996.
ACM.
[29] R.OstrovskyandM.Yung. Howtowithstandmobilevirus
attacks.InProceedingsofthe10thAnnualACMSymposium
onPrinciplesofDistributedComputing,pages51–59,1991.