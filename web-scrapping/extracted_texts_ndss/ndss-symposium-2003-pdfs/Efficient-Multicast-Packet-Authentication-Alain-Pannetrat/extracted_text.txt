Efficient Multicast Packet Authentication
AlainPannetrat,RefikMolva
Institut Eur√©com
{Alain.Pannetrat@eurecom.fr,Refik.Molva@eurecom.fr}
Abstract neededmulticastsecuritymechanism.
To allow packets to be authenticated in a stream, the
source must add authentication information to the dis-
Providing authentication mechanisms for IP-Multicast tributed content. This authentication information is used
streams is paramount for the development of large scale byrecipientstoascertaintheoriginofthetransmittedcon-
commercialmulticastcontentdeliveryapplications. This tent. Inthecontextofmulticastauthentication,wedistin-
need is particularly strong for the delivery of real time guishtwotypesofdistributedcontents: pre-recordedand
content,suchaslivevideo/audionewseventsorfinancial real time. Pre-recorded content describes content that is
stock quote distribution. However, this turns out to be a known in advance to the source, such as a film or mu-
quitechallengingproblemformanyreasons.First,theau- sic. Forsuchcontent, theauthenticationinformation can
thenticationof the multicast data mustbe verifiableby a be computed and inserted in the stream in advance. On
potentiallyverylargenumberofuntrustedrecipients.Sec- the other hand, real time content describes content that
ond,sincemulticastcommunicationprotocolsarealmost is produced in real time such as live sports event broad-
always best effort, the authentication mechanisms needs casting, newseventsorfinancialstockquotes. Realtime
toauthenticatereceivedcontentdespitethepotentialloss contentrequiressomeoftheauthenticationinformationto
of some packets. Finally, the authentication mechanism be computed in real time, which adds further constrains
needs to be efficient enough to cope with real time data on the efficiency of the authentication algorithm. Thus,
andshouldhaveasmallcommunicationoverhead. anefficientrealtimeauthenticationalgorithmcanbeused
We proposeanewmulticastauthenticationschemede- forpre-recordeddatawhiletheconverseisnotnecessarily
signedtoauthenticatereal timemulticastpacketstreams true. Moreover, it seems that real time application natu-
with a potentially unlimited number of recipients. This rallyhaveastrongerneedforauthentication. Consideras
schemeprovidesbothintegrityandnonrepudiationofori- an example, the disastrous consequence that source im-
gin, and ina majorityof situations, itperformswithless personation could have for an application such as stock
overhead in bytes per packet than previously proposed quote distribution, where a malicious entity could gen-
practicalrealtimestreamauthenticationschemes. erate bogus financial data. The main goal of this work
is to provide a multicast authentication with a emphasis
onlowcommunicationoverhead,forrealtimedataappli-
1 Introduction cations where a low delay is acceptable and will not be
perceivedatthemessagelevel. Foranapproachdirected
IP-Multicast[8]allowsthescalabledeliveryofpackets
morespecificallytopre-recordeddata,wereferthereader
toapotentiallyunlimitednumberofrecipients. Assuch,
to[9],[15]and[29].
itisaveryinterestingmechanismsforcommercialappli-
cations that deliver streamed content to a large group of
1.1 TwoLevelsofAuthentication
recipients, such as video/audio broadcasting. However,
some security issues need to be solved[12] before these Wedistinguishtwolevelsofauthentication:
applicationaredeployedonalargescale. Themostbasic
SourceAuthentication: allows a recipient to verify the
needed security mechanisms for large scale commercial
originofthecontent.
multicast applications are confidentiality and authentica-
tion. Infact,thekeydistributionalgorithmsemployedin
Nonrepudiation(oforigin): allows the recipient to
many multicast confidentiality proposals[16, 30, 23, ...]
provetheoriginofthedatatoathirdparty.
require a form of authentication to assure that the keys
originatefromalegitimatekeydistributionentity.Conse- In traditional two party communications, source authen-
quently,wearguethatauthenticationisprobablythemost tication is provided with efficient symmetric techniques
1using a MAC (Message Authentication Code) which re-
liesonasecretkeysharedbetweenthetwocommunicat-
ingparties.Ontheotherhand,nonrepudiationisprovided
with a digital signature, using asymmetric cryptographic
techniqueswhichhaveacostthatisseveralordersofmag-
nitudehigherthanaMAC.
Canetti et al. have proposed a multiparty extension[7]
toMACsinthecontextofmulticast,buttheirschemehas
somedrawbacks. Mostnotably,thecommunicationover-
head is important and the security of the scheme is only
defined up to a coalition of
(cid:0)
authenticatepacketsamidlossesinthenetwork(fornon-
lossystreams,seeforexample[9]).
From all the observation we made, we can establish
several parameters to measure the quality of a real time
streamauthenticationscheme:
malicious recipients forg-
ingdataforachosenrecipient. RecentworkfromBoneh
et al.[4] suggest more generally that extending symmet-
ric MAC techniques in the multicast setting will not be
possible without new advances in cryptography. As we
will see, except TESLA[22], current practical multicast
authenticationtechniquesarenotfullybuiltonsymmetric
techniquesbut relyinstead partiallyonasymmetrictech-
niques. Asaconsequencemanyoftheseschemes,includ-
ingours,alsoprovidenonrepudiationoforigin.
1.2 Real Time Multicast Authentication Chal-
lenges
There are two main factors which make multicast
streamauthenticationachallenge:
AMultipartyFactor: we have an unlimited number of
untrustedrecipients.
AStreamingFactor: wewanttoauthenticatedatafrom
a potentially infinite stream of packets transmitted
overalossychannel.
The multiparty factor has a strong impact on the secu-
rity requirements of a multicast authentication scheme.
Indeed, a fundamental difference between multicast and
two-party authentication is that in multicast we consider
the recipients aspotential adversaries. This rules out the
use of a symmetric MACkey sharedbetween the source
and the recipients, because recipients should not be able
toimpersonateasthesourceofthestream.
The streaming factor has several design implications.
Firstly,wedonotviewthestreamasauniqueobjectthat
is authenticated all at once, but rather as a sequence of
consecutive chunks of data that need to be authenticated
individually as they are received. Secondly, recipients
shouldbeabletoauthenticatepacketsstartingfromanar-
bitrary point in the stream or at least on the boundaryof
asmallblockofpackets. Multicastisoftenimplemented
overUDP andassumesonly a best effortdeliverymech-
anismandmanymultimedia multicastapplicationstoler-
atelosseswithagracefuldegradationinplaybackquality.
Consequently, one of the most important design require-
mentofamulticastauthenticationschemeistheabilityto
(cid:1) Robustness:theabilityoftheschemetoauthenticate
receiveddatadespitelossesinthenetwork.
(cid:1)
Joinability:theabilityofrecipientstostartauthenti-
catingpacketsfromanarbitrarypointinthestream.
(cid:1)
(Server Side) Buffering: the maximum number of
packetsthatneedto bestoredonthe serverto com-
puterobustauthenticationinformation.
(cid:1)
(Authentication)Latency:themaximumnumberof
additional packets that need to be received before a
packetcanbeauthenticated.
(cid:1)
ComputationalCost: thecomputationalcostofthe
scheme.
(cid:1)
Communication Overhead: the number of bytes
perpacketswhichdescribetheembedauthentication
information.
Buffering and Latency appear in some situations where
authenticationinformationpertainingtoapacketisstored
in one or several other packets. Ideally we would like a
schemethathasperfectrobustness,thatisjoinableonev-
ery packet, has no buffering or latency and has an over-
headaswellasacostsimilartowhatisfoundinaMAC
scheme. Inpracticehowever,suchaperfectschemedoes
not exist and a compromise needs to be found between
theseparameters.
1.3 RelatedWork
Astraightforwardstreamauthenticationmethodwould
be to use a public key signature on each packet of the
stream. Intheory,thisiswellsuitedforrealtimestreams
andtheauthenticationisjoinableonanypacket.However,
adding a typical 1024 bit signature[28] (or 128 bytes) to
everypacketrepresentsaconsequentoverhead,moreover,
the computational cost of a public key signature makes
such a solution impractical in many scenarios. Conse-
quently stream authentication proposals have taken two
approaches, sometimes in combination: design more ef-
ficient signature schemes andamortize thecost of signa-
turesoverseveralpackets.
Fasterdigitalsignaturesdesignedwithstreamauthenti-
cationinmindwhereproposedbyRohatgi[27],aswellas
WongandLam[31].Theseproposalscomehoweverwith
a communication overhead that makes them impracticalin many situations. The BiBa scheme proposed by Per-
rig [21] offers a significantly improved broadcast signa-
ture schemewhich has a lowercomputationnal overhead
but still a communication overhead that is only slightly
lower than a traditionnal public key signature. On the
other hand, these schemes including the one in [9], still
havethe advantageofofferinga fullyreal time authenti-
cation(ie. withnodelayatall).
Acomplementaryapproachistoamortizethesignature
over several packets in a block. The stream is itself di-
videdintomanysmallblocksthathaveeachauniquedig-
italsignaturethatiscombinedwithhash/MACtechniques
toauthenticatethepacketsintheblock. Werefertothese
techniquesaswellasthe onewe proposeinthisworkas
hybrid approaches. Wong and Lam proposed one of the
firsthybridapproachesintheirhashtreeconstruction[31],
which is robust to any number of losses in a stream but
has a consequent overhead per packet, even larger than
the size of a digital signature. Instead of being robustto
anytypeofpacketloss,recentstreamauthenticationpro-
posals have been designed to adapt to loss patterns that
aremorespecifictotheInternet. Thisallowsasignificant
gainintermsofoverhead. First,basedontheobservation
that losses usually occur in bursts in TCP/IP[20], Golle
and Mogadugo[10] proposed a scheme that could toler-
ate (1 or several) bursty loss(es) of at most (cid:0)
Thetwomostemployedtechniquestoachievereliablede-
livery of packets in computer communication protocols
areARQ(AutomaticRepeatreQuest)techniquesandFEC
(ForwardErrorCorrection).ARQtechniquesareusedev-
erydayinInternetprotocolssuchasTCP,whileFECtech-
niqueshavelongbeenconfinedtothetelecommunications
world.However,therehasbeenrecentlyasurgeininterest
for FEC techniques in the Internet world, often in com-
bination with more traditional ARQ approaches[18, 6].
While in the telecommunications world FEC techniques
are used most often to detect and correct errors occur-
ringinthetransmissionofastreamofbits,theyareused
in the Internet world to recover from the loss of packet
sized objects. Indeed, in the Internet world a packet is
either received or lost. A packet can be considered lost
if it does not arrive after a certain delay or perhaps if
it has bad checksum. Our idea was first to use FEC to
transmit the signature alone, but we soon realized that
FECcouldalsobeusedasanalternativetohashtrees[31]
or chains[22, 10] to transmit authentication information,
with lower overhead per packet in most cases than any
otherschemesuitableforrealtimebroadcasts.
Thecentralcontributionofthisworkistheproposalof
a joinable real time robust stream authentication scheme
with nonrepudiation of origin. It uses Erasure Codes to
packets in provide a lower overhead per packet than previous real
a block. Packets are linked together in a ‚Äúhash chain‚Äù, timeauthenticationstreamproposals,whilebeingadapted
thelastpacketofwhichisdigitallysigned. However,the torealisticmulticastInternetlosspatterns.
schemehassomedrawbacks,andinparticular,thetrans- A brief overviewoferasure codeswill be presentedin
mission of the signature is not clearly addressed. Inde- thenextsection.Ourschemeisformalizedinsection3as
pendently Perrig et al. proposed a more complex ‚Äúhash well as its relationship with Internet loss patterns which
chain‚ÄùconstructioncalledEMSS[22]whichisadaptedto are modeled with a Markov chain. Section 4 discusses
multiplelossesandwhichbetteraddressessignaturetrans- thecost andoverheadofourschemeandpresentsitsuse
mission. Recently,inaschemecalledSAIDA[19],which inafewconcretescenarios. Finally,wereviewotherreal
sharessimilaritieswithourwork,Parketal. usedtheIDA timelossystreamauthenticationsschemesinsection5and
(information dispersal algorithm) to transmit authentica- comparethemwithourapproach.
tion information pertainingto each block of packets in a
stream. Wediscusstheserelatedproposalsmoreindetail 2 Background
insection5.
2.1 ErasureCodes
As a complementary approach to their EMSS scheme
Perrig et al.[22] proposed a very efficient time based An erasure code generation algorithm
stream authentication scheme called TESLA. It provides
source authentication but does not offer nonrepudiation,
which is not a problem for many applications. Its most
interestingfeatureisthatittoleratesarbitrarypacketloss
withalowoverhead. Itsmaindrawbackisthatitrequires
alltherecipientstoestablishalooseclocksynchronization
with the source through a initial unicast exchangewhich
maynotbealwayspracticalinalargemulticastgroup.
1.4 OverviewofourScheme
Our scheme uses a combination of hash and signature
techniques with FEC, or more precisely, erasure codes.
(cid:1)(cid:3) (cid:2)(cid:5) (cid:4)(cid:6)
takes a set
(cid:7)(cid:9) (cid:8)(cid:11) (cid:10)(cid:13) (cid:12)(cid:15) (cid:14)(cid:17) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16)(cid:22) (cid:12) (cid:2)(cid:24) (cid:23)
of (cid:25) sourcepacketsinablockandpro-
duces (cid:26)(cid:27) (cid:25)(cid:29) (cid:28)(cid:31) (cid:30)(cid:17) codepackets:
(cid:10)(cid:13) !(cid:24) (cid:14)" (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:20)(cid:16)# !% $(cid:2)‚Äô &( (cid:6)(cid:22) ) (cid:23)+ *, (cid:1)- (cid:2)(cid:5) (cid:4)(cid:6)
(cid:26)
(cid:7)
The main property of the set .
(cid:8)/ (cid:10)" !0 (cid:14)(cid:5) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:20)(cid:16)# !% $(cid:2)‚Äô &( (cid:6)(cid:22) ) (cid:23)
is
thatanysubsetof (cid:25) elementsof . sufficestorecoverthe
sourcedata
(cid:7)
withthehelpofadecodingalgorithm 1
(cid:2)
.
Tobeexact,thedecodingalgorithm 1
(cid:2)
needstoknowthe
position, orindex,ofthe (cid:25) receivedelementsin . to re-
cover
(cid:7)
. Thisinformationcanoftenbederivedbyother
means(suchasthepacketsequencenumber)andwewill
assume in the remaining discussion that this informationisavailableimplicitlyto 1
(cid:2)
. Ifthefirst (cid:25) codepacketsare
equaltothesourcepackets,thatis
(cid:10)(cid:13) ! (cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)# ! (cid:2) (cid:23) (cid:8) (cid:7)
where
(cid:10)(cid:13) !0 (cid:14)" (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)# ! $(cid:2) &( (cid:6) ) (cid:23) * (cid:1) (cid:2)" (cid:4)(cid:6)
(cid:26)
(cid:7)
,wecallthecodesystematic
andtheextraredundancypackets
(cid:10)" ! $(cid:2) & (cid:14) ) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)# ! $(cid:2) &( (cid:6) ) (cid:23)
are
called parity packets. Systematic codes are very useful
since they do not require anyadditional processing from
therecipientinthecasewherenolossoccurs.
It is importantto note that Erasure Codes are not used
in the same contextin the Internet as in telephony. Here
thecodesarenotdesignedtorecoverdamagedpacketsbut
ratherthelossoffullpacketsinablockofseveralpackets.
Intuitively, an individual packet can therefore be viewed
more like a single codesymbol rather thana set ofsym-
bols.Foragoodintroductiontopracticalerasurecodeswe
referthereadertotheworkofL.Rizzo[26]whereReed-
Solomon erasure codes are described. These codes op-
erate in
(cid:1)(cid:3) (cid:2)
(cid:26)(cid:5) (cid:4)(cid:7) (cid:6) and may not be efficient for large data
blocks of packets (several hundred kilobytes). However,
they are suitable in our scenario since we work on data
unitsthataremuchsmallerthanapacket(typically16or
20bytes),asshownbelow. Forfastercodes,wereferthe
reader to the work of M. Luby et al. on Tornado Codes
[14,6],wherecodeswithnearlinearcodinganddecoding
timesaredescribed.
In the remaining of this work,
(cid:1) (cid:2)" (cid:4)(cid:6)
(cid:26)
(cid:18)
will describe
a practical systematic erasure code generation algorithm
whichtakes (cid:25) sourcepacketsandproduces (cid:26)(cid:27) (cid:25) (cid:28) (cid:30)(cid:17) code
packets. If
(cid:7) (cid:8) (cid:10)(cid:13) (cid:12) (cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)# (cid:12) (cid:2) (cid:23)
is the source data and .
are the (cid:30) extra generated parity packets, we will write
(cid:10)(cid:13) (cid:7)(cid:9) (cid:8)
.
(cid:23) * (cid:1) (cid:2)" (cid:4)(cid:6)
(cid:26)
(cid:7)
. Thecorrespondingdecoding algo-
rithmwillbedenoted 1
(cid:2)
(cid:26)
(cid:18)
andif (cid:10) describesthesetof
received elements and
(cid:7)
the source data, we will write
(cid:7) *
1
(cid:2)
(cid:26)(cid:5) (cid:10) todescribetherecoveryprocess.
2.2 Notations
Inthisworkwewillconsiderastreamtobedividedin
consecutiveblocksof (cid:11) packets. Sincea streamdoesnot
necessarilyexactlycontainanumberofpacketswhichis
anexactmultipleof (cid:11) weallowtheuseofdummypadding
packetsattheveryendofthestreamtomatcha (cid:11) packet
boundary.Ourauthenticationschemeisparameterizedby
(cid:11) the block size in packets and (cid:12)(cid:14) (cid:13)(cid:16) (cid:15)(cid:17)
(cid:18)(cid:21)(cid:18)(cid:19)(cid:18)
(cid:15) the maximum
expectedlossrateperblock.
We will denote (cid:20) as a cryptographic hash function
such as SHA[17] or MD5[25] which produces hashes of
(cid:21)
bytes. The couple (cid:26)(cid:23)(cid:22)
(cid:16)(cid:25) (cid:24)
will denote the digital sig-
natureandverificationalgorithmsrespectivelyassociated
withthesourceofthepacketstream,suchasRSA[28,1]
forexample. Thesizeofthesignatureswillbeexpressed
as (cid:26) bytes. ForRSA,atypicalvaluefor (cid:26)
3 Stream Authentication
3.1 AuthenticationTags
Considerablockasasequenceof
is128bytes(or
1024bits).
(cid:11) packets (cid:15)(cid:27)
(cid:14)(cid:5) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:20)(cid:16)
(cid:27)(cid:29) (cid:28)(cid:31) (cid:30) .
Let
(cid:10) (cid:21) (cid:14)(cid:5) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21)
(cid:28)!
(cid:21)# " *
(cid:20) (cid:26)$ (cid:27)
" (cid:23)
be the set of hash values
ofthesepacketswithacryptographichashfunction (cid:31)(cid:20) (cid:26)
(cid:18)
.
Fromthishashsetwebuildasetof (cid:11) authenticationtags
(cid:10)! % (cid:14) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:20)(cid:16)& %
(cid:28)
(cid:23)
withthefollowingalgorithm ‚Äô) ((cid:28)
(cid:4)*, +
whichuses
someofthenotationsintroducedintheprevioussection:
Taggeneration: ‚Äô) ((cid:28)
(cid:4)*, +
INPUT:
(cid:10) (cid:21) (cid:14)(cid:5) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21)
(cid:28)
(cid:23)
OUTPUT:
(cid:10)(cid:13) (cid:7). (cid:8) (cid:7) (cid:23)+ *,
(cid:10)-
(cid:1)
(cid:5)% (cid:14)(cid:5) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:20)(cid:16)&
(cid:4)(cid:23)/0*
(cid:28) (cid:28)2 1
%
(cid:28)
(cid:7)
(cid:26)
(cid:23)
(1)
3 *
(cid:22) (cid:26)$ (cid:31)(cid:20) (cid:26)
(cid:21) (cid:14) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18) (cid:21)
(cid:19) (cid:19)
*
# (2)
(cid:10)
.
(cid:8)
.
(cid:23)+ * (cid:1)5 4
(cid:28)
$(cid:14), 6 (cid:19)* )(cid:23)7 (cid:4)(cid:23)/*
(cid:28)2 1 (cid:26)
(cid:7) 3
(cid:19)
where .
(cid:8) (cid:7)
3
(cid:19) (3)
Split
(cid:10)
.
(cid:8)
.
(cid:23)
into
(cid:11) equallengthtags
(cid:10)! % (cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16)8 %
(cid:28)
(cid:23)
. (4)
We proposea morevisual representationofthetagalgo-
rithmonfigure1.
Weobservethat ‚Äô) ((cid:28) (cid:4)*, + usestwodifferenterasurecodes,
in steps (1) and (3). The values
(cid:10)
.
(cid:8)
.
(cid:23)
on line (3) is of
totallengththatisamultipleof (cid:11) bytes,becausewehave
(cid:11)
(cid:8): 9
(cid:11) (cid:26)
(cid:18)< ;
(cid:12) > = (cid:28)@ ?A(cid:12)B (cid:11)(cid:25) C . Thisallowsustodivide
(cid:10)
.
(cid:8)
.
(cid:23)
intoequallengthtagsonline(4). Toexploitthetaggen-
eration algorithm we will first define our authentication
criterion:
Authentication criterion: In this work we say that a
packet (cid:27)
"
is fully authenticable in a block if, given the
setofhashes
(cid:10) (cid:21) (cid:14)" (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21)
(cid:28)
(cid:23)
ofpacketsintheblockandtheir
signature 3 (cid:8) (cid:22) (cid:26)$ (cid:20) (cid:26) (cid:15)(cid:21) (cid:14) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18) (cid:21) D D * (cid:22) , wecanverifythatboth
(cid:24) (cid:26) 3 (cid:16) (cid:31)(cid:20) (cid:26) (cid:15)(cid:21) (cid:14) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18) (cid:21) D D * (cid:22) (cid:8)F E (cid:30)H G) I and (cid:20) (cid:26)$ (cid:27) " (cid:8) (cid:21) " .
The proposed schemes in this work are based on the
followingpropertyofthetaggenerationalgorithm.
Proposition 1. Let J
(cid:8)
(cid:15)(cid:27)
(cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)
(cid:27) (cid:28) (cid:30) be a block
of (cid:11) packets and
(cid:10) (cid:15)(cid:21) (cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16) (cid:21)
(cid:28)
(cid:21) " *
(cid:31)(cid:20) (cid:26)2 (cid:27)
" (cid:23)
its asso-
ciated hash set. If we compute
‚ÄôB ((cid:28)
(cid:4)*, +
(cid:26)
(cid:10) (cid:15)(cid:21) (cid:14) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21)
(cid:28)
(cid:23)
K
(cid:8) (cid:10)! % (cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)& %
(cid:28)
(cid:23) *
thenanysubset ofatleast
9
(cid:11) (cid:26)
(cid:18)L ;
(cid:12) > =
packets in J can be authenticated using any subset of at
least
9
(cid:11) (cid:26)
(cid:18)L ;
(cid:15)(cid:12) M = tagsin K .
Proof. Define (cid:30)
(cid:8)N 9
(cid:11) (cid:26)
(cid:18)L ;
(cid:12) > = . Let JP O
(cid:8)
(cid:15)(cid:27)(cid:29) Q& R
(cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:20)(cid:16)
(cid:27)(cid:29) Q> S- (cid:30)
beasubsetof (cid:30) packetsin J andlet KT O
(cid:8) %!
(cid:15)
U
R
(cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16)8 %- U
SV (cid:30) be
a subset of (cid:30) packets in K . We can compute
1
4
(cid:28)
$(cid:14), 6 (cid:19)* )(cid:23)7
(cid:26)2 KW O
(cid:10) (cid:7)
3
(cid:19)
(cid:23) *
since KW O contains (cid:30)
(cid:8) 9
(cid:11) (cid:26)
(cid:18)L ;
(cid:12) > = ele-
ments. Let X
(cid:8) (cid:10) (cid:21)
Q R
(cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21)
Q SY
(cid:21)
Q> Z
*
(cid:20) (cid:26)$ (cid:27) Q> Z
(cid:23)
be
the hashes of the received packets. We can recover(cid:1)
(cid:0)(cid:1)
(cid:0)
(cid:2)(cid:3)(cid:4)(cid:3)
(cid:2)(cid:3)(cid:4)(cid:3)
(cid:2)(cid:4)
(cid:2)(cid:4)
(cid:19)(cid:21) (cid:20)(cid:23)
(cid:5)
(cid:5)(cid:6)
(cid:6)
(cid:22)(cid:25) (cid:24)(cid:27) (cid:26)(cid:29)
(cid:19)
(cid:7)
(cid:7)(cid:8)
(cid:8)
(cid:28)(cid:30) (cid:24) (cid:31)!
(cid:19)
(cid:28)# "$"$"$(cid:28)%
(cid:19)
(cid:9)
(cid:9)(cid:10)
(cid:10)
(cid:24) &(
)
(cid:11)(cid:3)
(cid:11)(cid:3)
‚Äô
(cid:11)
(cid:11)(cid:12)
(cid:12)
)
(cid:13)
(cid:13)(cid:14)
(cid:14)
*
(cid:19)
(cid:15)
(cid:15)(cid:16)
(cid:16)
(cid:17)
(cid:17)(cid:18)
(cid:18)
H H H H H H H H H
+, (cid:26)- +. (cid:31)/ +1 02 +1 34 +. 56 +1 74 +. 8 +1 &: 9 (cid:26) +1 &
ErasureCode1
ErasureCode2
; (cid:26) ; (cid:31) ; 0 ; 3
)< (cid:20)>
;
=@
5
?A(cid:19)C B
7; ; 8 ; &: 9 (cid:26) ; &
Figure1.thetaggenerationalgorithm
(cid:10) (cid:21) (cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16) (cid:21)
(cid:28)
(cid:23)
form D and
(cid:7)
bycomputing
1 (cid:28) (cid:26)$ X (cid:7) (cid:19)
(cid:10) (cid:21) (cid:14) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21)
(cid:28)
(cid:23) *
. Finallywecancompute (cid:24) (cid:26) 3 (cid:16)‚Äô (cid:10) (cid:21) (cid:14) (cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16) (cid:21) (cid:28) (cid:23) to
authenticatethereceivedpackets JT O toverifyourauthen-
ticationcriterion. E
Adirectcorollaryofthepropositionaboveisthatboth
ablockofpacketsandtheirauthenticationtagscanwith-
standalossrateofatmost ?0(cid:12)) (cid:11)(cid:25) C elementswhileallowing
ustoauthenticatetheremainingpackets.
Finally, from the construction of the algorithm above
wecandeterminethesizeofanauthenticationtag:
Proposition2. Let
(cid:21)
definethelengthofourcrypto-
graphichashesand (cid:26) thesizeofthesignatures.Thesizeof
anindividualauthenticationtagisexpressedasafunction
F
(cid:26)(cid:5) (cid:11)
(cid:16)
(cid:15)(cid:12) ofboththenumberofpacketsinablockand (cid:12) the
maximumexpectedlossrateperblock,asfollows:
F
(cid:26)(cid:5) (cid:11)
(cid:16)
(cid:15)(cid:12)
(cid:8)H G
$(cid:14)4 , 6 (cid:19)*
9
) 7
(cid:28)
(cid:18)
(cid:26)
(cid:26)(cid:5)
;
-(cid:26) (cid:28)(cid:16)
(cid:15)(cid:12) &
?0(cid:12)
(cid:11)(cid:25) =
(cid:18)
(cid:11)(cid:25) C
(cid:21)
where G
(cid:6)
(cid:26)(cid:30) I(cid:24) is an integer function which returns the
lowestmultipleof (cid:0) greaterorequalto I .
Proof. Let
!
denote the size of the value
(cid:10)
.
(cid:8)
.
(cid:23)
and
(cid:12)
the size of
(cid:7)
3
(cid:19) padded to the proper length, both on
line (3) of the algorithm. We have
F
(cid:26)2 (cid:11)
(cid:16)
(cid:12)
(cid:8) !K J
(cid:11) . From
the erasure code parameters on line (3) we have
(cid:12)
4 $(cid:14), 6
4
(cid:19) )*
$ (cid:28)(cid:14) 6
# &7 <
(cid:19) )*
M/*
7
(cid:28)
L
(cid:28)2 1 (cid:8) (cid:12) $(cid:14)4 , (cid:19)(cid:28)*6 )
(cid:28)
7
! (cid:8)
andthus
F
(cid:26)(cid:5) (cid:11)
(cid:16)
(cid:15)(cid:12)
(cid:8) $(cid:14)4 , N6 (cid:19)* )
(cid:28)
7
.
The value of
(cid:12)
is the the sum of the size of
(cid:7)
and the
signature
3
,paddedtotheappropriatelengthfortheera-
sure codeof line(3). From line(1) we computethe size
of (cid:7) as ?A(cid:12) (cid:18) (cid:11)(cid:25) C (cid:21) andwrite (cid:26) asthesizeof 3 whichyields
(cid:12) (cid:8)
G
$(cid:14)4 , 6 (cid:19)* )
(cid:28)
7
(cid:26)(cid:5) -(cid:26) (cid:28)(cid:16) ?0(cid:12)
(cid:18)
(cid:11)(cid:25) C
(cid:21)
. E
3.2 ProposedSchemes
Inourstreamauthenticationschemeweproposetopig-
gyback authentication tags in the packets of a block and
use Proposition 1 to authenticate received packets when
thelossrateinablockislessthan (cid:12) . Wepropose3differ-
entvariantsofourschemewhichonlydifferbytheposi-
tioningoftheauthenticationstags.
In this section we will denote a stream as a set of O
blocks D
(cid:14) (cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:21)(cid:18)(cid:20)(cid:16)
DQ P . Theindividual (cid:11) packetsineachblock
D
"
are identified as (cid:27) R(cid:15)
(cid:16)V (cid:18)
(cid:30)
(cid:16)(cid:13) (cid:18)(cid:21)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16)
(cid:27) R(cid:15)
(cid:16)
(cid:11)(cid:25) (cid:30) . The correspond-
ing authentication tags are identified as
%
R(cid:15)
(cid:16)V (cid:18)
(cid:30)
(cid:16)(cid:19) (cid:18)(cid:20)(cid:18)(cid:20)(cid:18)(cid:21)(cid:16)8 %
R(cid:15)
(cid:16)
(cid:11) (cid:30) .
The packets (cid:27) R(cid:15)
(cid:16)T S
(cid:30) are a combination ofjust two things:
streamdatapacket 1 R(cid:15)
(cid:16)T S
(cid:30) andanauthenticationtag.
ECU:Theunbufferedsenderscheme. Inthisscheme
we use packets in a block D
$ &" (cid:14) )
to piggyback authenti-
cation tags pertaining to block D
"
. The
SV U% W
packet in a
block D
"
isthusdefinedas (cid:27) R(cid:15)
(cid:16)T S
(cid:30)
(cid:8) (cid:10)
1 R(cid:15)
(cid:16)T S
(cid:30)>
%
(cid:19) R(cid:15)
; (cid:18) (cid:16)X S
(cid:30)
(cid:23)
.
Thisrequiresthesendertocreateanextrapaddingdummyblock D
$
P
& (cid:14) )
to allowthe last block DQ P to be authenti-
cated. This scheme has the particularity that it does not
requireanystreamdatapacketbufferingfromthesender,
only the hashes of the packets in the current block need
tobestoredbythesenderwhocanthencomputethenec-
essary authentication tags to be piggybacked in the next
block. Inthissense, thisschemeistrulyanrealtimeau-
thentication scheme. The tradeoffof this construction is
thatthereceiverwillexperiencealatencyoftwoblocksin
the worst casebefore he can authenticate the first packet
inablockshereceived.
This construction creates a dependency between two
consecutiveblocks,thusintheeventofalossthatexceeds
thethreshold (cid:12) andinparticularifawholeblock D
"
islost
thanwewillnotbeabletoauthenticate D
$" (6 (cid:14) )
.
AninterestingaspectoftheECUschemeisthatitalso
gives an extra amount of time for the sender to compute
the signature of a block and the second authentication
code.Recallingline(3)ofthetaggenerationalgorithmwe
have
(cid:10)
.
(cid:8)
.
(cid:23) * (cid:1) 4
(cid:28)
$(cid:14) 6 (cid:19)* )(cid:23)7 (cid:4)(cid:23)/*
(cid:28)2 1 (cid:26)
(cid:7) 3
(cid:19) where
(cid:10)
.
(cid:8)
.
(cid:23)
is
splitin (cid:11) authenticationtags. Accordinglywecanrewrite
(cid:10) . (cid:8) . (cid:23) as (cid:10) (cid:7) 3 (cid:19) (cid:8) . (cid:23) , thus the first
(cid:0) (cid:1)
authentication
tags will contain elements representing
(cid:7)
, then the next
groupof
(cid:0)(cid:3) (cid:2)(cid:4)(cid:5) (cid:2)
tagswillrepresentthesignature
3
andfinally
the last group of tags will represent the (cid:11)
;
(cid:0)
(cid:1)
;
(cid:0)(cid:3) (cid:2)(cid:4)(cid:5) (cid:2)
associatedparities. Consequently,thefirstauthentication
codingoperationonline(1)ofouralgorithmneedstobe
producedbeforesending block D
$ &" (cid:14) )
, however,the sig-
natureonline(2)onlyneedstobecomputedafterthefirst
(cid:0)
(cid:1)
packets of D
$ &" (cid:14) )
and the second code on line (3)
onlyneedstobereadyafterthe
(cid:0) (cid:1)
(cid:28)
(cid:6) (cid:0)(cid:3) (cid:2)(cid:4)(cid:5) (cid:2)
firstpacketsof
D $ &" (cid:14) ) .
EC2: The double buffer scheme. Instead of piggy-
backing tags in the next block, we examine the possi-
bility of piggybacking tags in the previous block. In
other words, the tags of block D
"
are put in packets of
block D
$" (6 (cid:14) )
and packets in a block D
"
are defined as
(cid:27) R(cid:15)
(cid:16)X S
(cid:30)
(cid:8) (cid:10)
1 R(cid:15)
(cid:16)X S
(cid:30)(cid:31)
%
(cid:19) R(cid:15) (cid:28)
(cid:18) (cid:16)T S
(cid:30)
(cid:23)
thenticationlatencyistopiggybackthetagsofablock
.Thisrequiresthesenderto
createanextrapaddingdummyblockatthebeginningof
thedatastream. Themainadvantageofthisconstruction
is that the receivercan authenticate each receivedpacket
immediately upon reception. The main drawbackof this
schemeisthatitrequiresthesendertobuffertwoblocksat
atime.Inthissenseitisnotatrulyrealtimeschemebutin
someapplications,ourdoublebufferingisstillacceptable.
This construction also creates a dependency between
blockssimilartoECU,withsimilarconsequences.
EC1: The single buffered scheme. The most obvious
constructionandperhapstheonethatoffersthebestcom-
promisebetweenthesenderbufferingandthereceiverau-
D
"
in the block D
"
itself. Packets in a block are simply de-
finedas (cid:27) R(cid:15)
(cid:16)X S
(cid:30)
(cid:8) (cid:10)
1 R(cid:15)
(cid:16)T S
(cid:30)(cid:31)
%
D R(cid:15)
(cid:16)X S
(cid:30)
(cid:23)
. Thisschemerequires
thesendertobufferoneblockandaddsamaximumveri-
ficationlatencyofoneblockforthereceiver.
A advantageof this scheme is that it does not create a
dependencybetweenblocks,thusifablocklossespackets
beyond the expected maximum loss rate (cid:12) , the authenti-
cationofneighboringblocksin thestreamremainsunaf-
fected.
3.3 ParameterChoice
Until now we proposed a method which can authenti-
catea blockwhenathresholdoflessthan (cid:12)B (cid:11) packetsare
lost in a block of (cid:11) packets. However we need to relate
theseparameterstoconcreteaveragenetworklosspatterns
and we will now discuss the choice of the two main pa-
rametersofourscheme: (cid:11) theblocksizeand (cid:12) themaxi-
mumlossrateperblock.
The goal of an hybrid scheme is to amortize the cost
of a signature over several packets. Thus the greater the
blocksize,thelessoftenwewillneedtocomputeasigna-
ture. On the other hand the block size influencesthe au-
thenticationlatencyand/orthesenderbuffersize,depend-
ingonwhichschemeischosen. TheEC2has thelowest
possibleauthenticationlatency(1packet)but thebiggest
buffering,whereasECUhasnosender-sidepacketbuffer-
ingbutamaximum2blockauthenticationlatency.Aswe
saidabove,EC1seemstobeagoodcompromiseinmost
situations with both a buffering and a maximum authen-
tication latency of one block. Once a scheme is chosen,
we recommend to choose the largest possible block size
(cid:11) within the constraints of the application authentication
latencyrequirements.
The parameter (cid:12) depends on the loss pattern of our
network. There has been quite a few studies about In-
ternet loss patterns for applications such as Audio Uni-
cast/Multicast [2], Internet Telephony[3], Multicast [32,
33], TCP[20] TCP/UDP[5]. Thesestudiesdifferontheir
analysis andtheir scope, howeverthere is a general con-
sensusamongmoststudiesthat:
1. Packetlossesarenotindependent. Whenapacketis
lost the probability that the next packet will be lost
increases,whichmeansthatlossesintheInternetare
oftenbursty.
2. Howeverthemajority ofburstsaresmall(from1to
6-7packets).
3. There are some very rare long bursts, lasting up to
a few seconds (In [5] the authors suggest that these
burstscouldattributedtonetworkdisruptionormain-
tenance).In this work, we propose to refer to a model often sug-
gested to describe bursty losses in Internet traffic which
is a simple 2 state Markov chain [3, 34] also called the
Gilbertmodel,wherestate0representsapacketreceived
and state 1 a packet lost by the recipient. If (cid:30) denotes
the probability of going from state 0 to state 1 and (cid:0) the
probability of going from state 1 to state 0 we have the
followingtransitionmatrix[11]:
(cid:1) (cid:8)(cid:3) (cid:2) (cid:26)
(cid:18)L ;
(cid:0)
(cid:30)
(cid:26)
(cid:18)L (cid:30) ;
(cid:17)(cid:0) (cid:5) (cid:4)
This model simulateswell the fact that the loss proba-
bilityofpacketincreaseswhenthepreviouspacketislost
( (cid:30)(cid:7) (cid:6) (cid:18)T ; (cid:0) ), ratherthanbeinguncorrelated( (cid:30) (cid:28)(cid:8) (cid:0) (cid:8) (cid:18) ).
Theprobabilitythat (cid:25) consecutivepacketsarelostisequal
to (cid:26) (cid:18) ; (cid:17)(cid:0)
(cid:2) 6 (cid:14)
(cid:0) whichdescribesageometricdistributionof mean (cid:9) (cid:8) (cid:18) J (cid:0) .Accordingto[3],theheadofthedistribu-
tionseemstomodelInternetlosspatternswellwithsome
inaccuracies in the tail. But in any case, if a very long
burstrarelyoccurs,withextremessuchasthosestatedin
point3above,itdoesnotmakesensetoinvestmucheffort
tomakeourschemerobustforthoseburstssincemostthe
datathatneedstobeauthenticatedislikelytobelostitself.
Thelongtermaveragelossrate (cid:10)
(cid:14)
isgivenbysolvingthe equation (cid:26)(cid:11) (cid:10)(cid:13) (cid:12) (cid:16) (cid:10) (cid:14) (cid:18)(cid:1) (cid:8) (cid:26)(cid:11) (cid:10)(cid:14) (cid:12) (cid:16) (cid:10) (cid:14) ,whichyields (cid:10) (cid:14) (cid:8) (cid:6) (cid:6) &(cid:16) (cid:15) .
We further note that Perrig et al.[22] as well as Park et
al.[19]haveusedthismodelintheirownstreamauthen-
ticationschemes.
The strategy we followed in this work was first to
choose (cid:11) , then to simulate a Markov chain over a very
large number of blocks and adjust the parameter (cid:12) such
that most blocks would be verifiable (we chose an arbi-
traryvalueof99%verifiableblocks). TheMarkovchain
parameterswerederivedfrom (cid:9) :theaveragelossrateand
(cid:10)
(cid:14)
: the average burst length. Note that here the number
oflossesinablockof (cid:11) packetscanbesuccessfullymod-
eledas a thenumberofsuccesses intrialsof a Bernoulli
process with parameter (cid:10)
(cid:14)
, which is approached by the
normal distribution. This approximation could also give
ussomeanalyticalresultsbutwefoundthesimulationsto
bemoreinformative.
4 Discussion
4.1 ComputationalCost
Ourschemeinvolves3typesofoperations:
(cid:1)
cryptographichashcomputations.
(cid:1) adigitalsignature.
(cid:1)
2codinganddecodingoperations.
For each block, the source needs to compute (cid:11)
generatethe2codes. Here,thehashingandsigningcosts
areequivalenttootherhybridschemessuchasEMSS[22]
orHashChains[10]. Theamountofcomputationdoneby
the recipientdependsonthelossesinthe network. Inan
ideal situation we just computes
hash op-
erations, a digital signature (which includesa hash), and
(cid:11) hashes and verifies a
signature. If packets are lost some additional decoding
operationswillbeneeded. Thecodesareusedtorecover
hashesofpackets,ratherthenthepacketsthemselves,thus
we willbemanipulatingsmallamountsofdata. Intradi-
tional uses of Erasure Codes, the packets size (cid:17) is typi-
callyoverathousandbytes,whilehere,wearelookingat
figuresrangingfrom (cid:17)
(cid:8)(cid:16) (cid:18)
to (cid:17)
(cid:8)(cid:16) (cid:18)(cid:19) (cid:18)
(cid:17) bytesinthemost
extremecases.
If we take a simple Reed-Solomon Erasure Code[26],
the computational decoding cost is (cid:20) (cid:26) O
(cid:18)
I
(cid:18)
(cid:17) where O
is the numberof original message packets, and I the ad- ditional parities needed (corresponding to the loss) and
(cid:17) the size of a packet. The coding cost is similarly in
(cid:20) (cid:26) O
(cid:18)
(cid:25)
(cid:18)
-(cid:17) where (cid:25) isthenumberofparities.
Fordemandingsituations,wecanturntomoreefficient
codessuchasTornadoCodes[14]. Thesecodesareprob-
abilisticandcomewith whatis calleda slight ‚Äúdecoding
inefficiency‚Äù: (cid:26)
(cid:18)
(cid:28)(cid:22) (cid:21) : O packetsareneededtorecover O
original packets with high probability. These codes use thebinaryXORoperationasabasicoperationasopposed
toGaloisFieldoperationsintheReedSolomoncase,thus
we achieve very efficient coding and decoding times of
(cid:20) (cid:26)# (cid:26)% O (cid:28) (cid:25) ln (cid:26)
(cid:18) J
(cid:21) (cid:23) (cid:17) . Notethattheuseoftornadocodes
wouldthusconductustomodifyourdefinitionsinsection
3 to take thedecoding efficiencyintoaccount. However,
in[6] significantvaluesof (cid:21)(cid:25) (cid:24) (cid:17)
(cid:18)
(cid:17)
(cid:18)
areconsidered,thus
theresultsweproposeinthisworkshouldnotbesignifi-
cantlydifferentwithsuchasmalloverheadincreaseifwe
useTornadoCodes.
Compared to other hybrid real time authentication
streams,themaintradeoffofourschemeisintheisthead-
ditionalcomputationalcostgeneratedbytheerasurecode.
However, since we are operating on small code packet
size,thecostoverablockshouldremainveryreasonable.
We willshowinthenextsectionthatthesubstantialgain
wecanachieveintermsofoverheadperpacketisclearly
worththeextracomputationaleffort.
4.2 Overhead
4.2.1 Evaluation
The overhead in bytes per packet of our 3 schemes is
uniquely defined by the size of an authentication tag.
Thus,recallingProposition2insection3wecanexpress
the overhead as a function
F
(cid:26)(cid:5) (cid:11)
(cid:16)
(cid:15)(cid:12) of the maximum ex-
pected loss rate per block (cid:12) and the number (cid:11) of packets
inablock:F
(cid:26)2 (cid:11)
(cid:16)
(cid:12)
(cid:8) G
4 $(cid:14), 6 (cid:19)*
9
) 7
(cid:28)
(cid:18)L
(cid:26)
(cid:26)2
;
(cid:26) (cid:28)
(cid:12) 8
?0(cid:12)
(cid:11)(cid:25) =
(cid:18)
(cid:11)(cid:25) C
(cid:21)
where G
(cid:6)
(cid:26)% I0 is an integer function which returns the
lowestmultipleof (cid:0) greaterorequalto I .
We would like to emphasize again that this overhead
includesthesignatureoverhead. Table1presentsasam-
pling of
F
(cid:26)(cid:12)
(cid:16)
(cid:19)(cid:11) for different values of (cid:12) and (cid:11) , with
(cid:18)
(cid:4)
(cid:1) (cid:0)
(cid:26)
(cid:8)
bytes(1024bit RSA)and
(cid:21) (cid:8) (cid:18)
(cid:3) (cid:2) (MD5[25]). Note
that
F
(cid:26)2 (cid:11)
(cid:16)
(cid:12) remainssurprisinglysmallifeither (cid:11) largeor
(cid:12) isreasonablylow.
(cid:12) \ (cid:11) 16 32 64 128 256 512 1024
0.05 10 6 4 2 2 2 1
0.10 12 7 5 3 3 3 2
0.25 16 11 8 7 6 6 6
0.50 32 24 20 18 17 17 17
0.75 80 64 56 56 50 49 49
Table 1. Overhead bytes per packets for differ-
entvaluesof (cid:12) and (cid:11)
4.2.2 Casestudies
To be more concrete we applied our scheme to the two
case studies Perrig et al. propose in their work for the
EMSS[22] real time stream authentication scheme. We
recalltheirfirstcasestudy:
A municipality wishes to collect traffic information
from sensors distributedoverthe streets. The system re-
quirementsareasfollows:
(cid:1)
The data rate of the stream is about 10 Kbps, about
20packetsof64byteseacharesenteverysecond.
(cid:1)
The packet drop rate is at most 5% for some recip-
ients, where the average length of burst drops is 5
packets.
(cid:1) The verification latency should be less than 10 sec-
onds.
We propose to use the ECU scheme since the sensors
may have limited memory, thus the verification latency
of 10 seconds allows us to use a block of 100 packets
(200/2 since a block is authenticated by the next one).
Given the drop rate and the average length of bursts, we
constructedacorrespondingtwostateMarkovchainwith
(cid:30)
(cid:8)
(cid:17)
(cid:18)
(cid:17)
(cid:18)
(cid:17)
(cid:18)
(cid:4) (cid:2)
(cid:16)
(cid:0)
(cid:8)
(cid:17)
(cid:18)
(cid:4)
wedecidedtochoose
andsimulateditover10000blocks
of100 packets. ForMarkovchainsimulationtechniques
we referred to H√§ggstr√∂m[13]. We found that 99% of
thoseblocksexperiencedalosslessthan27packets,thus
(cid:12)
(cid:8)
(cid:17)
(cid:18)
(cid:4)
(cid:5) (cid:4)
.Theoverhead1perpacket
isthenonly
F
(cid:26)
(cid:18)
(cid:17) (cid:17)
(cid:16)
(cid:17)
(cid:18)
(cid:4)
(cid:5)
(cid:17)
(cid:4)
(cid:8)
(cid:0)
bytes!
The second casestudy proposed by Perrig etal. is re-
lated to real-time video broadcasting, with the following
requirements:
(cid:1)
The data rate of the stream is about 2Mbps, or 512
packetsof512byteseacheverysecond.
(cid:1)
The packet drop rate is at most 60% for some re-
cipients,withanaveragelengthofburstdropsof10
packets.
(cid:1)
Theverificationlatencyshouldbelessthan1second.
WeproposeagaintheEC1schemeandbecauseofthever-
ification latency, we have to limit (cid:11) to 512 packets. We
simulated the corresponding Markov model over 10000
blocks and found that 99% of those blocks experienced
a loss of less than 375 packets. We decided to choose
(cid:12)
(cid:8)
(cid:17)
(cid:18)
(cid:4)(cid:7) (cid:6)
(cid:8)
(cid:6)(cid:8) (cid:4)
V(cid:18) J (cid:18) (cid:18)
(cid:4) , which gives us an overhead per
packetof
F
(cid:26)
(cid:18) (cid:18)
(cid:4)
(cid:16)
(cid:17)
(cid:18)
(cid:4)(cid:7) (cid:6)
(cid:8)
(cid:10) (cid:9)
(cid:18)
bytes.
loss av. burst (cid:11) (cid:12)
F
(cid:26)A(cid:12)
(cid:16)
‚Äô(cid:11)
rate length
Example1 5% 5 100 0.27 8
Example2 60% 10 512 0.73 45
Example3 10% 3 32 0.47 22
Example4 10% 50 512 0.50 18
Example5 80% 10 200 0.905 160
Example6 5% 5 1024 0.1 2
Table2.Afewcasestudies.
Asacomplementtothetwoproposedscenariosabove,
Table 2 shows a fewof our other simulation results, fol-
lowing the same approach as abovefor different average
burstlosslengthsandlossrates. Example1and2simply
repeat the two case scenarios above. Example 3 shows
that with a small block size, parameter (cid:12) is significantly
higher than the network loss rate. Similarly, an extreme
averageburstlengthincreasesthevalueof (cid:12) asshownin
example4. Finallywehavetwoextremeexamplesofthe
parameters of our scheme: first in a very lossy network
which requires 160 bytes of overhead per packet which
morethanthesizeofapublickeysignature,andtofinish
wehaveanidealcase,withasmalllossandalongblock
sizewhichgivesusasurprisinglylowoverheadperpacket
of2bytes!
4.3 DenialofService
Intheirworkonstreamauthenticationforpre-recorded
streams[15], Miner and Staddon briefly discuss the use
1IfwehadchosentheEC1schemeinstead,wewouldhave
(cid:11)
(cid:20) (cid:13) (cid:12)(cid:15) (cid:14)(cid:15) (cid:14) ,
(cid:16)
(cid:20)
(cid:17) (cid:14)
"
(cid:12) and
(cid:18)
?
(cid:11)
(cid:28)
(cid:16)
BK (cid:20)
(cid:20) (cid:19) .of Erasure Code techniques as an additional robustness
mechanism. Their objective is different from ours here,
since they use Erasure Codes as a mean to ‚Äúreinforce‚Äù
their ‚Äúhash and MAC chain‚Äù rather than as a substitute
aswedo. However,theymakeaninterestingremarkthat
ErasureCodetechniquesmaybevulnerableto‚ÄúDenialof
Service‚Äù since an adversary who modifies the transmit-
tedparitiesmayrendertheauthenticationofthereceived
packets impossible. We observe that this remark is also
valid for our scheme: if a some packets are lost and if
an adversary modifies the tags piggybacked on the data
packetstheverificationprocessmaynotfunctionproperly
if the decoding algorithm requires those parities. In our
scheme,theauthenticationinformationusedforoneblock
is not used to compute the authentication information of
another block, and thus there is no authentication chain
acrossseveralblocks. ThisimpliesthataDoSthataffects
a block in our schemewill notimpactanother block and
willnotdisrupttherestofthecommunicationstream.
Otherstreamauthenticationschemesbasedonachain-
ing mechanism are less vulnerable to this type of DoS
attack. In protocols such as Hash Chains[10] and in
EMSS[22] several signature packets are sent to authen-
ticateablock. Anadversarythusneedstomodifyseveral
more packets than in our scheme to prevent a recipient
fromauthenticatingablock.
Thestreamauthenticationschemesthatarethemostre-
sistant to DoS are the ones that include a signature with
each packet such as [31], [9], [27] and [21]. In those
schemesamodifiedpacketcanbediscardedimmediately
ifthesignatureverificationfails.
5 Comparison
5.1 HashTrees
Wong and Lam[31] proposed the construction of hash
trees,inaschemethatcanauthenticatereceivedpacketin
ablocknomatterhowmanypacketsarelost. Intheirmost
interesting scheme, using a cryptographic hash function
(cid:20) ,theyconstructacompletebalancedbinarytree,where
the leafs are the hashes
(cid:21) "
of the packets (cid:27)
"
in the block
andthe other verticesare hashes of theirtwo childrenas
shownontheexampleonfigure2.
Thesourcecomputesasignatureofthevaluerepresent-
ing the root of the binary tree and sends it to the recipi-
ents.Eachdatapacket (cid:27)
"
isaugmentedwiththeminimum
set K
"
ofcomplementaryvaluesitneedstorecomputethe
valueassociatedtotherootofthetree. Thisset K
"
isthe
set of vertices that are siblings to all the vertices on the
path from
(cid:21) "
to the root of the tree. For example on fig-
ure 2, packet (cid:27)(cid:1) (cid:0) is sent with K(cid:2) (cid:0) (cid:8) (cid:10) (cid:15)(cid:21) (cid:14) (cid:16) (cid:21)(cid:4) (cid:3)(cid:6) (cid:5) (cid:16) (cid:21)(cid:4) (cid:7)(cid:9) (cid:8) (cid:23) and the recipient can verify the signature of the root
(cid:31)(cid:20) (cid:26)2 (cid:31)(cid:20) (cid:26)$ (cid:31)(cid:20) (cid:26) (cid:21) (cid:18) (cid:20) (cid:26)$ (cid:27)(cid:11) (cid:13) (cid:0) # - (cid:21)(cid:4) (cid:3)(cid:6) (cid:5) - (cid:21)(cid:4) (cid:7)(cid:6) (cid:8)
(cid:21) (cid:14) (cid:10) (cid:8) (cid:8)
h18
h14 h58
h12 h34 h56 h78
h1 h2 h3 h4 h5 h6 h7 h8
P1 P2 P3 P4 P5 P6 P7 P8
(a)
Figure2.Authenticationtreeforan8packetblock
packetsto be authenticated independently(and make the
scheme joinable on anypacket), the authors of [31] sug-
gest to append the signature of the root of the tree to
every packet which leads to an overhead per packet of
. To allow the received
(cid:26) (cid:28) (cid:26) ln (cid:0) (cid:26)(cid:5) ‚Äô(cid:11)
; (cid:18) (cid:18)(cid:21)
bytes. Thisschemeshasthusaneven
largeroverheadperpacketthanthe‚Äúsigneach‚Äùapproach,
thoughthesignatureonlyneedstobecomputedoncefor
eachblock. JustlikeEC1(andEC2),theschemerequires
thesendertobufferthewholeblockbeforethefirstpacket
ofthatblockcanbesent.
5.2 HashChains
Based on the observations of Paxson[20] who con-
ductedalargescalesurveyofTCP/IPInternetcommuni-
cationsandwhoshowedthatlossesoftenoccurinbursts,
Golle and Modadugu[10] proposed a stream authentica-
tion mechanisms designed to tolerate the loss of packets
inburstsofatmost
(cid:12)
packetsinablock. Theyconstruct
adirectedacyclicgraphbetweenthepacketsoftheblock,
by putting the cryptographic hash of a packet in one or
several other packets. If a packet (cid:27) is signed then any
packets (cid:27)(cid:3) O forwhichthereexistsapathinthegraphjoin-
ing (cid:27) O to (cid:27) canbeauthenticated.Intheirwork,Golleand
Modaduguproposemethodstodesignsuchacyclicgraphs
in an optimal way regarding bursty packet losses. Their
simplestschemeis constructedasshownonthe example
offigure3:thehashofapacket (cid:27)
"
isstoredbothaspartof
thefollowingpacket (cid:27)
&" (cid:14)
andaspartof (cid:27)
&" (cid:14) & (cid:14) (cid:13)
. Finally
thehashesofthelast (cid:26)
(cid:12)
(cid:28)
(cid:18)
packetsaresent,alongwith
asignatureofthese (cid:26)
(cid:12)
(cid:28)
(cid:18)
hashesforverification.
The same authors furtherrefined their hash chaincon-
struction,tocreate‚ÄúAugmentedChains‚Äù,whichrequireto
buffer a few packets, but allows a smaller set of hashes to be signed at the end. The principle remains the same
and we refer the reader to their work [10] for details. ItP1 P2 P3 P4 P5 P6 P7 P8 P9 P10P11P12P13P14P15P16 Sign
Figure 3. Augmented chain resisting to bursts
of6packetsina16packetblock.
isworthnotingthattheirfirstschemecantolerateseveral burstsinablockwhiletheaugmentedchainconstruction
may have difficulties in some situations if there are sev-
eralburstsinthesameblock,consequentlywewillfocus
ontheirfirstschemeinthiscomparison.
HashChainOverhead: Theauthorsof[10]donotde-
tailhowtochoose
(cid:12)
nordotheyprovideaclearmethodto
deal with signature loss except to suggest the transmis-
sion of several copies of the signature. If these signa-
tures are transmitted far enough apart, we can consider
thattheirlossprobabilitiesareuncorrelated.Ifweassume
that (cid:0) signatures are transmitted, we can approximate
the cost of the hash chain construction as
(cid:0)
$ (cid:13) & (cid:14) )X
(cid:28)
L W &(cid:7) (cid:6)
(cid:28) (cid:4)
(cid:21)
F(cid:2) (cid:1)(cid:4) (cid:3)
(cid:26)(cid:5) (cid:0)
(cid:16)
‚Äô(cid:11)
(cid:8)
bytes per packets, with the notations
already used throughout this work. The size of (cid:11) is es-
sentiallyconstrainedbytheauthenticationlatency,which
hereisatmostthedistancebetweenthefirstpacketofthe
block andthe (cid:0)
U% W
redundantsignaturethat is transmitted
for that block. Since the simple hash chain construction
is not sender side buffered similarly to ECU, the (cid:0) sig-
naturespertainingtoablockaretransmittedafterthelast
packetofthatblock.
RecallingtheMarkovchainmodelofsection3weknow
thattheprobabilitythataburstof (cid:25) lostpacketsoccursis
(cid:0)
(cid:18)
(cid:26) (cid:0)
; (cid:18)
$(cid:2) 6 (cid:14) )
withanaveragelengthof
(cid:18) J
(cid:0) packetsina
burst. Consequently we will choose
(cid:12)
in the hash chain
suchthattheprobabilitythataburstexceeds (cid:12) islow,for examplesuchthat (cid:18)L ;(cid:9) (cid:8)(cid:11) (cid:2)(cid:10)(cid:13) (cid:12) $ (cid:13) & (cid:14) ) %(cid:0) (cid:26) (cid:18) ; (cid:17)(cid:0) (cid:2) (6 (cid:14)(cid:15) (cid:14)(cid:17) (cid:16)(cid:18) (cid:16)(cid:20) (cid:19) . If
werefertothetwocasestudiesweborrowedfromEMSS
insection3,wewouldhave:
(cid:1) Case1: Wepropose (cid:11)
(cid:8)@ (cid:18)
(cid:2) (cid:17) , (cid:0)
(cid:8)
(cid:4) ,
(cid:12) (cid:8)
(cid:4)
(cid:18)
since
(cid:0)
(cid:8)
(cid:17)
(cid:18)
(cid:4) . Wewouldtransmitthefirstsignatureatthe
endoftheblockandthesecondsignature20packets
later(1second). Theprobabilitythatoneofthesig-
naturearrivesisapproximately (cid:18)T ; (cid:17) (cid:18) (cid:17) (cid:18) (cid:0) (cid:8) (cid:17)
(cid:16)(cid:18)
(cid:18)
(cid:16)
(cid:4)
(cid:18)
andtheoverheadperpacketis
F (cid:1)(cid:4) (cid:3)
(cid:26)(cid:5) (cid:0)
(cid:16)
‚Äô(cid:11) (cid:24)
(cid:6)(cid:5) (cid:0)
bytes.
(cid:1) Case 2: This case is more problematic because the
network is extremely lossy and the signature has a
high probability of being lost. Indeed if we take
(cid:0)
(cid:8)
(cid:0) theprobabilitythatoneredundantsignatureat
leastarrivesis
(cid:18) ;
(cid:17)
(cid:18)
(cid:2)
(cid:8)
F(cid:24) (cid:17)
(cid:16)(cid:18) (cid:18) (cid:16)
(ifwetake (cid:0)
(cid:8)
(cid:9) the
signaturearrivalprobabilityisloweredto (cid:17)
(cid:18)
(cid:0)(cid:8) (cid:4)
thismeansthateachblockistransmittedalongwith
4to8signaturesanditbecomesdifficulttodefinea
reasonable size for
). But
(cid:11) (cid:6)
(cid:18) (cid:18)
(cid:4) . If we choose (cid:11) small
thenweneedtocomputeseveralsignaturespersec-
ondandweneedtosendseveralcopiesofeachthem
duringthesametime(withoutaguarantythatlosses
willbeindependent). Ifwechoose (cid:11) largerthenthe
probabilityofauthenticatingapacketwithintheau-
thenticationlatencybecomeslower. Asaindication,
if (cid:11) (cid:8) (cid:4) (cid:18) (cid:7) (cid:2) , (cid:0) (cid:8) (cid:0) , (cid:12) (cid:8) (cid:9) (cid:6) since (cid:0) (cid:8) (cid:17) (cid:18)(cid:19)(cid:18) , we have F(cid:21) (cid:1)(cid:4) (cid:3) (cid:26)(cid:22)(cid:0) (cid:16) (cid:19)(cid:11) (cid:24) (cid:18)
(cid:0)
bytes.
No matter how good the network conditions are and no
matter how long the block size is, the hash chains have
at least an overhead of (cid:4)
(cid:18)(cid:21)
per packets (with perhaps 1
or 2 extra bytes for the signature). Comparatively, our
schemehasclearlyaloweroverheadwhenthenetworkis
nottoolossy,withsuchextremesshownasinExample6
intable2.Formorelossystreams,ourschememaintainsa
highauthenticationprobabilitydespitethelosses,without
encounteringtheproblemswedescribedhereinCase2.
5.3 EMSS
Perrig et al. used a similar hash chain idea in their
EMSS[22] scheme. Their work is targeted at more gen-
eral loss patterns and proposes a method to deal with
signature loss. As opposed to the work of Golle and
Modadugu which uses a deterministic edge relationship
patternamongthepacketsinthechain,theEMSSscheme
uses randomly distributed edges. Moreover, packets are
chainedacrossblocks,thuseventifalltheredundantsig-
natures pertainingto a block are lost the signature in the
nextblockcanbeusedtoauthenticatethedata(extending
theauthenticationlatency). Theyperformedseveralsim-
ulationsinordertotunetherightnumberofhashestoin-
cludeineachpacketdependingonthelosscharacteristics
ofthestream. Thesignatureofablockistransmittedsev-
eraltimestoallowittoreachtherecipientwithhighprob-
ability,dependingonthecharacteristicofthenetwork.
Sinceweborrowedour2testcasesdirectlyfromEMSS,
wecanrecalltheirresultshereasacomparison. Thesim-
ulationsconductedintheEMSSscheme,giveanoverhead
of (cid:4)(cid:7) (cid:4) bytesinthetrafficinformationscenario(withanav-
erageverificationprobabilityperpacketof98,7%)andan
overhead of
(cid:18) (cid:18)
bytes in the video stream scenario (with
aminimumverificationprobabilityof90%). Inthelatter
scenario, the signature of a block alone which is trans-
mitted twice only has an estimated probability of arrival
of (cid:17)
(cid:18)
(cid:2)(cid:1) (cid:9) (cid:24)
(cid:18) ;
(cid:17)
(cid:18)
(cid:2) (cid:0) , but since there is linking between
blocksapacketmaybeverifiedbythesignatureoffuture
blocks, however in this case we understand that the ver-
ification latency limit of a packet will be exceeded. We
wouldalsoliketohighlightthattheirschemeused80bit
key-less hashes while we use 128 bit hashes (MD5). Asimilar value in our scheme would have given an even
lower overhead per packet and also a lower overhead in
theHashChainconstruction.
Despite longer hashes, in both cases, our scheme has
loweroverheadandahigherprobabilityofblockverifica-
tionwithintherequiredmaximumauthenticationlatency.
5.4 SAIDA
Recently, J. Park et al. proposed a stream authen-
ticastion scheme called SAIDA[19] which shares a lot
of similarities with our work. The skeleton of their
scheme is similar to the ECU scheme : they devide the
streamintoblocksandcomputethehashesofeachpacket
in a block, next they use the IDA (information disper-
sion algorithm[24]) to compute authentication informa-
tionwithaddedredundancy.Thisauthenticationinforma-
tionisthenpiggybackedinthenextblock. Providedthat
acertainthresholdof(1-p).boutofbpacketsarerecieved
in a block, the reciepients can recover the hashes of the
packetsandthesignatureofablock.
There is however an important difference with our
scheme: inSAIDA,onlythepiggybackedauthentication
information is used to recover the hashes and the signa-
tureofablock. Inourschemesomehashvaluesarecom-
putedfromtherecievedblocksthemselves.Bydefinition,
this allows our scheme to have a lower communication
overhead per packet than SAIDA. Using the previously
introduced notations in this work, the overhead in bytes
perpacketofSAIDAcanbecomputedas
(cid:0)
R $(cid:14)4 ,(cid:1)(cid:3)(cid:2)(cid:5)
(cid:4)(cid:7) (cid:6)(cid:9)
(cid:19)*6
(cid:8)(cid:11)(cid:10)(cid:13) (cid:12)
$(cid:6)
)
(cid:28)
&
7 (cid:28) W
)
versus
(cid:0)
R (cid:1)(cid:14)(cid:2)(cid:5) (cid:4)(cid:7) $(cid:14)4 6 (cid:6)(cid:9) (cid:8)(cid:11)(cid:10)(cid:15)(cid:12)
$(cid:6)
(cid:19)*
&L
)
(cid:28)
M/0*
7
L
(cid:28)$ 1 W
)
References
[1] M.BellareandP.Rogaway. Optimalasymmetricencryp-
tion.InA.D.Santis,editor,AdvancesinCryptology-Eu-
roCrypt‚Äô94,pages92‚Äì111,Berlin,1995.Springer-Verlag.
LectureNotesinComputerScienceVolume950.
[2] J. Bolot and H. Cr√©pin. Analysis and control of audio
packetlossoverpacket-switchednetworks. Technicalre-
port,INRIA,1993.
[3] J.-C.Bolot,S.Fosse-Parisis,andD.F.Towsley. Adaptive
FEC-basederrorcontrolforinternettelephony. InINFO-
COM(3),pages1453‚Äì1460,1999.
[4] D.Boneh,G.Durfee,andM.Franklin. Lowerboundsfor
multicastmessageauthentication. InTheoryandApplica-
tionofCryptographicTechniques,pages437‚Äì452,2001.
[5] M. Borella, D. Swider, S. Uludag, and G. Brewster. In-
ternetpacketloss:Measurementandimplicationsforend-
to-endQoS. InInternationalConferenceonParallelPro-
cessing,Aug.1998.
[6] J. Byers, M. Luby, M. Mitzenmacher, and A. Rege. A
digital fountain approach to reliable distribution of bulk
data. InproceedingsofACMSIGCOMM‚Äô98,September
1998.
[7] R.Canetti,J.Garay,G.Itkis,D.Micciancio,M.Naor,and
B.Pinkas. Multicastsecurity: Ataxonomyandsomeef-
ficient constructions.InProceedingsofIEEEInfocom‚Äô99,
1999.
[8] S.E.Deering. RFC1112: HostextensionsforIPmulti-
casting,Aug1989.
[9] R.GennaroandP.Rohatgi.Howtosigndigitalstreams.In
B.S.K.Jr.,editor,AdvancesinCryptology-Proceedings
of CRYPTO97, volume 1294 of Lecture Notes in Com-
puterScience,pages180‚Äì197,SantaBarbara,California,
USA,August1997.SpringerVerlag.
[10] P.GolleandN.Modadugo.Streamedauthenticationinthe
presence of random packet loss. In to appear in NDSS inourscheme. Thisadvantage
2001.,2001.
canbeattributedtotheuseofatwolevelerasurecodein
[11] C.M.GrinsteadandJ.L.Snell. IntroductiontoProbabil-
ourscheme,whereSAIDAusesonlyasingleredundancy
ity. McGrawHill,2000.
code. [12] T.HardjonoandG.Tsudik. IPmulticastsecurity: Issues
and directions. Annales des Telecommunications, to ap-
pearin2000.
Conclusion [13] O.H√§ggstr√∂m.FiniteMarkovChainsandAlgorithmicAp-
plications. Cambridge,June2002.
[14] M. Luby, M. Mitzenmacher, M. A. Shokrollahi, D. A.
In this work we propose a new approach to real time
Spielman,andV.Stemann. Practicalloss-resilientcodes.
lossy stream authentication, which is joinable on block
InACMSymposiumonTheoryofComputing,pages150‚Äì
boundaries. Though the general idea of using erasure
159,1997.
codesinanauthenticationschemeisnotcompletelynew [15] S. Miner and J. Staddon. Graph-basedauthentication of
initself,webelievethatourschemeusestheminaquite digitalstreams.In2001IEEESymposiumonSecurityand
novelway. Where previousproposals usedhash linking, Privacy,May2001.
we use erasure codes to achieve a lower communication [16] S. Mittra. Iolus: A framework for scalable secure mul-
overhead per packet. Moreover, we propose a concrete ticasting. In Proceedings of the ACM SIGCOMM‚Äô97
(September14-18,1997,Cannes,France),1997.
mechanismdescribinghowtotransmittheauthentication
[17] National Institute of Standards and Technology. Secure
information as well as the digital signature associated to
hashstandard,1995.
a block with equivalent recovery probabilities. We pro-
[18] J.Nonnenmacher,E.W.Biersack,andD.Towsley.Parity-
posed buffered and unbuffered variations of our scheme based loss recovery for reliable multicast transmission.
which offer an interesting alternative to other real time IEEE/ACM Transactions on Networking, 6(4):349‚Äì361,
streamauthenticationmechanismsinmanysituations. 1998.[19] J. M. Park, E. K. P. Chong, and H. J. Siegel. Efficient
multicastpacketauthenticationusingsignatureamortiza-
tion. In2002IEEESymposiumonSecurityandPrivacy,
Berkeley,California,May2002.
[20] V. Paxson. End-to-end internet packet dynamics.
IEEE/ACM Transactions on Networking, 7(3):277‚Äì292,
1999.
[21] A.Perrig. TheBiBaone-timesignatureandbroadcastau-
thentication protocol. In ACMConference on Computer
andCommunicationsSecurity,pages28‚Äì37,2001.
[22] A.Perrig,R.Canetti,J.Tygar,andD.Song. Efficient au-
thentication and signing of multicast streams over lossy
channels. In IEEESymposium on Security and Privacy,
May2000.
[23] A.Perrig,D.Song,andD.Tygar.ELK,anewprotocolfor
efficient large-groupkeydistribution.InIEEESymposium
onSecurityandPrivacy,May2001.
[24] M.O.Rabin. Efficient dispersalofinformationforsecu-
rity, load balancing, and fault tolerance. Journal of the
ACM,36(2):335‚Äì348,1989.
[25] R. Rivest. The MD5 message-digest algorithm, April
1992.
[26] L. Rizzo. Effective erasure codes for reliable computer
communicationprotocols. ACMCCR:ComputerCommu-
nicationReview,27,1997.
[27] P.Rohatgi. Acompactandfasthybridsignaturescheme
formulticastpacketauthentication. InProceedingsofthe
6th ACM conference on Computer and Communications
Security, pages93‚Äì100, Singapore, November1999.As-
sociationforComputingMachinery.
[28] RSASecurityInc.PKCS-1v2.1:RSAcryptographystan-
dard,1999.
[29] D.Song,J.D.Tygar,andD.Zuckerman.Expandergraphs
for digital stream authentication and robust overlay net-
works.In2002IEEESymposiumonSecurityandPrivacy,
Berkeley,California,May2002.
[30] C. K. Wong, M. Gouda, and S. S. Lam. Secure group
communications using key graphs. In ACM SIGCOMM
1998,pages68‚Äì79,1998.
[31] C. K.Wongand S. S.Lam. Digital signaturesforflows
andmulticasts. IEEE/ACMTransactionsonNetworking,
7(4):502‚Äì513,1999.
[32] M.Yajnick,J.Kurose, andD.Tosley. Packetlosscorre-
lationintheMbonemulticastnetwork. TechnicalReport
96-32.,UMCASSCMPSCI,1996.
[33] M.Yajnick,J.Kurose, andD.Tosley. Packetlosscorre-
lation in the mbone multicast network. In IEEE Global
InternetConference,London,Nov.1996.
[34] M.Yajnik,S.Moon,J.Kurose,andD.Towsley. Measure-
mentandmodelingofthetemporaldependenceinpacket
loss. InIEEEINFOCOM,NewYork,Mar.1999.