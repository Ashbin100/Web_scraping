A Virtual Machine Introspection Based Architecture for Intrusion Detection
TalGarfinkel Mendel Rosenblum
(cid:0) talg,mendel
(cid:1)
@cs.stanford.edu
ComputerScienceDepartment,StanfordUniversity
Abstract creasing the risk of having an incorrect view of system
state, and reducing the number of unmonitored avenues
of attack. On the other hand, increasing the visibility of
Today’s architectures for intrusion detection force the thetargetsystem totheIDSfrequentlycomesatthecost
IDS designer to make a difficult choice. If the IDS re- of weaker isolation between the IDS and attacker. This
sidesonthehost,ithasanexcellentviewofwhatishap- increasesthe riskofa directattackontheIDS. Nowhere
peninginthathost’ssoftware,butishighlysusceptibleto is this trade-off more evident than when comparing the
attack. On the other hand, if the IDS resides in the net- dominantIDSarchitectures: network-basedintrusionde-
work,itismoreresistanttoattack,buthasapoorviewof tection systems (NIDS) that offer high attack resistance
whatishappeninginsidethehost,makingitmoresuscep- atthecostofvisibility,andhost-basedintrusiondetection
tibletoevasion. Inthispaperwepresentanarchitecture systems (HIDS) that offerhigh visibility but sacrifice at-
thatretainsthevisibilityofahost-basedIDS,butpullsthe tackresistance.
IDS outside of the host for greater attack resistance. We Inthispaperwepresentanewarchitectureforbuilding
achievethisthroughtheuseofavirtualmachinemonitor. intrusion detection systems that provides good visibility
UsingthisapproachallowsustoisolatetheIDSfromthe into the stateof themonitored host, while still providing
monitoredhostbut still retainexcellent visibilityinto the strongisolationfortheIDS,thuslendingsignificantresis-
host’s state. The VMM also offers us the unique ability tancetobothevasionandattack.
tocompletelymediateinteractionsbetweenthehostsoft- Our approach leverages virtual machine monitor
wareandtheunderlyinghardware. Wepresentadetailed (VMM) technology. This mechanism allows us to pull
studyofourarchitecture,includingLivewire,aprototype ourIDS“outside”ofthehostitismonitoring,intoacom-
implementation. We demonstrateLivewirebyimplement- pletelydifferenthardwareprotectiondomain,providinga
ingasuiteofsimpleintrusiondetectionpoliciesandusing high-confidencebarrierbetweentheIDSandanattacker’s
themtodetectrealattacks. malicious code. The VMM also provides the ability to
directlyinspectthehardwarestateofthevirtualmachine
that a monitored host is running on. Consequently, we
canretainthevisibilitybenefitsprovidedbyahost-based
1 Introduction
intrusion detection system. Finally, the VMM provides
theabilitytointerposeatthearchitectureinterfaceofthe
Widespread study and deployment of intrusion detec-
monitored host, yielding even better visibility than nor-
tion systems has led to the development of increasingly
malOS-levelmechanismsbyenablingmonitoringofboth
sophisticatedapproachestodefeatingthem. Intrusionde-
hardwareandsoftwarelevelevents. Thisabilityto inter-
tectionsystemsaredefeatedeitherthroughattackoreva-
poseatthehardwareinterfacealsoallowsustomediatein-
sion. EvadinganIDSisachievedbydisguisingmalicious
teractionsbetweenthehardwareandthehostsoftware,al-
activitysothattheIDSfailstorecognizeit,whileattack-
lowingtoustoperformbothintrusiondetectionandhard-
ing an IDS involves tampering with the IDS or compo-
ware access control. As we will discuss later, this addi-
nentsittruststopreventitfromdetectingorreportingma-
tionalcontroloverthehardwarelendsoursystemfurther
liciousactivity.
attackresistance.
Counteringthesetwoapproachestodefeatingintrusion
An IDS running outside of a virtual machine only
detectionhasproducedconflictingrequirements. Onone
has accessto hardware-levelstate (e.g. physicalmemory
hand, directly inspecting the state of monitored systems
pagesandregisters)andevents(e.g.interruptsandmem-
provides better visibility. Visibility makes evasion more
oryaccesses),generallynotthelevelofabstractionwhere
difficultbyincreasingtherangeofanalyzableevents,de-we want to reason about IDS policies. We address this tegritychecking[22]andlogfileanalysis,totheesoteric
problem by using our knowledge of the operating sys- methodsemployedbycommercialanti-virustools.
temstructuresinsidethevirtualmachinetointerpretthese AVMIIDSdirectlyobserveshardwarestateandevents
eventsinOS-levelsemantics. Thisallowsustowriteour andusesthisinformationtoextrapolatethesoftwarestate
IDSpoliciesashigh-levelstatementsaboutentitiesinthe of the host. This offers visibility comparable to that of-
OS,andthusretainthesimplicityofanormalHIDSpolicy fered by an HIDS. Directly observing hardwarestate of-
model. fers a more robustviewof the system than that obtained
We call this approach of inspecting a virtual machine byanHIDS,whichtraditionallyreliesontheintegrityof
fromtheoutsideforthepurposeofanalyzingthesoftware theoperatingsystem.Thisviewfrombelowprovidedbya
runninginsideitvirtualmachineintrospection(VMI).In VMI-basedIDSallowsittomaintainsomevisibilityeven
this paper we will provide a detailed examination of a inthefaceofOScompromise.
VMI-basedarchitectureforintrusiondetection.Akeypart Network-basedintrusiondetectionsystemsoffersignif-
ofourdiscussionisthepresentationofLivewire,aproto- icantly poorer visibility. They cannot monitor internal
type VMI-based intrusion detection system that we have hoststateorevents,alltheinformationtheyhavemustbe
builtandevaluatedagainstavarietyofrealworldattacks. gleanedfromnetworktraffictoandfromthehost.Limited
Using Livewire, we demonstrate that this architecture is visibility gives the attacker more room to maneuverout-
apracticalandeffectivemeansofimplementingintrusion sidetheviewoftheIDS.Anattackercanalsopurposefully
detectionpolicies. craft their network trafficto make it difficult or impossi-
InSection2wemotivateourworkwithacomparisonof bletoinferitsimpactonahost[35]. TheNIDShasinits
its strengths and weaknesses to other intrusion detection favorthat,likeaVMI-basedIDS,itretainsvisibilityeven
architectures. Section 3 discusses virtual machine moni- ifthehosthasbeencompromised.
tors, how they work, their security, and the criteria they VMIandnetwork-basedintrusiondetectionsystemsare
mustfulfillinordertosupportourVMIIDSarchitecture. stronglyisolatedfromthehosttheyaremonitoring. This
Section 4 describes our architecture for a VMI-based in- gives them a high degree of attack resistance and allows
trusion detection systems and the design of Livewire, a them to continue observing and reporting with integrity
prototype VMI-based IDS that implements this architec- even if the host has been corrupted. This property has
ture.Section5describestheimplementationofourproto- tremendous value for forensics and secure logging [10].
type,whileSection6describessampleintrusiondetection In contrast, a host-basedIDS will often be compromised
policies we implemented with our prototype. Section 7 alongwiththehostOSbecauseofthelackofisolationbe-
describes our results applying Livewire and our sample tweenthetwo.OncetheHIDSiscompromised,itiseasily
policies to detecting a selection of real world attacks. In blinded and may even start to report misleading data, or
section8weexploresomepotentialattacksonourarchi- providetheadversarywithaccesstoadditionalresources
tecture,andinSection9wediscusssomerelatedworknot toleveragefortheirattack.
touchedonearlierinthepaper. Wepresentdirectionsfor Host-basedintrusiondetectiontoolsfrequentlyoperate
futureworkin10.Section11presentsourconclusions. atuserlevel.Thesesystemsarequitesusceptibletoattack
through a variety of techniques [18, 2] once an attacker
2 Motivation has gained privilegedaccess to a system. Some systems
have sought to make user-level IDSes more attack resis-
Intrusiondetectionsystemsattempttodetectandreport
tant through “stealth,” i.e. by hiding the IDS using tech-
whethera hosthasbeencompromisedbymonitoringthe
niquessimilartothoseusedbyattackerstohidetheirex-
host’s observable properties, such as internal state, state
ploits,suchashidingIDSprocessesbymodifyingkernel
transitions(events),andI/Oactivity. Anarchitecturethat
structuresandmaskingthepresenceofIDSfilesthrough
allows more properties to be observed offers better visi-
the use of steganography and encryption [36]. Current
bilitytotheIDS.ThisallowsanIDS’spolicytoconsider
systems that rely on these techniques can be easily de-
moreaspectsofnormativehostbehavior,makingitmore
feated.
difficult for a malicious party to mimic normal host be-
Some intrusion detection tools have addressed this
haviorandevadetheIDS.
problem by movingthe IDS into the kernel [54, 47, 24].
A host-based intrusion detection system offers a high
Thisapproachofferssomeresilienceinthefaceofacom-
degree of visibility as it is integrated into the host it is
promise, but is not a panacea. Many OSes offer inter-
monitoring,eitherasanapplication,oraspartoftheOS.
facesfordirectkernelmemoryaccessfromuserlevel. If
The excellent visibility afforded by host-based architec-
these interfaces are not disabled, kernel code is no safer
tures has led to the developmentof a varietyof effective
from tampering by a privileged user than normal user-
techniquesfordetectingtheinfluenceofanattacker,from
levelcode. OnLinuxsystems,forexample,usercodecan
complexsystemcalltraceanalysis[19,26,50,52],toin-modifythe kernel throughloadable kernelmodules [34], 3.1 VirtualMachineMonitors
/dev/kmem,[42,40]anddirectwritesfromI/Odevices.
A virtual machine monitor (VMM) is a thin layer of
Disabling these interfaces results in a loss of functional-
softwarethatrunsdirectlyonthehardwareofamachine.
ity, such as the inability to run programs, such as X11,
The VMM exports a virtual machine abstraction (VM)
thatrelyonthem. Wemustalsocontendwiththeissueof
thatresemblestheunderlyinghardware. Thisabstraction
exploitablebugsintheOS,aseriousprobleminourworld
modelsthehardwarecloselyenoughthatsoftwarewhich
ofcomplexoperatingsystemswritteninunsafelanguages,
wouldrunontheunderlyinghardwarecanalsoberunina
where new buffer overflowsare discoveredwith disturb-
virtualmachine.VMMsvirtualizeallhardwareresources,
ingfrequency.
allowingmultiplevirtualmachinestotransparentlymulti-
Inahost-basedIDS,anIDScrashwillgenerallycause
plex the resources of the physical machine[16]. The op-
thesystemtofailopen.Inauser-levelIDSitisimpossible
eratingsystemrunninginsideofaVMistraditionallyre-
for all system activity to be suspended if the IDS does
ferredtoastheguestOS,andapplicationsrunningonthe
crash,sincetheitreliesontheoperatingsystemtoresume
guestOSaresimilarlyreferredtoasguestapplications.
its operation. If the IDS is only monitoring a particular
Traditionally,theVMMistheonlyprivilegedcoderun-
application,itmaybepossibletosuspendthatapplication
ning on the system. It is essentially a small operating
while the IDS is restarted. A critical fault in a kernel-
system. This style of VMM has been a standard part of
based IDS will often similarly fail open. Since the IDS
mainframecomputersfor30years,andrecentlyhasfound
runsinthesamefaultdomainastherestofthekernel,this
its way onto commodity x86 PCs. Hosted VMMs like
will often cause the entire system to crash or allow the
VMware[49,45]haveemergedthatrunaVMMconcur-
attackertocompromisethekernel[46].
rently with a commodity “host OS” such as Windowsor
Unfortunately, when NIDSes do fall prey to an attack
Linux. Inthissetting,thevirtualmachineappearsassim-
theyoftenfailopenaswell. Consideramalfunctioninan
plyanotherprogramrunningonthehostoperatingsystem.
NIDSthatcausestheIDStocrashorbecomeoverloaded
Despite a radical difference from the users perspective,
due to a large volume of traffic. This will virtually al-
traditional andhostedVMMs differlittlein implementa-
wayscausethesystemtofailopenuntilsuchtimeasthe
tion.InahostedarchitecturetheVMMmerelyleveragesa
NIDS restarts [35]. Failing closed in an NIDS is often
third-partyhostOStoprovidedrivers,bootstrappingcode,
notanoptionasthenetworkconnectionbeingmonitored
andotherfunctionalitycommontoVMMsandtraditional
is often shared among many hosts, and thus suspending
operating systems, instead of being forced to implement
connectivity while the IDS restarted would amount to a
allofitsfunctionalityfromscratch.
considerabledenial-of-servicerisk.
VMMs have traditionally been used for logical server
InaVMI-basedIDSthehostcanbetriviallysuspended
partitioning, and are supported for a wide range of
whiletheIDSrestartsincaseofafault,providinganeasy
architectures; for example, the IBM xSeries (x86
model for fail-safe fault recovery. In addition, because
servers), pSeries (Unix), zSeries (mainframes), and iS-
a VMI IDS offers complete mediation of access to hard-
eries (AS/400) all have VMMs available. Recently, as
ware,itcanmaintaintheconstraintsimposedbytheoper-
hosted VMMs have appeared on the desktop, they have
atingsystemonhardwareaccesseveniftheOShasbeen
beguntofindotherapplicationssuchascross-platformde-
compromised,e.g.bydisallowingthenetworkcardtobe
velopmentandtesting.
placedintopromiscuousmode.
3.2 VMMImplementation
Although the specifics of a VMM’s implementation
3 VMMsand VMI are architecture-dependent, VMMs tend to rely on simi-
lar implementation techniques. Among these techniques
is configuring the real machine so that virtual machines
The mechanism that facilitates the construction of a cansafelyanddirectlyexecuteusingthemachine’sCPU
VMIIDSisthevirtualmachinemonitor,thesoftwarere- and memory. By doing this, VMMs can efficiently run
sponsibleforvirtualizingthehardwareofa singlephysi- software in the virtual machines at speeds close to that
calmachineandpartitioningitintologicallyseparatevir- achieved by running them on the bare hardware [45].
tualmachines. Inthissection,wediscussvirtualmachine VMMscanalsofullyisolatethesoftwarerunninginavir-
monitors, what they do, how they are implemented and tual machine from other virtual machines, and from the
theirlevelofassurance.Wewillalsodiscusstheessential virtualmachinemonitor.
capabilitiesthataVMMmustprovideinordertosupport A common way to virtualize the CPU is to run the
our VMI IDS architecture: isolation, inspection, and in- VMMinthemostprivilegedmodeoftheprocessor,while
terposition. running virtual machines in less privileged modes. Alltraps andinterrupts that occur while a virtualmachine is a filesystemandnetworkstackismisleading,sincethese
runningtransfercontroltotheVMM.Attemptsbythevir- facilities must ultimately be available to perform admin-
tualmachinestoaccessprivilegedoperationstrapintothe istrativefunctionssuchasloggingandremoteadministra-
VMM; the VMM emulates privileged operations for the tion. However,thisoverlooksthefactthattheseactivities
VM.Inthisarchitecture,theVMMcanalwayscontrolthe are not part of the core VMM, but run in a completely
virtualmachineregardlessofwhatthesoftwareinthevir- differentprotectiondomain,typicallyinanadministrative
tualmachinedoes. VM that is strongly isolated both from other VM’s and
Memory is commonly virtualized by keeping a virtual fromthesecurekerneloftheVMM.Whilethereisarisk
MMU for each virtual machine that reflects the VM’s thatthisadministrativeVM(s)couldbecompromised,the
view of its address space. The VMM retains control of compartmentalization provided by a VMM does a great
therealMMU,andmapseachVM’sphysicalmemoryin dealtolimittheextentofacompromise.
suchawaythatVMsdonotsharephysicalmemorywith The small size andcritical functionality of VMMshas
eachother,orwiththeVMM.Throughthistechniquethe ledtoasignificantinvestmentintheirtesting,validation,
VMM is able to create the illusion that each VM has its etc. Notableprojectsthathavemadestrongclaimsforthe
ownaddressspacethatitfullycontrols. Thisalsoallows security ofVMMsinclude the Vaxsecuritymonitor[21]
the VMM to isolate the VMs from one another and pre- and the NSA with their Nettop [29] system. Nettop also
ventsthemfromaccessingthememoryoftheVMM. relies onVMware Workstation for its VMM. Ultimately,
In addition to virtualizing the CPU and memory, the sinceVMwareisaclosed-sourceproduct,itisimpossible
VMM intercepts all input/output requests from VMs to toverifythisclaimthroughopenreview.
virtualdevicesandmapsthemtothecorrectphysicalI/O
device. Formemory-mappedI/O, the VMM only allows 3.4 LeveragingtheVMM
avirtualmachinetoseeandaccesstheparticularI/Ode-
OurVMIIDSleveragesthreepropertiesofVMMs:
vicesitispermittedtouse.
Isolation Software running in a virtual machine cannot
3.3 VMMAssurance
access or modifythe software running in the VMM
Our argument for the security of a VMI IDS rests on or in a separate VM. Isolation ensures that even if
theassumptionthata VMMisdifficultforanattackerto an intruder has completely subverted the monitored
compromise. We base this assumption on the claim that host,hestillcannottamperwiththeIDS.
a VMM is a simple-enough mechanism that we can rea-
Inspection TheVMMhasaccesstoallthestateofavir-
sonably hope to implement it correctly. We have several
tualmachine: CPUstate(e.g.registers),allmemory,
reasons for this claim. First, the interface to a VMM is
andallI/Odevicestatesuchasthecontentsofstorage
significantlysimpler,moreconstrainedandwellspecified
devices and register state of I/O controllers. Being
than that of a typically modern operating system. While
able todirectlyinspectthe virtualmachinemakesit
the VMM is responsible for virtualizing all of the archi-
particularlydifficulttoevadeaVMIIDSsincethere
tecture,manyportions,suchasvirtualizationoftheCPU,
isnostateinthemonitoredsystemthattheIDScan-
requirelittleparticipationonthe partofthe VMM,since
notsee.
mostinstructionsareunprivileged.Second,theprotection
model of a VMM is significantly simpler than that of a
Interposition Fundamentally, VMMs need to interpose
modern operating system. Everything inside the VMM
oncertainvirtualmachineoperations(e.g.executing
iscompletelyunprivilegedwithrespecttotheVMM,and
privileged instructions). A VMI IDS can leverage
theVMMhasonlytoprovideisolation,withnoconcerns
this functionality for its own purposes. For exam-
about providing controlled sharing. Finally, although a
ple, with onlyminimalmodificationto theVMM, a
VMM is an operating system, it is significantly simpler
VMI IDS can be notified if the code running in the
than standard modern operating systems. VMM’s such
VMattemptstomodifyagivenregister.
asDisco[5]andDenali[53],whichhavebothvirtualized
verycomplexarchitectures,havebeenbuiltinontheorder VMMs offer other properties that are quite useful in a
of30Klinesofcode. Thissimplicityisattributabletothe VMI IDS. For example, VMMs completely encapsulate
lackofafilesystem,networkstack,andoften,evenafull thestateofavirtualmachineinsoftware. Thisallowsus
fledgedvirtualmemorysystem.1 Somewillpointoutthat to easilytake acheckpointofthevirtualmachine. Using
the smallsizeand simplicityof a VMM doto its lackof this capability we can compare the state of a VM under
observation to a suspended VM in a known good state,
1ThisalsoappliestohostedVMMsascomponentssuchasthenet-
easilyperformanalysisoff-line,orcapturetheentirestate
workstackswillnotbeutilized,andneednotevenbeincludedinthe
hostOS. ofacompromisedmachineforforensicpurposes.4 Design
InthissectionwepresentanarchitectureforaVMIIDS
system (shown in Fig. 1). First, we present the threat
model. Next, we discuss the major components of our
architecture and the design issues associated with these
components. In the next section we will delve into the
particularsofLivewire,aprototypeVMIIDSsystemthat
implementsthisarchitecture.
4.1 ThreatModel
Ideally, the guest OS will not be compromised, as we
make some assumptions about the structure of the guest
OSkernelinordertoinferitsstate.IftheguestOSiscom-
promisedthismayresultinsomelossofvisibilityassum-
ingtheattackermodifiestheguestOSinawaythatmis-
leadstheVMIIDSaboutthetruestateofthehost. How-
ever,eveninthiscasesomevisibilitywillbemaintained,
andtheVMIIDSwillstillbeabletoperformchecksthat
makefewerassumptionsaboutmemorystructure(suchas
naivesignaturescans)aswellasmaintainingaccesscon-
trolsondevices,sensitivememoryareas,etc.
We assume that the code running inside a monitored
host may be totally malicious. We believe this model is
quitetimelyasattackersareincreasinglymaskingtheirac-
tivitiesandsubvertingintrusiondetectionsystemsthrough
tampering with the OS kernel [18], shared libraries, and
applications that are used to report and audit system
state[23](e.g.tripwire,netstat). Wecanonlyas-
sume that if VMI-based IDSes sees wide spread deploy-
ment attackers will attempt to develop similar counter-
measures.
All information that the IDS obtains from the moni-
toredhostmustbeconsidered“tainted,”thatis,containing
potentiallymisleadingorevendamagingdata(e.g.incor-
rectlyformatteddatathatcouldinduceabufferoverflow).
The VMI IDS may makeassumptions about the struc-
tureoftheguestOSinordertoimplementsomeIDSpoli-
cies.ThisrelianceshouldonlyimplythatifOSstructures
aremaliciouslymodified,itmaybepossibletoevadepoli-
ciesthat relyuponthose structures,but shouldnot affect
thesecurityoftheIDSinanyotherway.
4.2 TheVirtualMachineMonitor
As explained in section 3, the VMM virtualizes the
hardwareit runs on and providesthe essential properties
ofisolation,inspection,andinterposition.VMMsprovide
isolationbydefault;however,providinginspectionandin-
terpositionfora VMIIDS requiressomemodificationof
theVMM.Whenaddingthesecapabilitiestherearesome
importantdesigntrade-offstoconsider:
(cid:0)
quired to the VMM in order to support a VMI IDS.
Implementation bugs in the VMM can compromise
its ability to provide secure isolation, and modify-
ing the VMM presents the risk of introducing bugs.
However,addingfunctionalitytotheVMMcanpro-
vide significant benefits for the VMI IDS system as
well. TheabilitytoefficientlyinterposeontheMMU
and CPU can allow the VMI IDS to monitor events
thatwouldotherwisebeinaccessible. Inconfronting
this issue in our prototype system, we provided ad-
ditional functionality by leveraging existing VMM
mechanisms. This strategy allowed us to expose a
great deal of functionality to the VMI IDS, while
minimizingchangestotheVMM.
AddingVMIfunctionalityvs.MaintainingVMMsim-
plicity. We would like to minimize the changes re-
(cid:0)
Expressiveness vs. Efficiency. A VMM can allow a
VMIIDStomonitormanytypesofmachineevents.
Some types of events can be monitored with little
or no overhead, while others can exact a signifi-
cantperformancepenalty. Accessinghardwarestate
typically does not incur any performancepenalty in
the VMM, so efficiently providing this functional-
ity is purely a matter of making state available to
the IDS with minimal copying. Trapping hardware
events, such as interrupts and memory accesses can
be quite costly because of their frequency. In our
prototypesystemwesoughttomanagethisoverhead
by only trapping events that would imply definite
misuse (e.g. modification of sensitive memory that
should never change at runtime). The overhead in-
curredformonitoringaparticulartypeofeventheav-
ilydependsontheparticularVMMoneisusing.
A final issue to consider is VMM exposure. TheVMI
IDS has greater access to the VMM than the code run-
ninginamonitoredVM.However,sincewegranttheIDS
access to the internal state of the VM we are potentially
exposingtheIDS,andbytransitivitytheVMMtoattack.
Forthisreason,itisimportanttominimizetheVMM’sex-
posuretotheIDS.Forexample,communicatingwiththe
VMMthroughanIPCmechanismshouldbepreferredto
exportinginternalhooksintheVMMandloadingtheIDS
asasharedlibrary. ByisolatingtheIDSfromtheVMM,
we reduce the risk of an IDS compromise leading to a
compromiseoftheVMM.CompromisingtheIDSshould
atworstconstituteadenial-of-serviceattackonthemon-
itored VM.AcompromiseoftheVMM isa catastrophic
failureinaVMIIDSarchitecture.
4.2.1 TheVMMInterface
The VMM must providean interfacefor communication
withtheVMIIDS.TheVMIIDScansendcommandsto
theVMMoverthisinterface,andtheVMMwillreplyin
turn. Inourarchitecture,commandsareofthreetypes:Policy Framework
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:5)(cid:1)(cid:6)(cid:1)
(cid:3)(cid:1)(cid:5)(cid:4)(cid:1)(cid:6)
(cid:3)(cid:1)(cid:5)(cid:4)(cid:1)(cid:6)
(cid:3)(cid:1)(cid:5)(cid:4)(cid:1)(cid:6)
(cid:3)(cid:1)(cid:5)(cid:4)(cid:1)(cid:6)
(cid:3)(cid:1)(cid:5)(cid:4)(cid:1)(cid:6)
(cid:3)(cid:1)(cid:5)(cid:4)(cid:1)(cid:6)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)
(cid:0)(cid:1)
(cid:0)(cid:1)
(cid:0)(cid:1)
(cid:0)(cid:1)
(cid:0)(cid:1)
(cid:0)(cid:1)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)
(cid:0)(cid:2)
(cid:0)(cid:2)
(cid:0)(cid:2)
(cid:0)(cid:2)
(cid:0)(cid:2)
(cid:0)(cid:2)
IDS
Policy Engine
Policy Modules
Monitored Host
Config File
Command Guest Apps
Guest OS Query Response
Guest OS
Metadata
OS Interface Library
Virtual Machine
callback or
Hardware State Response
Virtual Machine Monitor
Figure 1. A High-Level View of our VMI-Based IDS Architecture: On the right is the virtual machine (VM) that
runs the host being monitored. On the left is the VMI-based IDS with its major components: the OS interface
librarythatprovidesanOS-levelviewoftheVMbyinterpretingthehardwarestateexportedbytheVMM,thepolicy
engineconsistingofacommonframeworkforbuildingpolicies,andpolicymodulesthatimplementspecificintrusion
detectionpolicies.ThevirtualmachinemonitorprovidesasubstratethatisolatestheIDSfromthemonitoredVMand
allowstheIDStoinspectthestateoftheVM.TheVMMalsoallowstheIDStointerposeoninteractionsbetweenthe
guestOS/guestapplicationsandthevirtualhardware.
INSPECTIONCOMMANDS areusedtodirectlyexamine chine events through the VMM interface. The VMI IDS
VM state such as memoryand registercontents, and I/O isdividedintotwoparts,theOSinterfacelibraryandthe
devices’flags. policyengine.TheOSinterfacelibrary’sjobistoprovide
MONITOR COMMANDS areusedtosensewhencertain an OS-level view of the virtual machine’s state in order
machineeventsoccurandrequestnotificationthroughan tofacilitateeasypolicydevelopmentandimplementation.
eventdeliverymechanism. Forexample,itispossiblefor Thepolicyengine’sjobispurelytoexecuteIDSpolicies
a VMI to get notified when a certain range of memory byusingtheOSinterfacelibraryandtheVMMinterface.
changes, a privileged register changes, or a device state
changeoccurs(e.g.Ethernetinterfaceaddressischanged).
4.3.1 TheOSInterfaceLibrary
ADMINISTRATIVE COMMANDS allowtheVMIIDSto
control the execution of a VM. This interface allows the VMMs manage state strictly at the hardware level, but
VMI IDS to suspend a VM’s execution, resume a sus- prefertoreasonaboutintrusiondetectionintermsofOS-
pended VM, checkpoint the VM, and reboot the VM. level semantics. Consider a situation where we want to
These commands are primarily useful for bootstrapping detect tampering with our sshd process by periodically
thesystemandforautomatingresponsetoacompromise. performingintegritychecksonitscodesegment.AVMM
AVMIIDS isonlygivenadministrativecontroloverthe canprovideusaccesstoanypageofphysicalmemoryor
VMthatitismonitoring. disk block in a virtual machine, but discoveringthe con-
The VMM can reply to commands synchronously tentsofsshd’scodesegmentrequiresansweringqueries
(e.g. when the value of a register is queried) or asyn- about machine state in the context of the OS running in
chronously(e.g.tonotifytheVMIIDSthattherehasbeen theVM:“whereinvirtualmemorydoessshd’scodeseg-
achangetoaportionofmemory). mentreside?”,“whatpartofthecodesegmentisinmem-
ory?”,and“whatpartisoutondisk?”
4.3 TheVMIIDS We need to provide some means of interpreting low-
levelmachinestatefromtheVMMintermsofthehigher-
TheVMIIDSisresponsibleforimplementingintrusion level OS structures. We would like to write the code to
detection policies by analyzing machine state and ma- dothisonceandprovideacommoninterfacetoit,insteadofhavingtoreimplementthisfunctionalityforeachnew 5.1 VMM
policy in our IDS. Our solution must also take into ac-
countvariationsinOSstructuresuchasdifferencesinOS WeusedamodifiedversionofVMwareWorkstationfor
versions,configurations,etc. Linuxtoprovideuswithavirtualmachinemonitorcapa-
The OS interface library solves this problem by using ble of runningcommonx86-basedoperatingsystems. In
knowledgeabouttheguestOSimplementationtointerpret ordertosupportVMI,weaddedhookstoVMwaretoal-
theVM’smachinestate,whichisexportedbytheVMM. lowinspectionofmemory,registers,anddevicestate. We
Thepolicyengine isprovidedwithan interfacefor mak- alsoaddedhookstoallowinterpositiononcertainevents,
inghigh-levelqueriesabouttheOSofthemonitoredhost. suchasinterruptsandupdatestodeviceandmemorystate.
TheOSinterfacelibrarymustbematchedwiththeguest The virtual machine monitor supports virtual I/O de-
OS;differentguestOSeswillhavedifferentOSinterface vices that are capable of doing direct memory access
libraries. (DMA). These virtual devices can use DMA to read any
SomeexamplesofthetypeofqueriesthattheOSinter- memorylocationinthevirtualmachine. Weusedthisvir-
face library facilitates are: “give me a list of all the pro- tual DMA capability to support direct physical memory
cessescurrentlyrunningonthesystem,”or“tellmeallthe accessintheVMMinterface. Weaccomplishedthiswith
processeswhichare currentlyholdingrawsockets.” The minimalchangestotheVMM.
OSinterfacelibraryalsofacilitatesqueriesatthelevelof As part of this virtualization process, the VMM shad-
kernelcode, similar tothe queriesthat onemightgiveto owsthepagetablesofthephysicalmachine,allowingthe
gdb like “show me the contents of virtual memory from monitor to enforce more restrictive protection of certain
xtoyinthecontextoftheloginprocess,”or“displaythe memorypages. Anexampleofhowthisfunctionalitycan
contentsoftaskstructurefortheprocesswithPID231.” beappliedisthecopy-on-writepagesharingoftheDisco
virtualmachinemonitor[5]. We usedthismechanismto
writeprotectpagesandprovidenotificationiftheVMat-
temptedtomodifyaprotectedpage.
4.3.2 ThePolicyEngine
Interactions with virtual I/O devices such as Ethernet
Attheheartofanyintrusiondetectionsystemisthepolicy interfacesareinterceptedbytheVMMandmappedactual
engine.Thiscomponentinterpretssystemstateandevents hardware devices in the course of normal VMM opera-
fromtheVMMinterfaceandOSinterfacelibrary,andde- tion. We easily added hooks to notify us when the VM
cides whether or not the system has been compromised. attemptedtochangethisstate. Hookstoinspectthestate
Ifthesystemhasbeencompromised,thepolicyengineis of virtual devices such as the virtual Ethernet card were
responsibleforrespondinginanappropriatemanner. For alsoadded.
example,incaseofabreak-in,thepolicyenginecansus- Adding anything to a VMM is worrisome as it means
pendorrebootthevirtualmachine,andreportthebreak- changinglow-levelcodethatiscriticaltoboththecorrect-
in. Since the focus of our work has been studying VMI nessandperformanceofthesystem. However,wefound
asaplatformforIDS,wehavefocusedonimplementing wecouldsupporttherequiredinterpositionandinspection
variationsonmainstreamHIDSstylepolicies[37]suchas hooks with only minor changes to VMware by leverag-
burglaralarms,misusedetectorsandintegritycheckers.A ing functionality required to support basic virtualization.
policy engine implementing complex anomaly detection The functionality that we leveraged is common to most
and other, more exotic techniques can also be supported VMMs,thus,webelievethataddinginterpositionsupport
inthisarchitecture. tootherVMMsshouldbestraightforward.
5.2 VMMInterface
5 Implementation
The VMM interface provides a channel for the VMI
To better understand the implementation difficulties, IDS processes to communicate with the VMware VMM
performance overhead, usability, and practical effective- process. This interface is composed of two parts: first,
nessofourVMIarchitecture,webuiltLivewire,aproto- a Unix domain socket that allows the VMI IDS to send
type VMI IDS. For our VMM we used a modified ver- commands to, and receive responses and event notifica-
sion of VMware Workstation [49] for Linux x86. Our tionsfrom,theVMM;andsecond,amemory-mappedfile
OS library was built by modifying Mission Critical’s that supports efficient access to the physical memory of
crash [30] program. Our policy engine consists of a themonitoredVM.
framework and modules written in the Python program- InLivewire,whenaneventoccurs,theVM’sexecution
minglanguage[17]. Eachofthesecomponentsrunsinits issuspendeduntiltheVMIIDSrespondswithanadmin-
ownprocessinLinux,ourhostOS. istrative command to continue. We opted for this modelofeventnotificationasourpoliciesonlyusemonitorcom- largearray.Thisprovidesaneasywayfortheprogrammer
mandsfornotificationofdefinitemisuse,whichwehandle tosearchtheVM’smemory,ortocalculatesecurehashes
by halting as a matter of policy. For other policies, such ofportionsofmemoryforperformingintegritychecks.
as monitoring interrupts to do system call pattern-based Monitor commands are used by registering callbacks
anomaly detection [26], an event delivery model where for events that a policy module wants to be notified of,
theVMdoesnotsuspendcouldalsobesupported. e.g. a writetoarangeofmemory,ormodificationofthe
NIC’sMACaddress. Callbackscanalsoberegisteredfor
5.3 OSInterfaceLibrary VM-levelevents, such as the VM rebooting or powering
down. Finally, the VM interface exports administrative
Our OS interface library was built by modifying the
commandsthat allowpolicymodules to suspend, restart,
Linux crash dump examination tool crash [30] to in-
andcheckpointtheVM.
terpret the machine state exported by the VMM inter-
LIVEWIRE FRONT END: Thefrontendcodeisrespon-
face. The critical intuition here is that in practice there
sible for bootstrapping the system, starting the OS inter-
isverylittledifferencebetweenexaminingarunningker-
facelibraryprocess,loadingpolicymodules,andrunning
nelthrough/dev/kmemwithacrashdumpanalysistool
policy modules in concert. Interfaces are provided for
fromwithinaguestOS,andrunningthesametooloutside
obtainingconfigurationinformation,reportingintrusions,
the guest OS. The VMM exports an interface similar to
andregisteringpolicymoduleswithacommoncontroller.
/dev/kmemthatprovidesaccesstothemonitoredhost’s
memoryintheformofaflatfile.
Informationabout thespecifics ofthe kernelbeingan- 5.4.2 PolicyModules
alyzed(thesymboltable,datatypes,etc.) areallderived
Wehaveimplementedsixsamplesecuritypolicymodules
from the debugging information of the kernel binary by
inLivewire. Fourmodulesarepollingmodules,modules
crashorreadelf. Allotherproblemsrelatedtodeal-
that run periodically and check for signs of an intrusion.
ingwithdifferencesinkernelversionsweredealtwithby
Theothertwoareevent-drivenmodulesthataretriggered
crash.
byaspecificevent,suchasanattempttowritetosensitive
The IDS communicates with the OS interface library
memory.
overa full-duplexpipe, usingit both to sendandreceive
Each policy module is an individual Python module
their responses. The command set and responses were
(i.e. a single file) that leverages the policy framework.
simplythoseexportedbycrash.
Policymodulescanberunstand-aloneorinconcertwith
5.4 PolicyEngine otherpolicymodules.
We found writing modules using the Livewire policy
The policy engine consists of two pieces: the pol- framework a modest task. Most of the polling modules
icy framework, a common API for writing security poli- were written in less than 50 lines of Python, including
cies, and the policymodules that implement actual secu- comments. Onlytheuserprogramintegritydetector(see
rity policies. The policy engine was built entirely using Section6.1.2)requiredmorecodethanthis,at130linesof
Python. Python.Theevent-drivenmoduleswerealsoquitesimple,
eachonerequiringroughly30linesofcode.
5.4.1 PolicyFramework Adetaileddiscussionofthepolicymoduleswe imple-
mentedisgiveninthenextsection.
The policy framework allows the policy implementer to
interact with the major components of the system with
6 ExamplePolicyModules
minimalhasslebyencapsulatingtheminsimplehighlevel
APIs.Thepolicyframeworkprovidesthefollowinginter-
In this section we present a variety of policy modules
faces:
that we have implemented in Livewire. Our goal with
OS INTERFACE LIBRARY: The OS interface library
thesepolicieswasnottoprovideacompleteintrusionde-
presents a simple request/response to the module writer
tectionpackage,norwasittoexperimentwithnovelpol-
forsendingcommandstotheOSinterfacelibrary,andre-
icy design. Instead we chose policies as simple exam-
ceivingresponsesthathavebeenmarshaledinnativedata
ples that illustrate more general paradigms of policy de-
formats.Tablescontainingkey-valuepairsthatprovidein-
signthatcanbesupportedbythisarchitecture.
formationaboutthecurrentkernel(e.g.thekernel’ssym-
boltable)arealsoprovided.
6.1 PollingPolicyModules
VMM INTERFACE: The VMM interface provides di-
rect access to the VM’s physical address space and reg- Pollingmodulesperiodicallycheckthesystemforsigns
isterstate. Physicalmemoryspaceisaccessedasasingle ofmaliciousactivity. Allofourpollingmodulespossessclose HIDS analogues, as they only leverage the VMM 6.1.3 SignatureDetector
for isolation and inspection. The former is not essential
totheirfunction,andthelattercanbeprovidedbynormal Scanning the file system for the presence of known ma-
OS mechanisms for accessing low-levelsystem state. In licious program based on a known “signature” substring
fact, weinitiallydevelopedsomeofourpollingcheckers oftheprogramisapopularintrusiondetectiontechnique.
by running Livewire on the guest OS it was monitoring It is employed by anti-virus tools as well as root-kit de-
andinspectingsystemstatethrough/dev/kmem. tectiontoolslikechkrootkit[31].Thesetoolsleverage
the fact that most attackers do not write their own tools,
but instead rely on a relatively small number of publicly
6.1.1 LieDetector availablerootkits,backdoors, Trojanhorsesandotherat-
tack tools. Popularexamplesinclude“subseven,”“back-
AttackersoftenachievestealthbymodifyingtheOSker-
orifice,” and “netbus” Trojan horses for Windows,or the
nel, shared libraries, or user-level services to mask their
“adore”and“knark”kernelbackdoorsunderLinux. Most
activities.Forexample,supposeanintruderwantstomod-
Unix HIDS systems that look for signature strings only
ify the system to hide malicious processes. The attacker
scanafewselectedfilesforsignatures. Oursignaturede-
can modify ps, modify shared libraries, or modify the
tectorperformsascanofallofhostmemoryforattacksig-
/procinterfacethat psusestofindoutabout currently
natures. This more aggressive approach requires a more
runningprocesses. Thesemodificationcanleadtoincon-
careful selection ofsignaturesto avoid falsepositives. It
sistenciesbetweenthekernel,orhardwareviewofthesys-
alsomeansthatmaliciousprogramsthathavenotyetbeen
tem,andtheviewprovidedbyuser-levelprograms. Ava-
installedmayalsobedetected,e.g.inthefilesystembuffer
riety of HIDS programs detect intruders by noting these
cache.
inconsistencies[28].
The lie detector module works by directly inspecting
hardwareand kernelstate, and by querying the host sys-
tem through user-level programs (e.g. ps, ifconfig,
6.1.4 RawSocketDetector
netstat) via a remote shell. If it detects conflicts be-
tweenthesetwoviews(i.e.thesystemislying),itreports
Raw sockets have legitimate applications in certain net-
the presenceof malicioustampering. This techniquehas
workdiagnostictools,buttheyarealsousedbyavariety
the nice property that it does not matter what part of the
of“stealth”backdoors,toolsforARP-spoofing,andother
system the intruder modified in order to elicit the mali-
maliciousapplicationsthatrequirelow-levelnetworkac-
cious behavior. One concern we had when building this
cess. The raw socket detector is a “burglar alarm” [37]
checker was ensuring that the views we compared were
style policy module for detecting the use of raw sockets
from the same point in time. In practice, we did not en-
by user-level programs for the purpose of catching such
counteranyproblemswithskewthatledtofalsepositives.
malicious applications. This is accomplished by query-
ing the kernel about the type of all sockets held by user
processes.
6.1.2 UserProgramIntegrityDetector
Checking the integrity of a program binary on disk (ala.
6.2 EventDrivenPolicyModules
tripwire[22])doesnotensurethatthecorresponding
in memoryimageof thatprogramhas notbeenmodified
(e.g.viaptrace[1]). Ourintegritycheckerattemptsto Event-driven checkers run when the VMM detects
detectifarunninguser-levelprogramhasbeentampered changes to hardware state, such as a write to a sensitive
withbyperiodicallytakingasecurehashoftheimmutable locationinmemory.Atstartup,eachevent-drivenchecker
sections (.text, etc.) of a running program, and com- registers all of the events it would like to be notified of
paringittoaknowngoodhash. Thisapproachisparticu- withthepolicyframework.Atruntime,whenoneofthese
larlywell suitedto securing long runningprogramssuch events occurs, the VMM relays a message to the policy
as sshd, inetd, and syslogd that are continuously framework. The policy framework runs the checker(s)
presentinmemory. which have registered to receive the event. In a purely
Onecomplicationweencounteredwhileimplementing intrusion-detection role, event-driven checkers can sim-
this checker was is that portions of large programs may ply report the event that has occurred according to their
bepagedouttodisk,orsimplyneverdemand-pagedinto policy, and allow the virtual machine to continue to run.
memory in the first place. Our current implementation TheVMMcanalsobedirectedtosuspendonevents,thus
deals with this issue by taking per-page hashes and only allowing the policy module to also serve as a reference
examiningtheportionofaprogramthatisinmemory. monitorthatregulatesaccesstosensitivehardware.6.2.1 MemoryAccessEnforcer Ourtargethostconsistedofvirtualmachinewitha256
MB allocation of physical memory and a 4 GB virtual
Moderncomputerarchitecturesgenerallyallowprograms
disk, running a relatively standard installation of Debian
running in ring 0 (i.e. the kernel) to render certain sec-
GNU/Linux. The virtual machine monitor (a modified
tionsofmemoryread-only,suchastheirtextsegmentand
versionVMware Workstationfor Linuxversion3.1)was
read-onlydata,asastandardpartoftheirthememorypro-
runona1.8GHzPentiumIVlaptopwith1GBofphysical
tectioninterface. However,theyalso allowanythingelse
memory,runningDebianGNU/LinuxasahostOS.
running in ring 0 to disable these access controls. Thus,
whilethesemechanismsareusefulfordetectingacciden- 7.1 SampleAttacks
talprotectionviolationsduetofaultycode,theyarerela-
Ourtestsuiteofsampleattacksconsistedofkernel-and
tivelyuselessforprotectingthekernelfromtamperingby
user-levelrootkitsandbackdoors[40,11,48,7,44]Trojan
othermaliciouscodethatisrunninginring0(forexample
horses[27],packetsniffers[43,27],andaworm[8]. All
akernelbackdoor).
test attacks were obtained from public sources and were
Detecting tampering with an OS code segment can be
modifiedonlyasnecessaryforconfiguration,orforadap-
anusefulmechanismfordiscoveringthepresenceofma-
tation to our kernel. A selection of nine attacks that we
liciouscode,andpreventingitsinstallationintothekernel
feelprovidesagoodrepresentativecross-sectionhasbeen
proper. Our kernel memory enforcer works by marking
chosenforourdiscussion. Asummaryoftheattacksand
thecodesection,sys call table,andothersensitive
ourresultsisdepictedinTable7.
portions of the kernelas read-only through the VMM. If
a malicious program, such as a kernel back door tries to
7.2 DetectionResults
modifythese sections ofmemory,theVM will behalted
andthekernelmemoryprotectionenforcernotified. Sev- In order to collect our detection results we set up our
eralHIDStools[47,36]attempttodetectmodificationsto system under Livewire and then downloaded, installed,
thesys call tableandsystemcallcodethroughthe and ran each attack. Once an attack had been tested the
use of integrity checking. However, this approach is far systemwasrolledbacktoacleanstatebeforeanotherat-
lessattractiveduetoitslackofimmediacy(andinability tackwasattempted.
topreventattacks)aswellastheadditionaloverheaditin- Our Signature Scanner (“sig”) was able to detect all
curs. Sensitiveregistersliketheidtrcanalsobelocked oftheattacksweprovidedsignaturesfor. Thiswasapre-
down. dictableresult;theonlyinterestingsurprisewasthatitof-
tendetectedthepresenceofmaliciouscodebeforeithad
been run, based on the presence of the signature in the
6.2.2 NICAccessEnforcer
buffer cache (when we examined them on disk), in the
The NIC Access Enforcer prevents the Ethernet device memory of ssh (as they were being downloaded), or in
entering promiscuous mode, or being configured with a memoryonceactivated. Initially,weencounteredseveral
MAC address which has not been pre-specified. Using falsepositivesduetooverlygeneralsignatures. Forexam-
thismodulewecanpreventvarietyofcommonmisusesof ple,thestring“adore”worksfineasasignatureforafile
theNICtobedetectedandprevented. Inspiteofitssim- system-based checker, such as chkrootkit, but is too
plefunctionalitytheNICmoduleprovidesausefulpolicy general a signature for a scanner looking at all of mem-
enforcementtool. Itismorerobusttoattackthannormal ory.OurRawSocketDetector(“raw”)rawsocketdetec-
host-basedsolutions,andnotsusceptibletoevasion,asis tor detectedthe presence of cd00r anda similar stealth
aproblemwithremotepromiscuousmodedetectionsolu- backdoorweincludedinourtestattacksuite.OurLieDe-
tions[9]. tector(“lie”)modulesprovedespeciallyeffectiveagainst
rootkits both at kernel and user level since they all pro-
7 ExperimentalResults videdfunctionalitytohideprocesses. TheUserProgram
IntegrityChecker(“int”)wasabletodetectthepresence
In this section we present an experimental evaluation oft0rnandlrk5basedontheiruseofbackdooredversion
of our Livewire prototype. Our evaluation consists of of inetd and sshd. We also found it also effective in
two parts. First, we test the effectivenessof our security detectingbackdooredversionsofsyslog.OurMemory
policies against some common attacks. This portion of ProtectionEnforcer(“mem”)wasabletodetectandpre-
ourevaluationwasundertakentoensurethatourpolicies venttheinstallationofallofourkernelbackdoors.knark
workedin practice, and to gainexperiencewith utilizing andadorewerestoppedbyblockingtheirattempttomod-
Livewireagainstrealattacks.Thesecondpartofoureval- ify sys call table. SUCKIT was stopped by blocking its
uation consisted of testing the performance overhead of attempt to modify the interrupt dispatch table. Our NIC
Livewireonseveralsampleworkloads. access enforcer (“nic”) was trivially able to detect andName Description nic raw sig int lie mem
cdoor Stealthuserlevelremotebackdoor D
t0rn Precompileduserlevelrootkit D D
Ramen LinuxWorm D
lrk5 Sourcebaseduserlevelrootkit P D D D
knark-0.59 LKMbasedkernelbackdoor/rootkit D D P
adore-0.42 LKMbasedkernelbackdoor/rootkit D D P
dsniff2.4 All-purposepacketsnifferforswitchednetworks P
SUCKIT /dev/kmempatchingbasedkernelbackdoor D D P
Table 1. Results ofLivewirepolicymodules against common attacks. Within the grid, “P”designates a prevented
attackand“D”adetectedattack.
22
20
18
16
14
0 2 4 6 8
Polling Interval (seconds)
)sdnoces(
emiT
linearly as the cost of checking was amortized over the
total running time of the the workload. While this was
generally the trend, we found that as the polling interval
decreasedtheinteractionswiththeworkloadbecamemore
erratic.
raw
int
lie 8 Weaknessesand Attacks
sig
baseline
In this section we present avenues for attacking and
evading VMI-based IDS architectures and explore ap-
proaches to addressing these problems. Some of the is-
suesthatwepresentareuniquetotheproblemofbuilding
aVMIIDS;otheraremoregeneralissuesthatariseinat-
temptstobuildsecuresystemswithVMMs.
8.1 AttackingtheVMM
Figure2.PerformanceofPollingPolicyModules
8.1.1 IndirectAttacks
prevent the packet sniffers in our test attack suite from
VMMsmayprovideinterfacesaccessiblefromoutsideof
operating, based on their reliance on running the NIC in
a VM that provide an avenue of attack. For example, a
promiscuousmode.
hosted VMM might be running on a host OS with a re-
motelyexploitablenetworkstack,orapplication-levelnet-
7.3 Performance
workservice. InaVMIIDS,thethreatofindirectattacks
can be minimized by using a traditional VMM that pos-
To evaluatethe performance of our system we consid-
sessesnonetworkstackorbydisablingthenetworkstack
eredtwo samplework loads. First, we unzipped andun-
inahostedenvironment.
tarredtheLinux2.4.18kerneltoprovideaCPU-intensive
task. Second,wecopiedthekernelfromonedirectoryto
anotherusingthecp -rcommandtoprovideamoreI/O
8.1.2 DetectingtheVMM
intensivetask.
We usedthefirstworkloadto evaluatetheoverheadof ThefirststepinevadingaVMIIDSisdetectingitspres-
runningevent-drivencheckersinthe commoncasewhen ence. AsignificanthintthataVMIIDSmaybepresentis
theyarenotbeingtriggered. Asexpected,nomeasurable thepresenceofaVMM.Unfortunately,maskingthepres-
overheadwasimposedonthesystem. ence of a VMM is almost impossible due to differences
Weusedoursecondworkloadtoevaluatetheoverhead intherelativeamountoftimethatI/Ooperations,device
associated with running our checkers at different polling access, virtualized instructions, and other processes take
intervals. Theresultsareshowninfigure2. Thebaseline as compared to a non-virtualized interface [16]. Hiding
measurementshowsperformanceoftheworkloadwithout thesedisparitiesisimpracticalandnotworththelittlebit
Livewire running. Our performance results were some- ofadditionalstealthitwouldprovidetheIDS.Timingcan
whatsurprisingtous. Wehadexpectedthetimetakenby also leak information that could betray the presence of a
pollingmodulesasafunctionofthetotaltimetodecrease VMIIDSanditsactivities.8.1.3 DirectlySubvertingtheVMM thusfoolingtheOSinterfacelibrary.Therearemanysen-
sitive mutable kernel data structures that we do not yet
The VMM may expose the VMI IDS to direct attack in
protect that could presentan avenuefor attack. We have
two ways: flaws in the design of the VMM or flaws in
simplytriedto“raisethebar,”andpreventthemostobvi-
itsimplementation. Theformerproblemcanoccurwhen
ous of cases of this class of attack. Finding better meth-
VMMs are not designed with malicious guest code in
ods for identifying and enforcing the static and dynamic
mind. Forexample,virtualenvironmentslikeUser-Mode
invariantsthataVMIIDSreliesuponseemsanimportant
Linuxaresometimesdesignedwithdebuggingorapplica-
areaforfurtherstudy.
tioncompatibilityastheirprimaryapplicationanddonot
providesecureisolation. Thelatterproblemoccurswhen
there is an error in the VMM code, or code the VMM 8.2.2 CompromisingtheOSInterfaceLibrary
relies upon. We conjecture that such errors would most
TheOSinterfacelibraryistheVMIIDS’spointofgreat-
likelybefoundindevicedrivercodeleveragedbyvirtual
est exposure to potentially malicious inputs. Because of
devices. While secure VMMs have been built with ma-
thisitisvitaltocarefullysanitizeinputs,andtreatalldata
licious users in mind, device drivers are often less para-
gleaned from the virtual machine by direct inspection as
noidaboutsanitizingtheirinputs,andthuscanbesubject
tainted. Thepotentialforproblemsinthispartofthesys-
to attack [3]. The VMM can attempt to deal with this
temisespeciallyapparentinourLivewireprototype. The
issue defensively by judiciously checking and sanitizing
OS interface libraries are based on crash dump analysis
data flowing from virtual devices to devicedrivers. This
toolswritteninC,thuspresentinganidealopportunityfor
helps to minimize the risk of these inputs compromising
abufferoverflow. AnothermeansofattackingtheOSin-
the device driver. All devices drivers used with a VMM
terface library is by modifying kernel data structures to
shouldbecarefullyscreened.
violate invariants that the OS interface library assumes.
For example, introducing a loop into a linked list in the
8.1.4 AttackingtheVMMthroughtheIDS kernelthattheOSinterfacelibrarywillread(e.g.alistof
filedescriptors)couldinduceresourceexhaustion,orsim-
Thepresence ofthe VMIIDS introducesanotheravenue
plycausetheOSinterfacelibrarytowedgeinaloop. The
for attacking the VMM. Fortunately, the VMI IDS re-
OSinterfacelibrarymustnotassumeanyinvariantsabout
quiresminimalprivilegebeyondits abilitytomanipulate
the structure of its inputs that are not explicitlyenforced
the guest VM, so that the impact of an IDS compromise
through the VMM.Giventhe potentiallycomplexnature
on the VMM can be mitigated by running the IDS in its
oftheOSinterfacelibrary,itseemsadvisabletoisolateit
ownVM,orbyisolatingitfromtheVMMthroughsome
from the policy engine and give it minimal privilege. In
othermechanism.
Livewire,thisisapproximatedbyrunningtheOSinterface
libraryinaseparateprocess,withonlyenoughprivilegeto
8.2 AttackingtheIDS
inspectthememoryandregistersofthemonitoredVM.If
8.2.1 FoolingtheOSInterfaceLibrary the OSinterfacelibrary hangs, thepolicyenginecankill
andrestartit.
TheOSinterfacelibraryreliesonmeta-datagleanedfrom
a kernel binary or other sources in order to interpret the
structureoftheOS.Ifanattackercanmodifythestructure 8.2.3 CompromisingthePolicyEngine
oftheguestOSsothatitisinconsistentwiththemeta-data
The extent to which the policy engine is vulnerable to
that the OS interface library possess, he can fool the OS
compromise is dependent on the policies and implemen-
interface library about the true state of the system. This
tation of the policy engine. We have taken several steps
styleofattackisusedagainstkernelmodulesthatattempt
in our Livewire prototype to reduce the risk of a policy
todetect tamperingwiththe sys call tablethrough
enginecompromise:
integritychecking[40].Inordertosubvertthesemodules,
attackers modify the interrupt dispatch table so that the
kernelusesadifferentsystem calltablealtogether,while
the module continues to check a system call table that is
nolongerinuse. Theproblemofmaintainingaconsistent
viewofthesystemisfundamentaltotheVMI-basedIDS
approach. Livewireattemptstocounterthistypeofattack
through the memory access enforcer by disabling the at-
tacker’sabilitytomodifymemorylocationsandregisters
thatcouldallowsensitivekernelstructurestoberelocated,
(cid:0)
Sanitize Inputs: The need to carefully check and
sanitize inputsfrom theguestOScannotbeempha-
sizedenough.InputsthatcomefromtheVMMinter-
faceandOSinterfacelibraryshouldalsohavesanity
checksappliedtothem.
(cid:0)
A High-Level Policy Language: Building ID-
Ses that utilize a high-level policy language is a
proven technique for building flexible, extensibleNIDSes [33]. VMI IDSes also realize these bene-
fits with a high-levelpolicylanguage. Additionally,
high-levelpolicylanguagesalsoreducethepossibil-
ityofatotalcompromiseduetomemorysafetyprob-
lems.Ahigh-levellanguagelikePythonisespecially
wellsuitedfordoingpatternmatching,manipulating
complexdatatypes,andotheroperationsthatarefre-
quentlyusefulforintrospection. Thisexpressiveness
andeaseofuseallowspoliciestobewritteninacon-
cise and easy-to-understand manner that minimizes
errors.
(cid:0) FailingClosed: InLivewire,theVMMcansuspend
onthelastsynchronouseventthatoccurredandwill
not continue until explicitly instructed by the IDS.
This means that even if the policy engine crashes,
protected hardware interfaces will still not be ex-
posed. This type of fail-closed behavior is always
recommendedwhenaVMIIDSisalsobeingusedas
areferencemonitor.
(cid:0) Event Flow Control: In the case when Livewire
cannotkeepupwithqueuedasynchronousevents,the
VMMcansuspenduntilLivewirecancatchup. Un-
likeanNIDSwhichcannotnecessarilystemtheflow
oftraffic[33],itiseasytostemtheflowofeventsto
theVMIIDS.
(cid:0)
onasingleplatformwillbebuilttoformahoneynet,pro-
vidinga low-costlaboratoryforstudyingthebehaviorof
attackers.
The idea of collocating security services with the host
thattheyaremonitoring,aswestudyinthiswork,hasalso
seenattentionintheReVirt[10]system,whichfacilitates
secure logging and replay by having the guest operating
system (the OS running inside the VM) instrumented to
workinconjunctionwiththeVMM.
Chen et al. [6] proposed running code in a VM in or-
der to discover if it is malicious before proceeding with
its normal execution. This idea is similar to the applica-
tion ofVMs to faulttolerance exploredby Bressoudand
SchneiderintheirHypervisor[4]work.
Goldberg’s work on architectural requirements for
VMMs[15]andhissurveyofVMMresearchupto1974
[16] are the standard classic works on VMMs. More re-
cent noteworthy work on VMM architectural issues can
befoundinDisco[5],andinworkonvirtualizingI/O[45]
andresourcemanagement[51]inVMware.
Alsorelevantto thetopicofVM introspectioniswork
onwhole-machinesimulationinSimOS[38],whichalso
lookedattheissuesinvolvedininstrumentingvirtualhard-
wareandextrapolatingguestoperatingsystemstatefrom
hardwarestate.
10 Future Work
Avoiding Wedging with Timers: In Livewire, the There are still many significant questions to be ad-
pollingmodulearerunseriallybyasinglethreadof dressedabouthowVMI-basedintrusiondetectionsystems
control.Thisintroducestheriskthatabuginonepol- canbestbeimplementedandused.
icy module could cause the entire IDS to hang. We Livewirehastakenanextremelyconservativeapproach
havetriedtoaddressthisproblemintwoways.First, to introspection by primarily engaging in passive checks
allofourpolicymodulesarewrittendefensively,at- thatincurnovisibleimpactonsystemperformance. This
temptingtoavoidoperationsthatcouldhang indefi- decision allowed Livewire to be implemented with only
nitely, andusingtimers to break outofthese opera- minimal changes to the virtual machine monitor. How-
tionswhennecessary.Second,eachpolicymoduleis ever, the cost of this was that monitoring frequent asyn-
onlygivenasetamountoftimetocompleteitstask, chronous events, e.g. all system calls, may be quite per-
andwillbeinterruptedifitexceedsthatlimit,sothat formance intensive. Our current architecture could sup-
thenextmodulecanrun. port frequent asynchronous checks, such as monitoring
and processing system call, and supporting lightweight
9 Related Work datawatchpointswithrelativeefficiencyvia. hardcoding
thefunctionalitytologtheseeventsdirectlyintothemon-
Classicaloperatingsystemsecurityissuessuchascon- itor, then offloading the processing of these logs to the
finement and protection have been studied extensively policy engine. However, this approach seems somewhat
in traditional VMMs. In previous years thorough stud- inflexible. We believeamorepromisingapproachwould
ies of these problems have been presented for VM/370 involve support for providing a small, safe and extensi-
[39, 14, 13, 12] and the Vax Security Kernel [21]. The blemechanismforefficientlyfilteringarchitectureevents
mostrecentimplementationstudyofasecuritykernelcan intheVMM,inmuchthesamefashionthatcurrentOSes
befoundinworkontheDenaliisolationkernel[53].Are- providesthisfunctionalityforfilteringpacketsviaBPF.
centapplicationofVMMsforpureisolationcanbefound InLivewirewemadethechoicetoleveragethecrash
intheNSA’snettop[29]architecture. program in order to provide us with an OS interface li-
VMMshavealsobecomeapopularplatformforbuild- brary. Thisprovidedthefunctionalitytoexperimentwith
inghoneypots[41]. Oftenanetworkofvirtualmachines awiderangeofpolicieswhileminimizingimplementationtime. However,giventheOSinterfacelibrariesexposure References
toattackitwouldbedesirabletohaveadedicatedOSin-
[1] Anonymous.Runtimeprocessinfection.Phrack,11(59):ar-
terfacelibraryofsignificantlysmallersize,ideallywritten
ticle8of18,December2002.
inasafelanguage.Anotherfactordeservingfurtherstudy
[2] Apk.Interfacepromiscuityobscurity.Phrack,8(53):article
in the OS interface library is that of concurrency. How
10of15,July1998.
cansystemkernelstatebesafelyobservedinthepresence [3] K. Ashcraft and D. Engler. Using programmer-written
of constant updates to kernel state? How should the OS compilerextensionstocatchsecurityholes. InProc.IEEE
interfacelibraryrespectOSlockingprimitives? SymposiumonSecurityandPrivacy,2002.
[4] T. C. Bressoud and F. B. Schneider. Hypervisor-based
Other IDS tools can benefit from the capability of a
faulttolerance. ACMTransactionsonComputerSystems,
VMM to allow secure collocation of monitoring on the
14(1):80–107,1996.
same machine as the host, evenwithoutthe use of intro-
[5] E.Bugnion,S.Devine,andM.Rosenblum.Disco:running
spection. HIDS techniques such as filesystem integrity
commodityoperatingsystemsonscalablemultiprocessors.
checking could easily be moved outside of the host for InProceedingsoftheSixteenthACMSymposiumonOper-
betterisolation.Conversely,NIDSescouldbemovedonto atingSystemPrinciples,Oct.1997.
thesameplatformasthehost,therebydistributingtheload [6] P.M.Chen andB. D.Noble. Whenvirtualisbetterthan
ofperformingpacketanalysistoendhosts,andpotentially real. InProceedingsofthe2001WorkshoponHotTopics
facilitatingtheuseofmorecomplexpolicies. Finally,the in Operating Systems (HotOS-VIII), Schloss Elmau, Ger-
many,May2001.
benefitsofisolatingprotectionmechanismsfromthehost
[7] J.R.Collins. Knark: Linuxkernelsubversion. SansInsti-
has receivedlittle attention. Movingdistributedfirewalls
tuteIDSFAQ.
as described by Ioniddis et. al . [20] outside of the host [8] J.R.Collins. RAMEN,aLinuxworm. SansInstituteArti-
seems like an obvious application for this mechanism. cle,February2001.
Anisolatedkeystoreisanothernaturalapplicationofthis [9] J.Downey. Snifferdetectiontoolsandcountermeasures.
mechanism. [10] G.W.Dunlap,S.T.King,S.Cinar,M.Basrai,andP.M.
Chen. Revirt: Enablingintrusionanalysisthroughvirtual-
machineloggingandreplay. InProc.of2002Symposium
11 Conclusion
onOperatingSystemsDesignandImplementation(OSDI),
December2002.
Weproposetheideaofvirtualmachineintrospection,an
[11] FX. cdoor.c, packet coded backdoor. http://www.
approach to intrusion detection which co-locates an IDS
phenoelit.de/stuff/cd00rdescr.html.
onthesamemachineasthehostitismonitoringandlever- [12] B.Gold,R.Linde,R.J.Peller,M.Schaefer,J.Scheid,and
agesavirtualmachinemonitortoisolatetheIDSfromthe P.D.Ward. AsecurityretrofitforVM/370. InAFIPSNa-
monitored host. The activity of the host is analyzed by tional Computer Conference, volume 48, pages 335–344,
directly observing hardware state and inferring software June1979.
[13] B.Gold,R.R.Linde,andP.F.Cudney. KVM/370inret-
state based on a priori knowledge of its structure. This
rospect. InProc.ofthe1984IEEESymposiumonSecurity
approachallowstheIDSto: maintainhighvisibility,pro-
andPrivacy,pages13–23,April1984.
videshighevasionresistanceinthefaceofhostcompro-
[14] B. Gold, R. R. Linde, M. Schaefer, and J. F. Scheid.
mise, provideshigh attackresistance duetostrong isola-
VM/370security retrofit program. In Proc.ACMAnnual
tion,andprovidestheuniquecapabilitytomediateaccess Conference,pages411–418,October1977.
to host hardware, allowinghardwareaccess control poli- [15] R. Goldberg. Architectural Principles for Virtual Com-
cies to be enforced in the face of total host compromise. puterSystems. PhDthesis,HarvardUniversity,1972.
[16] R. Goldberg. Survey of virtual machine research. IEEE
Weshowedthatimplementingourarchitectureispractical
ComputerMagazine,7:34–45,June1974.
andfeasibleusingcurrenttechnologybyimplementinga
[17] Guido van Rossum. Python Reference Manual.
prototype VMI IDS and demonstrating its ability to de-
http://www.python.org/doc/current/ref/
tectrealattackswithacceptableperformance. Webelieve
ref.html.
VMIIDSoccupiesanewandimportantpointinthespace [18] halflife. Bypassing integrity checking systems. Phrack,
ofintrusiondetectionarchitectures. 7(51):article9of17,September1997.
[19] S.A.Hofmeyr,S.Forrest,andA.Somayaji. Intrusionde-
tectionusingsequencesofsystemcalls. JournalofCom-
12 Acknowledgments
puterSecurity,6(3):151–180,1998.
[20] S.Ioannidis, A. D.Keromytis, S.M.Bellovin, andJ. M.
We are very grateful to Dan Boneh, Constantine Sa-
Smith. Implementingadistributedfirewall. InACMCon-
punzakis, Ben Pfaff, Steve Gribble, and Matthias Jacob
ferenceonComputerandCommunicationsSecurity,pages
fortheirfeedback,help,andsupportinthecourseofthis
190–199,2000.
work. This material is based upon work supported in [21] P. Karger, M. Zurko, D. Bonin, A. Mason, and C. Kahn.
partbytheNationalScienceFoundationunderGrantNo. AretrospectiveontheVAXVMMsecuritykernel. 17(11),
0121481. Nov.1991.[22] G. H. Kim and E. H. Spafford. The design and imple- [44] Stealth. Theadorerootkitversion0.42. http://teso.
mentationoftripwire: Afilesystemintegritychecker. In scene.at/releases.php.
ACMConferenceonComputerandCommunicationsSecu- [45] J.Sugerman,G.Venkitachalam,andB.Lim. Virtualizing
rity,pages18–29,1994. I/O devices on VMware workstation’s hosted virtual ma-
[23] klog. Backdooringbinaryobjects. Phrack,10(56):article chinemonitor. InProceedingsofthe2001AnnualUsenix
9of16,May2000. TechnicalConference,Boston,MA,USA,June2001.
[24] C. Ko, T. Fraser, L. Badger, and D. Kilpatrick. Detect- [46] Teso Security Advisory. LIDS Linux Intrusion Detec-
ingandcounteringsystemintrusionsusingsoftwarewrap- tionSystemvulnerability. http://www.team-teso.
pers. InProceedingsofthe9thUSENIXSecuritySympo- net/advisories/teso-advisory-012.txt.
sium,August2000. [47] TimLawless.StMichael:detectionofkernellevelrootkits.
[25] l.kossack. Buildingintothelinuxnetworklayer. Phrack, http://sourceforge.net/projects/stjude.
9(55):article12of19,July1999. [48] TobyMiller.AnalysisoftheT0rnrootkit.http://www.
[26] Y.LiaoandV.R.Vemuri. Usingtextcategorizationtech- sans.org/y2k/t0rn.htm.
niquesforintrusiondetection. InProceedingsofthe11th [49] VMware, Inc. VMware virtual machine technology.
USENIXSecuritySymposium,August2002. http://www.vmware.com/.
[27] LordSomer. lrk5.src.tar.gz, Linuxrootkit V. http:// [50] D.WagnerandD.Dean.Intrusiondetectionviastaticanal-
packetstorm.decepticons.org. ysis. InProc.IEEESymposiumonSecurityandPrivacy,
[28] K. Mandia and K. J. Jones. Carbonite v1.0 - A 2001.
Linux Kernel Module to aid in RootKit detection. [51] C. A. Waldspurger. Memory resource management in
http://www.foundstone.com/knowledge/ VMwareESXServer. InProc.of2002SymposiumonOp-
proddesc/carbonite.html. eratingSystemsDesignandImplementation(OSDI),2002.
[29] R. Meushaw and D. Simard. NetTop: Com- [52] A. Wespi, M. Dacier, and H. Debar. Intrusion detection
mercial technology in high assurance applications. using variable length audit trail patterns. In RAID 2000,
http://www.vmware.com/pdf/TechTrendNotes.pdf,2000. pages110–129,2000.
[30] Mission Critical Linux. Core Analysis Suite v3.3. [53] A.Whitaker, M.shaw, andS.D.Gribble. Scaleandper-
http://oss.missioncriticallinux.com/ formanceinthedenaliisolationkernel. InProc.ofthe5th
projects/crash/. USENIXSymposiumonOperatingSystemsDesignandIm-
[31] N. Murilo and K. Steding-Jessen. chkrootkit: locally
plementation(OSDI’99),2002.
checks for signs of a rootkit. http://http://www. [54] Xie Huangang. Building a secure system with
chkrootkit.org/. LIDS. http://www.de.lids.org/document/
[32] palmers. Advancesinkernelhacking. Phrack,11(58):arti-
build_lids-0.2.html.
cle6of15,December2001.
[33] V.Paxson. Bro: asystemfordetectingnetworkintruders
in real-time. Computer Networks, 31(23-24):2435–2463, A SampleAttacks
1999.
[34] pragmatic. (nearly) Complete Linux Loadable Kernel
Modules. http://www.thehackerschoice.com/
papers/LKM_HACKING.html.
[35] T. H. Ptacek and T. N. Newsham. Insertion, evasion,
anddenialofservice:Eludingnetworkintrusiondetection.
Technicalreport,Suite330,12015thStreetS.W,Calgary,
Alberta,Canada,T2R-0Y6,1998.
[36] RainerWichmann. Samhain: distributedhostmonitoring
system. http://samhain.sourceforge.net.
[37] M.J. Ranum. Intrusiondetectionand network forensics.
USENIXSecurity2000CourseNotes.
[38] M. Rosenblum, E. Bugnion, S. Devine, and S. A. Her-
rod. Usingthesimosmachinesimulatortostudycomplex
computer systems. Modeling and Computer Simulation,
7(1):78–103,1997.
[39] M. Schaefer and B. Gold. Program confinement in
KVM/370. pages404–410,October1977.
[40] sd. Linuxon-the-flykernelpatchingwithoutlkm. Phrack,
11(58):article7of15,December2001.
[41] K. Seifried. Honeypotting with VMware: basics.
http://www.seifried.org/security/ids/
20020107-honeypot-vmware-basics.ht%ml.
[42] Silvio Cesare. Runtime Kernel Kmem Patch-
ing. http://www.big.net.au/˜silvio/
runtime-kernel-kmem-patching.txt.
[43] D.Song.Passwordsfoundonawirelessnetwork.USENIX
TechnicalConferenceWIP,June2000.
(cid:0) cd00risauserlevel,stealthremotebackdoor[11]. It
monitorsincomingtrafficonarawsocketandlooks
for a particular trafficpattern (for e.g. 3 SYN pack-
ets on ports 6667,6668, 6669) before “de-cloaking”
and opening normal socket to facilitate remote ac-
cess. This makes it impervious to remote detection
throughtechniquessuchasportscanning.
(cid:0) dsniffisapopularpacketsniffer[43].Itisoftenused
by attackers to glean unencrypted passwords from
networktraffic.
(cid:0)
t0rn[48]andlrk5[27]arepopularrepresentativesof
whatmightbecalledthe“oldschool”ofkernelback-
doors in that they are simply a collection of back-
dooredbinariesandlogcleaningscriptsthatallowan
attacker with root privileges to hide their activities,
gainelevatedpermissions,sniffthenetworkforpass-
words,andothercommontasks. Whiletheserootk-
itsaredetectableusingfilesystemintegritycheckers
suchastripwireorfilesignaturecheckerssuchas
chkrootkit, methods for subverting these secu-
ritymeasuresarewellknown[18,23],andthetools
implementingthesemethodswidelyavailable.(cid:0)
LKM-basedrootkits,likeAdore[44]andKnark[7],
are popular representatives of the second genera-
tion of Linux kernel module (LKM) based back-
doors. Mechanism-wise they differlittle from early
backdoorssuchasheroin.c;theirattackvectoris
still direct installation into the kernel via the load-
able module interface and they modify the kernel
bydirectlypatchingthesys_call_table,which
makesthemdetectablethroughsys_call_table
integrity checking tools such as StMichael and
Sanhaim. Unlikefirst-generationbackdoorswhich
often performed only one task, these backdoors can
performmanytasks,suchashidingfiles,hidingpro-
cesses, permission elevation, hiding the state of the
promiscuousmodeflagontheNIC,andavarietyof
othertasksanattackermightdesire. Thesemodules
haveusheredinamoveawayfromuser-levelrootk-
its that are more easily detectable through integrity
checkingprogramsliketripwire,longamainstay
of HIDS, and toward entirely kernel-based rootkits
thataresignificantlyhardertodetect.
(cid:0)
Ramen[8]isaLinuxworminthetraditionofUNIX
worms dating back to the original RTM work that
brought down the Internet in the 80s. It relies on
bufferoverflowsincommonservicestopenetratethe
remote host. Once the host has been penetrated, it
installsitselfandbeginsscanningfornewtargetsto
infect.HIDSandNIDStoolstypicallyattempttode-
tectRamenbylookingforfilesnamedramen.tgz
orlookingforitssignatureinnetworktraffic,respec-
tively.
(cid:0)
terposeinthekernelexist,whichwhilenotastrivial
to interpose upon as the sys_call_table inter-
face, arejustaspotenta mechanismfor attack[25].
Giventheir number,these interpositionpointsmake
theoverheadofpollingbasedintegritycheckingthat
currentkernelIDSsystemsrelyuponinfeasible. Fi-
nally,thestealthofthisclassofmaliciouscodecould
clearly be greatly increased using common tech-
niques from the virus community. Thus, while this
classofattacksisstillrelativelyeasytoaddresswith
existing HIDS mechanisms, we cannot expect that
thiswillholdtrueintheforeseeablefuture. Acom-
plete description of SUCKIT as well as other non
LKMbasedkernelbackdoorsispresentedinPhrack
[40,32].
SUCKIT is a recently introduced “Swiss army”
kernel-based rootkit along same lines as adore and
knark. What makes SUCKIT particularly interest-
ing is that it has been built with the intent of in-
stallationitthroughthe/dev/kmeminterfaceinor-
dertoallowsubversionofsystemswhereLKMsup-
port has been disabled. It also modifies the int
0x80handlerdirectlyinsteadoftamperingwiththe
sys_call_table, thereby allowing it to avoid
detection by kernel integrity checking based IDSes
suchasStMichael. SUCKITisalsoparticularlyim-
portant as an indicator of things to come. As HID-
Ses to detect kernel-based subversionbecome more
common and easy attack vectors for kernel subver-
sion are disabled (such as the LKM support), ker-
nelbackdoorscanbeexpectedtoevolveinresponse.
While SUCKIT currently contents itself with evad-
ing systems like StMichael or Sanhaim, there is no
particular reason it could not simply scan the ker-
nel for the presence ofthese systemsand eviscerate
them directly. Furthermore, a host of points to in-