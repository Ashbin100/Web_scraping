Credential Management and Secure Single Login for SPKM
DetlefHu¨hnlein
secunet Security Networks GmbH
MergenthalerAllee79-81
D-65760Eschborn
emailhuehnlein@secunet.de
Abstract tickets with limited lifetime. In public-key based mecha-
nismslikeSPKM,whichisdiscussedinsection3morede-
The GSS-API [20, 21] offers security services indepen- tailed,andSECUDEthecredentialsarethesecretkeysand
dentofunderlyingmechanisms.ApossibleGSS-mechanism certificatesforthepublickeys.Thesecretkeysarestoredin
is the Simple Public Key Mechanism (SPKM) specified in a personalsecurity environment(PSE),whichis ’opened’,
[1]. Inthispaperwe willfocusonthecredentialmanage- i.e. made accessible, by entering a password. In practice
mentforSPKM.Ifmorethanoneconnectionisneeded,the thePSEusuallyisasmartcardoraPKCS#5(see[31])en-
standard credential management requires either to cache cryptedfile. Thiscredentialshavetobeavailablewhenever
the secretkeysin insecure storage orto make the useren- a new GSS-connection is requested, i.e. a GSS-contextis
tering a password to access the long term secret keys for tobeestablished. Thismeans,thateitherthePSEhastobe
everynewGSS-connection.Forenvironmentsinwhichnei- openfor a long time or the user has to enter the password
ther one is acceptable we propose a Secure Single Login everytime a new connection is set up. If this no problem,
(SSLogin)variantwhichworkswithtemporaryasymmetric thisisthemostobviouswaytoprovideaccesstothesecret
keysandcombinessecurityandusercomfort. keysand,whilenotspecifiedin[1],X.509v3/PKIXcertifi-
cationfortherelatedpublickeys,whichisbrieflydiscussed
insection4.
1 Introduction
HoweverifkeepingthePSEopenforalongtimebearsse-
curityproblemsormultipleenteringofthepasswordisnot
TheGSS-API[20,21]”offerssecurityservicestocallers
possibleforusabilityreasonstheproposedSSLoginvariant,
inagenericfashion,supportablewitharangeofunderlying
as discussedin section5, is preferable. To implementthis
mechanisms and technologies and hence allowing source-
SSLogin we need to specify a slightly differentcredential
levelportabiltiyofapplicationstodifferentenvironments”.
management(see section 6), which allows the end user to
PossibleGSSmechanismsaree.g.thewellknownKerberos
certify its own temporary keys. In section 7 we will com-
V5 [18, 22] based on symmetriccryptography,the Simple
parethediscussedvariantsintermsofsecurity,usabiltyand
Public Key Mechanism [1] or SECUDE [7, 9]. The latter
performance.
maybeviewedasanSPKMvarianttailormadefortheSAP
R/3TMenvironment.
To set up a secure (i.e. authentic, integer, confidential 2 GSS-API Context Establishment
and non-repudiable) communication the initiator (client)
and the target (server) have to establish a GSS-context, Inthissectionwewillbrieflyrecalltherelevanttopicsof
like discussed in section 2 more detailed. Note, that non- the GSS-API. Thus we focus on the calls and tokens for
repudiationrequirestheapplicationofdigitalsignatures,i.e. context establishment and credential management, rather
public key algorithms. During context establishment the thanper-message-,andsupportcalls. Foracomprehensive
communication partners verify the peer’s identity and au- treatmentwereferto[20,21,34].
thorizationandagreeonacommonsessionkey,whichcan
beusedforconfidentialityandintegritypurposesduringthe Likementionedintheintroductionthecommunicationpart-
actualcommunication. Toprooftheidentityonehastoac- nershavetoaquirecredentials,beforetheyestablishaGSS-
quirecredentials.InKerberosthesecredentialsaresocalled context.Thisisdonebycalling
1of13GSS Acquire cred
In:
(
desired name INTERNALNAME
lifetime req INTEGER
desired mechs SETOFOBJECT
IDENTIFIER
(cid:1) (cid:1) (cid:1) )
Out:
(
output cred handle CREDENTIALHANDLE
(cid:1) (cid:1) (cid:1) )
In our case, i.e. the client wants to establish an SPKM-
GSS-context,desired nameis theclients(user-)name, the
lifetime reqisin seconds, e.g. 86400foronedayandde-
sired mechs is
f
1 3 6 1 5 5 1
v a r i a n t g
, where
v a r i a n t equals1(forSPKMwithrandomnumbers)or2(forSPKM
withsecuretimestamps),likespecifiedin[1].
BesidesGSS Acquire credtherearefunctionstodestroy
the credentials after use (GSS Release cred), construct
credentialsincrementally(GSS Add cred) and gather in-
formationaboutcredentials
(GSS Inquire cred,GSS Inquire cred by mech).
Assoonasthecredentialisavailabletheclientmaycall
GSS Init sec context
In:
(
claimant cred handle CREDENTIALHANDLE
input context handle CONTEXTHANDLE
targ name INTERNALNAME
mech type OBJECTIDENTIFIER
mutual req flag BOOLEAN
lifetime req INTEGER
input token OCTETSTRING
(cid:1) (cid:1) (cid:1) )
Out:
(
major status INTEGER
output context handle CONTEXTHANDLE
output token OCTETSTRING
mutual state BOOLEAN
lifetime rec INTEGER
(cid:1) (cid:1) (cid:1)
beginningofcontextestablishment,thereisnocontextand
thus input context handle is NULL. The targ name is the
name of the serverto connectto and the mech typeis like
above. If mutual authentication is required, which is rec-
ommended, the mutual req flag is TRUE. Finally the de-
siredcontextlifetime,i.e.lifetime reqandtheinput tokenis
handedover.Sincethereisnopreceedingtokeninput token
isNULL.
The outputof this callconsists of the major status, a han-
dle to the context to be established, the output token to
be passed to the server, the mutual state flag and the life-
time rec,whichindicatesthe’timetolive’inseconds.Since
werequestedmutualauthenticationthemutual state-flagis
setandthemajor statusisGSS S CONTINUE NEEDED.
Theclientknows,thattheoutput tokenhastobepassedto
theserver.
Note, that the presented interface description is not at all
complete. We confine ourselves to a rather small subset
which is needed to explain how a typical mutual authen-
ticationworks.
After the server also got his credential by calling
GSS Acquire cred he can use this handle, NULL as in-
put context handleandthereceivedtokentocall
GSS Accept sec context
In:
(
acceptor cred handle CREDENTIALHANDLE
input context handle CONTEXTHANDLE
input token OCTETSTRING
)
Here claimant cred handle is the handle to the credential
obtained by GSS Acquire cred. Since we are just at the
(cid:1) (cid:1) (cid:1) )
Out:
(
major status INTEGER
src name INTERNALNAME
output context handle CONTEXTHANDLE
mutual state BOOLEAN
lifetime rec INTEGER
output token OCTETSTRING
(cid:1) (cid:1) (cid:1) )
Since the mutual state-flag is set, the output token has
to be passed back to the client. For the server how-
ever the contex establishment is finished, because ma-
jor status is GSS S COMPLETE. The client again calls
GSS Init sec context with the received token. Now the
major statusisGSS S COMPLETE.Thecontextestablish-
mentisfinished,bothpeersaccesstheparametersandkeys
of the negotiatedsecuritycontextvia their context handle.
2of13Ifsomethingwentwrongduringthiscontextestablishment,
if the’timeto live’is upor thecontextwillnotbeneeded
anymoreitmaybedeletedwithGSS Delete sec context.
3 SimplePublic KeyMechanism
Inthissectionwewillbrieflyrecallthemostbasicfacts
aboutSPKM.Likeintheprevioussectionwewillfocuson
thecontextestablishmentratherthantheper-messagecalls.
Thecredentialmanagementwill bediscussedin section4.
Foracomprehensivetreatmentwereferto[1].
SPKMpermitsthenegotiationofthealgorithmstobeused
for integrity (I-algs) and confidentiality (C-algs) purposes,
oneway functions for subkey derivation (O-algs) and (K-
algs) for key establishment. Note, that the initial negoti-
ation in SPKM might be enhanced by concepts presented
in [3]. The I-alg md5WithRSAEncryption and the K-alg
RSAEncryption defined in [29] are specified mandatory,
while other algorithms are recommended or optional. In
SPKM there are two differentvariantsspecified. SPKM-1
usesrandomnumbersforreplaydetectionduringauthenti-
cationandSPKM-2requeststhepresenceofsecuretimes-
tamps. Since these secure timestamps might not be avail-
ableinsomeenvironmentsandmutualauthenticationisrec-
ommended, we briefly recall the well known Three-Way-
Authenticationspecifiedin[13]or[11]section10.4.
The initiator (client) wants to authenticate to the target
(server) and vice versa. The client
C
and the server
S are in possesion of their own credentials, i.e. the se-
cretkeysforencryption
S e C
/
S e S
andsignatures
S s C
/
S s S and the correspondingcertificates
C e r t P e C ; C e r t P s C
and
C e r t P e S ; C e r t P s S
containing the respective public keys.
The credential management is discussed in the following
sections more detailed. For authentication we need an
encryption-
C i p = E N C ( M ; P e )
and decryption algo-
rithm
M = D E C ( C i p ; S e )
, e.g. RSAEncryption and
a signature-
S i g = S I G ( h ( M ) ; S s )
and verification al-
gorithm
h ( M ) = V E R ( S i g ; P s )
, like md5WithRSAEn-
cryption. Furthermore
R C
and
R S
are random numbers
generatedbytheclientandserverrespectively.Thesymbol
j
denotes concatenation, e.g.
R C jS
is the clients random
numberconcatenatedwiththeserversidentity.Theauthen-
ticationproceduretypicallyworkslikethis:
(1)
C
generates
R C
,
M = R C jS jC
andsigns
F = S I G ( h ( M ) ; S s C ) (2)
C ! S : M ; F ; C e r t P e C ; C e r t P s C (3)
S
verifies
C e r t P e C ; C e r t P s C
identities
,checksifthe
S
and
C
areok
andverifies
h ( M ) = V E R ( F ; P s C ) (4)
S
generates
R S
,arandomsession-key
K C S
,
N = C jR S jR C jK C S
and
computes
G = E N C ( N ; P e C ) and
H = S I G ( h ( N ) ; S s S ) (5)
S ! C : G ; H ; C e r t P e S ; C e r t P s S (6)
C
verifies
C e r t P e S ; C e r t P s S
,decrypts
G
,
checks
C
and
R C
,storesthesession
key
K C S
,verifiesthesignature
H
and
computes
I = E N C ( R S ; P e S ) (7)
C ! S : I (8)
S
finallydecrypts
R
0
S = D E C ( I ; S e S ) andchecks,whether
R S = R
0
S
Note,thatiftheclientknowsthecertificatefortheserver’s
encryptionkey
C e r t P e S
priorto(1),hecaninsteadofsend-
ingtheplainmessage
M
in(2)send
E = E N C ( M ; P e S ) forevenmoresecurity. Ofcoursetheserverhastodecrypt
E
in(3),i.e.
M
0
= R C jS = D E C ( E ; S e S )
. Furthermore
[1] covers the possibility that the initiator remains anony-
mous. In this case, the client does not send his identity C
instep(1)andthetokensareMACedinsteadofsigned. As
before,thecontentoftheexchangedtokenspresentedhere
isnotcomplete. Foracomprehensivetreatmentwereferto
[1].
4 Standard Credential Management -X.509
In this section we will focuson the credentialmanage-
ment for SPKM. In [1] there is not very much said about
thisproblem.
”ThekeymanagementemployedinSPKMisin-
tendedtobeascompatibleaspossiblewithboth
X.509 [11] and PEM [15], since these represent
large communities of interest and show relative
maturityinstandards.”
In this section we will treat this topic with more scrutiny.
Before we will discuss the public key management more
detailed,wewillbrieflyrecallhowthesecretkeysarehan-
dled.
Since the secret signature key represents the owners iden-
tity for a long time, possibly manyyears, it has to be pro-
tected very carefully. This secret key is stored right after
keygenerationinasecureenvironment(PSE),usuallyona
tamperproofsmartcard. Ideallythe keygenerationitself is
performedinsidethecard,whichisnotpossiblewithevery
card,becausekeygeneration,especiallyforRSAkeys,isa
verytimeconsumingoperation. Ifnochipcardisavailable
to housethesecretkey itmaybe symmetricallyencrypted
3of13withakeyderivedfromtheenteredpassword,likespecified sion,thenthatsystemshallconsiderthecertificateinvalid.”
inPKCS#5[31].Inanycasethesecretkeysandothersensi- [12]
tiveinformationlikethetrustedpublicrootkeyandinsome
casesthelatestCertificateRevocationList,oritshash-value SinceX.509v3isdesignedtoachievemaximumflexibility,
shouldonlybeaccessibleafterenteringthepassword. The itwasnecessarytocomplement[12]with amoreconcrete
timeavailableforthisaccess,beforethePSEwillbeclosed profiletailormadeforinternetapplication[8]. Wewillsee,
again, should be as short as possible, that no attacker will thatthisPKIX profile, whichis still in draftstatus, almost
havetheopportunitytoobtainthesecretkeyeasierthanin- fits our needs. Because a comprehensive treatment would
vertingthe onewayfunction. If, forusability reasons, it is bebeyondthescopeofthiswork,wewillonlypresentthe
notpossibletomaketheuserenteringthepasswordevery- extensionsin[8]whichareaffectedbyourproposal.
timethesecretkeyisneededtoestablishanewGSS-context
weproposetousetheSSLoginmechanismdiscussedinsec-
tion5.
Before the keys can be used the public key has to be cer-
tified, by a trusted Certification Authority (CA). The cer-
tification request may be proceeded using PKCS#10 [32].
A certification request consists of the user’s distinguished
name,thepublickey,andoptionallyasetofattributes,col-
lectivelysignedwiththecorrespondingsecretkey.Thiscer-
tificationrequestis sentto a CA, whichverifiesthe signa-
tureandtransformstherequestintoanX.509publickeycer-
tificatewhichishandedbacktotheuserandmaybestored
in a public X.500 Directory. This Directory contains cer-
tificates andcertificate revocationlists (CRL) and may for
examplebeaccessedviatheLightweightDirectoryAccess
Protocol(LDAP)[35].
The certificate format X.509 v1 [11] and the related pub-
lic key infrastructures[15] showed out to be deficient and
toorestrictiveforbroadapplication.Especiallytherigidhi-
erarchicalmodelwith InternetPolicyRegistrationAuthor-
ity(IPRA),PolicyCertificationAuthorities(PCA)andCAs
andthe namesubordinationruleproposedin RFC1422,as
wellasthemissingpossibilitytoextendthecertificatesby
application specific information turned out to be unsuit-
ableforalotofenvironments. ThereforeISO/IECdefined
the X.509v3 format[12], which overcomesthis problems
byprovidingcertificateextensionstotheX.509v1format.
Note, that the v2 format equals the v1 format extended
by some specifications to make the Directory access eas-
ier. The extensions relating to certificate policies obviate
the need for PCAs and the constraintextensionsmake the
name subordination rule unnecessary. An extension field
consists of an extension identifier, a criticality flag and a
DER-encodingofadatavalueofanASN.1typeassociated
withtheidentifiedextension. Someextensionsspecifiedin
[12] have to be non-critical. In all other cases, e.g. the
five discussed below, the criticality is at the option of the
certificate issuer. In X.509v3no certificate extensionsare
forcedtobecritical. ”Ifanextensionisflaggedcriticaland
acertificate-usingsystemdoesnotrecognizetheextension
fieldtypeordoesnotimplementthesemanticsoftheexten-
(cid:15)
SubjectAlternativeName
Thisextensionprovidesthepossibilitytoassociatead-
ditional identities with the subject referenced in the
subjectdistinguishedname.Ifthisextensionispresent
and the subject distinguished name is empty this ex-
tensionshouldbecritical. Possiblenametypesare
– rfc822Name(emailadress)
– dNSName
– X400Address
– directoryName
– ediPartyName
– uniformResourceIdentifier
orany
– otherName
(cid:15)
IssuerAlternativeName
Thisextensionallowstoassociateadditionalidentities
with the issuer of a certificate. The designated name
typesandthecriticalityflagsarelikeabove.
(cid:15)
Basicconstraints
The basic constraints extension allows to distinguish
between an end user- and a CA-certificate. There is
abooleanflag’cA’whichissettoFALSEbydefault.
IfthiscA-flagisFALSE, thecertificatebelongstoan
end user. Since this extension is recommendedto be
criticalanendusercannotactasaCAwithoutnotice.
If an end user, i.e. cA=FALSE, signs a certificate it
willnotbevalid.Optionalthelengthoftheverification
pathmaybelimitedto’pathLenConstraint’.
(cid:15)
Keyusage
This extension allows to restrict the usage of the key
containedin thecertificateandisrecommendedtobe
critical. TheinformationisrepresentedinaBitString,
wherethebitsareasfollows:
(0) digitalSignature
(1) nonRepudiation
4of13(2) keyEncipherment
(3) dataEncipherment
(4) keyAgreement
(5) keyCertSign
(6) cRLSign
(7) encipherOnly
(8) decipherOnly
If only one user key pair is available, (0) through (4)
areset,whiletheCA’scertificatehas(5)and(6)set. If
theuserhasmorethanonekeypair,(0)and(1)isset
for the signature key and the bits (2) through (4) are
set for the encryption key. If (4) is set, it is possible
to restrict the usage of the key to enciphering (7) or
deciphering (8). In any case a user key would never
have(5)or(6)set. Thusitisimpossiblefora userto
actasaCAwithoutnotice.
(cid:15)
differentserversat differenttimes, the PSE has to be kept
openforalongtimeortheuserhastoenterthePINforev-
erynewconnection.Toovercomethisproblemwepropose
to use the SSLogin variant, which combines security and
usercomfort. Itworkswithtemporaryasymmetrickeysin-
steadofthemorevaluablelongtermkeys. Thephilosophy
of SSLoginis equalto Kerberos’[18], where we use tem-
porarykeys(tickets)withlimitedlifetimetoauthenticate.If
anattackermanagestoaccessthememoryortheharddrive
he will only get the temporary secret keys instead of the
valuablelongtermkeys.Ifthisdisclosureisrecognizedthe
temporary certificate may be revoked. Note, that the Dis-
tributed AuthenticationSecurity Service (DASS) [14] also
proposes the use of ”self-certificates”. However the main
purposeofself-certificationthereistoimplementa”smooth
keyrollover”,ifthekeyshavetobechanged.
WeproposethefollowingoperationsforSecureSingleLo-
Extendedkeyusage
gin:
Here it is possible to restrict the key usage even fur-
ther by explicitly specifying Key Purposes. This ex- 1. Entering the PIN and opening the PSE to access the
tensionsmaybeused inadditiontoor inplace ofthe longtermsecretkeys
basic purposes indicated in the Key usage extension
2. Generationoftemporarykey(s)
field.ThisextensionfieldwasnotpresentintheX.509
recommendations[12] and the PKIX profile [8] until 3. Self-Certificationof the temporarypublic key(s) with
recently. Experiences in deploying the base standard thelongtermsignaturekey
showed, that there are situations, in which it is nec-
4. ClosingthePSE
essary to specify the key usage somewhat more con-
crete. Inthenextsectionwewillsee,thattheconflicts Note,thatinsomeenvironmentsafurtherbenefitofSSLo-
between our proposed credential management (in an ginmightbe thatit onlyrequiresa certified signaturekey.
earlierversionofthispaper)andthebaseX.509stan- However,iftwokeypairsareavailable,thesecuritycanbe
dardmay now be elegantlyresolvedby introducinga furtherenhanced:
tailormadeExtendedkeyusagefield. ThefirstGSS-contextcouldbeestablishedasusualwiththe
longtermkeysandthetemporarysecretkey(s)generatedin
Thenameextensionsarethoughttoimprovethenamemap-
2. couldbePKCS#5encryptedwiththesymmetricsession
pingfordifferentenvironments,like Email, X.400mailor
keynegotiatedinthefirstcontextestablishment.Inthiscase
EDIforexample.
we haveto set upa handleto thisspecialcontextandtake
care,ifthiscontextistobedeleted.
The basic constraints extension is very important, since
it enables the distinction between end user- and CA-
Furthermoreitispossibletoparallelizethistwosteps. I.e.
certificates. Itobviatestheneedforthenamesubordination
thetemporarykey(s)maybegenerated,whileoneis wait-
rule in X.509 v1. Therefore it has to be critical, i.e. the
ingforthepeer’sresponse.
certificateverificationwillfail, if thisextensionisnotrec-
ognized or if the certificate is certified (signed) by an end
If we use temporary RSA-keys we only have to generate
user. Whiletheconservativeevaluationofthisextensionis
onekeypairwhichcanbeusedforsignaturesandencryp-
very importantand totally sensible in general, we need to
tion. However it is well known, that the generation of
evaluate this extension a little more relaxed to implement
an RSA key pair is a rather time consuming task. Two
ourproposedSSLogin,likediscussedinthenextsections.
large (strong) primes
5 Secure SingleLogin
In SPKM the secret keyshaveto be available forevery
contextestablishment, like pointed out in section 3 and 4.
SinceaclientusuallyrequestsmultipleGSS-connectionsto
p
and
q
have to be found. The pub-
lic modulus
n = p q
and the public exponent
e
has to be
computed by inverting the random secret key
d
modulo
’ ( n ) = ( p (cid:0) 1 ) ( q (cid:0) 1 )
. The bottleneck in this proce-
dure is to find the two primes. Since it is not possible to
use multiplepairs
( e 1 ; d 1 )
, ...
( e i ; d i )
with the same mod-
ulus
n
, because of the common modulus attack [33, 5],
5of13wehavetoperformthetedioussearchforgoodprimesev-
erytime we generate a temporary key pair. Therefore we
recommend to use discrete logarithm based systems, like
e.g. ElGamal-encryption [6] and DSA-signatures [25] for
SSLogin-SPKM.In this case we only have to search for a
suitable prime once. The actual key generationfor a tem-
porarykey,whichistypicallyperformedeveryday,consists
ofasimpleexponentiationofthegeneratingelement
g
with
therandomsecretkey.Thatiswhyweproposetoextendthe
listofrecommendedalgorithmsin[1]bythetwofollowing
algorithmsdefinedin[27]
1. elGamalALGORITHM
PARAMETERNULL::=
f
1314721
g
2. dsaWithSHA1ALGORITHM
PARAMETERDSAParameters::=
f
13147327
g
Note,thatavalidalternativemightbetheapplicationofthe
DSA-variantproposedby Nybergand Ru¨ppel [26], which
featuresmessage-recovery. Themosttimeconsumingpart
in these algorithmsis the modular exponentiation. There-
forethetimerequiredforcontextestablishmentmaybesig-
nificantly reducedby applyingsome precomputationvari-
ant,like[4,19]forexponentiationofthegeneratingelement
g
. Note,thattheseprecomputationvariantsarenotapplica-
bletoRSA-typecryptosystems.
Sincethereisnoknownweaknessinusingthesameprime
p forElGamalencryptionandDSAsignatures,wemaysave
some time and memoryby doingso. In this case only the
parameters
g e
forElGamalencryptionand
g s
forDSAsig-
naturesare different, because
g e
usually is of order
p (cid:0) 1
,
whilethe orderof
g s
is
q
, a 160bitprimefactorof
p (cid:0) 1
internet application. In this section we will give concrete
recommendationsforthe credentialmanagementto be ap-
pliedinSPKM.WeproposetousethePKIXprofilewiththe
followingincrementalchangestoallowtheself-certification
ofthetemporarypublickey(s).
WedefinetwonewkeypurposesfortheExtendedkeyusage
field:
.
Also, one might think of using the analogous algorithms
basedonellipticcurves,likeproposedin[24,17]andcur-
rentlystandardizedin[10].
Note, that the self - certification in step 3. violates the
PKIX-profile [8], because an end user is not allowed to
signcertificates. IntheproposedSSLogin-SPKMhowever
itisessential,thatthisself-certificationisallowed.Itwould
taketoolongforausertocontactatrustedcertificationau-
thority to get the temporary public key(s) certified. Since
theconservativeevaluationofthebasicconstraintsandthe
key-usageextensionisnotnecessaryinthiscontext,wecan
change the proposed SPKM-profile accordingly, like dis-
cussedinthenextsection.
6 Credential Management forSPKM
In section 4 we briefly discussed the standard creden-
tialmanagement,i.e. thesecretkeyhandling,theX.509v3
certificates[12]andthemoreconcretePKIXprofile[8]for
(cid:15)
id-kp-SignTempCert
OBJECTIDENTIFIER::=
f
id-kp1
g If this key purpose is present it is allowed to sign a
certificate for a temporary key, even if the cA-flag in
theBasicconstraintsextensionissettoFALSE.
TheKeyusagebit(0)’digitalSignature’hastobeset
and(1)’nonRepudiation’maybeset.
(cid:15)
id-kp-Temporary
OBJECTIDENTIFIER::=
f
id-kp2
g This key purpose indicates, that it is a temporary
key and that the next certificate in the verification
chain may be a user certificate in which id-kp-
SignTempCerthastobepresent.
Since the proposed SSLogin mechanism is tailormade for
SPKMwerecommendtosubordinatethesetwoobjectiden-
tifierstoSPKM.Thusid-kpOBJECTIDENTIFIER::=
f
id-spkm 3
g
and id-spkm OBJECT IDENTIFIER::=
f
1 3
61551
g
.
To implement the proposed SSLogin we will allow a
slightlymorerelaxedcertificateverificationforthistempo-
rarycertificates,likediscussedinthesequel.
We will assume, that a user already got X.509 v3 / PKIX
certifiedpublickeys. We willonlyneedthesignaturekey,
where’id-kp-SignTempCert’ispresent. Therelevantfields
of a certificate containing the users public signature key
P s U
informallylooklikethis:
User-Certificate-
C e r t P s U
:
(cid:15)
issuer=CA
(cid:15)
validity=
– U-notBefore
– U-notAfter
(cid:15)
subject=User
(cid:15)
subjectAltName=UserAlt
(cid:15)
issuerAltName=CAAlt
(cid:15)
Keyusage
6of13– critical=TRUE
– digitalSignature=TRUE
– nonRepudiation=TRUE
– allothers=FALSE
(cid:15)
Extendedkeyusage
– critical=FALSE
– id-kp-SignTempCert
(cid:15)
Basicconstraints
– critical=TRUE
– cA=FALSE
ThiscertificateisissuedbyatrustedCA.I.e.itissigned
with the CA’s private key. In the certificate for the corre-
spondingCA-publickey,theKey Usageindicates’keyC-
ertSign’ and ’cRLSign’. The cA-Flag in the Basic con-
straintsextensionisTRUE.
Now the User will be allowed to generate and self-certify
temporary public keys, like proposed in section 5 2. and
3. respectively. Note, that the Extended key usage ex-
tensionaboveisflaggednon-critical,becausethelongterm
signaturekeymaybeusedforotherpurposesaswell. Thus
thepresenceof’id-kp-SignTempCert’onlyhasinformative
character.Thecertificateforthetemporarypublicsignature
keywill(informally)looklikethis:
Temporary-User-Signature-Certificate-
C e r t P s T U
:
(cid:15)
issuer=User
(cid:15)
validity=
– T-notBefore
– T-notAfter
(cid:15)
subject=User
(cid:15)
subjectAltName=UserAlt
(cid:15)
issuerAltName=UserAlt
(cid:15)
Keyusage
– critical=TRUE
– digitalSignature=TRUE
– allothers=FALSE
(cid:15)
Extendedkeyusage
– critical=TRUE
– id-kp-Temporary
(cid:15)
Basicconstraints
– critical=TRUE
– cA=FALSE
The certificate for the temporary public encryption key
lookssimilar,exceptfortheKeyusageextension:
Temporary-User-Encryption-Certificate-
C e r t P e T U
:
(cid:15)
(cid:15)
(cid:1) (cid:1) (cid:1)
Keyusage
– critical=TRUE
– keyEncipherment=TRUE
– keyAgreement=TRUE
– allothers=FALSE
Clearly, a certificate verificationprocedureconformto the
PKIXprofilewillrejectthistemporarycertificate, because
it is certified (signed)with an end user signaturekey. The
(longterm)usercertificate
C e r t P s U
hasnotsetthe’keyC-
ertSign’bitandthe’cA’flagin theBasic constraints ex-
tension is FALSE. Therefore we propose a somewhat re-
laxedcertificateverification.Acertificatewillbevalid,if
(cid:15)
allcertificatesintheverificationchainarePKIXcon-
form
orif
(cid:15)
allofthefollowingrequirementsarefulfilled:
1. The first (temporary) certificate has the following
properties:
1.1 issuer=subject,
1.2 issuerAltName=subjectAltName,
1.3 validity.T-notBefore
>
validity.U-notBefore,
1.4 validity.T-notAfter
<
validity.U-notAfter,
1.5 theKeyUsageextensioniscritical,
1.6 nonRepudiation=FALSE,
1.7 keyCertSign=FALSE,
1.8 cRLSign=FALSE,
1.9 theExtendedKeyUsageextensioniscritical,
1.10 ’id-kp-Temporary’ispresent
1.11 theBasicconstraintsextensioniscritical,
1.12 cA=FALSE,
2. allothercertificatesinthecertificationchainarePKIX
conform,
7of133. and the second (User’s long term) Certificate has the
followingproperties:
3.1 theKeyUsageextensioniscritical
3.2 digitalSignature=TRUE
3.3 ’id-kp-SignTempKey’ispresent
It is obvious, that this requirements restrict the presented
temporary certificate concept to the first certificate in the
verification chain. Since the Basic constraints and Key
Usageextensionis set appropriate,it will notbe possible
toactasCA,bymalicouslypresentingthetemporarycertifi-
catetoanordinary(PKIXconform)verificationprocedure.
Furthermorethevalidityperiodofthetemporarycertificate
issmallerthanthevalidityperiodofthelongtermusercer-
tificate and it is not possible to issue such temporary cer-
tificatesforothersubjects. Typicallythevalidity-periodof
thetemporarycertificatewillnotexceedoneday. Thelast
requirementmakes sure, that only the long term signature
keycanbe usedto producetemporarycertificatesandthat
thisself-certificationis allowedatall. Note, thatotherex-
tensions, likePolicy constraints are notaffectedby these
changes,becauseweself-certifyonlyuserkeys.
7 Security -Usability-Efficiency
In this section we will briefly recall the different vari-
ants for the SPKM credentialmanagement, comparethem
in terms of Security, Usability, Time-Efficiency and
Space-Efficiency and give more concrete recommenda-
tions for implementation. To compare the time efficiency,
we group the operations to be performed in Once, Every
GSS-session and Every GSS-contextestablishment and es-
timate the workloadin terms of modular(1024bit) multi-
plications.Tocomparethespaceefficiencyweestimatethe
number of bytes, which have to be stored permanently in
Secure Storage, i.e. inside the PSE and Insecure Storage,
i.e. on the harddisk. We may assume, that a user already
gotcertifiedlongterm(1024bit)RSA keypairsforsigna-
turesand encryptionand that the SPKM - credentialman-
agementlikepresentedintheprevioussectionisappliedto
allvariants.Wewillonlyfocusonadditionaltimeandspace
requirements. I.e. we neither consider the time needed
to generate the long term keys, nor the space required to
store them in the PSE. Since we neglect some operations,
e.g. computinghashvalues,generationofrandomnumbers
etc. and have to ’convert’the time for some operationsto
our’unit’(1024bitmodularmultiplication),thisestimates
are very rough in nature. We may assume, that the se-
cretRSAkeysarestoredintheCRTRSAPrivateKey-format
[28,29],i.e.
p ; q ; d p = d m o d p (cid:0) 1 ; d q = d m o d q (cid:0) 1
and
i n v q = q
(cid:0) 1
m o d p
operation by application of the Chinese Remainder Theo-
rem. Inthiscasethe decryptionofthe ciphertext
tospeedupthedecryptionandsignature
C
works
likethis:
M
M
M
M
q
p
p
=
=
=
=
C
C
M
( M
d q
m
d p
m
(cid:0)p
(cid:1)p
o d q
o d p
mM q
i n v q m
o d
o
p
d p ) q + M q
We use an
m
bit window method (see e.g. [16]) for ex-
ponentiation, where
l
is the bitlength of the exponent. On
averagewewillneedabout
2
m (cid:0) 1
+
2
m
2
(cid:0)
m
1
d l = m e + l
(1)
modular multiplications. Thus we may optimally choose
m = 5
forbitlengthupto512and
m = 6
forbitlenght768
and 1024. Therefore we need about
2 (cid:1) 6 2 8 + 2 = 1 2 5 8 modular(512bit)multiplicationsforone1024bitRSAsig-
natureusingtheCRT.Ifweassume,thatthecomplexityof
the implementedmultiplication algorithm is quadratic this
equalsabout
3 1 5
modular(1024bit)multiplications. Ifwe
use the Fermat number
F 4 = 2
1 6
+ 1
as public exponent
e
,wecanperformtheencryptionandsignatureverification
withonly
1 7
modular(1024bit)multiplications. Ifweuse
arandom
e
wewouldneedabout1224modular(1024bit)
multiplications. We assume, thatthe lengthofevery(long
term)certificationpathisone.
1. SingleLogin
This variant is the most obvious way for handling
SPKM credentials. Theuser opensthe PSE by enter-
ingthePIN.ThePSEiskeptopenandthesecretkeys
areaccessible,untiltheuserlogsout.
1.1 Security
Sincethe(longterm)secretkeysareexposedfor
alongtime,wemayclassifythesecuritylow.
1.2 Usability
SincetheuseronlyhastoenterthePINonce,the
usabilityisgood.
1.3 Time-Efficiency
1.3.1 Once
/
1.3.2 EveryGSS-session
/
1.3.3 EveryGSS-contextestablishment
We use the Three-Way authentication pre-
sented in section 3. Client and server have
to perform one signature, one verification,
8of13one encryption and one decryption. If the
certificationpathhaslengthone,wehavein
total two RSA-decryptions and four RSA-
encryptions. Thuswe needabout
4 (cid:1) 1 7 =
2 (cid:1) 3 1 5 + 698multiplications(using
e = F 4
)
orabout
2 (cid:1) 3 1 5 + 4 (cid:1) 1 2 2 4 =
5526modular
(1024bit)multiplicationsingeneral.
1.4 Space-Efficiency
1.4.1 SecureStorage
/
1.4.2 InsecureStorage
/
2. MultipleLogin
ThisvariantisverysimilartotheSingleLoginvariant.
The difference is, that we close the PSE after every
contextestablishment. Thereforetheuserhastoenter
thePINforeverynewcontexttobeestablished.
2.1 Security
SincethePSEwiththe(longterm)secretkeysis
closedalmostalways,thesecurityishigh.
2.2 Usability
SincetheuserhastoenterthePINforeverycon-
texttobeestablished,theusabilityisbad.
2.3 Time-Efficiency
2.3.1 Once
/
2.3.2 EveryGSS-session
/
2.3.3 EveryGSS-contextestablishment
Like in 1.3.3 we need about 698 modular
(1024bit)multiplications,ifweuse
e = F 4
3.3 Time-Efficiency
3.3.1 Once
/
3.3.2 EveryGSS-session
We have to generate a temporary RSA-key
pair at the time of Login. Since it has a
limitedlifetime,weconsider768bitkeysto
be more than sufficient. A crude estimate
forthe keygeneration(intermsof1024bit
modular multiplications) is about 108000.
Note, that this estimate is based on practi-
calmeasurementswithSECUDE[7],rather
than theoretical considerations. Since SE-
CUDEtakesaveryconservativeapproachin
prime generation, this value might be con-
siderable smaller in other implementations.
E.g. SECUDEuses15basesfortheMiller-
Rabin pseudo primality test and trial divi-
sion with the first 1000primes. Neglecting
thetrialdivisionthiscorrespondstoaprob-
ability
andabout5526modular(1024bit)multipli-
cationsingeneral.
2.4 Space-Efficiency
2.4.1 SecureStorage
/
2.4.2 InsecureStorage
/
3. SecureSingleLogin-RSA
This variant uses the SSLogin mechanism discussed
insection 5, wherethe temporarykeypair isan RSA
key-pairusedforsignaturesandencryption.
3.1 Security
Since the (long term) secret keys are only ex-
posed until the temporary certificate is signed,
thesecurityishigh.
3.2 Usability
TheuseronlyhastoenterthePINonce. There-
foretheusabilitymaybeclassifiedgood.
< 2
(cid:0) 1 2 1 , that
p
and
q
arecomposite
384bitnumbersinsteadofprimes(see[23],
page 147). Finally we need another 315
multiplications to sign the certificate con-
taining the temporary public key. Thus we
needabout108315modular(1024bit)mul-
tiplicationsintotal.
3.3.3 EveryGSS-contextestablishment
We have to perform two (768 bit)
RSA-encryptions and two (768 bit) RSA-
decryptions.Weneedabout
2 4(cid:1) 7 5 + 2 = 9 5 2 modular(384bit)multiplicationsforonede-
cryptionusingthe CRT and
1 7
respectively
9 2 6
modular (768 bit) multiplications for
one encryption. The length of the verifica-
tion path now is two (for only one certifi-
cate). Therefore we need
2 (cid:1) 1 7 = 3 4
(us-
ing
e = F 4
) or
2 (cid:1) 1 2 2 4 = 2 4 4 8
modular
(1024bit)multiplicationstoverifiythepeers
certificate. Thus, if we assume quadratic
complexity for multiplication we need to-
tally about
( 7 6 8 = 1 0 2 4
2
2
)
(cid:1)
+
9 5 2
3 4
(cid:1)
(cid:25)
( 3 8 4 = 1 0 2 4 )
2
+ 2 (cid:1) 1 7 (cid:1) 321modular(1024bit)
multiplications (using
e = F 4
) or
( 3 8 4 = 1 0 2 4 )
2
+ 2 9(cid:1) 2 6 ((cid:1) 7 6 8 = 1 0 2 4 )
2
+
2
2
(cid:1)
4
9
4
5
8
2
(cid:25)
(cid:1)
3758 modular (1024 bit) multiplications in
general.
3.4 Space-Efficiency
3.4.1 SecureStorage
/
3.4.2 InsecureStorage
To store the secret (768 bit) key in CRT-
9of13format,weneedabout
5 (cid:1) 3 8 4 = 8 = 2 4 0
byte.
Furthermorewehavetostorethetemporary
certificate,whichmaybeconservativelyes-
timated with 500 bytes. Thus in total we
needto store about740 morebytes e.g. on
theharddrive.
4. SecureSingleLogin-DLbased(withoutPrecomputa-
tion)
This variant also uses the SSLogin mechanism dis-
cussed in section 5, where the temporary key pairs
are ElGamal for encryption and DSA for signatures.
Allexponentiationsareperformedusingthe(ordinary)
windowmethod[16] with a suitable windowsize de-
pendingonthebitlengthoftheexponent.
4.1 Security
Since the (long term) secret keys are only ex-
poseduntilthetemporarycertificatesaresigned,
thesecurityishigh.
4.2 Usability
SincetheuseronlyhastoenterthePINonce,the
usabilitymaybeclassifiedgood.
4.3 Time-Efficiency
4.3.1 Once
We haveto generatea 768bitprime
p
, and
theparameters
q
,
g s
and
g e
. Thisispossible
inthetimeneededtoperformabout116000
modular (1024 bit) multiplications. Like
in 3.3.2 this estimate is based on measure-
ments with SECUDE and might be some-
whatsmallerinotherimplementations.
4.3.2 EveryGSS-session
We have to generate a temporary ElGamal
andDSAkeypairatthetimeofLogin.This
may be performed by a simple exponentia-
tionforeach keypair. Accordingto (1)this
canbedonewith926modular(768bit)mul-
tiplications for the ElGamal key pair (win-
dow width
m = 6
) and 207 modular (768
bit) multiplications with the 5-bit window
methodfortheDSAkeypair. Note,thatfor
DSA the private key
x s
and the public key
y s = g
x
s
s
are 160 bit numbers. Here we
have to sign two certificates, i.e. we need
about
2 (cid:1) 3 1 5 = 6 3 0
modular (1024 bit)
multiplications. Assuming quadratic com-
plexity for multiplication this equals about
( 7 6 8 = 1 0 2 4 )
2
(cid:1) ( 9 2 6 + 2 0 7 ) + 6 3 0 (cid:25)
exponentiations and a decryption is essen-
tially another exponentiation. For each ex-
ponentiation we need about 926 (768 bit)
multiplications. A DSA signature may be
performed with about
1267
modular(1024bit)multiplicationsintotal.
4.3.3 EveryGSS-contextestablishment
An ElGamal encryption is essentially two
2 0 7 + 2 0 = 2 2 7 (768bit)multiplications.Note,thatwecon-
servatively estimated the time to compute
s = ( k
(cid:0) 1
( h ( m ) + x r ) ) m o d q
with20(768
bit)multiplications.Asignatureverification
needs about
2 (cid:1) 2 0 7 + 2 0 = 4 3 4
modular
(768 bit) multiplications. For the verifica-
tion of the two (peer-) certificates we need
4 (cid:1) 1 7 = 6 8
(1024bit)multiplicationsusing
e = F 4
andabout
4 (cid:1) 1 2 2 4 = 4 8 9 6
modular
(1024bit)multiplications. Thusintotalwe
needabout
4 3 4 ) + 6 8 (cid:25)
( 7 6 8 = 1 0 2 4 )
2
(cid:1) ( 3 (cid:1) 9 2 6 + 2 2 7 + 2408(1024bit)multiplications
using
e = F 4
or
2 2 7 + 4 3 4 ) + 4 8
( 7
9 6
6
(cid:25)
8 = 1 0 2 4 )
2
(cid:1) ( 3 (cid:1) 9 2 6 + 7236modular(1024
bit)multiplicationsingeneral.
4.4 Space-Efficiency
4.4.1 SecureStorage
We store the global DL parameters on the
harddriveand compute a hash-value of this
parameters. Beforewe use them, we check
whether this parameters stored in insecure
memory are still OK. Therefore we only
need to store the hash-value (e.g. 20 bytes
withSHA-1orRIPEMD-160)inthesecure
environment.
4.4.2 InsecureStorage
Here we have to store
p ; q ; g e ; g s
perma-
nently. This will take about
7 6 8 + 7 6 8 ) = 8 = 3 0 8
( 7 6 8 + 1 6 0 + bytes. Furthermore
wehavetostorethesecretexponents
x e ; x s needingabout
( 7 6 8 + 1 6 0 ) = 8 = 1 1 6
bytes
and the two (own) temporary certificates
with about
5 0 0 + 4 2 4 = 9 2 4
bytes. Note,
thataDSAcertificateissmaller,thananEl-
Gamalcertificate. Allinallwehavetostore
about
3 0 8 + 1 1 6 + 9 2 4 =
1348bytesonthe
harddrive.
5. SecureSingleLogin-DLbased(withPrecomputation)
This variant also uses the SSLogin mechanism dis-
cussedinsection5,wherethetemporarykeypairsare
ElGamalforencryptionandDSA forsignatures. The
differencetovariant4is,thatweperformtheexponen-
tiationsof
g e
and
g s
usingtheBGMWprecomputation
variantproposedin[4]. Theaveragenumberofmulti-
plicationsusingthisexponentiationtechniqueis
2 m
2
(cid:0)
m
1
d l = m e + 2
m
(cid:0) 3 ;
(2)
10of13where
m
isthewindowwidthand
l
isthebitlengthof
theexponent.Wehavetoprecomputateandstore
g
im
; 0 (cid:20) i (cid:20) d l = m e (cid:0) 1 ;
(3)
where
g = g e
for ElGamal or
g = g s
for DSA re-
spectively. For all other exponentiationsthe ordinary
windowmethod[16]isused.
5.1 Security
Since the (long term) secret keys are only ex-
poseduntilthetemporarycertificatesaresigned,
thesecurityishigh.
5.2 Usability
SincetheuseronlyhastoenterthePINonce,the
usabilitymaybeclassifiedgood.
5.3 Time-Efficiency
5.3.1 Once
The time to generate the global DL pa-
rameters is of course equal to 4.3.1 . We
needabout116000modular(1024bit)mul-
tiplications. Furthermore we have to pre-
computate and store the powers of
g e
and
g s
(see (3) ). According to (2) we opti-
mally choose
m e = 5
for the 768 bit El-
Gamal exponentiations and
m s = 4
for
the160bitDSAexponentiations.Therefore
(according to (3) ) we need
1 5 6
squarings
for the DSA-precomputationand
7 6 3
mod-
ular (768 bit) squarings for the ElGamal-
precomputation. Assuming quadratic com-
plexity for multiplication we need about
( 7 6 8 = 1 0 2 4 )
2
(cid:1) ( 1 5 6 + 7 6 3 ) + 1 1 6 0 0 0 (cid:25) 116517 modular (1024 bit) multiplications
intotal.
5.3.2 EveryGSS-session
We have to generate a temporary ElGamal
andDSAkeypairatthetimeofLogin.This
may be performed by a simple exponenti-
ation for each keypair. According to (2)
we only need about 22 modular (768 bit)
multiplications for the computation of
g
x
s
s
and about 58 modular (768 bit) multipli-
cations to compute
g
x
e
e
. Like in 4.3.2 we
have to sign two certificates, i.e. we need
about
2 (cid:1) 3 1 5 = 6 3 0
modular (1024 bit)
multiplications. Assuming quadratic com-
plexity for multiplication this equals about
( 7 6 8 = 1 0 2 4 )
2
(cid:1) ( 2 2 + 5 8 ) + 6 3 0 (cid:25)
two exponentiations. The first exponenti-
ation
675mod-
ular(1024bit)multiplications.
5.3.3 EveryGSS-contextestablishment
An ElGamal encryption equals essentially
( g
k
m o d p )
needs about 58 multipli-
cations using the precomputation variant.
The second encryption-exponentiation and
the decryption-exponentiation may be per-
formed with about 926 (768 bit) multipli-
cations each using the ordinary 6-bit win-
dow method. A DSA signature may be
performed with about
2 2 + 2 0 = 4 2
(768
bit)multiplications.Asignatureverification
needsabout
2 2 + 2 0 7 + 2 0 = 2 4 9
modular
(768 bit) multiplications. For the verifica-
tion of the two (peer-) certificates we need
4 (cid:1) 1 7 = 6 8
(1024bit)multiplicationsusing
e = F 4
and about
4 (cid:1) 1 2 2 4 = 4 8 9 6
mod-
ular (1024 bit) multiplications in general.
Thus in total we need about
( 5 8 + 2 (cid:1) 9 2 6 + 2 2 7 + 4 3 4 )
( 7
+
6 8
6
=
8
1 0
(cid:25)
2 4 )
2
(cid:1) 1540
(1024bit)multiplications(using
e = F 4
)or
(
4
7
8
6
9
8
6
= 1
(cid:25)
0 2 4 )
2
(cid:1) ( 5 8 + 2 (cid:1) 9 2 6 + 2 2 7 + 4 3 4 ) + 6368modular(1024bit)multiplica-
tionsingeneral.
5.4 Space-Efficiency
5.4.1 SecureStorage
We store the global DL parameters on the
harddriveand computea hash overthis pa-
rameters. Before we use them, we check
whether the parameters stored in insecure
memory are still OK. Therefore we only
need to store the hash-value (e.g. 20 bytes
withSHA-1orRIPEMD-160)inthesecure
environment,e.g.onasmartcard.
5.4.2 InsecureStorage
Herewehavetostore
4 0 ; 0 (cid:20) j < 1 5 4
p ; q ; g
5
e
i
; g
4
s
j
; 0 (cid:20) i < permanently. This will
take about
4 0 ) = 8 = 1
( 7
8 7
6
4
8
0
+ 1 6 0 + 7 6 8 (cid:1) 1 5 4 + 7 6 8 (cid:1) bytes.Furthermorewehave
tostorethesecretexponents
x e ; x s
needing
about
( 7 6 8 + 1 6 0 ) = 8 = 1 1 6
bytes and the
two(own)temporarycertificateswithabout
5 0 0 + 4 2 4 = 9 2 4
bytes. Note, that a DSA
certificate is smaller, than an ElGamal cer-
tificate. All in all we have to store about
1 8 7 4 0 + 1 1 6 + 9 2 4 =
19780 bytes on the
harddrive.
TheresultsofourdiscussionaresummarizedinTable1.
From this table we see, that we can combine security and
usability at only slightly higher expenses at Login - time
andcontextestablishment. TheapplicationofDLbasedal-
gorithmsturnsoutto beverywellsuitedto implementthe
SSLoginvariant,becausethetimefortheactualkeygenera-
tionisnegligiblesmallandmaybewellperformedatLogin
11of13Time-Efficiency Space-Efficiency
Variant Security Usability Once Session Context Secure Insecure
Mult. Mult. Mult. Byte Byte
e = F 4
/gen.
1. SingleLogin low good / / 698/5526 / /
2. MultipleLogin high bad / / 698/5526 / /
3. SSLogin-RSA high good / 108315 321/3758 / 740
4. SSLogin-DL(naive) high good 116000 1267 2408/7236 20 1348
5. SSLogin-DL(prec.) high good 116517 675 1540/6368 20 19780
Table1. VariantsfortheSPKMcredentialmanagement
- time. Furthermore it is possible to speed up the context [2] ANSI:PublicKeyCryptographyUsingReversibleAl-
establishmentbyapplyingexponentiationvariantswithpre- gorithms for the Financial Services Industry: Trans-
computation,whichisnotpossibleinRSA-typecryptosys- portofSymmetricAlgorithmKeysUsingRSA,X9.44-
tems. Inthiscase onlyslightlymorememoryisneededto 1993
storetheprecomputedvalues. Sincetheadditionalstorage
[3] E. Baize, D. Pinkas: The Simple andProtected GSS-
ofabout20000byteshouldbepossibleineveryimplemen-
APINegotiationMechanism,Internet-Draft,16thMay
tation,werecommendtheapplicationofthisexponentiation
1997
technique.
[4] E.Brickell,D.Gordon,K.McCurley,D.Wilson:Fast
8 Conclusion Exponentiationwith Precomputation, Proceedingsof
EUROCRYPT ’93 - LNCS 658, Springer, Berlin,
1994,pp.200-207
Inthispaperwe brieflyrecalledthenecessarybasicsof
theGSS-API,SPKMandX.509v3/PKIXpublickeycerti- [5] J.M. DeLaurentis: A Further Weakness in the Com-
fication.WeproposedconcretechangestothePKIXprofile mon Modulus Protocol for the RSA Cryptosystem,
to enable the application of a Secure Single Login mecha- Cryptologia,v.8,n.3,Jul1984,pp.253-259
nism, whichcombinessecurityanduser comfort. Further-
[6] T. ElGamal: A public key cryptosystem and a signa-
moreweproposedtoextendthelistofrecommendedSPKM
tureschembasedondiscretelogarithms,IEEETrans-
K-algsbysignatureandencryptionalgorithmsbasedondis-
actionsonInformationTheory31,1985,pp.469-472
crete logarithms, like DSA and ElGamal. We compared
the differentvariantsfor SPKM credentialmanagementin [7] GMD/TKT-SIT: SECUrity Development Environ-
termsofsecurity,usabilityandefficiencyandgaverecom- ment for Open Networks - Online Documentation,
mendationsfortheimplementationofthedifferentvariants. http://www.darmstadt.gmd.de/secude/Doc/index.htm
Theproposedchangesforthecertificateverificationinsec-
[8] R.Housley,W.Ford,S.Farrel,D.Solo: InternetPub-
tion6 will appearin a more technicalformin a forthcom-
lic Key Infrastructure, Part I: X.509 Certificate and
minginternet-draft.
CRLProfile,InternetDraft:draft-ietf-pkix-ipki-part1-
06.txt,15thOctober1997
9 Acknowledgement
[9] D. Hu¨hnlein: Generic Security - The GSS-API and
three of its mechanisms, (in german), in FIFF-
I would like to thank the entire SECUDE - team, espe-
Communication97/3’SecurityInfrastructures’,ISSN
ciallyStephanAndre´,PetraGlo¨cknerandHansSchuppfor
0938-3476,pp.38-41,1997
all the fruitfuldiscussions and the anonymousrefereesfor
providingseveralhelpfulremarks. [10] IEEE : IEEE P1363 Working Draft, via
ftp://stdsbbs.ieee.org/pub/p1363/predrafts
References
[11] ISO/IEC 9594-8: Information Technology - Open
Systems Interconnection - The Directory: Authen-
[1] C. Adams: The Simple Public-Key GSS-API Mecha- tication Framework, CCITT/ITU Recommendation
nism(SPKM),RFC2025,Okt.1996 X.509,1993.
12of13[12] ISO/IEC JTC 1/SC 21/WG 4 and ITU-T Q15/7: Fi- [27] OSI/OIW:Part12-OSSecurity(Stable),June1995
nalTextofDraftAmendment1toISO/IEC9594-8on http://nemo.ncsl.nist.gov/oiw/agreements/
CertificateExtensions,June1997 stable/OSI/12s 9506.txt
[13] ISO/IEC 9798-3: Information technology - Security [28] J.J.QuisquaterandC.Couvreur: FastDecipherment
Techniques-Entityauthenticationmechanisms-Part Algorithm for RSA Public-Key Cryptosystem, Elec-
3: Entityauthenticationusingapublickeyalgorithm, tronicsLetters,vol.18,no.21,Oct1982,pp.905-907
ISO/IEC,1993.
[29] RSALab.: PKCS#1-RSAEncryptionStandard,Ver-
[14] C.Kaufman:DistributedAuthenticationSecuritySer- sion1.5,1993
vice(DASS),RFC1507,Sept.1993
[30] RSA Lab.: PKCS#3 - Diffie-HellmanKey-Agreement
Standard,Version1.4,1993
[15] S.Kent:PrivacyEnhancementforInternetElectronic
Mail: Part II: Certificate-Based Key Management,
[31] RSALab.:PKCS#5-Passwordbasedencryption,Ver-
RFC1422,1993
sion1.5,1993
[16] D.E. Knuth: The Art ofComputer ProgrammingVol.
[32] RSA Lab.: PKCS#10 - Certification Request Syntax
2:Seminumericalalgorithms,Addison-Wesley,Read-
StandardVersion1.0,1993
ingMA,1981
[33] G.J. Simmons: A ’Weak’ Privacy ProtocolUsing the
[17] N.Koblitz: EllipticCurveCryptosystems,Mathemat- RSA Cryptosystem, Cryptologia, v.7, n.2, Apr. 1983,
ics of Computation, Vol. 48, N. 177, Jan. 1987, pp. pp.180-182
203-209
[34] J. Wray: Generic Security Service API: C-bindings,
[18] J.Kohl,C.Neumann: TheKerberosNetworkAuthen- RFC1509,Sep.1993
ticationService(V5),RFC1510,Sep.1993
[35] W.Yeong,T.Howes,S.Killie:CURRENTLDAPVer-
[19] C.H. Lim, P.J. Lee: More Flexible Exponentiation sion2,RFC1777,Mar.1995
with Precomputation, Proceedings of CRYPTO ’94,
Springer,Berlin,SS.95-107
[20] J. Linn: Generic Security Service Application Pro-
gramInterface,RFC1508,Sep.1993
[21] J. Linn: Generic Security Service Application Pro-
gramInterfaceVersion2,RFC2078,Jan.1997
[22] J.Linn:TheKerberosVersion5GSS-APIMechanism,
RFC1964,Juni1996
[23] A.J. Menezes, P.C. van Oorschot, S.A. Vanstone:
Handbook of Applied Cryptography, CRC Press,
ISBN0-8493-8523-7,1996
[24] V. Miller: Use of Elliptic Curves in Cryptography,
Proceedings of Crypto ’85, LNCS 218, Springer,
Berlin,1986
[25] National Institute of Standards and Technology
(NIST): Digital Signature Standard (DSS). Federal
Information Processing Standards Publication 186
(FIPS-186),19thMay,1994
[26] K.Nyberg,R.Ru¨ppel:Anewsignatureschemebased
on the DSA giving message recovery, 1st ACM Con-
ference on Computer and Communications Security,
Fairfax,Virginia,Nov.3-5,1993.
13of13