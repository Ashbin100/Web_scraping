Using Fully Homomorphic Encryption for
Statistical Analysis of Categorical, Ordinal
and Numerical Data
Wen-jie Lu1, Shohei Kawasaki1, Jun Sakuma1,2,3
1. University of Tsukuba, Japan
2. JST CREST
3. RIKEN Center for AIP
1Statistical Analysis on the Cloud
Third party cloud server
Query & Result
Data collection
Multiple data providers Analyst
Cloud computing is useful for statistical analysis
• Gather distributed data, and reduce hardware cost.
• Minimal interactions between data providers and the cloud.
• The cloud does most of the work for the analyst.
2Cloud Computing with Sensitive Data
Third party cloud server
Sensitive data
• Using outside cloud servers raises privacy concerns.
o E.g, medical records, federal data.
• We want to calculate statistics on the cloud while
keeping the data secret.
3Secure Multiparty Computation (SMC)
x Z = F(x, y) y
x, y: private input
Only reveals Z! F: public function
• Off-the-shelf tools for SMC protocols
o Yao’s garbled circuit (GC).
o Fully homomorphic encryption (FHE).
• But development cost and efficiency hinder
applications of GC and FHE in the cloud.
Yao Andrew. Protocols for secure secure computation. 1982.
Gentry. Fully homomorphic encryption using ideal lattices. 2009. 4GC on the Cloud Environment
Secret
GC protocol
Sharing
GC requires a large development cost
• Multiple servers are needed.
o Assume no collusion between servers.
• Fast network is necessary for computation.
o E.g., 10Gbps bandwidth.
5FHE on the Cloud Environment
FHE protocol
ciphertexts
• Less development cost
o Single server is enough.
o Rapid network is not necessary.
• But might be inefficient in practice
o Encrypt bits one by one.
o 1~10 ms per evaluation.
o 1~10 megabytes per ciphertext.
6
Gentry et al. Homomorphic Evaluation of the AES Circuit. 2012.Observation
• Purpose of encrypting bits separately
oTo evaluate any Boolean function.
• But to do statistical analysis, we can use
omatrix arithmetic operation.
ocomparison operation.
7Our Result
• Two new FHE-based primitives:
o Matrix Operations
o Batch Greater-than
• Secure statistical protocols:
o histogram (count),
o order of counts,
o contingency table (with cell-suppression),
o percentile,
o principal component analysis (PCA),
o linear regression.
• Source codes: https://github.com/fionser/CODA
8Preliminaries: Fully Homomorphic Encryption
• Public-private key scheme.
o Data providers & cloud share the public key.
o The analyst holds the private key.
• Allow addition (subtraction) and multiplication
on encrypted integers.
o Analogy: black box with gloves
Brakerskiet al. Fully Homomorphic Encryption without Bootstrapping. 2012.
9Preliminaries: Packing (Batching)
• Enable to encrypt and process vectors at no extra cost.
Single 1 2 3 4 1 2 3 4
homomorphic + x
operation
8 7 6 5 8 7 6 5
Multiple results
9 9 9 9 8 14 18 20
o Fewer ciphertexts
o Faster computation
N.P. Smart et al. Fully homomorphic SIMD operations. 2011.
10Preliminaries: Slot Manipulation
Rotate slots of the encrypted vector.
>> 2
1 2 3 4 3 4 1 2
Replicate a specific slot.
@3
8 5 1 5 1 1 1 1
Halevi et al. Algorithms in Helib. 2014.
11Part II Technical Details
• Data preprocessing.
• Efficient matrix multiplication on ciphertexts.
• Comparing two encrypted integers.
• Example of two protocols:
o Contingency table with cell-suppression
o Linear regression
(for other protocols, refer to our paper).
12Data Preprocessing
• Numerical data: fixed-point representation
o 3.14159 → ⌈3.14159 ×1000⌋ = 3142
o Precision (e.g., 1000) determined in advance
• Categorical data: 1-of-k representation
o Gender (i.e., k = 2). Female → [1, 0] and Male → [0, 1]
• Ordinal data: stair-case encoding
13Proposed Matrix Primitive
• Used for adding & multiplying encrypted matrices
• Encrypt each row separately by packing.
o Row-wise encryption.
o Horizontally partitioned data
• Efficient and layout consistent.
o 𝑂 𝑁2 homomorphic operations.
14Matrix Multiplication[1/2]
• Encrypt the matrix row by row with packing.
1 2 𝑎 𝑏 1𝑎 + 2𝑐 1𝑏 + 2𝑑
Replicate
1 1 2 × 1 2 = 1 2
@1 @2 3 4 𝑐 𝑑 3𝑎 + 4𝑐 3𝑏 + 4𝑑
1 1 multiply a b 1a+2c 1b+2d
2 add
2 2 multiply c d 3
15Matrix Multiplication[1/2]
• Encrypt the matrix row by row with packing.
1 2 𝑎 𝑏 1𝑎 + 2𝑐 1𝑏 + 2𝑑
Replicate
1 2 × 1 2 = 1 2
@1 @2 3 4 𝑐 𝑑 3𝑎 + 4𝑐 3𝑏 + 4𝑑
3 3 multiply a b 1a+2c 1b+2d
add
4 4 multiply c d 3a+4c 3b+4d
• N2replications, multiplications and additions
o 𝑂 𝑁2 complexity compared to 𝑂 𝑁3 (no packing).
• Also row-wisely encrypted resulting matrix.
16Matrix Multiplication[2/2]
• Layout consistency is important for developing
efficient statistical protocols.
o Statistical algorithms need iterative matrix multiplications
Efficient for single
multiplication
No Layout Yes
consistent
??
Heavy layout
adjustment
Inefficient for Still efficient for
iterative multi. iterative multi.
17Experimental Settings of Matrix Primitive
• Implementations:
o FHE: HElib (C++ based)
o GC : ObliVM (java based)
• Evaluated on 32-bit integers
• Networks:
o LAN (about 88 Mbps)
o WAN (about 48 Mbps)
HElib. https://github.com/shaih/HElib.
Liu et al. ObliVM: A programming framework for secure computation. 2015.
18Evaluation of Matrix Primitive
10000
1000
100
10
1
0.1
2 4 8 16 32 64
dnoceS
Execution Time
100000
10000
1000
100
FHE-LAN
10
FHE-WAN
GC-LAN 1
GC-WAN
0.1
2 4 8 16 32 64
#Matrix Dimension
• When do iterative multiplications, FHE-based primitive can
offer better performance.
o Save communication cost between each iteration
19
BM
Communication Cost
537133056
67174400
8404992
1052672
132096 GC
FHE
16640
Matrix Dimension
)s(
emiT
despalE
)BM(
derrefsnarT
ataDGreater-than (GT) Primitive
?
GT e 𝑥 , 𝑒 𝑦 → 𝑒(𝑥 > 𝑦) s.t. 0 ≤ 𝑥, 𝑦 ≤ D
• [Golle06] based on Paillier cryptosystem:
𝑖𝑓 𝑥 > 𝑦 𝑡ℎ𝑒𝑛 ∃𝑘 ∈ 1, 𝐷 → 𝑥 − 𝑦 − 𝑘 = 0
• Combination with packing gives great improvements:
𝑒 𝑥, … , 𝑥 − 𝑒 𝑦, … , 𝑦 − [1, 2, … , 𝐷] → 𝑒(𝜼)
Replicated D times
𝜼 ⟺ 𝑥 > 𝑦
o 0 ∈ (i.e., decryption is needed)
o Complexity from 𝐷 to ⌈D/ℓ ⌉.
Golle. A private stable matching algorithm. 2006.
20Experimental Settings for GT Primitive
• Implementations:
o FHE: HElib (C++ based)
o GC : ObliVM (java based)
• Domain 𝐷 = 24 ~ 224
• Number of slots ℓ ≈ 1700.
• Networks:
o LAN (about 88 Mbps)
o WAN (about 48 Mbps)
HElib. https://github.com/shaih/HElib.
Liu et al. ObliVM: A programming framework for secure computation. 2015.
21Evaluation of Greater-than Primitive
1000
100
10
1
0.1
4 8 12 16 20 24
dnoceS
10000
FHE-LAN
1000
FHE-WAN
GC-LAN 100
GC-WAN
10
1
0.1
0.01
0.001
4 8 12 16 20 24
#Bits
Works for small domains, which is enough for ordinal statistics.
22
BM
Execution Time Communication Cost
GC
FHE
76 88 100 112 124 136
#Bits
)s(
emiT
despalE
)BM(
derrefsnarT
ataDSecure Statistical Protocols
• Contingency table with cell-suppression protocol:
o Use the greater-than primitive.
o One round protocol between cloud and analyst.
• Linear regression protocol:
o Use the matrix primitive.
o Two rounds protocol.
o Use a Plaintext Precision Expansion technique (discuss it
latter).
23Contingency Table
Gender Smoke
K = 2
2
Male Smoker
Smoker Non-smoker
Female Non-smoker
Male 1 1
K = 2
1
Male Non-Smoker
Female 0 1
Categorical data
Contingency Table
• Indicator encoding:
Male → [1, 0], Female → [0, 1]
Smoker → [1, 0], Non-smoker → [0, 1]
• Basic Idea: multiply & rotate
[a , a ] x [b , b ] counts Male-Smoker, and Female-Nonsmoker
1 2 1 2
[a , a ] x ([b , b ]>>1) = [a , a ] x [b , b ] gives other two counts.
1 2 1 2 1 2 2 1
• Improvement with no extra preprocessing
o O(max(k ,k )) => O(log k k ).
1 2 1 2 24Contingency Table: Cell Suppression
if < 10
Smoker Non-smoker zero out Smoker Non-smoker
Male 20 11 Male 20 11
Female 3 12 Female 0 12
Origin Table Suppressed Table
• Protect the privacy of rare individuals.
• Given a ciphertext 𝑒(𝑥), to compute 𝑒 𝑦 where
if 𝑥 > threshold then 𝑦 = 𝑥 else 𝑦 = some random value
• 𝐺𝑇 𝑒 𝑥 , threshold = 𝑒 𝜼 . iff 𝑥 > threshold, then 0 ∈ 𝜼.
• To compute {𝑒 𝑥 + 𝒓 , 𝑒 𝜼 + 𝒓 , 𝑒 𝜼 × 𝒓′ }
o Non-zero random vectors 𝒓, 𝒓’
o If 0 ∈ 𝜼, we have 0 ∈ 𝜼×𝒓’, then we can get 𝒓 and know 𝑥.
25Contingency Table Performance Evaluation
#records = 4000
(k k )
1 2
• Complexity increases logarithmically with the table sizes.
• Most of the work (>90%) done by the cloud.
26
)s(
emiT
despalELinear Regression (LR)
• From data 𝒙 , 𝑦 , computes a model 𝒘 s.t.
𝑖 𝑖 𝑖
no
𝒘 = (𝑿T𝑿) 𝑿T𝒚
• The inversion of an encrypted matrix.
Division-free Matrix Inversion (𝑸, 𝜆):
o o (o)
set 𝑨 = 𝑸, 𝑹 = 𝑰, 𝑎 = 𝜆, and iterate
vwo (v) v v v
𝑹 = 2𝑎 𝑹 − 𝑹 𝑨
Layout consistency
leads to efficient 𝑨 vwo = 2𝑎(v) 𝑨 v − 𝑨 v 𝑨 v
iterative protocols.
(vwo) (v) (v)
𝑎 = 𝑎 𝑎
z
v y no
[Guo06] 𝑹 gives a good approximation to 𝜆 𝑸 if 𝜆 is
close to largest eigenvalue of 𝑸 (use PCA to compute 𝜆).
Guo et al. A Schur-Newton method for the matrix pth root and its inverse. 2006.
27Plaintext Precision Expansion (PPE)
z
y
• Division-free algorithms introduce large integers. (𝜆 )
o But the current FHE library allows at most 60-bit integers.
• Allows division-free algorithms without changing the
FHE library.
• Uses K different FHE parameters (each b-bit < 60)
o Achieves an equivalent Kb-bit parameter.
o Increases the time by K times, but naturally parallelizable.
• Direct application of the Chinese Remainder Theorem.
28Experiments: Linear Regression
189.07
62.685 67.62
16.90 18.34
Number of Dimensions
• Negligible decryption time (less than 2 s).
• 20x faster than previous FHE solution [Wu et al. 12]
o 5 dimensions (400+ mins).
• Good scalability (reduced execution using more cores).
29
emiT
despalE
)nim(Summary
• Secure statistical analysis in the cloud with multiple
data providers.
• Two primitives
o Matrix operation and greater-than
• Two protocols.
o Contingency table and linear regression.
• Encoding and packing can improve FHE's balance
between generality and efficiency.
30