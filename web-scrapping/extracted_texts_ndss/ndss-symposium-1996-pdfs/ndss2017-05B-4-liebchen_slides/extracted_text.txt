PT-Rand
Prac+cal Mi+ga+on of
Data-only A6acks against Page Tables
David Gens
Christopher Liebchen Lucas Davi
Ahmad-Reza Sadeghi
Cyber Security Center University of Duisburg-Essen
Technische Universität DarmstadtImpact of Kernel A6acks
PrUUocsseeesrrs A PLLrooocwweseesrr B
PPrriivviilleeggeess
Browser
Exploit
Document
Viewer Vulnerability
Word
Processor
OOppeerraaCCnngg SSyysstteemm KKeerrnneell
Control-Flow Integrity Return-oriented Programming
MMeemmoorryy CCPPUU
[Abadi et al., CCS 2005R ]O P [Shacham, CCS 2007]
EExxtt.. HHaarrddwwaarree SSeeccuurriittyy
HardwareCFI for Linux Kernel:
Return Address Protec+on (RAP)
hXps://grsecurity.net/rap_announce_ret.phpIs Control-Flow Integrity enough?
• Protects against control-flow hijacking*
• Vulnerable to non-control data aXack
*Terms and Condi-ons May ApplyVirtual Memory:
Page Tables
CPU
(cid:1)
0x3000 0x1000
MMU
Page Table Root
Virtual
Physical
Memory
Memory
Page Table Hierarchy
Read Read
0x1000
Execute 0x1000
Write
Page Table Page Table Page Table
Read Read
Entry Entries Entries
0x2000
Only
Only
Read
0Rxe3a0d0 0 Kernel
Write Physical Address Permissions 0 1 0 0
Read
Kernel
0xF000
TranslaCon and Permission Enforcement Execute
MMU = Memory Management UnitData-Only against Page Tables
of a CFI-hardened KernelData-Only A6acks Against Page Tables
User Mode
Overwrite
Trigger system
exisCng
call to execute
CFI-Hardened Kernel funcCon (e.g.,
Exploit kernel
the injected
svyustlneemra cbaillli)t y
Code
shellcode
wtoit hm sahneipllcuoladtee
RRWXX SSyhsteellmco Cdael l
RX ... the page table
Data
RW PPaaggee TTaabblleess
RW …Page-Table Protec+on:
Shortcomings of Related Work
• Proposed schemes to ensure page-table integrity
• HyperSafe [Wang and Jiang, IEEE S&P 2010]
• SPROBES [Ge et al., IEEE MoST 2014]
• KCoFI [Criswell et al., IEEE S&P 2014]
• SKEE [Azab et al., NDSS 2015]
• However, they suffer from the following problems
• Require hardware trust anchors
• Require a trusted hypervisor
• Inefficient integrity checkOur Approach:
Page-Table RandomizaEonAssump+ons and Threat Model
Modern CPUs prevent ret2usr aXacks (SMAP/SMEP)
Cannot inject new code into the kernel (W^X)
Code-reuse defense in place (CFI)
Control over a user applicaCon
Read/Write from/to known addressesPT-Rand:
High-level Idea
• Address space for 64 bit
Kernel Space
systems is huge
Code
• Move to random locaCon in Data
unused memory page tables
PPooiinntteerr ttoo ppaaggee ttaabbllee
RandomizaCon
Page Tables
• Protect all pointers
Secret
Unused Memory (1TB)PT-Rand:
Challenges & Details
• References to page tables
→ All references are replaced by physical addresses
→ Page table management patched process physical addresses
• ProtecCon of the randomizaCon secret
→ Store in debug register and make it leakage resilient
• Preserve Physmap funcConality for regular accesses
→ Our approach only removes page table data from PhysmapEvaluaEonSecurity
• Guessing AXacks
• p = 3.726x10−9 (Desktop, 4000 Page-Table Entries)
• p = 3.762x10−9 (Server w/ 9 parallel VMs , 33000 PTE)
• Memory-disclosure AXacks
• Through pointers: All pointers are converted to physical address
• Spilled registers
• DR3 are not spilled during interrupts
• Sorware interrupts are disabled during page walksImplementa+on
• Linux Kernel v4.6 hardened with RAP
• 45 source files
• 1382 inserCons
• 15 deleCons
• Intel Core i7-4790 CPU
• 8 GB RAM
• Debian 8.2Performance
• SPEC CPU 2006: avg. 0.22% (max 1.7%)
• Phoronix: 0.08% (max. 1.8%)
• LMBench fork+exec: +0.1 ms
• Chromium
• Start Cme (+ < 1ms)
• Run Cme avg. 0 294% (JetStream/Octan/Kraken)
- .Conclusion
• Page-table aXacks pose a serious threat to kernel security
• First pracEcal randomizaCon-based defense for page tables
• MiCgates data-only aXacks
• No dependencies on higher privileged execuCon modes
• Complements kernel CFI
• Proof-of-concept implementaCon
• Negligible overhead
• No impact on the stability of the overall system