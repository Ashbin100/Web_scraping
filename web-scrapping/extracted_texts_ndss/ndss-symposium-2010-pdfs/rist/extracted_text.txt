When Good Randomness Goes Bad: Virtual Machine
Reset Vulnerabilities and Hedging Deployed Cryptography
ThomasRistenpart ScottYilek
Dept. ofComputer ScienceandEngineering
UniversityofCalifornia,SanDiego,USA
{tristenp,syilek}@cs.ucsd.edu
Abstract theirrelevancetoRNGfailures,thevulnerabilitiesarealso
interestingbecausetheyintroduceapotentially-widespread
Random number generators (RNGs) are consistently a class of practical problems due to virtualization technolo-
weaklinkinthesecureuseofcryptography. Routinecryp- gies. Oursecond contributionisageneralandbackwards-
tographic operations such as encryption and signing can compatible framework to hedge against the threat of ran-
fail spectacularly given predictable or repeated random- domnessfailuresindeployedcryptographicalgorithms.We
ness, even when using good long-lived key material. This discusseachcontributionmoreinturn.
hasprovedproblematicinpriorsettingswhenRNGimple-
VM reset vulnerabilities. Virtualization technologies en-
mentation bugs, poor design, or low-entropy sources have
ablesignificantflexibilityinhandlingthestateofguestsys-
resulted in predictable randomness. We investigate a new
tems(anoperatingsystem,userapplications,anddata). In
way in which RNGs fail due to reuse of virtual machine
particular, virtual machine (VM) snapshots, i.e. copies of
(VM) snapshots. We exhibit such VM reset vulnerabilities
thestateoftheguest,canbeusedtoreplicate,backup,trans-
in widely-used TLS clients and servers: the attacker takes
fer (to another physical system), or reset (to a prior state)
advantage of (or forces) snapshot replay to compromise
theguest. Snapshotsareonereasonvirtualizationistrans-
sessions or even expose a server’s DSA signing key. Our
formingnumerousareasofcomputing. However,Garfinkel
nextcontributionisabackwards-compatibleframeworkfor
andRosenblum[31]suggestthat,intheory,snapshotsmight
hedgingroutinecryptographicoperationsagainstbadran-
lead to security problems due to reuse of security-critical
domness,therebymitigatingthedamageduetorandomness
state. Namely,reusingaVMsnapshotmightleadto(what
failures. We apply our framework to the OpenSSL library
wecall)VMresetvulnerabilities. Butnoinsecuritieshave
andexperimentallyconfirmthatithaslittleoverhead.
beenreportedforrealsystems,leavingopenthequestionof
whetherresetvulnerabilitiesareapracticalproblem.
We answer this question by revealing exploitable VM
1.Introduction
reset vulnerabilities within popular software. Our attacks
are against TLS [8] implementations used for secure web
Thesecurityofroutinecryptographicoperationssuchas browsingandworkwhenavictimVMrunstwicefromthe
encryption, keyexchange, andrandomizedsigningrelyon samesnapshot.WeinvestigatebothTLSclientsandservers,
accesstogood(unpredictable,fresh)randomness. Unfortu- presentingsession-compromiseattacksagainstclientsinthe
nately,therandomnumbergenerators(RNGs)usedinprac- Firefox and Chrome web browsers and secret-key recov-
tice frequently fail. Examples stem from poorly designed eryattacksagainsttheApacheHTTPSserver. Thelatteris
RNGs[28,32,35],implementationbugs[13,51],untimely particularly damaging — an attacker can remotely extract
exposureofrandomness[17],andeventheinabilitytofind a server’s DSA secret key. With this key, the attacker can
sufficient entropy in a system’s environment [36]. Since impersonatetheserver.Weexhibitexploitswhenthevictim
deployed cryptographic routines provide no security given is run within either VMWare [12] or VirtualBox [10], two
bad randomness (even when using good long-lived keys), popularVMmanagers.
the attacks that result from RNG failure are spectacular TheattacksworkbecausetheVMresetsleadtocrypto-
[13,16,32,35,53]. graphic operations (here, key exchange and signing) using
Inthiswork,wefirstshowanewwayinwhichdeployed thesamerandomnessmorethanonce. Thesecryptographic
RNGs fail, due to virtual machine (VM) resets. Beyond operations, in turn, fail to provide any security given re-peat randomness. One conceptually simple solution, then, We apply our framework to the latest OpenSSL code
is toensure thatapplications sample sufficiently freshran- base, which doubles as a cryptographic library used by
domness immediately before use. Unfortunately, there are manyapplicationsandasawidelyusedimplementationof
lurkingcomplexitiestoovercome. Besidesthedifficultyof theTLSprotocol. Benchmarkingthehedgedversionofthe
ensuring every RNG-using application is updated, there is library indicates that overhead is very low. Because hedg-
themoresubtleproblemofwheretofindgoodrandomness ing does not impact functionality, our library interoperates
afterVMresets. Forexample,thestateoftraditionalRNGs transparently with existing TLS implementations. We are
(e.g.,Linux’s/dev/random)isalsoresetwiththerestofthe currently in the process of preparing our implementation
guest. Weprovidemorediscussionofsystemssolutionsin forpublicrelease,whichwillallowimmediatedeployment
thebody,butleavethebulkofthistasktofuturework. withthecorrespondingsecuritybenefits.
Finally,wesuspectthattheVMresetvulnerabilitieswe
show are indicative of further issues. An important open
2. Random Number Generation and Threat
questioniswhetherotherpracticalinsecuritiesarisedueto
Models
VMresets.
Hedging deployed cryptography. The attacks above are
There are many methods for generating cryptographi-
symptomatic of the widespread fragility of cryptographic
callystrongrandomnumbers. Wedonotgointosignificant
operationstorepeatedorpredictablerandomness. Because
detail regarding particular implementations. See [36,43]
manycryptographicoperationsfundamentallyrelyongood
for details regarding some platform-specific random num-
randomness toachieve thedesiredsecuritylevel, repairing
bergenerators.Insteadwegiveanabstractmodelofrandom
RNGsistheonlyfullsolution. However,thecomplexityof
number generation which already suffices for discussing
RNGdesign,thefrequencywithwhichRNGfailuresoccur,
threatsandattacks. Wewillfillinfurtherdetailswhennec-
andthesignificantdamagethatresultsallsuggestthatcryp-
essary.
tographyshouldbedesignedsothatbadrandomnesshasas
The task of a cryptographic random number generator
littleilleffectaspossible.
(RNG) is to provide uniform, private bits to applications.
One potential approach is to implement some form of
We find it convenient to view an RNG as a stack. The
hedgedcryptography,consideredinvariouswaysin[19,37,
first layer is the entropy layer where entropy is generated.
46,48]. Thegeneralideaisthatroutinecryptographicoper-
Here sources of (hopefully) unpredictable events occur in
ationsshouldbedesignedsothat,givengoodrandomness,
amannerthatcanbesampled. Examplesincludetempera-
they provably meet traditional security goals and, given
turevariations,clockdrift,interrupttimings,mousemove-
bad randomness, they nevertheless provably achieve some
mentsorkeyboardclicks,andnetworkpacketarrivals. We
meaningfulsecuritylevel. Whilenoteverywhereeliminat-
viewtheentropylayernotasanactualsoftwareorhardware
ingtheneedforgoodrandomness,hedgingagainstbadran-
system, but rather as an encapsulation of the physical pro-
domness can significantly mitigate the threat of RNG fail-
cesses from which entropy is harvested. The second layer
ure. Unfortunately, existing approaches only treat specific
isthesamplinglayerwhichsamplesfromtheentropylayer
primitives such as public-key encryption [19,52] or sym-
tomeasureeventsandgeneratedigitaldescriptionsofthem.
metric encryption [37,46,48] and only treat specific, dis-
Thislayeralsoattemptstoextractuniformrandombitsfrom
paratekindsofRNGfailures. Inthisworkweseekanap-
the unpredictable data and maintains a pool of such bits.
proach that is fast, conserves existing security when ran-
The uniform bits are then provided to applications requir-
domnessisgood,workswitharbitrarydeployedalgorithms,
ingrandomnessintheconsuminglayer.
andcanboostsecurityinthefaceofarbitrarytypesofRNG
We note that, crucially, the consuming layer may it-
failures.
self consist of further sequences of RNG-related systems.
We give a framework for hedging cryptographic opera-
Forexample,intypicaloperatingsystemsthekernelimple-
tions that achieves these goals. Our starting point is tech-
mentsthesamplinglayer,acryptographylibraryconsumes
niques from [19,52], which we show can be straightfor-
kernel-supplied randomness and also provides it to further
wardlycombinedtobeapplicabletoarbitrarycryptographic
applications. Note that every layer above the first poten-
primitives. Briefly, an operation is replaced by a hedged
tiallystoresrandomnessinternallyinstate. Lookingahead,
version with equivalent functionality. The hedged ver-
this aspect of RNG stacks will be important in the context
sion preprocesses RNG-derived randomness together with
ofresetattacks,whichabusereusedstate. Securityrequires
otherinputs(messages, keys, etc.) withHMACtoprovide
thateachlayerensuresdistinctrequests(evenonesmadein
(pseudo)randomness for the cryptographic operation. The
parallel)areansweredwithfreshrandomness.
modificationsaresimple.Evenso,bychangingthecryptog-
raphywecanprovethatimportantschemesaremoresecure Threat models. There exist numerous ways in which an
inthefaceofvariouskindsofrandomnessfailure. RNG stack might fail or be tampered with by a dedicatedattacker. Forthepurposesofthreatmodeling,however,we Abeni et al. [16] and Yilek et al. [53] show how to abuse
canlooselycategorizerandomnessfailuresbytheresultant thepredictablerandomnesstoperformsessioncompromise
qualityofrandomnessasseenfromthepointofviewofan attacks.
application.
(1)Fresh randomness: An application is always provided 3.VMResetVulnerabilitiesAffectingTLS
new,private,uniformbits.
(2)Reusedrandomness:Anapplicationisprovidedprivate,
In this section we explore virtual machine (VM) reset
uniformbits,butthesebitsmighthavebeenprovidedto
vulnerabilities. These arise when applications’ security-
theapplicationbefore.
criticalstateiscapturedbyaVMsnapshotandstartingthe
(3)Exposed randomness: An application is provided uni- VM repeatedly from the snapshot leads to security prob-
formbitsbutattackerslaterlearnthesebits. lems. The VM reset vulnerabilities we consider are due
(4)Predictable randomness: An application is provided tocryptographicrandomnessbeingcachedbyapplications
randombitsthatarepredictablebyanadversary. andcaughtinasnapshot. Runningmultipletimesfromthe
(5)Chosen randomness: An application is provided snapshotresultsincryptographicoperationsconsumingre-
adversarially-chosenrandombits. peatedrandomness,andinturn,failingtoprovidesecurity.
Forsimplicitywewillsometimesrefertofreshrandomness Virtualization and snapshots. Modern virtual machine
as good and any of the four other kinds of randomness as monitors(VMMs)allowphysicalmultiplexingofhardware
bad. Our threat model is potentially malicious failure (at resourcesbetweennumerousguestoperatingsystems,each
any level) of the RNG stack when performing routine ran- runwithinavirtualmachine(VM).Virtualizationtechnolo-
domizedcryptographicoperations, forexampleencrypting gieshavebecomealmostubiquitous. ConsumersuseVMs
amessage,signingamessage,orperformingkeyexchange. forhomePCsecurity,forexampletocontainmalwareinfec-
Randomness vulnerabilities lead to applications using one tions.Businessesusevirtualizationtomoreefficientlyman-
ofthefourkindsofbadrandomness. age computing infrastructure. The (so-called) cloud com-
putingparadigmispoweredbyvirtualization.
Previous failures. We classify previous randomness vul-
AnimportantfeatureofalmostallmodernVMMsisthe
nerabilities into these threat models. We are unaware of
ability to take VM snapshots. A snapshot is a copy of the
anyreportsonvulnerabilitiesleadingtoreusedrandomness
entire state of a VM, including active memory. This al-
that didn’t also lead to predictable randomness. Becherer
lows restarting the VM exactly in the state at which the
etal.recentlydescribeapossiblevulnerabilityonAmazon
snapshot was taken. VMWare [12], VirtualBox [10], and
EC2[17]thatleadstoexposedrandomness. Duetothear-
Virtual PC [11] all include snapshot mechanisms and ad-
chitecture of EC2, an attacker might learn the initial state
vertise them as a core feature. Some VMMs offer a more
of a victim virtual machine’s RNG. They conjecture (but
limited volume snapshot, which is a copy of the persistent
provideonlyanecdotalevidence)thatonemightusethisin-
state(volumes)ofaVM(butnotactivememory). Restart-
formation to recreate cryptographic keys generated by the
ingfromavolumesnapshotrequiresbootingtheguestOS
victim.
fromthepersistentstate.Modernthird-partycloudcomput-
Examples of vulnerabilities leading to predictable ran-
ingservicessuchasAmazonEC2[3],MicrosoftAzure[7],
domness abound. Wagner and Goldberg exhibit session
MossoRackspace[1]allrelyonvolumesnapshotstoallow
compromise attacks against SSLv2 because clients used
usersoftheservicetosaveconvenientserverconfigurations
predictable randomness for session keys [32]. Gutterman
forlateruse.
etal.pointoutthatsomesystemsmaynothaveaccesstoa
The attacks we describe below work against TLS [9]
sufficientlyrichentropylayer,forexamplenetworkrouters
clientsandserverswhenrunmultipletimesfromfullsnap-
without disks [36]. Gutterman and Malkhi discuss pre-
shots. Wedidnotinvestigatevulnerabilitiesduetovolume
dictable randomness vulnerabilities in Java session identi-
snapshots;theparticularvulnerabilitieswefoundwouldnot
fiers[35]. Dorrendoretal.[28]pointoutthattheWindow’s
seemtocarryover.
kernel RNG stored randomness in a way that is accessible
to unprivileged programs. Woolely et al. uncovered a bug
3.1.TLSClientVulnerabilities
intheFreeBSDRNGthatledtonoentropyforseveralmin-
utesafterareboot[51].Perhapsthemostspectacularexam-
plethusfaristheDebianOpenSSLvulnerability,originally RecallthatTLSisusedtosecureHTTPconnectionsover
discoveredbyBello[13]. Hereabugwasintroducedinthe theInternet.Thus,TLSprotectsthesecurityofonlinebank-
OpenSSL crypto library that tragically rendered impotent ing, shopping, and other sensitive traffic. Every popular
theRNG.Mueller[42]showshowtoabusetheensuingpre- webbrowserthereforeincludesaTLSclient,whichisused
dictablerandomnesstorecoverlong-livedTLSsecretkeys. tonegotiateasharedsecret,calledasessionkey,betweenitandtheremoteHTTPserver. Themostprevalent[53]mode For each VM manager OS combination, steps (1-3) were
for establishing a session key is RSA key transport. Here performed once followed by 3 iterations of steps (4-7) for
theclientchoosesasecretvalue,calledthepremastersecret eachbrowser. ForChromeonLinux,wealsoranaseparate
(PMS), encrypts it under the server’s public RSA key, and testsequencewherestep(2)waschangedto
then sends the resulting ciphertext to the server. The sym- (2a)Loadthebrowser,navigatetoanHTTPSurl,andthen
metricsessionkeysusedtosecuretherestofthesessionare navigatetoablankpage.
then derived from the PMS and two other values that are The results were consistent between the two VM man-
sentintheclear. agers,meaningtheVMMusedhadnoimpactonclientbe-
In abstract, a VM reset vulnerability could arise if the havior. For Firefox on Windows or Linux, the same PMS
PMS,ortherandomness usedtocreateit, isgeneratedbe- wassenttobothserversinall3trials.Iftheusercaused100
fore a snapshot and consumed upon resumption after the mouse events (e.g., moved the mouse 100 pixels) between
snapshot. This vulnerability would lead to an immediate steps (4) and (5) or (6) and (7) then distinct PMS values
compromiseofsessionsifthesamePMSissenttomultiple weresenttotheservers. ThisisbecauseFirefoxfoldsnew
differentservers. entropyintotheRNGevery100mouseevents. ForChrome
Before assessing whether this can occur in practice, we onLinux,whenstep(2a)wasusedthenthesamePMSwas
first ask: Why might a user run their browser in a virtual senttobothserversinall3trials. Whenstep(2)wasused,
machine? Security experts recommend users do their web distinctPMSvaluesweresenttothetwoservers.
browsingwithinaVMtoincreasesecurity. Theideaisthat On Windows, all browsers except Firefox always sent
if the browser has a vulnerability and a malicious site ex- distinctPMSvaluestobothservers. Wenotehoweverthat
ploits it, the damage is contained to the VM. A user can on Windows, the same PMS value was sent to the same
revert to aprevious snapshot taken before the browser and serverinmanyofthetrials.Whilethisdoesnotadmitanob-
VMwerecompromisedtoundotheeffectsofanymalware. viousattack,itviolatestheTLSspecification. Forexample,
We performed experiments on a variety of browsers on onIE6.0andVMWare, 2outofthe3PMSvaluessentto
bothLinuxandWindowstodetermineifthereisarealprob- server1werethesameand2outofthe3PMSvaluessentto
lem. Thereis. OurresultsaresummarizedinFigure1. We server2werethesame. Wenotethatallthebrowser/VMM
explaintheresultsindetailbelow. combinations showed this problem; for Chrome in Win-
dows,itdidnotevenmatterwhetherornotstep(2a)or(2)
Experimental setup. We used two Apache web servers
wasused.
(call them server1 and server2) running on two separate
physical machines. The servers used an instrumented ver-
3.2.TLSServerVulnerabilities
sion of OpenSSL that, upon receipt of the client’s key ex-
changemessageinaTLSsessionusingRSAkeytransport,
would decrypt the premaster secret and write it to a file. We turn our attention to TLS servers. We target TLS
Each server was given an RSA certificate signed by our servers using authenticated Diffie-Hellman key exchange
owncertificateauthority(CA).Weranthevariousbrowsers when the digital signature scheme used is DSA. Ignor-
(listed in Figure1) within the indicated operating systems ing numerous (but not really relevant) details, the protocol
as guests inside a VM running in either VMWare 1.0.10 works as follows. The client sends a nonce of its choos-
or VirtualBox 3.0.12. The physical host ran Ubuntu 8.04 ingtotheserver. Theserverchoosesarandomy,computes
Desktop.Theclientbrowsers,exceptingSafariinWindows, gy,andusesDSAtosigngy togetherwithsessionstatein-
wereconfiguredtoacceptourCA.Thisensuredthat,upon cluding the client nonce. Now, if the server uses the same
visitingoneofourservers,abrowserintheguestOSwould randomness to sign in two different sessions, an attacker
notcomplainaboutacertificatesignedbyanuntrustedCA. whoknowsthemessagessignedandseestheresultingsig-
(ForSafari,weendedupjustclicking“continue”whenpre- natures can extract the server’s DSA signing key. This at-
sentedwithawarningaboutanuntrustedcertificate.) tackiswell-known;seeAppendixAfordetails.
AVMresetvulnerabilitycouldthereforeariseifrunning
Experiments. Westartwiththefollowingtestsequence.
aservermultipletimesfromasnapshotledtothesameran-
(1)ReboottheOS. domness being used by DSA. This situation would occur,
(2)Loadthebrowser. for example, if an HTTP server seeds its RNG at startup
and uses the RNG (without new seeding) to generate ran-
(3)Takeasnapshotofguestinthisstate.
domnesswhenhandlinganewconnection. Ifasnapshotof
(4)ResettheVM.
theserveristakenafterstartup,thentheRNG’sstatewould
(5)Navigatebrowsertoserver1.
becaptured. Reuseofthesnapshotcouldleadtothesame
(6)ResettheVM. randomnessbeingconsumedbyDSA.
(7)Navigatebrowsertoserver2. If real, such attacks would be particularly threateningTLSClient GuestOS SamePMStodiff. sites? SamePMStosamesite? Comments
Firefox3.5 Windows Always Always Mousemoves<100pixels
Chrome3.0 Windows Never Sometimes -
IE6.0 Windows Never Sometimes -
Safari4.0 Windows Never Sometimes -
Firefox3.0 Ubuntu Always Always Mousemoves<100pixels
Chrome4.0 Ubuntu Always Always VisitoneHTTPSsitebeforesnapshot
Figure 1. Summary of our TLS client attacks. We performed allof theexperiments on both VMWare
Serverversion1.0.10andVirtualBoxversion3.0.12andobservedthesamebehavior. Ubunturefers
toversion8.04(Hardy)Desktop,WindowsreferstoXPProfessionalwithServicePack2.
due to the ever-increasing use of virtualization to man- thetime,pid,andruntimestackarethesameinbothcases,
age servers. For example, cloud computing services such theserverwillusethesamerandomnessforbothsessions.
as EC2 (popular for hosting HTTP servers) utilize volume
Experiments without Clock Synchronization. Because
snapshotstostorecustomerserverconfigurationsforrapid
timeisaddedtotheRNG,itisclearthattheserver’sclock
deployment. Progressing to full snapshots that include ac-
plays a crucial role in whether an attack could be success-
tive memory could make provisioning of VMs even faster.
ful. Specifically,iftheserverresynchronizesitsclockafter
Inothersettings,snapshotsareoftensuggestedasasimple
startingexecutionfromasnapshotbutbeforeanadversary
mechanismforfastservercrashrecovery.
canconnecttoit,thentheRNGwillneversupplythesame
We therefore investigate whether servers are vulnera-
valuetwice. Thus,asafirststep,weexperimentwithVMs
ble. We focus on Apache using mod ssl, themostwidely-
thatdonotperformguestclocksynchronization.
usedHTTPSwebserversoftware. Belowwedescribehow
WesetupadefaultinstallationofanUbuntu8.04Hardy
Apachegeneratesrandomnessandthenexperimentallyval-
desktop guest OS inside VMWare Server. Here the guest
idatethat,infact,VMresetvulnerabilitiescanbeexploited
does not synchronize its clock. (If one additionally in-
byanattackertoextractaserver’sDSAsecretkey.
stalls VMWare Tools, which are guest utilities supplied
The Apache + mod ssl RNG. Apache uses the OpenSSL by VMWare, then the guest defaults to synchronizing its
cryptographiclibraryforitsRNGandTLSimplementation. clock.) On the guest, we also set up OpenSSL 0.9.8k and
On Apache startup, the main process seeds the OpenSSL thelatestversionofApachewebserverwithmpm-prefork
RNG from various entropy sources. Which sources to use (i.e., unthreaded) and using the default configuration. The
can be specified in the Apache configuration file. By de- onlychangeswemadetotheconfigurationfileweretopoint
fault, Apache only uses time (seconds since the Epoch), theserverataDSAkeyandcertificate.
process ID, and a portion of the runtime stack to seed the Wethenperformedthefollowingsteps. Werebootedthe
RNG; this is referred to as “built-in” in the configuration guestVM,startedthewebserver,pausedtheVM,andtook
file. TheOpenSSLRNGwillalsoseeditselffromavariety asnapshot. Thenwerepeatedly attemptedtostarttheVM
ofsourcesdependingonhowitisconfigured;thesesources from the snapshot and have a client connect to the server
usually include /dev/random or /dev/urandom on atexactlythesametime(asreadontheguest’sclock). We
Unix-basedsystems. Apachethenforksoffintochildpro- did this by setting a client machine physically next to the
cesses that will actually handle the incoming HTTP and server’shostmachine,andhavingonepersonwatchforthe
HTTPS requests. At this point each child process has its clock on the guest VM to tick to the next minute after the
owncopyofthenow-initializedRNGstate. snapshotwastaken. Immediately,thatpersonexecutedthe
When an HTTPS request comes in, Apache assigns a openssl s_clientcommandontheclientmachineto
childprocesstohandleit. Beforehandlingtheprocess,the initiateaDSA-authenticatedkeyexchangewiththeserver.
child adds more entropy to its RNG. Here what is added Somewhat surprisingly, this worked. The randomness
again depends on the Apache configuration, which by de- usedbytheserverwasrepeated. Weobservedrepeatedses-
faultissetto“built-in”,meaningonlythetime,processID, sionIDs(generatedusingtheRNG),andrepetitionsofthe
andsomeoftheruntimestackareaddedtotheRNGbefore randomness used to sign with DSA. We tried many more
therequestishandled. Thenatureofourattackissuchthat timeswithsimilarsuccess. ApparentlythesamechildPID
onlythesenewadditionsaffectwhetherrandomnesswillbe andstackcontentswereusedeachtimetogeneratetheran-
repeated between two reverts. In other words, if we can domness, anditwaseasyforthesingleoperator togetthe
connect to a server twice run from the same snapshot and timingright.VMM TimeSync Restart? #SessionIDpairs #DSAextractpairs
1 VMWare no no 6/10 6/10
2 VMWare no yes 3/10 1/10
3 VBox yes no 10/10 10/10
4 VBox yes yes 10/10 10/10
5 VMWare yes no 0/10 0/10
6 VMWare yes yes 4/10 3/10
Figure 2. Summary of Server attacks. Each row corresponds to five trials. The second to last
column reflects how many pairs of trials (out of a possible ten) contained sessions using the same
session IDs. The last column reflects how many pairs of trials contained sessions using the same
randomnessforDSAsigning.
Ournextstepwastotrytoautomatetheattacktoseeif didnothave4randomnesscollisionsbecausethefirsttrial
itwouldworkremotely. Weworkedundertheassumption therewascoldwhiletheotherswerehot,leadingtotiming
thatafterareset,theVMwouldusuallytakeaboutthesame differences. Also,webelievethetimingvariabilityofcold
amount of time to start servicing HTTPS requests. Thus, trialsaccountsforthelowersuccessrateseeninrow2.
ourattackstrategywastorepeatedlyattempttoconnectto
ExperimentswithClockSynchronization. Wewouldlike
the server (starting around the time we knew the reset oc-
our automated attack to work even if the guest is synchro-
curred)withthehopeofachievingasuccessfulconnection
nizingitsclock.Thoughsynchronizationwouldseemtobar
at the very moment the server started answering requests.
any chance of attack, it turns out that there is often a win-
Ifaftertwodifferentresetstheservertakesthesamenum-
dow of opportunity for an attacker. Once a VM is loaded
ber of seconds to start answering, then the attack should
from a snapshot, everything needs to be reinitialized; this
succeed. To test this, we created a script that attempted to
includes re-loading values into memory, re-enabling net-
connect to the server once every 0.1 seconds and recorded
working,synchronizingtheclock,andmore. Weobserved
any session data. We then performed five trials consisting
thatVMsrunningonbothVirtualBoxandVMWareVMMs
ofthefollowingstepsusingVMWare1.0.10asourVMM,
would,afterstartingfromasnapshot,oftenenablenetwork-
Ubuntu8.04DesktopasourhostandguestOS,andApache
ing and service HTTPS requests before synchronizing the
2.2.14mpm-preforkwithOpenSSL0.9.8k:
clock.
(1)StarttheVMfromthesnapshot.
We experimented with VMWare 1.0.10 and VirtualBox
(2)Starttheattackscript. 3.1.0 using the same configuration, automated script, and
(3)Stop the script after a few seconds of successful con- steps as above. For VMWare, we tested our attack with
nections. VMWare tools installed to ensure clock synchronization.
AsbeforeandforeachVMM,weperformedfivetrialsre-
Wedidthisbothwhenrestartingthehostphysicalmachine
booting the host machine between trials and five trials re-
before each trial and restarting before only the first trial.
bootingonlybeforethefirsttrial. Theresultsareshownin
We call trials executed immediately after a reboot “cold”
Figure2,rows3through6. Again,sessionsusedthesame
trials,whilewecalltrialsexecutedafterothertrials(without
randomnessacrossmultipleTLSsessions. VirtualBoxhad
arebootinbetween)“hot”trials.
very consistent resumption timing. The higher variability
TheresultsaresummarizedinthefirsttworowsofFig-
of VMWare leads to lower success rates. In particular, as
ure 2; the first row represents hot trials (except the first of
seen in row 5 of the table, when doing hot trials VMWare
the five, which is cold), while the second row represents
actuallysynchronizedtheguestclockbeforeApachestarted
cold trials. Now, we are interested in whether or not ran-
servicingtheattackconnections.
domness is reused across resets. Thus, for each set of five
trials, we count how many pairs of trials contain sessions Discussion. One might wonder why session IDs repeat
usingthesamerandomness. Weparticularlyrecordifapair moreoftenthanDSArandomness; whilewedonothavea
had the same session ID (chosen using the RNG) or used definitiveanswerforthis,wesuspectitisbecauseOpenSSL
thesamerandomnessforDSAsigning. mixesinanadditionaltimevalueimmediatelybeforeDSA
As can be seen randomness repetition occurred in both signing,andforsomesessionsthistimeendsupbeingtime
sets of 5 trials. We noticed that during cold trials, resum- XwhileforothersitendsupastimeX+1.
ing from a snapshot is significantly slower than in hot tri- In these experiments, we also observed repeat Server-
als. This affected timing. For example, row 1 in the table Randoms and Diffie-Hellman key exchange values. ThesevaluesshouldallbeuniqueinaproperTLShandshake. We We propose a general framework for hedging against
donotknowhowtoexploitthisrepetition,butnevertheless RNG failures. Our method modifies routine cryptographic
believecareshouldbetakentoavoidit. operationssothattheycandefendthemselvesagainstvari-
ousformsofbadrandomness. Byfocusingonthecryptog-
raphy,ourframeworkisapplication-andVMM-agnostic. It
4.OnFixingtheVulnerabilities
protectsagainstmanydifferentkindsofbadrandomness. It
issimpletoimplementanddeploy.
In this section we provide a brief discussion about fix-
HedgingisnotareplacementforgoodRNGs. Inpartic-
ing the VM reset vulnerabilities uncovered. In the TLS
ular, for many cryptographic tasks one needs randomness
clients and servers we described above, we saw that good
to achieve the most desirable security levels (e.g., public-
randomness was sampled at some point (such as starting
keyencryption). Inthesecases, hedgingprovides graceful
theprogramorlaunchingachildprocess)andbufferedun-
degradationofachieved(provable)security.
til it was needed at some much later time. This allowed
a large window in which snapshots would capture to-be- Hedgedcryptography. Ourframeworkisthefollowing. A
usedrandomness. Inthebrowserclientvulnerabilities,the hedging function Hedge is a deterministic algorithm with
randomnesswasuseddirectlyinacryptographicoperation inputs being an arbitrary-sized bit string R and an arbi-
afterthesnapshot.Ontheotherhand,withApache,newen- trarynumberpofassociateddatabitstrings(d ,...,d )∈
1 p
tropywasaddedtotheRNGrightbeforeitsoutputwasused ({0,1}∗)p. (In implementations, we will actually have to
inthecryptographicoperation—unfortunatelythesources cap the maximum length of inputs treated by Hedge to,
hadlittletonoentropyconditionedontheirbeingusedal- e.g.,264. Weomitthisdetailthroughoutforsimplicity.) We
readybyaprevioussnapshot. writedtomeanthevector(d ,...,d ). Thealgorithmout-
1 p
In abstract, fixing these vulnerabilities requires ensur- putsabitstringofsize|R|bits,where|R|isthelengthofR
ingthatRNGsgetaccesstosufficiententropyafterasnap- inbits. WewriteHedge(R,d) = Hedge(R,d 1,...,d p)to
shot and ensuring that applications take randomness from denoterunningthealgorithm. Ahedgingfunctionhandles
an RNG at the time of the cryptographic operation. For variable-lengthkeys,inputs,andoutputs.
example, oneapproachwouldbetomandateusingaguest Let Op be a randomized cryptographic operation tak-
OSsourcesuchas/dev/randomor/dev/urandomto ing inputs i ,i ,...,i and using an RNG-supplied bit
1 2 k
generaterandomnessrightbeforeacryptographicoperation string R. Denote execution of it by Op(i ,i ,...,i ;R).
1 2 k
isperformed. Wehedgebyreplacingcalls
Unfortunately,thestateofthesesourcesisalsoresetby
Op(i ,i ,...,i ;R)
1 2 k
snapshots,andsoitisunclearwhethersufficiententropyis
with
generated between a snapshot resumption and randomness
consumption bythecryptographic operation. Ingeneral, a Op(i ,i ,...,i ;Hedge(R,hdi))
1 2 k
better option would likely be linking guest RNG services
withhardware-basedRNGsorotherexternalsources. whered=(OpID,i 1,i 2,...,i k). Thatis,weapplyHedge
totheRNG-suppliedrandomnessandtheinputstotheop-
Thisisalargetopic,andweleavefindingthebestsolu-
erationbecometheassociateddata. WealsoincludeOpID,
tionstofuturework.Instead,weturnourattentiontostrate-
which denotes some unique identifier for the operation, to
giesformitigatingthethreatofalltypesofRNGfailuresto
providedomainseparationbetweenusesofHedgewithdis-
betterprotectagainstfutureproblems.
tinct operations. Note that we will omit explicit mention
ofOpIDlaterforbrevity,butitiscrucialtousewithinim-
5. A General Framework for Hedging against
plementations. The output of Hedge is used as the “ran-
RandomnessFailures domness” for the operation. Note that functionality is not
changed since randomized cryptographic operations must
As mentioned in the introduction, there is a long his- workforanyR.
tory of RNG failures [13,17,28,32,35,36,51] stemming The idea of hedging originates with work by Bellare
from a variety of issues. The VM reset attacks discussed et al. where they treat the specific case of public-key en-
inSection3showyetanothermannerbywhichRNG’sfail. cryption [19]. One of their constructions is a special case
Additionally,theresetattacks,amongotherattacks[16,53], of ours, where Hedge is replaced with a cryptographic
target routine cryptographic operations that are fragile in hashfunctionandOpisspecificallypublic-keyencryption.
the face of bad randomness. For example, most construc- Yilek [52] treats the special case of randomness reuse at-
tionsforkeyexchange,randomizedsigning,andencryption tacks against public-key encryption. His construction is a
admitdamagingattacksgivenbadrandomness, evenwhen special case of ours where Hedge is just a PRF and Op is
goodlong-livedkeymaterialisused. public-key encryption. These two approaches achieve dif-Primitive Repeat Exposed Predictable Chosen
Public-keyencryption ⋆ ⋄ ⋄ ⋄
Symmetricencryption ⋆ ⋆ ⋆ ⋆
Digitalsignatures UF UF UF UF
Figure 3. Summary of hedged primitive’s provable security in the face of Repeat, Exposed, Pre
dictable, or adversarially Chosen randomness. Symbol ⋆ means no partial information about plain
textsleakedexceptplaintextequality. Symbol⋄meansnopartialinformationaboutplaintextsleaked
assumingplaintextshavehighmin entropy(unpredictabletoattacker). SymbolUFmeansnoattacker
canforgeanhonestparty’ssignature.
ferent (and orthogonal) security guarantees for public-key itmightprovebeneficialforsomekindsofrandomnessfail-
encryption,asdiscussedfurtherinthenextsection. Suffice ures. Notethatlong-livedkeygenerationisarareoperation
tosay,wesimultaneouslywantbothguarantees. Moreover, andensuringitaccesstofreshrandomnessmighttherefore
wewantthesamehedgingapproachtoworkforothercryp- beeasierthanmoreroutineoperations.
tographic primitives. We can achieve this by instantiating Lastly,thefocusofthisworkiscryptographicconsumers
Hedge with an object that is good both as a hash function of randomness. However there are other security-critical
andasaPRF. usesofrandomnessandhedgingmightproveusefulinthese
Wesuggestthewidely-availableHMACalgorithm[20], aswell.
built from a sufficiently strong underlying hash function,
such as SHA-256, SHA-512 or the upcoming SHA-3.
6.SecurityofHedging
HMAC takes as input an arbitrarily-long key K and
message M and outputs a string of n bits (e.g., n =
Inthissectionwediscussthesecuritythathedgingpro-
256 for SHA-256). We can use HMAC to instantiate
vides. First,wepresentsomegeneralsecuritypropertiesof
Hedge(R,d ,...,d )forsomenumberkofassociateddata
1 k
hedging, namely that the hedge function does not degrade
strings as follows. Let p be the smallest integer such that
np ≥ |R|. ComputeR′ = HMAC(R,hd ,...,d i||i)for thequalityofgoodrandomnessgiventoanunderlyingoper-
i 1 k
ation. Thisisimportantbecauseitprovidessomeargument
1≤i≤pandthenoutputthefirst|R|bitsof
that hedging won’t hurt most security properties. We will
R′ || ··· ||R′ .
1 p then discuss hedging of four important primitives: public-
Herehd 1,...,d kiissomeunambiguousencodingoftheas- key encryption (PKE), symmetric encryption (SE), digital
sociateddataand || representsconcatenationofbitstrings. signatures(DS),andkeyexchange. Foralltheseprimitives,
In words we apply HMAC several times, using the RNG- manyin-useschemesfailcompletelytoprovidesecurityin
supplied randomness R as the key and the associated data eachoftherandomnessfailuremodels.
combined with a counter as the message. The counter Figure3 provides a summary of the security provably
allows us to produce p times the output size of HMAC achievedbyhedgingpublic-keyencryption,symmetricen-
(e.g. 512p if using SHA512 within HMAC). We then cryptionanddigitalsigning. (Thisisassumingtheunderly-
runOpusingtheappropriatenumberofbitsofHMACout- ingprimitiveissecurewhenrandomnessisgood.) Briefly,
put. hedged PKE will not leak anything but plaintext equality
when randomness is repeated. If randomness is adversari-
Discussion. As mentioned above, functionality is not hin-
allychosen,predictable,orexposed,thenhedgedPKEwill
dered. That means that hedging a cryptographic operation
not leak any partial information assuming unpredictable,
hasnoimpactonother,relatedoperations(e.g.,decryption
public-key independent messages. Hedged SE leaks noth-
neednotbechangedwhenhedginganencryptionroutine).
ingbutplaintextequalityevenagainstadversarially-chosen
Thiscruciallymeansthathedgingislegacy-compatible:any
randomness. Hedgingessentiallyremovestheneedforran-
partycanuseitandnootherpartiesneedknow.
domness in digital signing — the traditional notion of un-
We point out that the framework can be just as easily
forgeability is achieved. All these results, including the
appliedtolong-livedkeygeneration(inadditiontoroutine
more complex situation for hedged key exchange, are dis-
cryptographicoperations). Howeverhereonewillnot,gen-
cussedinfurtherdetailintheremainderofthissection.
erally, achieve significant security improvement: there are
usuallynootherinputstosuchroutinesbeyondtherandom- Formalisms and notation. We formalize our security no-
ness used. Nevertheless in cases where there are (e.g. the tionsusingcode-basedgames[25]. Inthisframework,one
identityofapartygeneratingapublickey, secretkeypair) models security as a game played with an adversary. Agame(seeFigure5foranexample)hasanInitializeproce- GameOT-PRF
H
GamePRF
H,k
dure,procedurestorespondtoadversaryoraclequeries,and
aFinalizeprocedure. First,Initializeexecutesanditsout- Initialize: Initialize:
putsaregivenasinputstoanadversaryA. NextAexecutes b←${0,1} K←${0,1}k
and can adaptively make queries to procedures (other than
Func(r,d):
b←${0,1}
InitializeandFinalize),receivingthecomputedresponses.
WhenAterminateswithsomeoutput,thisbecomesthein-
y 0←${0,1}r Func(d):
put to Finalize. We denote running a game G with adver- y 1 ←H(y 0,d) y 1 ←H(K,d)
saryAasGAandletGA ⇒wbetheevent(intheprobabil- Returny b y 0←${0,1}|y1|
ityspaceinducedbyGA)thattheoutputofgameG,when Returny
Finalize(b′): b
runwithadversaryA,isw. Anadversary’sruntimeisthe
Return(b=b′) Finalize(b′):
timetorunGA,meaningparticularlythatwechargethead-
Return(b=b′)
versaryforitsqueries. Ifworkingwithintherandomoracle
model(i.e.assumingHedgebehaveslikeanidealhashfunc-
Figure 4. One time PRF and PRF security
tion),thenthegamehasonemoreprocedureimplementing
gamesforvariable key lengthfunctionH.
therandomoracle. Thisprocedure, usuallydenotedH, re-
turnsforeach(distinct)messagequeriedarandomlychosen
value.
that takes a key K of some arbitrary length k >0 and
6.1.GeneralSecurityPropertiesofHedging
an arbitrary-sized-input and outputs a string of length n.
HMAC is an example of a VKL function. Game PRF
Provingthesecurityimprovementsachievedbyhedging defines normal PRF security, see Figure4. The prf ad-
requires focusing on individual primitives, as we do in the vantage of adversary B against H is Advprf(B) =
H
following sections. First however, we discuss general se- Pr PRFA ⇒true −Pr PRFA ⇒false .
curitypropertiesneededfromHedgeand(informally)how (cid:2) H,k (cid:3) (cid:2) H,k (cid:3)
Itiswell-knownthatHMACisasecurePRF[18,20]as-
they lead to security gains. To start, we point out that one
suming the underlying hash function’s compression func-
desires that the output of Hedge is indistinguishable from tion has suitable PRF-like security properties. (Techni-
truerandomnesswheneveroneofthefollowingholds:
cally,oneneedsresistancetoamildformofrelated-keyat-
(1)freshrandomnessRisused; tack[22]inadditiontothestandardPRFsecurity.) Namely,
(2)repeatedRisused,butallpairsofassociateddataused one can use the results of [18,20] to derive bounds for
withRaredistinct;or Advprf (B) for any k. A simple hybrid argument es-
HMAC,k
(3)adversariallychosenRisused,butsomeportionofthe tablishesthefollowingtheorem,whichisstatedforanarbi-
associated data is unpredictable to and hidden from the traryVKLfunctionF.
adversary(e.g.asecretkeyorlargeplaintext).
Informally,property(1)holdsundertheverymildassump- Theorem6.1 Let F be a VKL function with output
tion that Hedge is a good pseudorandom function (keyed length n. Let Hedge be the hedging function built from
by R) for a very small number of queries. Property (2) F, as in Section5. Let A be a ot-prf adversary run-
shouldholdundertheassumptionthatHedgeisagoodPRF ning in time t, making at most q queries specifying
formanyqueriesandproperty(3)shouldholdifHedgeisan lengthsr ,r ,...,r .ThenthereexistsqprfadversariesB
1 2 q i
idealhashfunction(arandomoracle). Wethereforediscuss suchthat
howHedgemeetsthepreconditionsjustdescribed(beinga q
weakPRF,aPRF,andanidealhash). Advo Ht e- dp gr ef(A)≤ XAdvp Fr ,f ri(B i)
WefirstshowthatHedgeisaone-timesecurePRF.For- i=1
mally, a variable-key-length one-time PRF (ot-prf) adver- whereB runsintimethatofAandmakes⌊(r +n−1)/n⌋
i i
sary A takes no input, can query a pair r,d where r > 0 queries. (cid:3)
is a number and d is a vector of bit strings to an ora-
cle, and outputs a bit. Let H be a hedging function (as We can see that the security required from the VKL func-
per Section5). Game OT-PRF H is defined in Figure4. tion,e.g.,HMACismild,becausem=⌊(r i+n−1)/n⌋is
Theadvantageofot-prfadversaryAagainstakeyedfunc- generally very small. For example when one uses SHA-
tion H is Advo Ht-prf(A) = Pr (cid:2)OT-PRFA H ⇒true (cid:3) − 256 and r i = 1024, we have that HMAC must resist
Pr OT-PRFA ⇒false . merelym = 4queriesforthesamekey. Finally, wepoint
(cid:2) H (cid:3)
LetHbeavariable-key-length(VKL)functionwithout- outthatthisreasoningdoesn’tholdifr istoosmall. How-
i
put length n. This means H is a deterministic algorithm ever,fortheprimitivesthatwesuggesthedging,r ≥ 128.
iFinally,securityreliesonchoosingnsufficientlylarge(e.g., onegetsstrongerguaranteesofsecurityevenwhenrandom-
ifusingSHA-256,SHA-512inHMAC). nessisadversariallychosen. InsubsequentworkYilek[52]
When Hedge isused repeatedly withthesame random- treatsthecaseofreused(butnotadversariallychosen)ran-
ness, security as a one-time PRF no longer suffices. Here domness. He suggests a construction which is what we
we require it to be a secure PRF, but this provably holds described above except Hedge is replaced by an arbitrary
under the assumption that HMAC is a secure PRF for an keyedPRF.Hissecuritynotionisorthogonaltothatof[19],
appropriatenumberofqueries. meaningmeetingonedoesnotimplymeetingtheother(and
Finally, and as mentioned above, we also require that viceversa). Ourhedgingframeworkwasinspiredbythese
Hedge enjoys security properties when randomness is works.
known (or even chosen) by an adversary, meaning in par- Hedged security. Formally, a PKE scheme consists of a
ticular that the randomness input can no longer serve as a triple of algorithms (Kg,Enc,Dec). Key generation Kg
secretkey(allowingustousethePRFsecurityofHMAC). uses randomness to generate a public key, secret key pair
Inthesecontextswe’llappealtomodelingHedgeasideal, (pk,sk). Encryption Enc takes inputs a public key pk,
orincryptographicparlance,arandomoracle. Thismeans message M, and randomness R and outputs a ciphertext.
thatitmapseveryinputtoanoutputrandomlychosenfrom We denote this computation by Enc(pk,M ;R). Decryp-
the space of all outputs for that length. Note that this re- tion Dec takes inputs a secret key sk and a ciphertext C
quirementexcludesmanyotherpotentialinstantiations(in- and outputs either a message M or a distinguished er-
stead of HMAC), such as most block-cipher-based [15] or ror symbol ⊥. We denote computing this by Dec(sk,C).
universal-hashing-based[50]MACs,whicharenotsuitable We hedge a scheme PKE by replacing Enc(pk,M ;R)
formodelingasrandomoracles. with Enc(pk,M ;Hedge(R,pk,M)). As before, decryp-
tionneednotbemodified.
6.2.Public keyEncryption SincewespecifythatHedgebebothasecurekeyedPRF
and an ideal hash function, hedging a PKE scheme simul-
Public-key encryption (PKE) schemes are used to pro- taneously achieves the security goals of [19] and of [52].
vide message privacy, and they have the benefit of asym- Indeed,theanalysesgivenbyBellareetal.andYilekapply
metry: only the recipient’s public key value is needed directly, and so for the (lengthy) technical details we refer
to encrypt a message. Existing PKE schemes fail spec- thereadertothesepapers[19,52].
tacularly in the face of randomness failures. For exam-
ple, all hybrid encryption schemes (those used most fre- 6.3.SymmetricEncryption
quently in practice) allow plaintext recovery given pre-
dictable randomness and some (e.g., those based on CTR- Symmetricencryption(SE)schemesareusedtoprovide
modesymmetricencryption)allowplaintextrecoverygiven message privacy and authenticity when two parties share
repeat randomness [19]. Predictable randomness leads to a secret key. Many schemes have randomized encryption
plaintext recovery for the Goldwasser-Micali scheme [33] algorithms. In this context the randomness used is of-
and the El Gamal scheme [30]. Brown gave a plaintext- ten called the IV (initialization vector). When the IV is
recoveryattackagainstOAEPabusingpredictablerandom- repeated, existing schemes leak partial information about
ness [26]. Ouafi and Vaudenay gave a plaintext-recovery plaintexts(e.g.,CBC-basedmodes[44],OCB[47])oreven
attackagainstRabin-SAEP[45]. leakplaintextscompletely(e.g.,CTR-basedmodes[44]in-
Hedged public-key encryption was recently introduced cludingGCM[40]).
by Bellare et al. [19]. They propose to hedge arbitrary Symmetricencryptionrobusttorandomnessfailurewas
PKE schemes with their Randomized Encrypt with Hash firstproposedbyRogawayandShrimpton[48]wherethey
(REwH1) approach, which is the hedging approach de- formalize misuse-resistant authenticated encryption. They
scribed in the last section except explicitly using a normal providenewcryptographicschemesthatmeetthisstronger
hash function H (instead of Hedge). In [19] it is shown goal. A viewpoint inherent in their work is that of nonce-
that if H is modeled as ideal (a random oracle) then the based symmetric encryption due to Rogaway [46], where
hedged PKE scheme simultaneously enjoys two security the IV is an explicit input to encryption. We inherit this
properties. The first is the traditional notion of semantic viewpoint as well. Kamara and Katz [37] also suggest a
security [33]. The second is a new notion they introduce formofSEthatsurvivessomekindsofrandomnessfailures,
called indistinguishability under chosen distribution attack but these goals and schemes handle more limited random-
(IND-CDA).Intuitivelythislatternotionmeansthescheme ness threats. Applying our hedging framework to a tradi-
behaves like a secure deterministic encryption scheme — tional authenticated-encryption scheme results in the same
nopartialinformationaboutplaintextsisleakedaslongas securitylevelsachievedin[48],whileretainingbackwards
they are drawn from a sufficiently large “space”. That is, compatibility. Informally, the achieved security preventsInitialize: Enc(M,R): Dec(C): GameMRAE
SE
K∗←$Kg C ←EncH(K∗,M ;R) Ifb=1thenRetDec(K∗,C)
H(X):
b←${0,1} Ifb=1thenRetC Ret⊥
IfH[X]=⊥then
C′←${0,1}|C|
Finalize(b′): H[X]←${0,1}r
RetC′
Ret(b=b′) RetH[X]
Figure5.Securitygameforsymmetricencryption(MRAE).
leaking anything but plaintext equality no matter how bad againstschemeSEisdefinedby
therandomness. Advae(A)=2·Pr AEA ⇒true −1.
SE (cid:2) SE (cid:3)
A standard fact is that Advmrae(A) =
Hedged security. Formally, an SE scheme is a triple of SE
Pr MRAE1A ⇒true − Pr MRAE0A ⇒false
algorithms (Kg,Enc,Dec). Key generation Kg uses ran- (cid:2) SE (cid:3) (cid:2) SE (cid:3)
where MRAE1 (resp. MRAE0) is the same as game
domness to generate a key. Encryption Enc takes as input
MRAE except that the challenge bit b is set to one
a key K, message M, and uses randomness R to gener- (resp. zero). The same holds for Advae(A) =
ate a ciphertext (or ⊥). We say that SE has randomness SE
Pr AE1A ⇒true − Pr AE0A ⇒false . Let SE
length r when Enc only accepts R with |R| = r. (This (cid:2) SE (cid:3) (cid:2) SE (cid:3)
be any scheme, let MsgSp be the set of all messages
check will always be implicit.) We denote executing en- SE handles, and let SE+ be the hedged version of it.
cryption by Enc(K,M ;R). Decryption Dec takes as in-
We implement Hedge via the appropriate unambiguous
putakeyK andciphertextC andoutputseitheramessage
encodingofthetriple(R,K,M)intoavalueX thatisthen
M or distinguished error symbol ⊥. We denote this pro-
queriedtotherandomoracleH. (Forsimplicity,weignore
cess by Dec(K,C). We hedge a scheme SE by replacing
algorithmidentifiers.) Wehavethefollowingtheorem.
Enc(K,M ;R)with
Enc(K,M ;Hedge(R,K,M)). Theorem6.2 Let A be an MRAE adversary making at
Decryptionworksasbefore. mostq h hashqueries,q e < |MsgSp SE|encryptionqueries,
andq decryptionqueries. ThenthereexistsanAEadver-
d
We utilize the notions of security due to Rogaway and saryBsuchthatAdvm SEr +ae(A)≤2·Adva Se E(B).Moreover,
Shrimpton [48] for misuse-resistant authenticated encryp- BrunsintimeatmostT(A)+q hT(Enc),makesthesame
tion. Herewemeasureanadversary’sabilitytodistinguish number of encryption queries, and makes at most q h +q d
betweentwopairsoforacles,onepairbeinganencryption decryptionqueries. (cid:3)
oracle and a decryption oracle and the other pair being an
oracle that returns an appropriately long string of random Note that our reduction is not entirely tight. We believe a
bitsandanoraclethatalwaysreturns⊥. LetSEbeasym- tighteranalysiscanbegiven, atthecostofaslightlymore
metricencryptionschemewithrandomnesslengthr. Game involvedreductionthantheonewegive.
MRAE inFigure5definessecurity,intherandomoracle
SE Proof: We use a sequence of games to prove the theo-
model [23], in the sense of misuse-resistant authenticated
rem. Let game G0 work exactly like MRAE1 except
encryption (MRAE). The notation EncH means that Enc SE+
that we set a flag bad if A makes a query to H encoding
mightuseaccesstotherandomoracleimplementedbypro-
a triple (R,K∗,M) for some R,M. Let G1 be the same
cedureH.AnMRAEadversaryAtakesnoinputs,neverre-
as G0 except that Enc now implements Enc instead of the
peatsanencryptionqueryorHquery,andneverqueriesDec
hedgedfunction. Thatis,itusestruerandomnessanddoes
on a value returned by Enc. Its advantage against scheme
notquerytherandomoracle. Wehavebythefundamental
SEisdefinedby
lemmaofgameplaying[25]that
Advmrae(A)=2·Pr MRAEA ⇒true −1.
SE (cid:2) SE (cid:3)
Pr G0A ⇒true −Pr G1A ⇒true
We define the traditional notion of symmetric encryption
(cid:2) (cid:3) (cid:2) (cid:3)
security via game AE SE (not shown) which is the same as ≤ Pr G1Asetsbad
(cid:2) (cid:3)
MRAE except that there is no input R to Enc and in-
SE
stead this value is picked uniformly at random upon each where“G1A setsbad”istheeventthatAforcesbadtobe
encryption query. (We omit random oracles here since we set in game G1. Game G2 works like G1 except that Enc
willnotneedthem.)AnAEadversaryAtakesnoinputsand queries are responded to with randomness of equal length
neverqueriesDeconavaluereturnedbyEnc.Itsadvantage (i.e.,usingtheEncprocedureofgameAE0 )andallDec
SEqueriesarerespondedtowith⊥. WehavethatG2isequiv- This property of DSA was exploited by our attacks in
alent to MRAE0 , meaning that Pr[G2A ⇒ true] = Section3. Suchattacksalsoaffectmanyschemesbuiltus-
SE+
Pr[MRAE0 ⇒ true]. Moreover we can build an ad- ingtheFiat-Shamirtransform[29].
SE+
versaryB′suchthat Notethatthereisafolkloretechniqueforremovingran-
domization from signature schemes (e.g. see [38]). It in-
Pr G1A ⇒true −Pr G2A ⇒true volves adding to the secret key of a randomized signature
(cid:2) (cid:3) (cid:2) (cid:3)
≤ Advae(B′). scheme a key for a secure PRF (e.g. HMAC). To sign a
SE
message, then, one generates randomness for the Sign al-
TheadversaryB′ justrunsG1A exceptimplementingEnc gorithmdeterministicallybyapplyingthePRFtotheinput
and Dec using its oracles instead. All that remains is to message. Ourhedgedconstructionfollowsthisinspirit,but
boundthesettingofbadingameG1. Thiseventindicates cruciallydoesnotrequiremodifyingthedescriptionofthe
thatAmanagedtoquerythesecretkeyK∗ whengivenan secretkey. Moreover, thesecurityachievedwhenrandom-
encryption oracle for Enc (using real randomness) and de- nessisfreshisbetterthanthatobtainedbythefolkloretech-
cryptionoracles. WewillboundPr[G1Asetsbad]byanae nique,becausetheassumptiononHedgeismilder.
adversaryB′′againstSE.
Hedgedsecurity. Formally,arandomizedDSschemecon-
TheadversaryB′′worksasfollows. sists of a triple of algorithms (Kg,Sign,Vf). Key gener-
ation Kg uses randomness to generate a (public) verifica-
RunA,simulatingitsoraclesby
tionkey, signingkeypair(pk,sk). SigningSigntakesin-
Enc(M,R):
putsasigningkeysk,messageM,andrandomnessRand
M←∪ M;C ←Enc′(M);C←∪ C;returnC
outputs a signature. We denote computing a signature by
Dec(C): returnDec′(C)
Sign(sk,M ;R). Verification Vf takes inputs a verifica-
H(R,K,M): K←∪ K;returnY ←${0,1}r tionkeypk,amessageM,andasignatureσ andoutputsa
Ahaltswithoutputb′ bit. WedenoteverificationofasignaturebyVf(pk,M,σ).
ChooseM ∈/ M WehedgeaschemeDSbyreplacingSign(sk,M ;R)with
ForeachK ∈Kdo Sign(sk,M ;Hedge(R,sk,M)). Verificationremainsun-
C←$Enc(K,M);IfC ∈C thenOutput0 modified.
M′ ←Dec(C);IfM′ =M thenOutput1 DS schemes should be what is called existentially un-
Output0 forgeableagainstchosenmessageattacks(UF-CMA)[34].
Intuitively,thismeansthatanadversaryshouldnotbeable
ThatisB′′simulatesG1AexceptusingitsownoraclesEnc′
to forge a signature on a new message, even after seeing
andDec′toreplytoA’sencryptionanddecryptionqueries.
signatures on many chosen messages. We extend this def-
At the end it checks what set of oracles it has by using initiontotreatchosenmessageandchosenrandomnessat-
the keys queried by A to H. We have that Pr[QueryK] = tacks.GameUFCMRAinFigure6specifiesUF-CMRAse-
Pr[G1A setsbad] where “QueryK” is the event that K∗ is curityintherandomoraclemodel. Auf-cmraadversaryA
queried by A in the event space defined by
AEB′′
. More- takes input a public key, never repeats a query to the ran-
over, we have that Pr AE1B′′ ⇒true|QueryK = 1 be- dom oracle H, and outputs a bit. Game UFCMA is the
h i
same as UFCMRA except that R is not chosen by adver-
cause if the key is queried then one of K will pass the
i
decryption check B′′ executes. Moreover Pr[AE0B′′ ⇒ sariesforSignqueries,butratherchosenfreshlyatrandom
eachforeachquery. Wedefinetheuf-cmraadvantageofan
false] = 0 because in AE0 the decryption oracle always
adversary A against signature scheme DS and the uf-cma
returns ⊥. By conditioning on QueryK we derive that
Advae(B′′) ≥ Pr[QueryK] = Pr[G1A setsbad]. Letting advantageofanadversaryBalsoagainstDSby
SE
B be the adversary B′ or B′′ with better advantage gives Advuf-cmra(A)=Pr UFCMRAA ⇒true and
thetheoremstatement. DS (cid:2) (cid:3)
Advuf-cma(B)=Pr UFCMAB ⇒true .
DS (cid:2) (cid:3)
6.4.DigitalSignatures ForanydigitalsignatureschemeDS,letDS+bethehedged
version of it where the hedge function is modeled by the
A digital signature (DS) scheme is used to sign a mes- randomoracle. Thenwehavethefollowingtheorem.
sage in an unforgeable manner. Many DS schemes use
randomizedsigningalgorithms. Randomnessfailurescause Theorem6.3 Let DS be a digital signature scheme and
significantsecurityproblemsfortheseschemes. Forexam- DS+ be its hedged version. Let A be a uf-cmra adversary
ple, well-known secret key recovery attacks work against against DS+ making at most q hash queries. Then there
h
DSA when repeated or predictable randomness is used. exists a uf-cma adversary B such that
Advuf-cmra(A)
≤
DS+Initialize: Sign(M,R): Finalize(M,σ): GameUFCMRA
DS
(pk∗,sk∗)←$Kg σ ←SignH(sk∗,M ;R) IfVf(pk∗,M,σ)=1then
H(X):
S ←∅ Retσ Rettrue IfH[X]=⊥then
Retpk Retfalse
H[X]←${0,1}r
RetH[X]
Figure6.Securitygamefordigitalsignatures(UFCMRA).
2·Advuf-cma(B).
Adversary B makes the same number apply hedging in the now usual way, by instead running
DS
ofsigningqueriesasAandrunsintimethatofAplusthe UpdateClnt(st,msgs;Hedge(R,AlgID,st,msgs)) and
timetocomputeq signaturesandverifyeach. (cid:3) similarlymodifyUpdateSrvrtousehedgedrandomness.
h
To make this concrete, we give the hedged RSA key
Proof: Let B work as follows. On input public key pk∗ it transport and authenticated Diffie-Hellman key exchange
runsA(pk∗). WhenAmakesarandomoraclequeryX,ad- protocols used in TLS and elsewhere. See Figure7 for a
versaryB parsesX asatriple(R,sk,M)andthenusesk (slightly simplified) explanation of the protocols. In RSA
toasignanewmessageM′notbeforequeriedandseeifit keytransport,theclientusesaserver’spublickeytoencrypt
verifiesunderpk∗. Ifso, haltandoutputtheforgery. Oth- asecretvalueR 1′ thatisusedasthesecretmaterialtoderive
erwisereturnarandomvaluetoA. WhenAmakessigning a session key. In Diffie-Hellman the session key is chosen
queries,AdversaryB answersA’ssigningqueriesusingits as a combination of randomness chosen by both the client
own oracle (and ignoring the queried value R). When A and the server. The server’s contribution is signed using a
haltsoutputtingaforgeryattempt,Boutputsit. DSscheme. Notethatforbrevitywedonotshowhedging
of the (random) nonces used in these protocols, nor do we
Wecanseethat
showhedgingoftheencryptionandsigningoperations.
Pr UFCMRAA ⇒true ≤ Securitydefinitionsforkeyexchangearecomplex(e.g.,
(cid:2)
DS+
(cid:3) see [24,27,39]), and extending existing definitions to
Pr (cid:2)UFCMRAA DS+ ⇒true|QuerySK
(cid:3)
model randomness failures is a considerable topic of its
+ Pr UFCMRAA ⇒true|QuerySK own. We leave it to future work. That said, we can make
(cid:2)
DS+
(cid:3) several meaningful statements about security. First, hedg-
where the event QuerySK represents the event that A ing does not hinder meeting traditional goals here as per
queries challenge sk to H and QuerySK is its comple- thediscussioninSection6.1. Second,hedgingensuresthat
ment. But the right hand terms are both bounded by key transport will not send the same session key to dif-
Advuf-cma(B)
since, in the first case, B succeeds using ferent servers, meaning in particular a hedged TLS client
DS
thesecretkeyand,inthesecondcase,B simulatesA’sex- from Section3 will never send the same PMS to different
periment. servers. (For the server attack, hedging DSA already pro-
tectsfromextractionofthesecretkey.)
6.5.KeyExchange
7.ImplementingHedginginOpenSSL
A key exchange (KE) protocol involves two parties,
which we’ll call a client and server. The goal is for the We report on a case study of implementing hedging
client and server to privately agree on a secret session within the OpenSSL code base. This implementation con-
key. Typically this session key is used as a key for an SE sists of a cryptographic tools library (the OpenSSL crypto
scheme. There are a wide variety of key exchange pro- library), andaTLSlibrary(theOpenSSLssllibrary). The
tocols, but generally they can be defined via two update former is widely used within security applications beyond
algorithms UpdateClnt and UpdateSrvr run by the client TLS,andsohedgingitcanhavefar-reachingconsequence.
and server respectively. These take as input an internal Besideshedginganimportantcodebase,thiscasestudywill
statest,astringmsgsdescribingallthemessagessentand allowustoevaluatetheperformanceimpactofhedgingin-
received thus far, and a string of random coins used for usecryptographictools.Lookingahead,hedgingappearsto
randomness. WewriteUpdateClnt(st,msgs;R)todenote havelittleperformanceimpactfornumerousoperationsand
computing,usingrandomnessR,thenextmessagesentby usagescenarios. Thiscasestudyindicatesthatmanycryp-
the client when its current state is st and all the messages tographicdeploymentscaneasilysupporthedging,motivat-
so far sent and received are encoded in msgs. Likewise ing the adoption of hedging to protect against unforeseen
we write UpdateSrvr(st,msgs;R). Then we can simply RNGfailures.Client Server
Nc -
(cid:27) Ns,certe
R1′ ←Hedge(R1,0,Nc,Ns,certe)
C←Enc(pke,R1′ ;R2) C -
R1′ ←Dec(ske,C)
K=H(Nc||Ns||R1′) K=H(Nc||Ns||R1′)
Client Server
Nc -
y←Hedge(R1,2,Nc); Y ←gy
(cid:27) Ns,certs,Y,σ σ←Sign(sks,Y ;R2)
x←Hedge(R3,1,Nc,Ns,certs,gy,σ)
X←gx gx -
K=H(Nc||Ns||X,Y,Yx) K=H(Nc||Ns||X,Y,Xy)
Figure 7. Hedging (top) RSA key transport and (bottom) signed Diffie Hellman authenticated key
exchange. We use N ,N to denote nonces and R ,R ,R to denote RNG derived randomness.
c s 1 2 3
ApplicationofHedgeincludesnumbers0,1,2asstand insforuniquealgorithmidentifiers. (Top)The
serverhasacertificatecert foraPKEschemewithkeys(pk ,sk ). Theclientchecksthiscertificate,
e e e
aborting if the check fails. (Bottom) The server has a certificate cert for a DS scheme with keys
s
(pk ,sk ). Theclientchecksthecertificateandsignatureσ,abortingifeitherfails.
s s
Our starting point was the current stable version of with 1 GB of RAM running Ubuntu Linux 8.04 Server. It
OpenSSLatthetimeofwriting,version0.9.8k. Wehedged ranApache2.2.13withmod sslbuiltfromeitherthehedged
the most commonly utilized operations: RSA public- OpenSSL or plain OpenSSL library, with both RSA and
key encryption with PKCS#1 v1.5 randomized padding, DSAkeyssetup, andallotheroptionssettotheirdefaults.
RSA OAEP public-key encryption, DSA signing, and the We recompiled Apache when switching between libraries.
ephemeral Diffie-Hellman (DHE) key exchange client and Our client systems are Dual Pentium 4 3.20 GHz systems
server. The first three operations involved only modify- with1GBofRAMrunningUbuntuLinux8.04Desktop.
ing code within the crypto library while the key exchange
Performance of Hedge implementations. Recall that
code is in the ssl library. Note that TLS 1.0 only uses
Hedgemakesblack-boxuseofHMAC, whichinturnuses
stateful symmetric encryption and as such this version of
an underlying hash function. We investigate three natu-
OpenSSL does not implement randomized symmetric en-
ral choices for this hash function: SHA-1, SHA-256, and
cryptionprimitives1. Futureworkcouldevaluatethehedg-
SHA-512. Recent attacks [49] mean SHA-1 is no longer
ing of symmetric encryption primitives in TLS 1.1 or 1.2
considered secure. We do not recommend its use but in-
orinothertools, alsocomparingthemtocustomsolutions
cludeitforthesakeofcomparison. Newhashfunctionsare
proposed by [48]. (These solutions will likely be included
beingdesignedforaneventualSHA-3standard[2];onecan
infutureversionsofTLS.)
easilyupgradeHedgetousenewerhashfunctions.
OurhedgedversionofOpenSSL0.9.8kwillbereferred
Wefirstreportonana¨ıveimplementationofHedgethat
toas“hedged”,while“plain”referstotheoriginal,unmod-
simplyiteratesHMACasufficientnumberoftimesfollow-
ifiedOpenSSL0.9.8k. Weusedtheclocutilityforcounting
ingthedescriptioninSection5. TheleftgraphinFigure8
lines of code [5] to get a sense of the scale of modifica-
depicts the performance of this implementation when us-
tionsduetohedging. Thehedgedssllibraryadded45more
ing each of the hash functions and when requesting vari-
physicallinesofcodeandthehedgedcryptolibraryhad728
ous amounts of random bytes. The benchmarks were per-
morephysicallinesofcode.
formedononeoftheclientmachines. Theamountofasso-
Inthefollowingweusetwomachineconfigurationsfor
ciateddatawassetto3,000bytes.(Theprimitiveswehedge
benchmarking. Our server system is a Pentium 4 2.0 GHz
never supply more than this amount of associated data for
1Forexample,theCBCblockciphermodeofTLS1.0doesinfactuti- standard key lengths.) As expected, SHA-1 is the fastest.
lizearandomizedIV,butitisgeneratedonlyoncepersessionduringkey SHA-256provideslittleperformancebenefitoverSHA-512
exchange. FurtherpacketsareencryptedusingasIVthelastblockofthe forsmalloutputlengthsandissignificantlyslowerasoutput
previousciphertext. SointhisversionofTLS,hedgingkeyexchangeef-
lengthincreases. ThisisbecauseSHA-512generatesmore
fectivelyhedgesthesymmetricencryptionroutinesasmuchasispossible.
Forfurtherdetailssee[8]and[41]. outputperiteration.1000
900
800
700
600
500
400
300
200
100
0
16 100 200 300 400 512
)sµ(emitnaideM
120
1
256 100
512
80
60
40
20
0
16 100 200 300 400 512
#bytesrequested
)sµ(emitnaideM
1
256
512
#bytesrequested
Figure8.ComparisonofHedgeimplementationswhenrequestingvariousnumbersofrandombytes
and including 3,000 bytes of associated data and using SHA x for x ∈ {1,256,512}. Time is median
of1,000executionsafter100untimedexecutions. (Left)Ana¨ıveimplementationthatiteratesHMAC
for each extra block of output needed. (Right) An implementation that reuses internal HMAC state
betweeniterations.
Asthelengthofoutputincreases,performanceseverely 1024bitkeys. PKCS#1hasslightlyworseperformancebe-
degrades. Wecanspeeduptheimplementationwithasim- cause one needs to generate more randomness compared
ple optimization. Note that when executing Hedge all the toOAEP.Thetypicalserver-sideoperations(whereperfor-
input to HMAC modulo the iteration counter remains the mance tends to matter most) of DSA and DHE have low
same for each application of HMAC. Thus we modify the overhead.
HMAC code to allow computing it up through all of the
common values once, and then finishing the computation TLS handshake performance. The microbenchmarks
for each iteration separately. The right graph in Figure8 justgivensuggestthatperformanceofindividualOpenSSL
depicts the performance of this implementation. (The out- handshakes will not be degraded significantly. To be sure,
liers in the lower left corner were due to unrelated system wemeasuredthetimeforaclienttoopenaTLSconnection
activity.) As can be seen the improvement is large, and so with a remote server. Figure10 reports the results for do-
weutilizethislatterimplementationfortherestofourtests. ingsowithbothplainTLSandhedgedTLS(boththeclient
and server using hedged operations). Here AES128-SHA
We recommend SHA-512 for greatest security and uti-
referstokeyexchangeusingRSAPKCS#1encryptionwith
lizeitforallfurtherbenchmarks. Ofcourse,weagainem-
1024-bitRSAkeys,DHE-RSA-AES128-SHAreferstokey
phasizethatanyuserdeployinghedgingcanutilizeany(se-
exchange using 1024-bit ephemeral Diffie-Hellman with
cure)hashfunctiontheydesire.
RSA signing, and DHE-DSS-AES128-SHA refers to key
Performance of asymmetric primitives. We measure exchange using 1024-bit ephemeral Diffie-Hellman with
the performance overhead of hedging specific asymmetric DSA signing. (AES128-SHA suffixes refers to the sym-
cryptographic operations: RSA encryption with PKCS#1 metric encryption mechanism, which does not affect these
v1.5 randomized padding, RSA encryption with OAEP timings.) Asexpected,thereisnodiscernibledifferencebe-
padding, DSA signing, and ephemeral Diffie-Hellman key tweenplaintimesandhedgedtimes.
generation (used in key exchange). For brevity we refer
to these operations at PKCS#1, OAEP, DSA, and DHE. Server overhead. Individual connections are not slowed
Figure9 shows the results of timing 1,000 repetitions of down by hedging, but it could be that the extra CPU
each operation either without hedging (“Plain”) or with costs due to hedging significantly burdens heavily loaded
hedging (“Hedged”). For both, we always performed an servers. We measure average throughput of our Apache
additional100repetitionsbeforethe1,000measureditera- HTTPS server when built against plain OpenSSL and
tions. (Thisloweredvariabilityinstandarddeviations.) As against hedged OpenSSL. Note that only the two Diffie-
one might expect, the overhead due to hedging decreases Hellmankeyexchangeprotocolshaveserver-sidehedging,
quicklywithincreasedkeysize(and,thereby,runningtime) andsowereportonlyonthese.Figure11depictstheresults
of the underlying operation. The largest overheads are ofsaturatingtheserverwithHTTPSrequestsfora44-byte
forclient-sideoperationssuchasPKCS#1andOAEPwith HTMLfile.Toperformthisexperiment,wesetuptwoclientPlaintime(µs) Hedgedtime(µs)
Operation Median(Min,Mean,Max,Std. Dev) Median(Min,Mean,Max,Std. Dev) Ratio
PKCS#11024 140(138,141,556,13) 185(183,186,301,6) 1.32
PKCS#12048 415(412,417,720,20) 478(476,483,722,19) 1.15
PKCS#14096 1589(1580,1591,1836,18) 1686(1678,1694,1919,31) 1.06
OAEP1024 140(139,140,189,2) 179(178,179,254,3) 1.28
OAEP2048 410(409,412,646,10) 457(455,458,673,12) 1.11
OAEP4096 1579(1572,1581,1804,18) 1632(1625,1634,1887,19) 1.03
DSA1024 1324(1264,1325,1576,23) 1426(1381,1429,1682,27) 1.08
DSA2048 4025(3898,4027,4441,55) 4156(4026,4164,4738,68) 1.03
EDH1024 7937(7910,7948,8616,60) 8002(7976,8010,8656,56) 1.01
Figure 9. Comparison of asymmetric cryptographic operations without hedging (“Plain”) and with
hedging (“Hedged”). All values are time in microseconds measured over 1,000 repetitions. “Ratio”
isthemedianhedgedtimedividedbymedianplaintime.
Plaintime(µs) Hedgedtime(µs)
Operation Median(Min,Mean,Max,Std. Dev) Median(Min,Mean,Max,Std. Dev)
AES128-SHA 6941(6875,6989,8380,231) 6968(6890,7310,11334,920)
DHE-RSA-AES128-SHA 52030(51756,52120,63388,470) 52828(51150,52618,62841,735)
DHE-DSS-AES128-SHA 50907(50567,50959,64224,471) 51067(50011,51010,62020,673)
Figure 10. Measuring TLS connection time without hedging (“Plain”) and with hedging (“Hedged”).
Measurementswereperformedontheclientover1,000executions. Theserverhad1024 bitRSAand
DSAkeys.
systemsrunninghttperf[6]andadministeredthemusingthe erationsthatconsumethisrandomnessarefragileintheface
autobench tool [4]. For each rate httperf attempted 3,000 oftheensuingrandomnessreuse.
connections with a timeout of 1 second. As can be seen Our second contribution was dealing with this latter
in the graphs, the server was quickly saturated both when problem,theendemicfragilityofroutinecryptographicop-
performingRSAsigningwithDHEandDSAsigningwith erationswhengivenbadrandomness. Wedevelopedagen-
DHE.Theformerbecamesaturatedslightlysoonerthanthe eralframeworkforhedging cryptographicoperations. Our
latter,perhapsduetoRSA’smoreexpensivesigningopera- hedging approach is simple and incrementally deployable,
tion. Inbothcasesthehedgedserverperformedaswellas and it provides provably better resistance to RNG failures
theplainserver. Notethattheserverinthisexperimentwas for important primitives. As our implementation within
entirelyunoptimized,andsothisexperimentmaynotbein- OpenSSLindicates,hedgingisfast.
dicative of a performance gap on a fully optimized server. Moreover, we feel that hedging is needed. Generating
Neverthelessitrevealsthatforan“out-of-the-box”TLSde- randomness is inherently complex, as indicated by a long
ploymentthereisnosignificantoverheadwhenhedging. historyofRNGfailures. FutureRNGproblemswillalmost
certainlyarise,and,asweexemplifiedbyourresultsonVM
8.Conclusions resetvulnerabilities,newtechnologiescreatenewproblems.
Ensuring that cryptography is built to provide as much se-
curityaspossibleforanygivenqualityofrandomnesswill
This paper had two main contributions. First, we re-
effectivelylimitthedamagedonebyfutureRNGfailures.
vealed the first virtual machine reset vulnerabilities affect-
ing deployed software. Given repeated use of a VM snap-
shot, we showed how attackers can compromise TLS ses-
sions or even extract a server’s secret DSA authentication
key. The vulnerabilities stem from a combination of fac-
tors. First, applications cache to-be-used randomness long
before consumption or do not add enough new entropy to
theirRNGsrightbeforeuse. Second,thecryptographicop-35
30
25
20
15
10
5
0
0 10 20 30 40 50
)s/nnoc(tuphguorhT
35
Plain
30 Hedged
25
20
15
10
5
0
0 10 20 30 40 50
Agg.offeredload(conn/s)
)s/nnoc(tuphguorhT
Plain
Hedged
Agg.offeredload(conn/s)
Figure11.SaturatinganApache2server(indefaultconfiguration)withHTTPSrequestswhenusing
plain mod ssl and hedged mod ssl. (Left) Using RSA signing with ephemeral Diffie Hellman (DHE
RSA AES128 SHA). (Right) Using DSA signing with ephemeral Diffie Hellman (DHE DSA AES128
SHA).
Acknowledgements [15] ISO/IEC 9797. Data cryptographic techniques – data in-
tegritymechanismusingacryptographiccheckfunctionem-
Thomas Ristenpart is supported by Mihir Bellare’s ployingablockcipheralgorithm,1989.
[16] PaoloAbeni, LucianoBello, andMaximilianoBertacchini.
NSF grant CNS–0627779 and a gift from Intel Corpora-
ExploitingDSA-1571:HowtobreakPFSinSSLwithEDH,
tion. Scott Yilek is supported by Daniele Micciancio’s
July 2008. http://www.lucianobello.com.ar/
NSF grant CNS–0831536 and Mihir Bellare’s NSF grant
exploiting_DSA-1571/index.html.
CNS–0627779.
[17] Andrew Becherer, Alex Stamos, and Nathan Wilcox.
Cloud computer security: Raining on the trendy
References new parade. BlackHat USA 2009, Slides available
from http://www.slideshare.net/astamos/
cloud-computing-security.
[1] http://www.rackspacecloud.com/.
[18] Mihir Bellare. New proofs for nmac and hmac: Security
[2] http://csrc.nist.gov/groups/ST/hash/
without collision-resistance. In CRYPTO 2006. Springer,
sha-3/index.html.
2006.
[3] AmazonEC2. http://aws.amazon.com/ec2/.
[19] MihirBellare,ZvikaBrakerski,MoniNaor,ThomasRisten-
[4] Autobench. http://www.xenoclast.org/
part, Gil Segev, Hovav Shacham, and Scott Yilek. Hedge
autobench/.
public-keyencryption: Howtoprotectagainstbadrandom-
[5] CLOC. http://cloc.sourceforge.net/.
ness. InASIACRYPT2009.Springer,2009. ToAppear.
[6] httperf. http://www.hpl.hp.com/research/
[20] Mihir Bellare, Ran Canetti, and Hugo Krawczyk. Key-
linux/httperf/.
inghashfunctionsformessageauthentication. InCRYPTO
[7] Microsoft azue. http://www.microsoft.com/
1996,pages1–15.Springer,1996.
azure/.
[21] Mihir Bellare, Shafi Goldwasser, and Daniele Micciancio.
[8] The TLS Protocol, Version 1.0. http://www.ietf.
“pseudo-random” number generation within cryptographic
org/rfc/rfc2246.txt.
algorithms:Thedsscase. InCRYPTO1997.Springer,1997.
[9] TheTLSProtocol,Version1.2. http://tools.ietf.
[22] MihirBellareandTadayoshiKohno. Atheoreticaltreatment
org/html/rfc5246.
ofrelated-keyattacks: Rka-prps,rka-prfs,andapplications.
[10] VirtualBox. http://www.virtualbox.org/.
InEUROCRYPT2003,pages491–506.Springer,2003.
[11] VirtualPC. http://www.microsoft.com/
[23] Mihir Bellare and Phillip Rogaway. Random oracles are
windows/virtual-pc/.
practical: A paradigm for designing efficient protocols. In
[12] VMWare. http://www.vmware.com.
ACMConferenceonComputerandCommunicationsSecu-
[13] Vulnerability note vu925211: Debian and ubuntu openssl
rity–CCS1993,pages62–73.ACM,1993.
packages contain a predictable random number generator.
[24] Mihir Bellare and Phillip Rogaway. Entity authentication
https://www.kb.cert.org/vuls/id/925211.
and key distribution. In CRYPTO 1993, pages 232–249.
[14] FIPS PUB 186-3. Digital signature standard (DSS).
Springer,1994.
http://csrc.nist.gov/publications/fips/
[25] Mihir Bellare and Phillip Rogaway. Code-based game-
fips186-3/fips_186-3.pdf,2009.playingproofsandthesecurityoftripleencryption. InEU- InEUROCRYPT2009.Springer,2009.
ROCRYPT2006.Springer,2006. [46] Phillip Rogaway. Nonce-based symmetric encryption. In
[26] Daniele R.L. Brown. A weak randomizer attack on RSA- FSE2004,volume3017,pages348–359.Springer,2004.
OAEPwithe=3. IACRePrintArchive,2005. [47] Phillip Rogaway, Mihir Bellare, and John Black. Ocb: A
[27] RanCanettiandHugoKrawczyk. Analysisofkey-exchange block-cipher mode of operation for efficient authenticated
protocolsandtheiruseforbuildingsecurechannels. InEU- encryption. ACM Trans. Inf. Syst. Secur., 6(3):365–403,
ROCRYPT2001,pages453–474,2001. 2003.
[28] LeoDorrendorf,ZviGutterman,andBennyPinkas. Crypt- [48] Phillip Rogaway and Thomas Shrimpton. Deterministic
analysisofthewindowsrandomnumbergenerator. InCCS authenticated-encryption: A provable-security treatment of
2007.ACM,2007. the key-wrap problem. In EUROCRYPT 2006. Springer,
[29] Amos Fiat and Adi Shamir. How to prove yourself: Prac- 2006.
tical solutions to identification and signature problems. In [49] Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu. Finding
CRYPTO1986,pages186–194.Springer,1986. collisions in the full SHA-1. In CRYPTO 2005. Springer,
[30] Taher El Gamal. A public key cryptosystem and a signa- 2005.
tureschemebasedondiscretelogarithms.InCRYPTO1984, [50] M.WegmanandL.Carter.Newhashfunctionsandtheiruse
pages10–18.Springer,1985. in authentication and set equality. J. of Comp. and System
[31] TalGarfinkelandMendelRosenblum.Whenvirtualisharder Sciences,22:265–279,1981.
thanreal:Securitychallengesinvirtualmachinebasedcom- [51] RobertWoolley,MarkMurray,MaximDounin,andRuslan
putingenvironments. InProceedingsofthe10thWorkshop Ermilov. arc4random predictable sequence vulnerability.
onHotTopicsinOperatingSystems–HotOS-X,May2005. http://security.freebsd.org/advisories/
[32] Ian Goldberg and David Wagner. Randomness and the FreeBSD-SA-08:11.arc4random.asc,2008.
netscapebrowser. Dr.Dobb’sJournal,January1996. [52] ScottYilek. Resettablepublic-keyencryption: Howtoen-
[33] Shafi Goldwasser and Silvio Micali. Probabilistic encryp- cryptonavirtualmachine.InTopicsinCryptology–CT-RSA
tion. JournalofComputerandSystemSciences,28(2):270– 2010.Springer,2010. ToAppear.
299,1984. [53] Scott Yilek, Eric Rescorla, Hovav Shacham, Brandon En-
[34] ShafiGoldwasser,SilvioMicali,andRonRivest. Adigital right,andStefanSavage.WhenPrivateKeysarePublic:Re-
signatureschemesecureagainstadaptivechosen-messageat- sultsfromthe2008DebianOpenSSLVulnerability. InIMC
tacks. SIAMJ.Computing,17(2):281–308,1988. 2009,pages15–27.ACM,2009.
[35] Zvi Gutterman and Dahlia Malkhi. Hold your sessions:
An attack on java session-id generation. In CT-RSA 2005.
A.DSAKeyRecoveryAttacks
Springer,2005.
[36] ZviGutterman,BennyPinkas,andTzachyReinman.Analy-
sisofthelinuxrandomnumbergenerator. InSymposiumon WereviewtheDigitalSignatureAlgorithm(DSA)[14].
SecurityandPrivacy2006.IEEE,2006. For simplicity, we focus on the 1024-bit case. Let p be a
[37] Seny Kamara and Jonathan Katz. How to encrypt with a 1024-bitprime,q a160-bitprimethatdividesp−1,andg
maliciousrandomnumbergenerator.InFSE2008.Springer, an integer with order q mod p. These are the parameters.
2008. The private key is chosen as a random x ∈ Z , and the
q
[38] JonathanKatzandNanWang. Efficiencyimprovementsfor publickeyisy =gx mod p.
signature schemes with tight security reductions. In CCS
TosignamessageM,firsthashM intoa160-bitvalue
2003.ACM.
H(M). Thenchoosearandomvaluek ∈ Z andcompute
[39] Brian A. LaMacchia, Kristin Lauter, and Anton Mityagin. q
r = (gk mod p) mod q and s = (k−1(H(M) + xr))
Strongersecurityofauthenticatedkeyexchange. InProvSec
mod q.Thesignatureis(r,s),apairofatmost160-bitval-
2007,pages1–16.Springer,2007.
[40] David A. McGrew and John Viega. The security and per- ues. Weomitthedescriptionoftheverificationalgorithm.
formanceofthegalois/countermode(gcm)ofoperation. In DSA is believed to be a secure signature scheme, how-
INDOCRYPT2004,pages343–355.Springer,2004. everitiswell-knownthatiftherandomnessk isknownor
[41] B. Moeller. Security of cbc ciphersuites in ssl/tls: Prob- even generated by some types of weak RNGs, then an ad-
lems and countermeasures. http://www.openssl. versarycanextractthesigner’ssecretkey[21].
org/˜bodo/tls-cbc.txt. Itisalsothecasethatifanadversaryseestwosignatures
[42] MarkusMueller.DebianOpenSSLpredictablePRNGbrute-
thatusethesamekfordifferentmessages,thenhecaneffi-
forceSSHexploit,May2008. http://milw0rm.com/
cientlyextractthesecretkey. Toseethis,considertwosig-
exploits/5622.
natures(r,s)and(r,s′)overmessagesM andM′ hashing
[43] MarkR.V.Murray. Animplementationoftheyarrowprng
todistinctvaluesH(M)andH(M′),respectively. Anad-
forfreebsd. InBSDCon2002.USENIX,2002.
versarycanthencomputek =(H(M)−H(M′))(s−s′)−1
[44] NIST. Recommendations for block cipher modes of op-
eration. http://csrc.nist.gov/publications/ mod q.
nistpubs/800-38a/sp800-38a.pdf,2001.
[45] KhaledOuafiandSergeVaudenay. SmashingSQUASH-0.