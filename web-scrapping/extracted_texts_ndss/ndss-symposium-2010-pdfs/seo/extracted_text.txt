InvisiType: Object-Oriented Security Policies
JiwonSeo MonicaS.Lam
ComputerSystemsLaboratory
StanfordUniversity
Stanford,CA94305
{jiwon,lam}@stanford.edu
Abstract 1 Introduction
Many modern software platforms today, including Third-partysoftwareextensionsplayanimportantrolein
browsers, middleware server architectures, cell phone op- manysoftwareframeworkstoday.Ontheclientside,impor-
erating systems, web application engines, support third- tantextensionsincludeActiveX,JavascriptandJavaapplets
partysoftwareextensions. ThispaperproposesInvisiType, embedded in web pages. Many “middleware” server plat-
anobject-orientedapproachthatenablesplatformdevelop- forms provide a base on which developers can build their
erstoefficientlyenforcefine-grainedsafetychecksonthird- applications: examplesincludeservletsonwebserversand
party extensions without requiring their cooperation. This extensions in wiki engines. Finally, there is an emerging
allowsustoharnessthetruepowerofthird-partysoftware classofserverplatformsthatletenduserssupplytheirown
by giving it access to sensitive data while ensuring that it code: these include application engines at Google, Face-
doesnotleakdata. book and MySpace. This paper describes a new object-
orientedapproachtoallowsoftwareplatformdevelopersto
Inthisapproach, aplatformdeveloperencapsulatesall
efficiently impose fine-grained security policies on third-
safety checks in a policy class and selectively subjects ob-
partysoftwareaswellasplatformsoftware.
jects at risk to these policies. The runtime enforces these
policies simply by changing the types of these objects dy-
1.1 Motivation
namically. It uses the virtual method dispatch mechanism
tosubstitutetheoriginalmethodsandoperationswithcode
laced with safety checks efficiently. The runtime hides the Third-partycodeaddsgreatlytothedifficultyofsecuring
typechangesfromapplicationcodesotheoriginalcodecan software. Evenifwerequirethatthird-partycodebesigned
rununmodified. by a trusted party, it is likely that third-party software has
more security vulnerabilities than the underlying software
We have incorporated the notion of InvisiType into the
platform. Notonlyarethird-partycoderstypicallylessex-
Pythonlanguage. Wehaveappliedthetechniqueto4real-
perienced, they may be ignorant of the implicit principles
world Python web applications totaling 156,000 lines of
usedinthedesignoftheplatform.Asacaseinpoint,exten-
code. InvisiTypepoliciesgreatlyenhancethesecurityofthe
sionsforthepopularMoinMoinWikisystemoftenneglect
webapplications,includingMoinMoin,apopular,94,000-
access control checks for Wiki pages. In addition, third-
line Wiki Engine. MoinMoin has a large number of third-
party code seldom goes through the same level of review
partyextensions,whichmakessecurityenforcementimpor-
andtestingastheplatformitself.
tant. Withlessthan150linesofPythoncode,wefound16
Measuresusedtodaytoguardagainstmalicioussoftware
security bugs in MoinMoin. This represents a significant
aretoocrudeforthird-partysoftwareextensions,whichare
reduction in developers’ effort from a previous proposal,
responsibleforprovidingmuchoftheuser-desiredfeatures
Flume,whichrequired1,000linesofC++codeandmodi-
on a platform. Android isolates applications from each
ficationsto1,000linesofPythoncode.
otherbyexecutingthemindifferentvirtualmachines. The
Our InvisiType policies successfully found 19 cross-site GoogleAppEngineconstrainsdirectoperatingsystemac-
scriptingvulnerabilitiesand6accesscontrolerrorsintotal. cessesandlimitsresourceusagewithaquotasystem. The
Theoverheadofapplyingthepoliciesislessthan4percent, Java Development Kit (JDK) uses sand-boxing to restrict
indicatingthatthetechniqueispractical. unsignedcodefromaccessingcertainsystemresources,and
allowspermissionstobegrantedtoclassesandobjectsbe-longing to protection domains [10]. After permissions are typecalledtheInvisiType1toenforceobject-orientedsafety
granted however, JDK users do not have control over how checks. An InvisiType is a class with special properties
the resources are used or what objects are accessible. For knowntothelanguage’sruntimesystem.
example,oncenetworkaccessisgranted,itisimpossibleto Multipleinheritance. Safety-checkingpoliciesareen-
enforce that only non-sensitive data are sent over the net- capsulated as policy classes derived from the InvisiType
work. class. Wecanimposeapolicyonanordinaryclassbycre-
ating a new subclass, called a protected class, that inherits
1.2 Object-OrientedSafetyChecks fromboththeoriginalclassandthepolicysubclassitself.
Supposewewishtokeeptrackofinputstringstoguard
againstSQLinjectionvulnerabilities. Wecancreateataint
It has been found that software often have implicit de-
policy, TaintPolicy, subclassed from InvisiType. A
signrulesthatgoverntheintegrityoftheprogram. Takefor
taintedstringisaninstanceofaprotectedclassderivedfrom
exampleSQLinjection,animportantclassofsecurityvul-
thestringclassandtheTaintPolicyclass.
nerabilities.SQLinjection[1,16]canbeeliminatedbysim-
Safety-checking rules. A policy class defines how all
plydisallowingaccessofthedatabasewithtaintedstrings,
operations, including method invocations, built-in opera-
inputstringsthathavenotbeencheckedformaliciouscon-
tors, and native function calls, in an ordinary class are to
tents.Anumberofstaticanddynamictechniqueshavebeen
beaugmentedwithsafetychecks. Italsodefinesexception-
proposedtofindsuchkindsoferrorsinprogramsautomat-
handling code. The runtime system of the language auto-
ically[11,12,18]. Apromisingapproachistoallowappli-
matically enforces the safety-checking rules and raises ex-
cation writers to define application-specific safety checks.
ceptionswherenecessary. Theexceptionsmaybecaughtto
Aspectprogramming[14,15]allowsprogrammerstowrite
dynamicallyrecoverfromtheerrorconditions.
downcodesrelatedto,say,asafetycheckinoneplace,and
Third-party code transparency. Protected classes are
many lines of code scattered throughout the program may
namelessandinvisibletotheapplicationcode,assuggested
bechangedsyntactically[19,20].
bythenameInvisiType. Thisensuresthatthird-partycode
Going beyond a syntactic rewrite system, our goal is to
workswithoutmodification;eventhetype()functioncall
extend the principles and benefits of object-oriented pro-
returnstheoriginaltype.Usersofaclassareoblivioustothe
gramming to safety checks. Safety checks of primitive
safety checks, just like they are oblivious to the insertions
types, such as null pointer and array bound checks, have
ofnullchecks.
been built into high-level programming languages. They
Dynamic selection of policy enforcement. Unlike
improvesoftwarerobustnessaswellasrelieveprogrammers
primitive safety checks, object-oriented safety checks can
of theburden of insertingthe error checking code. Analo-
becomplexandcanincurhigheroverheads. Itisnecessary
gously,classesoftenhaveclass-specificsafetychecks,such
to allow application writers to choose dynamically the in-
asthepreventionofdataleakageviaaccessrightviolations
stancesofaclasstobesubjectedtosafetypolicies. Forex-
andsecurityvulnerabilitiesthroughuncheckedinputs.
ample,onlyinputstringsneedtobetreatedastainted; fur-
Allowing class designers to specify safety checks in a
thermore, they should be classified as untainted after they
class and having the runtime system enforce these checks
arecheckedformaliciouscontents.
efficiently, we bring automatic safety check benefits to a
Inourdesign,wemakeinheritanceanddisinheritanceof
higher semantic level. Fine-grained control enables us to
safety policies a dynamic feature by generating protected
harness the true power of third-party software by giving it
classes and changing the protection type of an object dy-
accesstosensitivedataandresourcesinthesystemwithout
namically. Tothisend,weintroduceapairofbuilt-infunc-
undulyexposingtheplatformtosecurityattacks.
tions, demoteandpromote. Demoteputsaninstanceofan
ordinaryclassunderasafetypolicybymakingtheinstance
1.3 IntroductionofInvisiType amemberoftheprotectedclassderivedfromtheinstance’s
classandthepolicyclass. Ademotedobjectisalsoreferred
Our approach to providing object-oriented security toasaprotectedobjectinthispaper. Conversely, promote
checkbuildsuponthefundamentalideaofclasshierarchies turns a protected instance back to an ordinary instance of
inobject-orientedprogramming. Roughly,ourapproachis theoriginalclass.
tocreatesubclassesthatextendtheoriginalclassdefinitions Efficientimplementation. Unlikesyntacticrewritesys-
with virtual methods that contain safety checks. Through temssuchasAspectProgramming[14,15]thatchangethe
the virtual method dispatch mechanism, subclassing en- definitionofmethodsforeveryinstance,InvisiTypeallows
ables software to be extended efficiently with no changes
1ThenameInvisiTypeisinspiredbyInvisalign, whichisaseriesof
totheoriginalcode.
transparentteethalignersusedasanalternativetotraditionalmetaldental
More specifically, we introduce the notion of a new braces.method definitions to change only for selected instances, 1.5 PaperOrganization
and only for the duration an instance is subject to safety
policies. The safety checking rules are implemented by
The rest of the paper is organized as follows. We first
modifyingthevirtualmethoddispatchmechanism. Asare-
illustratetheconceptofInvisiTypebyshowinghowtouse
sult,theruntimesystemcanenforcethesafetycheckswith
ittoeliminatecross-sitescriptingvulnerabilitiesinwebap-
anegligibleoverhead. ThismakesInvisiTypeespeciallyef-
plicationsinSection2. Section3presentstherationaleand
ficient for low-level safety checks that need to be applied
design of InvisiType. We then discuss the various secu-
onlytoselectedobjects.
ritypolicieswehaveimplementedusingInvisiTypeinSec-
tion 4. We describe our implementation of InvisiType in
1.4 ContributionsofthisPaper PythoninSection5.Section6presentstheexperimentalre-
sultsofapplyingInvisiTypepoliciestoanumberofPython
webapplications. Finally,Section7discussesrelatedwork
This paper aims to minimize vulnerabilities in software
andSection8concludes.
caused by coding errors in third-party extensions as well
as platform softwares. Examples of errors of this sort in-
2 Eliminating Cross-Site Scripting With An
clude SQL injection, cross-site scripting, and incorrect ac-
cesscontrolchecking. Itisnottheintentionofthispaperto InvisiTypePolicy
guardagainstmaliciousthird-partydevelopers.
The premise of this paper is that software platform de- Cross-site scripting (XSS) is one of the most common
veloperscaninsertfine-grainedcontroloverthird-partyex- vulnerabilitiesthatplaguewebserverapplications. Attack-
tensionefficientlyandtransparentlybyencapsulatingsafety ers can send code to a web browser client if a web ap-
checksinanobject-orientedmanner. Thespecificcontribu- plication echoes back user-input strings directly as output.
tionsofthispaperaredescribedbelow. Like SQL injection and many other vulnerabilities due to
Concept of InvisiType. We propose encapsulating unchecked inputs, XSS can be prevented with information
object-oriented safety-checking rules as policy classes, flow control, a technique that controls how data flows in-
whicharesubclassesoftheInvisiTypeclass. Ordinaryob- side the system to the outside world. In this section, we
jectinstancescanbesubjectedtothesepoliciesselectively, introduceInvisiTypebywayofshowinghowitcanbeused
dynamically, and efficiently. The policies are enforced by tocontrolinformationflowtopreventXSS.
the runtime system, requiring no change be made to the
third-partycodetobeprotected.
2.1 Cross-SiteScripting
Common security policies described using Invisi-
Type. We use InvisiType to implement common security
Let us first consider a simplified example of a cross-
policiessuchastainttrackingoraccesscontrolonobjects.
site scripting vulnerability drawn from the login extension
Thesepoliciesaregenerallyapplicableandcanenhancese-
codeintheMoinMoinWikiEngine,asshowninFigure1.
curityofmanyapplications.
The function cgi.FieldStorage() returns a Python
AnefficientimplementationofInvisiTypeforPython.
dictionary-like object representing the HTML form data.
WehaveincorporatedInvisiTypeintoPython,awidelyused
The login extension retrieves the name and password
programminglanguage.ThedesignofInvisiTyperequiresa
fieldsfromtheformdata. Ifthereisnouserwiththegiven
relativelysmallchangetotheruntimesystem.Theoverhead
name,thecoderespondswithanerrormessage.Inthiscase,
incurredisfoundtobenegligible.
the user-provided input name is echoed back unchanged.
Enhanced security of Python web applications. We ByinsertingsomemaliciousJavascriptcodeinthenameit-
used the InvisiType technique to enhance the security of 4 self, the Javascript gets executed when it is echoed on the
widely used Python web applications. These applications client’s computer, thus launching a cross-site scripting at-
totaledapproximately160,000linesofsourcecode,notin- tack.
cludingthelibrarycode. Allthewebapplicationshavesup- We can avoid cross-site scripting using the notion of
port for third-party extensions. One example is the Moin- tainting,whichisabasicformofinformationflowcontrol.
MoinWikiEnginewhichhasalargenumberofextensions, Therearefourbasicconstraintsintainting:
and is known to have many security bugs both in its own
distributionandin third-partyextensions. Wesuccessfully Taint Constraint 1. All input strings are considered
foundtwoimportantclassesofsecuritybugsintheapplica- tainted.
tions;inMoinMointhetwoclassesofsecuritybugsaccount
formorethan50%ofallknownsecuritybugs. Intotal,we TaintConstraint2. Astringisconsideredtaintedifitis
found25securitybugsinthe4applications. aconcatenationofoneormoretaintedstrings.form = cgi.FieldStorage()
... class TaintPolicy(InvisiType):
name = form["name"] def __add__(handler, self, other):
password = form["password"] return TaintPolicy.propagate(handler,
if not user.exist(name): self, other)
error = "Unknown user name:" + name def __radd__(handler, self, other):
... return TaintPolicy.propagate(handler,
request.http_headers() self, other)
request.write(error) def __getitem__(handler, self, other):
return TaintPolicy.propagate(handler,
self, other)
def __nativecall__(handler, self, args):
Figure 1. Cross-site scripting example from
return TaintPolicy.propagate(handler,
MoinMoin
args)
...
def propagate(handler, *args):
result = InvisiType.call(handler, *args)
TaintConstraint3. Taintedstringscannotbeusedasar-
# demotes result with TaintPolicy
gumentsinsystemcalls.
return taint(result)
def __syscall__(handler, self):
Taint Constraint 4. Strings are safe to be used in sys-
raise OperationError("Tainted object is"+
tem calls if they cannot be interpreted as executable
"used in a system call")
Javascript. Strings can be made safe, sanitized, by
replacing characters with special meaning in HTML,
suchasreplacing“&”with“&amp”,“<”with“&lt”,
and“>”with“&gt”. Figure2.DefinitionofTaintPolicy
Thistaintpolicyisapplicableacrossmanyapplications.
2.2 TheTaintPolicy
recv = socket.recv
socket.recv = (lambda *args:
LetusshowhowweuseInvisiTypeinthecontextofthe demote(recv(*args), TaintPolicy))
Pythonlanguagetoimplementtainting.Theescapefunc-
tion of the cgi module in the Python standard library has
already implemented sanitization. Third-party code is ex-
Figure 3. Tainting an input string received
pected to call escape on all input strings before echoing
fromasocket
themback.
The framework developer encapsulates the taint policy
inoursystemwiththedefinitionofTaintPolicy,asub-
class of InvisiType, as shown in Figure 2. All objects
subjected to this policy are considered tainted. The defi-
def escape(s, quote=None):
nition of syscall enforces Taint Constraint 3, which
s = s.replace("&", "&amp;")
statesthattaintedobjectsarenotallowedtobeusedinsys-
s = s.replace("<", "&lt;")
tem calls. The rest of the definition enforces Taint Con-
s = s.replace(">", "&gt;")
straint 2, which states that any concatenation of tainted if quote:
strings yields tainted strings. Details of the policy defini- s = s.replace(’"’, "&quot;")
tionarepresentedinSection3. promote(s, TaintPolicy)
return s
2.3 ApplyingthePolicy
A framework designer next applies the taint policy by Figure 4. Untainting a sanitized string in the
tainting all input strings until they are escaped. Each in- escapefunctioninthecgimodule
putstringistaintedbycallingdemoteonthestringalong
with the TaintPolicy class. Figure 3 shows tainting isapplied to strings received from a socket. Strings are un-
taintedintheescapemethodbycallingpromoteonthe
sanitizedstringandtheTaintPolicyclass,asshownin
Figure 4. The pair of demote and promote operation
implementsTaintConstraints1and4.
2.4 DetectingSafetyViolations
The runtime system of the language automatically en-
suresthatthereisnoinformationflowfromaninputstring
to system calls. A tainted string in this system is a string
thathasbeendemotedwiththeTaintPolicyclass. All
input strings are marked as tainted; the taint is propagated
through concatenation; taint is removed when escape is
called; any system call on tainted strings generates an ex-
ception. Thisexampleillustrateshowfine-grainedinforma- Figure 5. Class hierarchy for InvisiType sub-
tionflowcontrolcanbeprovidedinawaythatrequiresno classes: normal arrow indicates inheritance sup-
modificationtothird-partycode, ateitherthesourceorbi- ported in an underlying language and a dotted arrow
narylevel. indicatesinheritancesupportedbytheInvisiTyperun-
time.
3 InvisiTypeDesign
Inthissection,wepresentthedesignandrationaleofIn- 3.2 SafetyCheckingInInvisiTypeClasses
visiType. Wefirstdescribetheclasshierarchyofpolicyand
protected classes, then describe how to define the safety- InvisiType is designed as an extension of the underly-
checkingrules.Finally,wedescribehowInvisiTypeenables ingprogramminglanguagetoallowforapplication-specific
the platform developers to distinguish between third-party safety checks. Safety checks are often required when the
and platform code using the notion of restricted code do- state of an object is read or modified and when methods
mains. are invoked on an object. Besides the code written in the
object-orientedprogramminglanguageitself,wealsohave
3.1 InvisiTypePolicyandProtectedClasses todealwithnativemethods. Thus,inthefollowing,wede-
scribe how we can add safety checks to each of the three
AsdiscussedinSection1,policiesareexpressedassub- categoriesinturn:
classesofInvisiType. Aprotectedclassisderiveddy-
namicallyandimplicitly,viamultipleinheritance,fromthe 1. specificvirtualmethods
policy and the class of the object being put under the pol-
icy. A platform developer can choose to place individual 2. languageprimitives,and
objectinstancesunderapolicypossiblyonlyforaduration.
3. nativemethodcall.
Thus, the type of an object can change dynamically. An
object’sclasshierarchyconsistsoftheclassesitbelongsto
ordinarily,followedbyadynamicallymodifiableprotected
3.2.1 MethodInvocations
classhierarchyconsistingofoneormoreprotectedclasses,
as shown in Figure 5. Note that the protected class hier- Apolicyclasscanextendanordinaryclassbydefiningnew
archy is visible only to the runtime system and not to the virtual methods with the same name. Methods overriding
applicationsoftware. thoseintheoriginalclassarepassedanextraargumentby
The built-in demote and promote functions can be theruntimesystem:themethoddefinedintheoriginalclass.
usedtoapplyapolicytoorremoveapolicyfromanobject This allows the overriding method to invoke the original
(Figure 6). Upon demotion, a new protected class imple- methodbeforeoraftersafetychecks.
mentingthegivensafety-checkingrulesinapolicyclassis Consider a common safety rule that requires access
addedasthelowestmemberintheinstance’sprotectedclass control be checked before confidential data can be ac-
hierarchy. Upon promotion, the protected subclass corre- cessed. Figure 7 illustrates how this safety rule can
sponding to the given policy is removed from the object’s be enforced with AccessControlPolicy, a subclass
hierarchy. of InvisiType. This policy simply overrides theFunction Description
demote(object, invisiType-class) DemotetheobjectbyaddingtheclassofthegivenInvisiTypepolicytoitspro-
tectedclasshierarchy
promote(object, invisiType-class) PromotetheobjectbyremovingthegivenInvisiTypepolicyfromitsprotected
classhierarchy
Figure6.Signatureofthedemoteandpromotefunctions
accessConfidentialDatawithonethatraisesanex- stringtype)andoriginalargumentstothehandler(self
ception. AllnewlycreatedclientsaresubjectedtotheAc- and other). The add method calls the propagate
cessControlPolicy by demoting them with respect to the method and passes all the arguments. Propagate dele-
policy class. They are promoted back when they pass the gatestheoperationtothehandleranddemotestheresult
checkACLmethod. objectwithTaintPolicy.
Taintpropagationisimplementedsimilarlyforotherop-
erationssuchas getitem whichreturnsacopyofthe
class AccessControlPolicy(InvisiType):
characteratthegivenindexfromthestring.Taintalsoprop-
def accessConfidentialData(method, self):
agates through string native methods such as upper()
raise Exception("Illegal Access")
which returns a copy of the string converted to the upper
class Client:
case. The nativecall methodiscalledforsuchna-
def __init__(self):
tive methods, and it calls the propagate method to per-
...
demote(self, AccessControlPolicy) formtaintpropagationbydemotingthereturnvalueofthe
def checkACL(self): nativefunctions.
...
if success == True:
3.2.3 Nativemethods
promote(self, AccessControlPolicy)
def accessConfidentialData(self):
Wenowdescribehowwehandlenativemethodimplemen-
# accessing confidential data
tations. Systemcallsareaparticularlyimportantsubsetof
native methods as they interface with the external world.
We often have to perform special checks to avoid leakage
Figure 7. Over-riding a virtual method in Ac- of sensitive data from the application. We need to moni-
cessControlPolicy torwhichofthesenativemethodsarecalled,andcheckthe
protectedparameterspassedintosuchmethods.
To handle native methods, the InvisiType
class has pre-defined four methods that are in-
voked by the runtime system: syscall ,
3.2.2 LanguagePrimitives
nativecall , before nativecall arg ,
DynamiclanguageslikePythonhaveasetofbuilt-inoper- and after nativecall arg , as described in
ationhandlersthatcanbeoverriddenbytheapplication. A Table1.
policy class can insert fine-grained safety checks by over- The InvisiType runtime invokes the syscall
ridingtheseoperationhandlers. Forexample,itcanrestrict method before a system call is made. A policy class can
access to certain attributes of a protected object by chang- override the syscall to add safety checks to system
ingthe getattr operationhandler;oritcanrestrictthe calls. The syscall methodtakestwoarguments: the
methodsthatcanbeinvokedonprotectedobjectsbyadding system call function and the demoted object on which the
checks to the call operator handler. Like the above, systemcallisinvoked.
thenewhandlersalsotakethepolicyobjectandthehandler In the TaintPolicy example in Figure 2, the
foritssuperclassasadditionalarguments. syscall method is overridden to throw an exception
Let us return to the TaintPolicy example defined in ifanysystemcallistobeattemptedonaprotectedobject.
Figure 2. The policy class overrides operation han- Thispreventstaintedstringsfromflowingintosystemcalls.
dlers such as add , radd and getitem . Whenever the InvisiType runtime encounters a na-
When a binary add operation is applied to an object sub- tive method invocation to a protected object, it will call
jected to the TaintPolicy, the add method in the nativecall . Again, policy classes can perform
TaintPolicy class is called. Passed to the method are safetychecksbyoverridingthe nativecall method.
the the original handler of the add operation ( add in nativecall takes as arguments the native methodMethod Description
syscall Methodinvokedwhenaprotectedobjectisusedasanargumenttoasystemcall
nativecall Methodinvokedwhenanativelyimplementedmethodofaprotectedobjectiscalled
before nativecall arg Methodinvokedbeforeaprotectedobjectisusedasanargumenttoanativelyimplementedmethod
after nativecall arg Methodinvokedafteraprotectedobjectisusedasanargumenttoanativelyimplementedmethod
Table1.Pre-definedmethodsintheInvisiTypeclass
called,thedemotedobject,thearguments,aswellasasetof
keywordssummarizingtherelevantsemanticinformationin class ReadonlyPolicy(InvisiType):
thenativemethods. Forexample,thekeywordreadonly def __setattr__(handler, self, name, attr):
if in_restricted_mode():
specifiesifthenativemethodtobeinvokedonlyreadsand
raise OperationError(
not writes the object. This information allows the policy
"Object %s is read-only" % self)
classtoreactaccordingly.
return handler(self, name, attr)
Finally, whenever a protected object is passed
def __nativecall__(nativemethod, self,
as an argument to a native method of another args, readonly):
object, the before nativecall arg and if not readonly and in_restricted_mode():
after nativecall arg methods are invoked raise OperationError(
before and after the native method, respectively. Over- "Object %s is read-only" % self)
ridingthismethodallowssafetycheckstobeaddedbefore return nativemethod(*args)
theobjectisusedorafterthenativemethodreturns.
3.3 RestrictedMode
Figure8.ReadonlyPolicy: preventsrestricted
modulesfromchangingprotectedobjects
To enable policies that differentiate between the third-
partycodeversustheframeworkitself, theInvisiTypesys-
tem introduces the notion of a restricted mode. It has two
built-infunctions: Highly reflective languages such as Smalltalk, Ruby,
PHPandJavascript(whicharealsoknownasdynamiclan-
import restricted(modulename)importsanun-
guages)aremoresuitableforInvisiTypethanlessreflective
trustedorthird-partymodule, languages. In those languages, every access to an object
goes through the type dispatch mechanism, which may be
in restricted mode() returns true if the current
intercepted by the InvisiType runtime to override a default
frameisexecutingcodefromarestrictedmodule.This
behavior. This allows, for instance, the addition of safety
canbeusedtorestrictaccessinrestrictedmodules.
checksforattributeaccessbyoverridinganattributeaccess
We now demonstrate how in restricted mode() operation.
can be used to prevent untrusted functions from modify- It is not possible to utilize the full power of the Invisi-
ing protected objects. The ReadonlyPolicy, as shown Type concept in less reflective languages like Java or C#.
in Figure 8, overrides two methods: setattr and Sinceonlymethodinvocationsusethetypedispatchmech-
nativecall . The former prevents restricted code anismintheselanguages,theInvisiTypeideaisonlyappli-
fromwritingtoaprotectedobject’sattributesdirectly. The cabletoaddingsafetycheckstomethodinvocations.
latter prevents restricted code from invoking any native InvisiType is compatible with optimization techniques
methodsthatdonotpossessthereadonlyproperty. such as Just-In-Time (JIT) compilation. The JIT compiler
dynamically compiles a method at runtime by specializ-
3.4 LanguageCompatibility ing the method with the most common argument types. If
the method is called with arguments of uncommon types,
TheInvisiTypetechniqueisapplicabletoobject-oriented the JIT runtime falls back on the interpreter to execute the
languages supporting class inheritance. Multiple inheri- method.IfanInvisiTypeinstanceisusedasanargumentfor
tance is not required at the language level, as it is not ex- amethodforthefirsttime,theJITruntimeconsidersitasan
posed at the programming level. The only class having unseentypeandusestheinterpretertoexecutethemethod.
morethanoneimmediatesuperclassisaprotectedclass. Its WhentheargumentoftheInvisiTypeisusedenoughtimes,
inheritance from a policy class is set up by the InvisiType JIT will compile the method specializing with the Invisi-
runtimesystemupontheinvocationofademoteoperation. Type.InvisiTypePolicy Description
TaintPolicy Restrictanobjectfrombeingusedinsystemcallsandpropagatetaint
ReadonlyPolicy Removewriteaccesstoanobjectinrestrictedmode
WriteonlyPolicy Removereadaccesstoanobjectinrestrictedmode
NoAccessPolicy Removereadandwriteaccesstoanobjectinrestrictedmode
Table2.Pre-definedsecuritypoliciesinInvisiType
4 SecurityPolicies a performance comparable to CPython, a reference imple-
mentation for Python [27]. Our prototype is compatible
Throughoutthepaper,wehavepresentedanumberofse- with optimizations implemented in PyPy interpreter. For
curity policies to illustrate the capability of the InvisiType instance,asanoptimization,PyPyinterpreteremitsspecial
system. Thesepolicies, summarizedinTable2, aresignif- bytecodes for method access and built-in function access;
icantintheirownrightbecausetheycanbeusedformany theInvisiTyperuntimeworkswiththeoptimizationseffort-
differentapplications. lessly.
The taint policy is useful not just for catching security
vulnerabilities in web applications. It can be used for pre- 5.2 ProtectedClasses
ventingdataleakageofdownloadedconsumerapplications.
For example, a mobile application on a smart phone may AsdiscussedinSection3,aprotectedclassinheritsfrom
wish to access some contact information. Today, an end apolicyclassandtheclassoftheobjectitprotects. Anew
user may be given a choice of whether to grant it access, datastructureneedstobegeneratedforeachclassofobjects
whichwouldalsoallowtheapplicationtoexporttheinfor- a policy protects, as illustrated in Figure 9. The protected
mationifitsopleases. Withthetaintpolicy,wecanprevent classesarekeptinacacheforthesakeofreuse.
thethird-partyapplicationfromexportingthecontactinfor-
mation. ProtectedClass1 StringType
Herearesomeotherscenariosinwhichthevariouspoli- TaintPolicy StringType __getattr__ __getattr__
ciescanbeused. Thereadonlypolicycanbeusedtoensure Class __setattr__ ...
UnicodeType ...
that a third-party application does not accidentally modify InvisiType
configuration information which may lead to security vul- Stub code
nerabilities such as allowing access to arbitrary files. The __getattr__ __getattr__
writeonly policy can be used to ensure that untrusted code __setattr__ …
...
can initialize a session object but not read it back. This UnicodeType
ProtectedClass2
policy guarantees that the untrusted code cannot leak in-
formation related to previous sessions to the outside. The
NoAccessPolicymaybeusefultohidetop-secretinforma-
tion,likecryptographickeys,fromthird-partysoftware. Figure9.Examplesofprotectedclasses: nor-
mal ProtectedClass1 inherits from String type and
5 AnInvisiTypeImplementation TaintPolicy; ProtectedClass2 inherits from Unicode
typeandTaintPolicy. Thegeneratedprotectedclasses
arecachedinthepolicyclass.
WehaveimplementedaprototypeoftheInvisiTyperun-
timesystemaspartofthePythonprogramminglanguage.
In Python, a type has a table of handler functions for
5.1 PyPyImplementation each of the standard operations in the language such as
getattr and setattr forgettingandsettingan
We implemented our InvisiType runtime system on objectattribute,respectively.Wecreateanewtableofoper-
PyPy. Designedtobeflexibleandsupportexperimentation, ationhandlersforeachprotectedclass. Ifthehandlerisnot
PyPy is a Python interpreter written in Python itself [28]. overriddenbythepolicy,thehandlerentrysimplypointsto
TheinterpreteriswritteninRPython,arestrictedsubsetof thecorrespondinghandlerintheclassbeingprotected. Ifit
Python,whichcanbestaticallycompiled.Someofthepoli- is,theentrypointstoastubcodedefinedinInvisiType.
cies, TaintPolicy for instance, described in this paper Thisstubcodeisresponsibleforinvokingthehandlerwith
arealsowritteninRPythonforperformanceconsideration. anadditionalparameter: theoverriddenmethod. Similarly,
TheC-translatedversionofthePyPyinterpreterweusehas the overridden virtual methods in the virtual method tablefor the class also point to the stub code, which again sup- this by overriding getattr operation handler, which
pliestheextraargument. handlesattribute/methodaccess.
A promote operation removes the given policy class
5.3 DemotedObjects fromtheclasshierarchyaswellasthecorrespondingpolicy
objectfromtheInvisiField.
Original type 5.4 NativeMethods
j
type __getattr__
attributes __setattr__
… The nativecall method is implemented by
overriding the getattr operation handler. If the
InvisiField
nativecall method is defined in a policy class, the
l Protected class
protected class corresponding to this policy automatically
__getattr__
op bo jl eic cy t Policy __setattr__ k InvisiType includes an overriding getattr , the attribute access
Class … Stub code handler. When getattr detects that a native method
of the object is accessed, it copies the method object and
demotesittooverridethe call handlerbeforereturn-
ing it. The call handler invokes nativecall
insteadoftheactualnativemethodcode.
Figure 10. Object demoted to be an Invisi-
To support the before nativecall arg ,
Type instance: (1) Type pointer of the object orig-
after nativecall arg , and syscall meth-
inally points at its type. (2) When a policy is applied
ods, we use Python’s runtime type-checking mechanism.
bycallingthedemotefunction,theInvisiTyperuntime
Since Python is a dynamically typed language, a na-
creates a subclass inheriting from the applied policy
tive method has to check whether the arguments to the
classandtheoriginaltypeoftheobject. Theruntime
method have the correct type for the method. We aug-
examinesvirtualmethodsinthepolicyclassandadds
ment the type-checking code to check if an argument
stub code to the generated subclass. (3) Finally, the
of InvisiType subclass is passed to a native method and
runtimechangesthetypepointeroftheobjecttopoint
invoke the appropriate before nativecall arg ,
atthegeneratedInvisiTypesubclass.
after nativecall arg , or syscall method
accordingly.
Objectsinoursystemhaveanadditionalfield,calledthe
InvisiField,whichpointstoalistofpolicyobjectsthat 5.5 MaintainingTransparency
theobjectiscurrentlysubjectedto,asshowninFigure10.
Thetypepointerofademotedobjectpointstotheprotected
WealsomodifiedthePythonruntimesystemtohidethe
classofthelowestmemberoftheprotectedclasshierarchy.
protected class hierarchy from the application writer. This
A demote operation is implemented in the following
involves making changes to only a few built-in functions
way:
such as type(object) and isinstance(object,
type).
1. When an object is demoted, the runtime examines if
attributesaredefinedinagivenpolicyclass. Ifso,the
runtime instantiates a policy object and appends it to 5.6 RestrictedMode
thelistofpolicyobjects.
Twobuilt-infunctionsforrestrictedmode,import re-
2. Theruntimechangestheclasshierarchyofagivenob-
stricted() and in restricted mode(), are im-
ject by inserting the protected class in the class hier-
plemented using the restricted execution support in
archy. The protected class is created if one does not
Python. The Python Interpreter executes code in re-
alreadyexists.
stricted mode unless the built-in namespace associated
3. Thetypepointeroftheobjectischangedtopointtothe with the code is bound to the standard built-in module.
protectedclass. Import restricted() function binds built-in names-
pace to a cloned built-in module before importing a mod-
Ifapolicyclassdefinesattributesoroverridesmethodsin ule,thusmakingthemodulecodetoruninrestrictedmode.
anoriginalclass,attribute/methodresolutionorderismod- Similartechniqueisbeingusedtorestrictcapabilitiesinap-
ified to match the new class hierarchy. The runtime does plicationsonGoogleAppEngine[31].5.7 Summary 4. MoinMoin is a large and very popular Wiki system.
MoinMoin provides a central repository for exten-
sions [22]; over 200 third-party extensions have been
InvisiType allows programmers to encapsulate safety
developedtodate.
checks in an object-oriented manner, separating the con-
cerns of safety checks from the representation and usage
oftheobjects. TaintPolicy,forinstance,expressesthe
securitypolicyforgeneraltaintedobjects. Thesamepolicy Application Description SourceLOC
canbeappliedtodifferentclassesofdata. Third-partysoft- PyBlosxom Alightweightfile-based 5,999
warecanberunwiththeTaintPolicyenforcedwithout weblogsystem
anycodemodifications. ViewVC Webinterfacefor 14,964
It is interesting to contrast this approach to code re- versioncontrolrepositories
Roundup Issuetrackingsystem 43,788
writing systems that add instrumentation code to the byte-
MoinMoin ExtensibleWikiEngine 92,438
code. OurapproachhastheadvantagethatInvisiTypeadds
overheadtoonlytheselectedobjectinstances;bytecodere-
Table3.Summaryofapplications
writingaddsoverheadtothecodeinvokedonallinstances
of the objects. Also, simplicity is another advantage of
MoinMoin is substantially bigger than the rest and has
our approach. Not only is instrumentation at the bytecode
the largest number of extensions. We have conducted
levelcomplex,butbytecodere-writingimposesanon-trivial
a comprehensive case study of this application and will
overheadfordynamicallyloadedcode.
presentitinSection6.4,afterdescribingthegeneralresults
onalltheseapplicationsasawhole.
6 ExperimentalResults
6.2 SecurityErrors
Besides implementing the security policies described
above, we have applied InvisiType to four widely-used
AlltheseapplicationsareknowntohaveXSSerrors. To
open-source Python web applications to find cross-site
catch XSS errors, we needed to modify only the standard
scriptingvulnerabilitiesandaccesscontrolerrors. Wesuc-
Python library to implement a taint policy like the one in
cessfullyfoundbugsineveryoneoftheseapplicationswith
Figure2. Wedidnotneedtochangethesoftwareplatform
relatively little effort, while incurring a low runtime over-
codeatall.
head.
RoundupandMoinMoinareknowntoalsohaveaccess
controlerrors. Weimplementedaccesscontrolpoliciesfor
6.1 Applications
Roundup and MoinMoin in a manner similar to that de-
scribed in Figure 7. They require changing less than 100
We have chosen a set of widely-used Python web ap- and150linesofcodeinthesoftwareplatform,respectively.
plicationsthatallowthird-partyextensions. Table3shows Nochangesaremadetoanyoftheextensions.
thenumberoflinesofcodeinthestandarddistributionsof Table 4 shows the number of previously reported XSS
theseplatforms,whichinsomecasesalsoincludeafewof and access control violations for each of the four applica-
themorepopularextensions. tions [23, 26, 29, 30, 34, 36]. Running these applications
withinputsknowntotriggertheseerrors,wefoundthatthe
1. PyBlosxomisapersonalweblogsystem. Over90ex- InvisiType policies are successful in catching every one of
tensionshavebeendevelopedforthisplatform;theno- theseerrors.
table ones include Lucene extension which searches
weblogs, and a photo-gallery extension that shows ApplicationName #ofSecurityBugs
photosforaweblogentry. XSS ACL
PyBlosxom 3 0
2. ViewVCisatoolforviewingthecontentsofCVSand ViewVC 1 0
SVN repositories using a web browser. ViewVC has Roundup 2 3
extensions for third-party source repository systems MoinMoin 13 3
suchasthepopular,commercialPerforcesystem.
Table4.Numberofsecuritybugsintheappli-
3. Roundup is a web-based issue/bug tracking system. cations
It has well-defined interfaces for extensions to allow
project-specificcustomization.6.3 InvisiTypePolicyOverhead large as 92,000 lines of code, with support for third-party
macros/pluginsandaccesscontrolforwikipages.
To determine the overhead of the InvisiType approach, This rapid growth in size and complexity led to several
we measure the time the applications take without Invisi- securityissues. TheMoinMoinofficialwebsiteshowsthat
Type, then with the InvisiType extension, and finally with 24securitybugshavebeenfoundsince2007[23];thisnum-
allthepoliciesenforced. Table5reportsthemeasurements berincludesbugsfoundintheMoinMoindistributionalone.
oftheoverheadaveragedovertenruns. Wefoundthatthe Itislikelythathundredsofthird-partypluginshavesimilar
overhead imposed by the InvisiType system in the Python securityissues. Sixteenoutofthe24reportedbugsfallinto
interpreterisnegligible,beinglessthan1.5%inallthefour two categories: cross-site scripting vulnerabilities and ac-
applications. Theoverheadduetothetaintandaccesscon- cesscontrolerrors.
trolpoliciesisalsominor,withthelargeststillunder4%.
6.4.2 TaintTrackinginMoinMoin
Application InvisiTypeOverhead PolicyOverhead
PyBlosxom 0.5% 4.0% Topreventcross-sitescripting,westartedbyimplementing
ViewVC 0.3% 0.5% the taint policy described in Figure 2. We soon found that
Roundup 1.3% 3.7% taintingeverystringreceivedfromasocketistoostrict.The
MoinMoin 1.5% 0.7% reasonisthattheescapemethodinthecgimoduleisnot
theonlywaytosanitizeastring. Morespecifically, Moin-
Table 5. Overhead of the InvisiType system Moin uses Python’s standard HTTP server library to pro-
andsecuritypolicies. cessHTTPrequests.Thelibrarychecksifreceivedrequests
conform to the HTTP request syntax; doing so automati-
cally ensures that Javascript is not included in the request,
As a stress test, we wrote a taint micro-benchmark that making it an effective sanitizer. As a matter of fact, since
does nothing but manipulate various-sized strings. The allrequestURIsareechoedbackwiththecontentofapage,
overhead of the InvisiType implementation itself remains treatingHTTPrequestsastaintedwouldraiseafalsealarm
lessthan1.5%.Ifnoneofthestringsareconsideredtainted, eachtimeapageisdisplayed.
thenthereisnoadditionaloverhead. Ifwetaintallstrings, ThisshowsthattheInvisiTypesystemworksonlyaswell
thentheperformancedegradesbyasmuchas14.1%. This as the policies. Fortunately, the false alarms make it rela-
illustrates the power of the InvisiType system where over- tivelyeasyfortheplatformdevelopertotightenupthespec-
head is incurred only on those instances that need protec- ificationofthepolicy. Wecanfixthisproblembymodify-
tion.Iftheoverheadwasuniformforallobjectsofthesame ingtheBaseHTTPRequestHandlerclassintheHTTP
type, the web applications we studied would have a very serverinthePythonstandardlibrary,asshowninFigure11.
highoverheadsincetheymanipulatemostlystrings. After the parse request method finishes parsing and
syntax checking, we can safely promote the parsed strings
6.4 MoinMoinCaseStudy backtothenormalstringtype.
In this section, we describe our experience in applying
class BaseHTTPRequestHandler:
InvisiTypepoliciestotheMoinMoinWikisystem[21]. We
def parse_request(self):
chose MoinMoin for our case study not only because it is
...
thebiggestandhasthemostextensions,butsincetherewas
requestline = self.raw_requestline
a previously reported attempt to secure MoinMoin, we are
abletoprovideacomparisonwithpreviouswork. # Syntax check of HTTP request
self.command=promote(command,
6.4.1 MoinMoinOverview
TaintPolicy)
MoinMoin is a popular open-source wiki system imple- self.path=promote(path, TaintPolicy)
self.request_version=promote(version,
mentedinPython. Manywell-knowncommunitiessuchas
TaintPolicy)
Apache, Debian, Ubuntu and Python use MoinMoin as a
collaborativedocumentationtool.
MoinMoinstartedasasimplewikiengine;initsfirstre-
lease,MoinMoinhad11,000linesofcodeandhadnosup- Figure 11. Untainting the strings that are
port for third-party plugins. As it became popular, Moin- checkedbytheHTTPServerlibrary
Moin grew quickly. As of version 1.8.0, MoinMoin is as6.4.3 AccessControlCheckingforWikiPages
class Page(object):
Wiki pages in MoinMoin have access control lists (ACL) def get_raw_body(self):
thatmanagewhichusersorgroupscanaccessthepage. For # returns the raw body of the text page
example,anACLofapagecanspecifythatAlicecanread ...
andwritethepage,butallotherusershaveonlyreadaccess. def getACL(self, request):
TheaccesscontrolinMoinMoinisimplementedbyrequir- ...
acl = self.parseACL()
ing developers to call an access control checking function
...
beforereadingfromorwritingtoawikipage. Asaresult,
return acl
theaccesscontrolcheckingcodeisscatteredthroughoutthe
code;asofversion1.8.0,accesscontrolchecksarefoundin
class AccessControlList(object):
76differentplacesacross30differentfiles.
def may(self, request, name, dowhat):
Theimplementationofaccesscontrolcheckinghasbeen # returns True if user with name has
asourceofsecurityproblemssinceitisveryeasyfordevel- # access to read, write, delete, etc
operstoforgettoinsertthecheckingcode.Accordingtothe ...
MoinMoinwebsite,thereare3securitybugscausedbydis-
regardingACLinwikipages[23]. Evenastandardplugin
INCLUDE in the MoinMoin distribution had this problem.
Figure 12. MoinMoin’s Page class and Ac-
INCLUDE includes a wiki page inside another wiki page;
cessControlListclass
however, the plugin failed to check the access control list
associatedwiththeincludedwikipage.
Before explaining how we enhanced the security of
MoinMoin’s access control implementation, we first de- ispromotedbacktoanordinarypagewhentheaccesscon-
scribe the current access control implementation. Fig-
trolcheckisperformedsuccessfullybythemaymethod.
ure 12 shows the Page class representing a wiki page We have so far described how we enforce access con-
andtheAccessControlListclassrepresentingaccess trolonreadaccesses;similarpoliciescanbedefinedtopro-
control list for a wiki page. The handler of each HTTP tectthewriteaccesses. WewereabletodetectallofMoin-
request is given its own Page object. It must first call Moin’s known access control bugs. More importantly, our
getACLtogettheaccesscontrollistfortherequestedwiki systemcanguardagainstalltheaccesscontrolerrorsinthe
page; it then invokes acl.may (request, name, hundredsofexistingMoinMoinplugins, withoutrequiring
"read") where request is the current HTTP request anycodechangesbemade.
and name is the user’s login name; if the access control
check succeeds, then it can invoke get raw body to re- 6.4.4 ComparisonWithPreviousWork
trievethecontentofthewikipage. Theaddedcomplication
Krohn et al. previously attempted to enhance MoinMoin’s
is that the getACL method also invokes get raw body
security using Flume [17]. Flume’s approach is based on
to retrieve the ACL associated with the page. Hence, to
OS-levelinformationflowcontrol;theyextractedthelogin
enforce access control check we should restrict the in-
module and made it a separate process. However, Flume
vocation of get raw body, except when called by the
does not address cross-site scripting vulnerabilities since
getACL method, until acl.may (request, name,
it is not possible with OS-level information flow control.
"read")successfullypassesaccesscontrol.
Flumecannotbeappliedtotainttrackingwhichneedsfine-
We enforce access control checking by defining
grainedinformationflowcontrol. Moreover,theirapproach
AccessControlPolicy, as shown in Figure 13, and
requiresmoreeffortthanours. Weusedlessthan150lines
subject all pages to the access control policy until their
of Python code to define and apply the two policies, but
ACLshavebeenchecked.
Flume required modifying 1,000 lines of Python code and
TohandlethecomplicationthatgetACLneedstoinvoke
adding1,000extralinesofC++code. Wealsomodifiedthe
get raw body, we define an attribute accessingACL
Pythoninterpreterbyaddingabout2,000linesofRPython
torecordthecontextwhethergetACLiscurrentlyexecut-
code,butthisrequiressignificantlylesseffortthanmodify-
ing for that page. get raw body is redefined so that it
ingtheoperatingsystemasinFlume.
willthrowanexceptionifitisinvoked,notbygetACL,on
aprotectedobject.
7 RelatedWork
EverypageisguardedbyanAccessControlPolicyobject
whenitiscreated. Intheconstructor init ofthePage
class, the page instance self is demoted with its own in- Therehasbeenmuchinterestrecentlyinusinginforma-
stanceoftheAccessControlPolicyclass. Anobject tion flow control for improving security on software sys-small.
class AccessControlPolicy(InvisiType):
GuardinterfaceandGuardedObjectclassareusedtoen-
def __init__(self):
forceaccesscontrolpolicyinJavasecurityarchitecture[9].
self.accessingACL = False
AninstanceofGuardedObjectembedsanobjecttobepro-
def get_raw_body(method, self):
tectedandaGuardobject. TheGuardobjectrepresentsan
if not self.accessingACL:
raise Exception("Illegal read access") access control policy for the protected object. When the
# invoking get_raw_body method protectedobjectisrequestedtoberetrieved,theGuardob-
# in Page class jectiscalledupontocheckagainsttheaccesscontrolpolicy.
return method(self) This mechanism can enforce access control on individual
def getACL(method, self): objects like InvisiType. However, it cannot describe secu-
self.accessingACL = True ritypolicieslikeTaintPolicydescribedinSection2.2,
# invoking getACL method in Page class
where code needs to be injected into specific methods or
result = method(self)
operators.
self.accessingACL = False
Sekaretal.introducedtheModel-CarryingCode(MCC)
return result
approach, where a security model is extracted from an ap-
class Page(object): plication and the user of the application determines a se-
def __init__(self, request, pagename, curity policy that is compatible with the model [32]. At
**kws): runtime, MCC guarantees that the selected security policy
... isnotviolatedbytheapplication. MCCusestheBehavior
demote(self, AccessControlPolicy) MonitoringSpecificationLanguage(BMSL)tocaptureim-
portantsecurityevents,suchasenteringandexitingsystem
class AccessControlList(object):
calls, and describes security policies with regular expres-
def may(self, request, name, dowhat):
sionpatterns. Comparedtotheirwork,InvisiTypeadoptsa
# after authorized to read the page,
moreobject-orientedapproach. InvisiTypepoliciesarede-
# we promote the page object back.
finedasaclasshencepoliciesmayinheritfromotherpoli-
promote(self.page, AccessControlPolicy)
cies;policiesareappliedbyoverridingthedefaultbehaviors
ofobjectstobeprotected. Asaresult,InvisiTypeprovides
betterabstractionforsecuritypolicies.
Figure13.Enforcingaccesscontrolchecking
Bytecode re-writing is a technique that modifies byte-
forwikipages
codeatstatictimeoratruntime. Therehasbeenmuchin-
terest in this area and there are many generic bytecode re-
writing frameworks [3, 4, 13]. Welch and Stroud used the
tems. Asbestos[6]andHistar[37]incorporatedDecentral- binary re-writing technique to enforce security policies on
ized Information Flow Control (DIFC) into new operating mobilecode[35].However,ourapproachdiffersfromthose
systems. Flume [17] implemented DIFC in the Linux op- worksinthatweimplementsecuritypoliciesatthetypesys-
eratingsystem. Theseprojectscontrolinformationflowbe- temlayer. Thismakestheimplementationrelativelysimple
tweenOSentitiessuchasprocessesandthreads.InvisiType anddoesnotincurruntimetranslationoverhead.
enables applying security policies at a finer-grained level. AspectOrientedProgramming(AOP)isaprogramming
Forinstance,TaintPolicyintroducedinthispapersup- paradigm which allows specifying cross-cutting concerns
portsinformationflowcontrolwithinaprocessallowingen- acrossmultipleclasses[15]. Therehasbeenmuchresearch
forcementofthepolicyoneachobjectinmemory. in applying AOP to security [5, 33]. Although there are
Myers and Liskov introduced JFlow and its successor similarities in that both allow modularizing security con-
JIF, which are Java-based programming languages with cerns,ourworkdiffersfromtheseapproachesinsignificant
DIFC support [24, 25]. JIF allows labeling variables to ways. First, InvisiType is capable of enforcing policies on
specifyaccesspermissions,andenforcesitwithstaticanal- individual objects, whereas AOP implementations only al-
ysis,thussupportinginformationflowcontrol. Whenprop- lowdescribingaspectsforclasses. Thisisessentialforse-
erlyused, JIFguaranteesthatthereisnoinformationleak- curity policies like the taint policy, which requires safety
age in an application written in JIF while InvisiType can- checksbeaddedatobjectgranularity. Also, InvisiTypeal-
not give a similar guarantee. However, to take advantage lows the removal of policies when they are no longer nec-
of it, legacy applications need to be re-written using JIF. essary. Thus, no overhead is incurred by unused security
Ourschemeallowsdeveloperstoenforcepoliciestolegacy policies.AOPimplementationsusebytecodere-writingand
applications with minimal modifications; our experience evenwhenpoliciesarenotused,thereistheoverheadofin-
withMoinMoinshowsthattheamountofeffortisrelatively sertedbytecodes.The Inlined Reference Monitor (IRM) approach is to fulness of this approach by showing that we can secure
modifyanapplicationtoincludereferencemonitors,which large,real-lifeapplicationswithrelativeeaseandlowover-
observe the execution of the application and take actions head.
on operations that violate a policy [7, 8]. Transactional
Memory Introspection (TMI) is a reference monitor archi-
Acknowledgment
tecturethatbuildsonsoftwaretransactionalmemory[2]. In
theTMIarchitecture,referencemonitorsareinvokedwhen
security-related resources are accessed inside transactions. ThispaperissupportedinpartbytheNSFPOMI(Pro-
InvisiTypeisamoreobject-orientedtechniquethanIRMor grammable Open Mobile Internet) 2020 Expedition Grant
TMIsincesafetychecksareencapsulatedinpolicyclasses No. 0832820, NSF Grant TRUST CCF-0424422, and a
andthepoliciesareappliedtoobjectsbychangingthetype Samsungscholarship. TheauthorsthankJohnC.Mitchell,
oftheobjects. However,ourtechniqueisonlyapplicableto SudheendraHangal,MichaelBarrientos,BenDodson,and
object-orientedlanguageswhileIRMandTMIdonothave DebangsuSenguptafortheirhelpwiththepaper.
sucharestriction.
Program Query Language (PQL) allows expressing
References
application-specific design rules and enforces them via
staticanddynamicanalysis[19]. AlthoughPQL’spattern-
matching based query is capable of expressing many [1] C. Anley. Advanced SQL injection in SQL server
application-specificpolicies,somepoliciesmaynotbeeas- applications. http://www.nextgenss.com/papers/advanced
sql injection.pdf,2002.
ilyexpressed. PQLdoesnotprovideanymeanstoexamine
[2] A.Birgisson,M.Dhawan,U.Erlingsson,V.Ganapathy,and
thevalueofanobject. Thismakesitdifficulttoexpressfor
L. Iftode. Enforcing authorization policies using transac-
instance, MoinMoin access control checking policy. Also,
tional memory introspection. In Proceedings of the 15th
PQL only allows expressing error patterns; the only way
ACMConferenceonComputerandCommunicationsSecu-
to enforce a good pattern is to query for every pattern that
rity,pages223–234,Oct.2008.
violates the good pattern. Finally, PQL does not support
[3] S. Chiba. Load-time structural reflection in Java. In
untrusteddomain,whichisnecessarytoenforcepolicieson
Proceedings of the 14th European Conference on Object-
third-partycode. OrientedProgramming,pages313–336,June2000.
[4] G. Cohen, J. Chase, and D. Kaminsky. Automatic pro-
8 Conclusion gram transformation with JOIE. In Proceedings of the
1998 USENIX Annual Technical Conference, pages 167–
178,June1998.
Third-partysoftwareisusedacrossmanysoftwareplat-
[5] B. De Win, W. Joosen, and F. Piessens. Developing se-
forms today. To help ensure that third-party software fol-
cureapplicationsthroughaspect-orientedprogramming. In
lowsfine-grainedsecuritypolicies,wehaveproposedagen-
Proceedingsofthe3rdInternationalConferenceonAspect-
eraltypeextensionconcepttoobject-orientedprogramming Oriented Software Development, pages 633–650, March
languagescalledInvisiType. 2004.
InvisiTypeallowssafetypoliciestobeencapsulatedinan [6] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey,
object-orientedmanner.Theplatformdevelopersspecifyall D. Ziegler, E. Kohler, D. Mazie`res, F. Kaashoek, and
thesafetychecksinaclass,andcanselectivelyanddynam- R. Morris. Labels and event processes in the asbestos op-
ically decide which object instances are to be subjected to eratingsystem.InProceedingsofthe20thACMSymposium
safety checks. No changes need to be made to third-party onOperatingSystemsPrinciples,pages17–30,Oct.2005.
software,ateitherthesourceorbinarylevel. [7] U. Erlingsson. The inlined reference monitor approach to
TheInvisiTyperuntimesystemusestheefficientvirtual
securitypolicyenforcement.PhDthesis,CornellUniversity,
Ithaca,NewYork,2004.
method dispatch mechanism to enforce the execution of
[8] U.ErlingssonandF.Schneider. IRMenforcementofJava
thesesafetychecksonselectedobjects.Unlikesourceorbi-
stackinspection. InIEEESymposiumonSecurityandPri-
narylevelinstrumentation,theoverheadofsafetychecksis
vacy,pages246–255,May2000.
appliedonlytothoseinstancesconsideredatrisk. Thisim-
[9] L.Gong,G.Ellison,andM.Dageforde. InsideJava2plat-
plementation makes it efficient to provide low-level safety
form security: architecture, API design, and implementa-
checks, even at the granularity of individual attribute ac-
tion. Addison-WesleyProfessional,2003.
cesses. Thus,fine-grainedcontrolliketaintandaccesscon-
[10] L.Gong,M.Mueller,H.Prafullchandra,andR.Schemers.
trolcanbeprovidedefficientlywithverylittleoverhead.
Goingbeyondthesandbox:anoverviewofthenewsecurity
Anothercontributionofthispaperisinthesecuritypoli- architecture in the Java development kit 1.2. In Proceed-
ciesthemselves. Thesepoliciesaregeneralandcanbeused ings of the USENIX Symposium on Internet Technologies
across many applications. We have demonstrated the use- andSystems,pages103–112,Dec.1997.[11] C.Gould,Z.Su,andP.Devanbu.Staticcheckingofdynam- [28] A.RigoandS.Pedroni.PyPy’sapproachtovirtualmachine
ically generated queries in database applications. In Pro- construction. InProceedingsofthe21stAnnualACMSIG-
ceedingsofthe26thInternationalConferenceonSoftware PLAN Conference on Object-Oriented Programming, Sys-
Engineering,pages645–654,May2004. tems,Languages,andApplicationsCompanion,pages944–
[12] W.G.J.HalfondandA.Orso.Amnesia:AnalysisandMon- 953,Oct.2006.
itoringforNEutralizingSQL-InjectionAttacks.InProceed- [29] Roundup cross-site scripting vulnerability. http://secunia.
ingsofthe20thIEEE/ACMInternationalConferenceonAu- com/advisories/9371.
tomatedSoftwareEngineering,pages174–183,Nov.2005. [30] Roundupmultiplevulnerabilities. http://secunia.com/advi-
[13] R.KellerandU.Hoelzle. Binarycomponentadaptation. In sories/29336.
[31] Paving the way to securing the Python interpreter.
Proceedings of the 12th European Conference on Object-
http://tav.espians.com/paving-the-way-to-securing-the-
OrientedProgramming,pages307–329,July1998.
python-interpreter.html.
[14] G.Kiczales, E.Hilsdale, J.Hugunin, M.Kersten, J.Palm,
[32] R.Sekar,V.Venkatakrishnan,S.Basu,S.Bhatkar,andD.C.
andW.Griswold. AnoverviewofAspectJ. InProceedings
DuVarney. Model-carrying code: a practical approach for
of the 15th European Conference on Object-Oriented Pro-
safeexecutionofuntrustedapplications. InProceedingsof
gramming,pages327–353,June2001.
the19thACMSymposiumonOperatingSystemsPrinciples,
[15] G. Kiczales, J. Lamping, A. Mendhekar, C. Maeda,
pages15–28,Oct.2003.
C.Lopes,J.JEAN-MARCLoingtier,andJ.Irwin. Aspect-
[33] J.Viega,J.Bloch,andP.Chandra.Applyingaspect-oriented
orientedprogramming.InProceedingsofthe11thEuropean
programming to security. Cutter IT Journal, 14(2):31–39,
Conference on Object-Oriented Programming, pages 220–
2001.
242,June1997.
[34] ViewCVS’s cross-site scripting bug. http://www.derkeiler.
[16] S.Kost.AnintroductiontoSQLinjectionattacksforOracle
com/Mailing-Lists/Securiteam/2002-05/0082.html.
developers. http://www.net-security.org/dl/articles/Integri- [35] I. Welch. Using reflection as a mechanism for enforcing
gyIntrotoSQLInjectionAttacks.pdf,2004. security policies on compiled code. Journal of Computer
[17] M. Krohn, M. Brodsky, M. Kaashoek, and R. Morris. In- Security,10(4):399–432,2002.
formationflowcontrolforstandardOSabstractions.InPro- [36] XMLinjectioninPyBlosxom. http://seclists.org/fulldisclo-
ceedingsofthe21stACMSIGOPSSymposiumonOperating sure/2009/Feb/0084.html.
SystemsPrinciples,pages321–334,Oct.2007. [37] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and
[18] V.B.LivshitsandM.S.Lam. Findingsecurityvulnerabili- D. Mazieres. Making information flow explicit in
tiesinJavaapplicationswithstaticanalysis. InProceedings HiStar. In Proceedings of the 7th USENIX Symposium
of the 14th USENIX Security Symposium, pages 271–286, on Operating Systems Design and Implementation, pages
Aug.2005. 263–278,Nov2006.
[19] M. Martin, B. Livshits, and M. S. Lam. Finding applica-
tionerrorsandsecurityflawsusingPQL:aprogramquery
language. In Proceedings of the 20th Annual ACM SIG-
PLAN Conference on Object-Oriented Programming, Sys-
tems, Languages, and Applications, pages 365–383, Oct.
2005.
[20] H.MasuharaandK.Kawauchi.Dataflowpointcutinaspect-
orientedprogramming.InThe1stAsianSymposiumonPro-
gramming Languages and Systems, pages 105–121, Nov.
2003.
[21] MoinMoin. http://moinmo.in.
[22] MoinMoinmacromarket. http://moinmo.in/MacroMarket.
[23] MoinMoin security fix announcements. http://moinmo.in/
SecurityFixes.
[24] A.MyersandB.Liskov.Adecentralizedmodelforinforma-
tionflowcontrol. InProceedingsofthe16thACMSympo-
siumonOperatingSystemsPrinciples,pages129–142,Oct.
1997.
[25] A.MyersandB.Liskov.Protectingprivacyusingthedecen-
tralizedlabelmodel. ACMTransactionsonSoftwareEngi-
neeringandMethodology,9(4):410–442,2000.
[26] PyBlosxomcontributedpackagescommentspluginmultiple
cross-sitescriptingvulnerabilities. http://www.securityfo-
cus.com/bid/18292.
[27] PyPy performance benchmark. http://morepypy.blogspot.
com/2008/05/general-performance-improvements.html.