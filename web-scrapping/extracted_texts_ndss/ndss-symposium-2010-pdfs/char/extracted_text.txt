Where Do You Want to Go Today?
(cid:3)
Escalating Privileges by Pathname Manipulation
SureshChari ShaiHalevi WietseVenema
IBM T.J.WatsonResearch Center,
Hawthorne,NewYork,USA
Abstract 1.Introduction
In this work we take another look at the problem of
We analyze(cid:2)lename-basedprivilegeescalationattacks,
privilege escalation via manipulationof (cid:2)lesystem names.
where an attacker creates (cid:2)lesystem links, thereby (cid:147)trick-
Historically, attention has focused on attacks against priv-
ing(cid:148) a victim program into opening unintended (cid:2)les.
ileged processes that open (cid:2)les in directories that are
We develop primitives for a POSIX environment, provid-
writable by an attacker. One classical example is email
ing assurance that (cid:2)les in (cid:147)safe directories(cid:148) (such as
delivery in the UNIX environment (e.g., [9]). Here,
/etc/passwd)cannotbeopenedbylookingupa(cid:2)leby
the mail-delivery directory (e.g., /var/mail) is often
an (cid:147)unsafe pathname(cid:148) (such as a pathname that resolves
group or world writable. An adversarial user may use
througha symboliclink in aworld-writable directory). In
its write permission to create a hard link or symlink at
today’s UNIX systems, solutions to this problem are typ-
/var/mail/root that resolves to /etc/passwd. A
ically built into (some) applications and use application-
simple-mindedmail-deliveryprogramthatappendsmailto
speci(cid:2)c knowledge about (un)safety of certain directories.
the (cid:2)le /var/mail/root can have disastrous implica-
In contrast, we seek solutions that can be implemented in
tionsforsystemsecurity.Otherhistoricalexamplesinvolve
the(cid:2)lesystemitself(oralibraryontopofit),thusproviding
privilegedprogramsthatmanipulate(cid:2)les undertheworld-
protectiontoallapplications.
writable/tmpdirectory[11],oreveninadirectoryofthe
Our solution is built around the concept of pathname attacker’schoice[10].
manipulators, which are roughly the users that can in(cid:3)u- Overtime,privilegedprogramshaveimplementedsafety
encetheresultofa(cid:2)lelookupoperation.Foreachuser,we mechanismstopreventpathnameresolutionattacks. These
distinguishunsafepathnamesfromsafepathnamesaccord- mechanisms, however, are tailored speci(cid:2)cally to the pro-
ing to whether or not the pathnamehas any manipulators gram’s purpose,are typicallyimplementedin the program
otherthanthatuserorroot. Weproposeasafe-open itself,andrelyonapplication-speci(cid:2)cknowledgeaboutthe
procedurethatkeepstrackofthesafetyofthecurrentpath- directorieswhere(cid:2)lesreside.Webelieve,however,thatthe
nameasitresolvesit,andthattakesextraprecautionswhile applicationisfundamentallythewrongplacetoimplement
opening(cid:2)leswithunsafepathnames.Weprovethatourso- thesesafetymechanisms.
lutioncanpreventacommonclassof(cid:2)lename-basedprivi- Recentvulnerabilitystatisticssupportourposition. The
legeescalationattacks,anddescribeourimplementationof US National Vulnerability Database [16] lists at least 177
the safe-open procedureas a library functionover the entries,sincethestartof2008,forsymlink-relatedvulnera-
POSIX(cid:2)lesystem interface. We tested our implementation bilitiesthatallowanattackertoeithercreateordelete(cid:2)les,
on several UNIX variants to evaluate its implications for ortomodifythecontentorpermissionsof(cid:2)les. Nodoubt,
systemsandapplications.Ourexperimentssuggestthatthis thevastmajorityoftheseentriesareduetoapplicationwrit-
solutioncanbedeployedinaportablewaywithoutbreak- ers who simply werenot aware ofthe problem. However,
ingexistingsystems,andthatitiseffectiveagainstthisclass there are even vulnerabilities in system programs, which
ofpathnameresolutionattacks. are typically better scrutinized. For example, an unsafe
(cid:2)leopenvulnerabilitywasreportedintheinetddaemon
in Solaris 10 [12] when debug logging is enabled. This
daemon runs with root privileges and logs debug mes-
(cid:3) sages to the (cid:2)le /var/tmp/inetd.log if that (cid:2)le ex-
ThisworkwassupportedinpartbytheDepartmentofHomelandSe-
curityundergrantFA8750-08-2-0091. ists. The(cid:2)leisopenedusingfopen(DEBUG LOG FILE,"r+"). Since /var/tmp is a world writable directory (suchasaccess/openraces[20,4]). Rather,wedirectlyad-
a local unprivileged user can create a link to any (cid:2)le on dresses the privilege-escalation threat, which is the main
the system, and overwrite that (cid:2)le as root with inetd motivationformanyoftheseattacks. Herewefocusonthe
debug messages. A similar example, related to unsafe pathnameresolutionmechanism,identifyasimplesecurity
unlinkoperation,isareportedvulnerabilityintheLinux propertythatcan bemetevenin thepresenceof racecon-
rc.sysinitscript [13] in the initscriptspackage ditions,andshowthatthispropertycanbeusedtoprevent
before version 8.76.3-1. That vulnerability could be used privilege-escalationattacks.
by unprivileged users to delete arbitrary (cid:2)les by creating
symboliclinksfromspeci(cid:2)cuser-writabledirectories.
1.1.Ourcontribution
In addition to these examples, experimentsthat we run
in the course of this work uncovereda number of (latent)
Wefocusontighteningtheconnectionbetween(cid:2)lesand
privilegeescalationvulnerabilities,wheresystemprocesses
theirnames. Inmost(cid:2)lesystems, programsaccess(cid:2)les by
writeorcreate(cid:2)lesasrootindirectoriesthatarewritable
providingnames (the pathnames), and rely on the (cid:2)lesys-
by unprivileged system process. In these cases, a com-
tem toresolvethesenamesintopointersto theactual (cid:2)les
promiseoftheunprivilegedsystemprocesscouldresultin
(the(cid:2)lehandles). Unfortunately,therelationbetween(cid:2)les
further privilege escalation. These vulnerabilities are de-
andtheirnamesinPOSIX (cid:2)lesystems is murky: Files can
scribedinSection5.3.
have more than one name (e.g., due to hard or symbolic
These examplesdemonstratethat it is unrealisticto ex-
links), these names can be changed dynamically (e.g., by
pect every application (or even every (cid:147)important applica-
renaminga directory),(cid:2)lename resolutionmay dependon
tion(cid:148))toimplementdefensesagainsttheseattacks.Wecon-
thecurrentcontext(e.g.,thecurrentworkingdirectory),etc.
tendthatasystem-levelsafetynetwouldbemoreeffective
Thismurkyrelationobscuresthesemanticsofthename-to-
atstoppingtheseproblemsthantryingto(cid:2)xeveryaffected
(cid:2)letranslation,andprovidessystemadministratorsandap-
application, or trying to educate current and future gener-
plicationswriterswithampleopportunitiestointroducese-
ations of application writers. In a world where applica-
curityvulnerabilities. Oursolutionbuildsonthefollowing
tions (and their fragments) are used in environments that
concepts:
arevastlydifferentfromwhattheapplicationdesignershad
in mind, it is unreasonable to expect that the applications
(cid:15) Ignoringthepartitiontodirectoriesandsubdirectories,
themselves will distinguish between (cid:2)les that are safe to
weviewtheentirepathasjustonenameandexamine
openandonesthatarenot.
its properties. We introduce the concept of the ma-
Inthisworkweseekageneral-purposemechanismthat
nipulatorsofaname,whichroughlycaptures(cid:147)anyone
canbeimplementedinthe(cid:2)lesystemorinasystemlibrary,
whocanchangetheoutcomeofresolvingthatname.(cid:148)
thatallowsprogramstoopen(cid:2)lesthatexistinan(cid:147)unsafe(cid:148)
In POSIX (cid:2)lesystems, the manipulatorsof a path are
environment, knowing that they will not be (cid:147)tricked(cid:148) into
roughlythe users and groups that have write permis-
opening (cid:2)les that exist in a (cid:147)safe(cid:148) environment. Speci(cid:2)-
sioninanydirectoryalongthis path. Moreprecisely,
cally,weshowhowsuchamechanismcanbeimplemented
U belongs to the manipulatorsof a name if the reso-
overPOSIX(cid:2)lesystems.
lution of that name visits any directory that is either
In a nutshell, oursolutioncan beviewedas identifying
ownedbyUorthatUhaswritepermissionsfor.
(cid:147)unsafesubtrees(cid:148)ofthe(cid:2)lesystemdirectorytree, andtak-
ingextraprecautionswheneverwevisitanyofthemduring
(cid:15) Usingtheconceptofmanipulators,wedistinguishbe-
theresolutionofapathname.Roughly,adirectoryisunsafe
tweensafenamesandunsafenames.Roughly,aname
fora certainuserifanyoneotherthanthatuser(orroot)
is safe for some user if only that user can manipu-
can write in it. Our basic solution consists of resolving a
late it. Specializing this concept to UNIX systems,
pathname component by component, enforcing the condi-
we call a name (cid:147)system safe(cid:148) if its only manipula-
tions that once we visit an unsafe node, in the remainder
tor is root, and call it (cid:147)safe for U(cid:148) if the only ma-
of the path we will no longerfollow symbolic links or al-
nipulators of it are root and U. For example, typi-
lowpathnameelementsof‘..’,norwillweopena(cid:2)lethat
cally the name /etc/passwd is (cid:147)system safe(cid:148), the
has multiple hardlinks. Thus, oncewe resolve throughan
name /home/joe/mbox is safe for user joe, and
unsafe node, we will not visit nodes that exist outside the
the name /var/mail/janeis not safe for anyone
subtreerootedatthatnode.1
(as/var/mailisgrouporworldwritable).
Incontrastwithmanypriorworkson(cid:2)lename-basedat-
tacks,ourworkisnotprimarilyfocusedonraceconditions (cid:15) Oncewehavesafeandunsafepathnames,wecanstate
1WedescribeinSection6.1amorepermissivevariantthatstillprovides ourmainsecurityguarantee. We provideaprocedure
thesameprotectionagainstprivilege-escalationattacks. safe-openthatensuresthefollowingproperty:If a (cid:2)le has safe names for user U, then a more formal analysis with experimental validation was
safe-open will not open it for U using donebyBishopandDilger[2].
anunsafename. Our safe-open function implements a user-level
pathname resolver that examines pathname elements one
Asweshowinthepaper,thispropertycanbeusedto
by one; its structure is therefore similar to that of the
ensurethatnoprivilegeescalationvia(cid:2)lesystemlinks
access-openfunctionbyTsafriretal. [20,21]. While
occurs. For example, if /etc/passwd is system-
theiruser-levelnameresolverappliesaccesscheckstoeach
safe,thennoprocessrunningasrootwillsafe-open
path element in a manner that defeats race attacks, our
this(cid:2)leduetoahardlinkorsymboliclinkthatcould
safe-openfunctionis notprimarilyconcernedwith ac-
havebeencreatedbyanon-rootprocess. Inparticu-
cesschecks.Instead,weapplya(cid:147)pathsafety(cid:148)checktoeach
lar,a(cid:147)simpleminded(cid:148)maildeliveryprogramthatuses
pathelement.2
our safe-open will be protectedagainst the attack
Inthe contextof system call introspectionmonitorsfor
in the example from above. Also, we veri(cid:2)ed that
TOCTTOUvulnerabilities,Gar(cid:2)nkel[14]consideredreme-
this guaranteeis suf(cid:2)cient to protect against the doc-
dies which could also potentially apply to the problem of
umentedvulnerabilitiesinCVE.
unsafe pathname resolution. These remedies include dis-
allowing the creation of symlinks to (cid:2)les which the call-
We implemented our safe-open procedure as a li-
ing process doesnot havewrite permissionsto, as well as
braryfunctionoverPOSIX (cid:2)le systems, and also general-
denyingaccess to (cid:2)les throughsymlinks. As noted in his
ized it to other POSIX interfaces that resolve pathnames
paper,thesesolutionscanmitigatetheproblembuttheydo
such as safe-unlink, safe-chmod, etc. (cf. Sec-
notsolveit. Forinstance, theydonotaddresspre-existing
tion 4). We performed whole-system measurements with
symlinks, and fail in the face of symlinks in intermediate
severalUNIX(cid:3)avors,and(cid:2)ndthatsystem-widesafepath-
componentsofthepathnames. Incontrast,oursolutiondi-
name resolution can be used without (cid:148)breaking(cid:148)real soft-
rectlyaddressestheunderlyingproblemofunsafepathname
ware. During these measurements we also uncovered a
resolution.
numberofnew(latent)vulnerabilities(cf.Section5.3),that
wouldbe(cid:2)xedusingoursafe-open. Anotherapproachtosystemcallintrospectionisimple-
We mentionthat ourwork onsafe pathnameresolution mented in the Plash sandboxing system [18]. Here, a re-
was done in the context of a more general framework. In placement C library delegates (cid:2)le-system operations to a
a companion paper [6] we describe an abstract (cid:2)lesystem (cid:2)xed-privilege,user-level,processthatopens(cid:2)lesonbehalf
interface where (cid:2)le operations are permitted only on the of monitoredapplications andthat enforcesa con(cid:2)nement
names with which the (cid:2)le was created. We then describe policy. Whilethisapproachprovidesgreatexpressiveness,
an implementation that uses the safe resolution procedure itwouldnotbesuitableforsystem-widedeploymentasen-
describedin this paper, and formallyprovethat it realizes visaged with our safe-open function. (For example it
theabstract(cid:2)lesysteminterface. (Thatformalproofiscar- is not clear how to address privilege changes by the call-
riedoutintheframeworkof(cid:147)universalcomposability(cid:148)[5], ingprocess,orhowthissolutionscaleswiththenumberof
whichis usedincryptographyto provethatasystem real- processes.)
izesitsspeci(cid:2)cationsinalladversarialsettings.) Addressing (cid:2)lename manipulations is in some ways
complementarytodealingwiththe(cid:147)confuseddeputy(cid:148)prob-
1.2.RelatedWork lem:Bothproblemsareusedasavehicleforprivilegeesca-
lation, and some aspects of the solution are common, but
the problems themselves appear to be different: For ex-
Muchofthepriorworkonpathnamesafetyhasfocused
ample, the (cid:147)simple minded(cid:148) mail-delivery program from
on time-of-check/time-of-use race vulnerabilities (TOCT-
above knows that it uses its root privileges for writing
TOU)inprivilegedprograms[1,2,8,3,20,4]. Ourwork
/var/mail/root, so in this sense it is not a confused
isnotfocusedonthisproblem,insteaditdirectlyaddresses
the privilege-escalationissue that underlies many of these deputy (since it is not being tricked into using some extra
privilegethatithappenstohold).TheproblemswithUNIX
race-conditionvulnerabilities:Ratherthantryingtoprevent
privilege-managingfunctionsweresystematicallyanalyzed
raceconditions,wemodifythename-resolutionprocedure
toensurethatprivilege-escalationcannothappenevenifan by Chen, Wagner and Dean; these authors also provide a
morerationalAPIforprivilegemanagement[7]. Theirap-
attackerisabletoinduceraceconditions.
proachwaslaterextendedbyTsafrir,DaSilvaandWagner
In early analysis of (cid:2)lesystem race vulnerabilities in
privilegedprograms,Bishopdiscussessafeandunsafepath-
2Oursolutioncouldhavebeenimplementedusingavariantofthegen-
names,andintroducesacan-trustlibraryfunctionthat
eralframeworkfrom[21,Sec.7],butthatvariantwouldhavetobecon-
determines whether an untrusted user could change the
siderablymorecomplextodealwithissuessuchaschangeofprivilegesor
name-to-object binding for a given pathname [1]. Later, permissions,threadsafety,etc.toincludealsogroupprivileges[19]. /home/joe/link1 -> /etc/passwd
Mazieres and Kaashoek advocate a better system call /home/joe/link2 -> /tmp/amanda
APIthatamongothersallowsprocessestospecifythecre-
then the manipulators of the name /home/joe/link1
dentials with each system call [15]. Our safe-open
are root and joe, and the manipulators of the name
functioncouldbene(cid:2)tfromsuchfeatures(especiallywhen
/home/joe/link2/foo include all the users on that
opening (cid:2)les on behalf of setgid programs, cf. Sec-
machine (since resolution of this last name goes through
tion6.3).
theworld-writable/tmp).
We notethatthisdescriptionis(cid:147)static(cid:148), inthatit refers
2. Names,Manipulators,and Safe-Open
to the permission structure as it exists at a given point in
time. Nonetheless, in Section 3.2 we show that our solu-
Forpresentationsimplicity,we initiallyconsideronlya tion(whichisbasedonthis(cid:147)static(cid:148)notion)preventsprivi-
simpli(cid:2)edsettingwhere(a)all(cid:2)lenamesareabsolutepaths, legeescalationviapathnamemanipulationseveninsettings
(b) every (cid:2)lesystem is mounted only once in the global where the (cid:2)lesystem (and its permissions) can change in
nametree,and(c)noconcurrencyissuesarepresent. (The a dynamic fashion. Roughly speaking, this is because in
last itemmeansthatwesimplyassumethatnopermission POSIX systems only manipulators of a path can add new
changesoccur concurrentlywith our nameresolution pro- manipulators to it, and no manipulator can remove itself
cedure.) We discuss relative pathnames at the end of this fromthesetofmanipulatorsofapath.5
section,multiplemountpointsanddynamicpermissionsare
discussedinSection3.
Safeandunsafenames. ForPOSIXsystems,wesaythat
anameissystem-safe(orsafeforroot)ifrootistheonly
2.1.NamesandTheirManipulators
manipulator of that name. A name is safe for some other
uidifitsonlymanipulatorsarerootanduid.Otherwise
Roughlyspeaking,amanipulatorofanameisanyentity
thenameisunsafe.
that has (cid:2)lesystem permissions that can be used to in(cid:3)u-
encetheresolutionofthatname.Amanipulatorcancreatea
2.2.TheSafe-OpenProcedure
name(i.e.,causethe(cid:2)lesystemtoresolvethatnametosome
(cid:2)le),deleteit(causingnameresolutiontofail)ormodifyit
Oursafe-openprocedureisare(cid:2)nementofthesafety
(causingthenametoberesolvedtoadifferent(cid:2)le). Inthe
mechanisms used by the Post(cid:2)x mail system [22] to open
context of POSIX systems, a manipulator of a path in a
(cid:2)lesundertheworld-writabledirectory/var/mail. The
POSIX (cid:2)lesystem is anyuidthathas write permissionin
basicapproachtakenbyPost(cid:2)xistoverifythattheopened
(cid:151) or ownership of (cid:151) any directory that is visited during
(cid:2)le is not a symbolic link and does not have multiple
resolutionofthatpath.3
hard links. This approach works for the special case of
For example, consider the (cid:2)les /etc/passwd,
/var/mail, but it is not quite applicable as a general-
/home/joe/mbox, and /tmp/amanda/foo from a
common UNIX system. The permissions of the relevant purposepolicy,fortworeasons:
directoriesare:
Itistoostrict. There are cases where applications have a
drwxr-xr-x root root / legitimateneedtoopena(cid:2)lewithmultiplehardlinks
drwxr-xr-x root root /etc orasymboliclink.6Moreover,blanketrefusaltoopen
drwxr-xr-x root root /home
(cid:2)les with multiple hard links would enable an easy
drwx------ joe joe /home/joe
denial-of-service attack: simply create a hard link to
drwxrwxrwt root root /tmp
a(cid:2)le,andnoonewillbeabletoopenit.
drwxr-xr-x root root /tmp/amanda
Thentheonlymanipulatorofthename/etc/passwdis Itisnotstrictenough. Refusing to open links does not
root (since only root can write in either / or /etc/), provide protection against manipulation of higher-up
andthemanipulatorsofthename/home/joe/mboxare directories.Forexample,consideraprogramthattries
root and joe. On the other hand, all the users on that toopenthe(cid:2)le/tmp/amanda/foo.Evenifthis(cid:2)le
machine are manipulators of /tmp/amanda/foo, since
everyonecanwritein/tmp.4Moreover,ifwehadthesym- tory/tmp/amanda,eventhoughthisdirectorycanberemovedonlyby
boliclinks: root.
5Thelast statement depends onthe fact that only rootcan usethe
3SeeSection6.3foradiscussionaboutgids. chownsystemcall.
4Thedirectory /tmptypically hasthesticky bitset, whichprevents 6Forexample,oldimplementationsofUsenetnewskeptadifferentdi-
non-root users from removing other user’s (cid:2)les from /tmp. But it rectoryforeverynewsgroupandadifferent(cid:2)leforeveryarticle,andwhen
does not prevent users from moving other user’s (cid:2)les into /tmp. For an article was sent to more than one group, then it will be stored with
this reason, everyone must be considered a manipulator of the direc- multiplehardlinks,onefromeachgroupwherethisarticleappears.doesnothavemultiplelinks,itmaystillnotbesafeto sincethe(cid:147)mergepoint(cid:148)occurredwhilevisitingthedi-
openit: Forexample,theattackercouldhavecreated rectory /home/joe/, still in a safe mode. On the
/tmp/amanda/asasymboliclinkto/etc,andthe otherhand,safe-openwillrefusetoopenthisname
programopening/tmp/amanda/foowillbeopen- when runningwith effective uid of root, since the
ing/etc/fooinstead. directory/home/joe/isnotsafeforroot.
Toimplementageneral-purposesafe-open,wethere-
Implementingthissafe-openprocedureinthe(cid:2)lesys-
fore re(cid:2)ne these rules. Our basic procedureis as follows:
temitself(i.e.,inthekernel)shouldbestraightforward:All
While resolving the name, we keep track of whether the
we need is to add a check for permissions and ownership
path so far is safe or unsafe for the effective uid of the
oneverydirectory,updatingthesafety(cid:3)agaccordingly.Ar-
callingprocess.Whenvisitingadirectoryduringnameres-
guably, this is the preferred mode of implementation, but
olution, we call it unsafe if it is group-or world-writable,
it requires changes to existing (cid:2)lesystems. Alternatively,
or if its owneris someoneotherthan root or the current
wedescribeanimplementationofsafe-openasalibrary
effectiveuidofthecallingprocess(andotherwisewecall
function in user space. This implementation roughly fol-
it safe). When resolving an absolute path, we start at the
lows the procedureof Tsafrir et al. [20, 21] for user-level
root in safe mode (if the root directory is safe). As long
name resolution, but adds to it the safe-mode vs. unsafe-
astheresolveronlyvisitssafedirectories,weareinasafe
modebehaviorasdescribedabove. We discussthisimple-
mode,canfollowsymboliclinksor‘..’,andcanopen(cid:2)les
mentationinSection4.
withmultiplehardlinks. However,oncetheresolvervisits
an unsafe directory,we switch to unsafe mode, and in the
remainderofthepath,disallowsymboliclinksor‘..’,and Relative paths and openat. The procedureforresolv-
refusetoopena(cid:2)lewithmultiplehardlinks.7 Wenotethe ingrelativepaths(orforimplementingopenat)isessen-
followingaboutthissolution: tiallythesameastheoneforabsolutepaths,exceptthatwe
needtoknowifthestartingpoint(e.g.,thecurrentworking
(cid:15) AsafenamethatcanbeopenedbyPOSIXopenwill
directory)is safe or not. In a kernel implementation, it is
alsobeopenedbysafe-open:Ifanameissafethen
straightforwardtokeeptrackofthisinformationbyadding
thesafe-openprocedurewillvisitonlysafedirec-
(cid:3)ags to the handle structure. Some care must be taken in
tories,andthereforewillnotabortduetosymlinksor
situationswherethedirectorypermissionschange(e.g.,via
multiple hardlinks. Any directory that is visited dur-
chmod or chown) or when the privileges of the current
ing name resolution in open will also be visited by
process change,but no majorproblemsarise there. Keep-
safe-open,andthe(cid:2)lewilleventuallybeopened.
ingtrackofthisinformationinalibraryimplementationis
(cid:15) A (cid:2)le with only one name (which can be opened by harder, but even there it is usually possible to get this in-
formation, and reasonable defaults can be used when the
POSIXopen)will beopenedbysafe-open: This
informationisunavailable(e.g.,afteranexeccall).Were-
issimilartothepreviousargument,ifthe(cid:2)lehasjust
fertoAppendixAformoredetailsaboutrelativepathsand
onenamethenthisnamecannotincludesymboliclinks
openat.
and the (cid:2)le cannot have multiple hard links. Hence
safe-open will succeed in opening it if POSIX
opendoes. 3.OurSecurity Guarantee
(cid:15) For a (cid:2)le with multiple unsafe names, each of these
names may or may not be opened by safe-open. Recallthesecurityguaranteethatwesetouttoachieve:
Note that if many names point to the same (cid:2)le, then
If a (cid:2)le has names safe for user U, then safe-open
theremust be(cid:147)mergepoints(cid:148) whereeither we havea
willnotopenitforUusinganunsafename.
symbolic link pointing to a directory (or to the (cid:2)le)
or multiple hard links pointing to this (cid:2)le. When In other words, if a (cid:2)le has both safe and unsafe names,
safe-openresolvesthesenames,itagreestofollow thensafe-openshouldfailonalltheunsafenames. (At
these(cid:147)mergepoints(cid:148)ifitvisitedonlysafedirectories the same time it succeeds on all the safe names, as noted
beforetheyoccur,andrefusestofollowthemifitvis- above.) Wenoteagainthatasstated,thisguaranteeapplies
itedanunsafedirectory. only to a static-permission model, where permissions and
ownershipofdirectoriesdonotchangeduringthenameres-
Foroneexample,safe-openwillagreetoopenthe
olution. However,aswediscussattheendofthissection,
unsafe name /home/joe/link2/foo from Sec-
protectionagainstprivilegeescalationattackisensuredeven
tion 2.1 when running with effective uid of joe,
whenthe attackermakes arbitrarypermissionchangesfor
7SeeSection6.1formorepermissivevariantsofthisprocedure. directoriesthatitowns.Theonlythingthatwemustassumeisthatnon-adversarialentitiesdonotinduceapermission- callthisdirectorydir0. Thenitmustbethecasethat
changeraceagainstournameresolution.8 Ouranalysisbe- safe-open switched to unsafe mode when visiting
lowalsoassumesthateachdirectorytreeappearsonlyonce dir0 or earlier (because after dir0 it only visited
inthe(cid:2)lesystemtree(i.e. noloop-backmounts,etc.),and safedirectories).Now,sincethecanonicalpathbegins
thateachdirectoryhasatmostoneparent(i.e.,onehardlink withtheroot’/’,thensafe-opencouldnotdescend
withanameotherthan‘.’ or‘..’).9Ashortdiscussionof into the canonical path from above. Hence moving
mountpointscanbefoundlaterinthissection. from dir0 to the next directory was done either by
We now turn to proving this security guarantee. Con- following a symbolic link or by following ‘..’, but
sidera(cid:2)lethathasbothsafeandunsafenames(foraspe- thisis impossiblesincesafe-opendoesnotfollow
ci(cid:2)cuid),(cid:2)xonespeci(cid:2)cunsafename,andweshowthat symboliclinksor‘..’wheninunsafemode.
safe-openmustfailwhenittriestoopenthatname(on
behalfofaprocesswiththiseffectiveuid).Wedistinguish Thiscompletestheproofofoursecurityguarantee.
two cases: either the (cid:2)le has just one hard link, or it has
morethanone.
Multiple mount points. We note that all the arguments
from above continue to hold even when a (cid:2)lesystem is
(cid:15) Case 1: more than one hard link. Note that when
mounted at multiple points in the global name space, as
safe-open is called with the unsafe name, it will
longasallthemountpointsaresystem-safe. However,our
applynameresolutionwhilecheckingthesafetyofthe
security guarantee breaks if we have the same (cid:2)lesystem
nameas it resolvesit. As the resolutionofthis name
mountedinseveraldirectories,somesafeandothersnot.In
goesthroughadirectorywhichisunsafeforthisuid,
thiscase,goingdowna(cid:147)canonical(cid:148)unsafenamefora(cid:2)le,
then safe-open will arrive at the last directory in
we havenoway ofknowingthat the same(cid:2)le also havea
thisnameresolutioninunsafemode(assumingthatit
safename(viaadifferentmountpoint). Thesameproblem
arrivesthere at all). Since the (cid:2)le has more than one
arises whenpartsofthe (cid:2)lesystemare exposedto theout-
hardlink,safe-openwillthenrefusetoopenit.
sideworld,e.g.,viaNFS.Inthiscase,whatmayappearas
(cid:15) Case 2: exactlyonehardlink. Inthis case, thereis a asafedirectorytoaremoteusermaybeunsafelocally(or
singlepathfromtheroottothis(cid:2)leinthedirectorytree theotherwayaround).
(i.e. we exclude names that contain symbolic links).
Below we call this the (cid:147)canonical path(cid:148) for this (cid:2)le 3.1.UsingtheSecurityGuaranteetoThwartPrivi›
anddenoteitby/dir1/dir2/.../dirn/foo. legeEscalation
Clearly,everypathnamethatresolvestothis(cid:2)lemust
visit all thedirectoriesonthecanonicalpath. (More- The security guarantee that we proved above provides
over, the last directory visited in every name resolu- one with an easy way of creating (cid:2)les that applications
tionmustbedirn,sinceitholdstheonlyhardlinkto cannot be (cid:147)tricked(cid:148) into opening using adversarial links:
foo.)Sinceweassumethatthe(cid:2)lehassafenamesfor Namely, create the (cid:2)le with a safe name. For example, if
uid,itfollowsthatallthedirectoriesinthiscanonical thename/path-to/fooissystemsafe,thennoprocess
pathmustbesafeforuid. running as root can use safe-open to open the same
(cid:2)le with a name that includes a link that was created (or
Consider now the directories visited while resolving
renamed,ormovedtoitscurrentlocation)byanon-root
theunsafename. Beingunsafe,weknowthattheres-
user.Thisisbecausesuchalinkwouldhavetobecreatedin
olutionofthisnamemustvisitsomeunsafedirectory,
(ormovedto)anunsafedirectory,makingthenameunsafe
and that unsafe directory cannot be on the canonical
andcausingsafe-open(runningasroot)tofailonit.
path. Therefore, during the resolution of an unsafe
This observation can be used to defeat privilege esca-
name, safe-openmust visit someunsafedirectory
lation attacks. Consider a (cid:2)le that needs to be protected
(andthereforeswitchtounsafemode)beforearriving
against unauthorized access (where access can be read,
atthe(cid:2)naldirectorydirn.
write,orboth). Hencethe(cid:2)leiscreatedwithrestrictedac-
Consider the last directory not on the canonicalpath cess permissions. To ensure that this protectioncannotbe
thatwasvisitedwhileresolvingthisunsafename. We overcomebytheattackercreatingadversariallinks,wecre-
8Thedistinctionbetweenadversarialandnon-adversarialentitiesisin-
atethis(cid:2)lewithanamethatissafeforalltheuidsthathave
herentinprivilege-escalationattacks,sinceonemustdistinguishbetween accesspermissionforit. (Thatis, ifonlyoneuidhasac-
privilegesheldbytheattackerandthoseheldbythevictim(s). cesspermissiontothe(cid:2)lethenthenameshouldbesafefor
9Nearly all contemporary POSIX implementations either do not al- thatuid,andotherwisethenameshouldbesystem-safe.)
lowprocessestocreateadditionalhardlinkstodirectories(e.g.,FreeBSD,
We now claim that an attacker that cannot access the
Linux)orrestrictthisoperationtothesuper-user(e.g.,Solaris,HP-UX).A
notableexceptionisMacOS. (cid:2)le, also cannotcreate a link that would be followedwithsafe-openbyanyonewithaccesspermissionforthis(cid:2)le. to change anything in the directory, and by our assump-
Notethattheattackermusthaveadifferentuidthanany- tion(c)neitherofthemmadeanychangestothatpathname
onewhocanaccessthe(cid:2)le.10 Henceadirectorywherethe element.
attackercancreatealinkmustbeunsafeforanyonewhocan Imaginenowthatthestateofthe(cid:2)lesystemisfrozenat
access the (cid:2)le, andthereforesafe-openwill notfollow thetimewhenthesafe-openprocedureis invoked,and
linksoffthatdirectory. consider the way the pathname argument to safe-open
would be resolved. We have two cases: either all the di-
3.2.DynamicPermissions rectories visited by this hypothetical name resolution are
U-safe, or some of them are not. The easy case is when
all of them are U-safe: then it must be the case that the
The argument above covers the static-permission case,
hypotheticalnameresolutiondoesnotresolvetothe(cid:2)leF
wherepermissionsfordirectoriesdonotchangeduringthe
(orelseitwouldbeaU-safenameforF,contradictingour
executionofsafe-open. We nowexplainhowitcanbe
assumption(b)). Butitis easytoshow(byinduction)that
extendedtothemorerealisticdynamic-permissionmodel.
thesamedirectorieswillbevisitedalsointheactualname
Consider a potential privilege-escalation attack, where
resolution, all of themwouldbe inexactlythe same state,
anattackerthatcannotaccessacertain(cid:2)letriestocausea
and therefore also the actual name resolution as done by
victimprogramtoaccessthat(cid:2)leonitsbehalf. Noticethat
safe-openwouldnotberesolvedtoF.
in this scenario it must be the case that the attacker does
Assume, then, that the hypothetical name resolution
nothaverootprivileges,andalsohasadifferenteffective-
would visit some unsafe directories, and let dir0 be the
uidthanthevictim. (Otherwisenoprivilegeescalationis
10
(cid:2)rstU-unsafedirectorytobevisited.Thesameeasyinduc-
needed(cid:151)theattackercouldaccessthe(cid:2)lebyitself. )
tive argument as above shows that all the directories upto
Consider now a (cid:2)le F that can be accessed by the
(and including) dir0 are also visited by the actual name
effective-uidof thevictim (denotedby U)but notbythe
effective-uid of the attacker (denoted by
U0
), consider a
resolution. Wenowknowthattheownerofdir0remains
the same throughoutthe execution of safe-open (since
particularexecutionofsafe-openbythevictim,andas-
byassumption(c)rootdidnotmakeanychangesindirec-
sumethat:
toriesthatwereexaminedbysafe-open).Iftheowneris
(a) atthetimethattheprocedureisinvoked,the(cid:2)leF has differentthanU androot,thensafe-openwill switch
somename thatis safe forU, andthat nameremains to unsafe mode when it gets to dir0. If the owner is U
or root then it must be the case that the directory was
unchangedthroughouttheexecution,and
group-or world-writablewhen safe-open was invoked
(b) thepathnameargumenttosafe-openisnotaU-safe (sinceitwasunsafeinthehypotheticalresolution),andthus
nameforthe(cid:2)leF whentheprocedureisinvoked. itmuststillbegroup-orworld-writablewhensafe-open
examinesit (sincebyourassumption(c)U androotdid
Under these conditions, we show that this safe-open notchangethatdirectory). We thereforeconcludethatthe
procedure will not open the (cid:2)le F, barring a concurrent hypotheticalandactualnameresolutionsproceededidenti-
(cid:2)lesystem operationbyrootor U onpathnameelements callyupto(andincluding)dir0,andtheybothswitchedto
that safe-open examines. Put in other words, the at- unsafemodeuponvisitingdir0.
tacker can only violate our security guaranteeif it can in- In particular it implies that safe-open arrived at the
duce a race condition between two non-adversarial pro- (cid:2)naldirectoryinunsafemode, soit wouldonlyopenF if
cesses(i.e.,thesafe-openprocedureandanotherprocess F hada single hardlinkat the time thatthe procedurere-
withuidofeitherthevictimorroot). Assumetherefore turned. Recallnowthatbyourassumptions(a),thissingle
thatthesetwoconditionshold,andinaddition hard link must be at the end of a U-safe pathname. But
we know that safe-open visited at least one unsafe di-
(c) neitherrootnorU didanyconcurrent(cid:2)lesystemop- rectory,soitstraversalmusthavemergedbackintothesafe
eration on any pathname element examined by this pathnameatsomepointaftervisitingdir0.Asinthestatic
safe-open. case,thismusthavehappenedbyfollowingasymboliclink
or‘..’,whichisacontradiction.
We observe that any pathname element that safe-open
examinesandthatresidesinaU-safedirectoryatthetime
wheretheprocedurewasinvoked,mustremaininthesame Preventing privilege-escalation in the dynamic setting.
Onceweestablishedthesecurityguaranteeinthedynamic
state throughout this safe-open execution. The reason
is that being U-safe, only U and root have permissions setting,wecanshowhowtouseittopreventprivilegeesca-
lation even in a (cid:2)lesystem where permissions can change.
10SeeSection6.3forashortdiscussionofsetgidprograms. Inadditionto creatingtheprotected(cid:2)les with safenames,we also need to ensure that (a) we never reduce the write 4.1.Raceconditions
permissions of a non-empty directory that was group- or
world-writableorchownanon-emptyuserdirectoryback
Our name-resolution procedure is not particularly vul-
toroot; and(b)wedonotchangepermissionsorowner-
nerable to (cid:2)lesystem-based adversarial race conditions, in
ship in the safe name and do not delete it while there are
thatitwouldcorrectlylabelsafe/unsafedirectoriesregard-
stillprogramsthathavethe(cid:2)leopen.
less of concurrent actions of any attacker (as long as the
It is not hard to see that as long as (a) and (b) do not
euid of the attacker is neither root nor the victim’s
happen, then the conditions that we set in our dynamic-
euid). There are only two points in our code where we
system proof hold, and hence no privilege-escalation can
needtoguardagainstcheck/useconditions:
resultfromadversarial(cid:2)lesystemactions. Seeingthatcon-
dition (a) is really needed is also easy: indeed if the at- (A) We must never open a symbolic link. If the
tackercreatesanadversariallinkinaworld-writabledirec- O NOFOLLOW (cid:3)ag is available then we can use it for that
toryandthenthevictimchmodsthedirectoryandremoves purpose, but to get get the same effect in a truly portable
theworld-writablepermission,thensafe-openwillhap- codeweimplementthelstat-open-fstat-lstatpat-
pily follow the adversarial link. Demonstrating that (b) is tern.
neededis a bit more tricky: Consider for examplethe (cid:2)le (B)Theothercheck/usewindowinourcodeisbetween
/etc/passwd,whichisonlywritablebyroot,andcon- the time that we check permissions and conclude that we
siderthefollowingsequenceofoperations: areinasafedirectoryandthetimethatwereadasymbolic
link or open a (cid:2)le or directory. As we explained in Sec-
1. SomeuserprogramPopens/etc/passwdforread tion3.2,thischeck/usewindowisonlyopentoracesagainst
andkeepsthehandle, processeswiththesameeffectiveuidas theprocesscall-
ingsafe-open(orroot),nottoracesagainstanadver-
2. The attacker creates another hard link sarial processtryingtoescalateprivileges. Aspermission-
/var/mail/roottohesame(cid:2)le, changingactionsbybenignprocessesarequiterare,webe-
lievethatthiswindowdoesnotposeamajorthreat.Wecan
3. Aconfusedadministratordeletes/etc/passwd,and evencheckthedirectorypermissionsbothbeforeandafter
readingasymlink(oropeninga(cid:2)leordirectory)tofurther
narrow this window (and then this race cannot happen as
4. Themail-deliveryprogramusessafe-opentoopen
longasnon-adversarialprocessesdonotrevokewriteper-
/var/mail/root,andthenwritesintoit.
missionsonnon-emptydirectories).
Notethatsafe-openwillsucceedundertheseconditions,
sincenow/var/mail/rootistheonlynameforthis(cid:2)le
4.2.Threadsafety
(andinparticularthe(cid:2)lehasonlyonehardlink).Butwhen
the program P goes to read from its (cid:2)le descriptor, it will
seethedatathatthemail-deliveryprogramwrotethere. Implementing user-level name resolution requires that
we work with handles to directories, using either the cur-
rentworkingdirectory(whichmaynotbethreadsafe)orthe
4. Implementing safe-open for POSIX
openat, readlinkatand fstatatinterfaces, which
Filesystems
arepartofarecentPOSIXstandard[17]. Theseinterfaces
duplicate existing pathname-based interfaces but add an-
We implementedsafe-openasalibraryroutineover otherparameter,a(cid:2)ledescriptorforadirectory.Whenused
thePOSIX(cid:2)lesysteminterface.Theroutineperformsuser- with a relative name, these calls now work relative to the
levelnameresolution, similar to the routinesof Tsafriret. speci(cid:2)eddirectoryinsteadofthecurrentworkingdirectory.
al[20,21],whileaddingthepathnamesafetycheckinevery The new interfaces are implemented in current Solaris
directory.Thatis,theroutinegoesthrougheachcomponent and Linux versions. On systems without support for the
of the path to be opened, checks for the manipulators of openat family of function calls, we emulate their func-
eachdirectory,andmarksadirectoryunsafeifithasmanip- tionalityinsideasynchronizedblock:Maintainingahandle
ulatorsotherthan root andthe currentprocess’effective tothedirectorycurrentlyvisited,westorethecurrentwork-
uid.Onceitencountersanunsafedirectory,intheremain- ingdirectory,changedirectorywithfchdirtothevisited
derofthepath,itdoesnotfollowsymlinksor‘..’,anddoes directory,explorethenextpathelement(forexample,with
notopena(cid:2)le with multiplehardlinks. A pseudocodede- openorlstat),thenrestoretheoriginalcurrentworking
scriptionofourimplementationisfoundinFigures1and2 directory. Tomaketheemulationsignal-safewealsoneed
inAppendixB. tosuspendsignaldeliverywhileintheprotectedblock.4.3.Readpermissionsondirectories Ourgeneralizedpathnamesafetypolicyis easy enough
toexpress: (cid:147)whenresolvingapathnamethroughanunsafe
Our user-level safe-open implementation relies on directory, in the remainder of the path don’t follow ‘..’
the ability to openall the intermediatedirectories (e.g., to or symbolic links, and don’t open or change attributes of
fstat them or to use them with openat). Each path (cid:2)les with multiplehardlinks.(cid:148) Articulatingthe exactsecu-
component,exceptthe(cid:2)nalone,isopenedinaO RDONLY ritypropertiesthatyougetmaytakesomecare. Forexam-
mode. For this implementationto work, the process must ple,thesecuritypropertythatyougetfromsafe-create
have read permission on each non-(cid:2)nal component in the isthis:(cid:147)Whencalledwithanunsafename,safe-create
path (in addition to the search permission that is required willfailtocreatethe(cid:2)leiftheresulting(cid:2)lecouldalsohave
tolookupthenextpathnamecomponentinthatdirectory). asafename.(cid:148)
This is different from the regular POSIX open that only Implementing safe versions of POSIX interfaces with
requiressearchpermissiononeachdirectorycomponent. more than one pathname (i.e., safe-rename and
This restriction is of only temporary nature: a recent safe-link) can be problematic on systems that don’t
POSIX standard [17] introduces the O SEARCH (cid:3)ag to supportrenameatandlinkat. Theemulationofthese
open a directory for search operations only, and a future functions is complicated by the fact that a process can
safe-openimplementationcanmigratetothis. have only one current working directory at a time; as a
workaroundonecouldperhapsutilizetemporarydirectories
4.4.Opening(cid:2)leswithoutsideeffects withrandomnamesasintermediaries.
CurrentPOSIXstandardsstilllacksomeprimitivesthat
Uponarrivingatthelastpathelement(i.e.,the(cid:2)letobe operateonexisting(cid:2)lesby(cid:2)lehandleinsteadof(cid:2)lename,
opened), our safe-open implementation may still need but this may change as standards evolve. For example,
to verify that it is not a symbolic link. We again use the the recently-standardized O EXEC (open (cid:2)le for execute)
lstat-open-fstat-lstatpattern, but we must guard (cid:3)ag[17]enablestheimplementationofafamilyoffexec
against potential side-effects of opening the (cid:2)le. For in- primitives that execute the (cid:2)le speci(cid:2)ed by a (cid:2)le han-
stance, opening the (cid:2)le with the (cid:3)ag O TRUNC in combi- dle.12 Based on these primitives one could implement
nationwitheitherO WRONLYorO RDWRwilltruncatethe safe-exec versions that can recover from accessing an
(cid:2)le before the safe-open procedurecan determine that unexpected(cid:2)le,similarinthewaythatsafe-openrecov-
itopenedanunexpected(cid:2)le. To(cid:2)xthisproblem,wemust ers before performing an irreversible operation. We note
(cid:2)rstremovetheO TRUNC(cid:3)agwhenopeningthe(cid:2)le,andif thatexecuting(cid:2)lesinunsafedirectoriesisamine(cid:2)eld,and
noerroroccursthencallftruncateonthenewlyopened leavethe developmentofa suitable safetypolicy as future
handlebeforereturningit. work.
Somewhat similarly, if safe-open unexpectedly
opens a targetwhich is not a regular(cid:2)le (suchas a FIFO 5.Experimental validation
orattyport),thentheopencallcouldblockinde(cid:2)nitely.
Thiscanbeaddressedonlywithcooperationbytheapplica-
Weconductedextensiveexperimentstovalidateourap-
tion: whenanapplicationneverintendstoopenablocking
proachforsafepathnameresolution.Ourgoalsintheseex-
targetthenitcouldspecifythe(cid:3)agO NONBLOCK.
periments were (a) to check whether existing applications
wouldcontinuetoworkwhentheyrunoveraPOSIXinter-
4.5. Implementing safe-create, safe-unlink,
face that implements safe pathnameresolution; and (b) to
andotherprimitives
see if we can identify yet-undiscoveredvulnerabilities re-
latedtoapplicationsthatfollowunsafelinks.
Buildingonthesameideas,wecanimplementsafever-
sions of other POSIX interfaces, such as safe-create
5.1.Testingapparatus
for creation of new (cid:2)les, safe-unlink for removing
them, etc. For many of these primitives, the implementa-
We implemented our safe name resolution and tested
tion can be almost trivial: follow the same steps as with
safe-opentoreachthe(cid:2)naldirectory11;inthe(cid:2)nalstep, several (cid:147)live(cid:148) systems, to see what applications actually
use unsafe links, and for what purpose. To cover a wide
safe-create creates the (cid:2)le (with (cid:3)ags O CREAT and
range of operating systems and production environments,
O EXCL), and safe-unlink removes the target which
weoptedforimplementingourprocedureina(cid:147)shim(cid:148)layer
maybeasymlinkora(cid:2)lewithmultiplehardlinks.
betweentheapplicationsandlibc. Thatis, webuilta li-
11Someprimitives(suchasunlinkandmkdir)donotfollowasym-
linkthatappears asthe(cid:2)nal pathname component; thesafe-unlink 12Support for these is already implemented in some Linux and BSD
andsafe-mkdirfunctionsmustofcoursebehaveaccordingly. versions.brarythatintercepts(cid:2)lesystemcalls,andinstructedtherun- We ran these systems in their out-of-the-box con(cid:2)gu-
time linker to load it before the regular libc. We used rations, and also tested some applications including the
this to instrument dynamically-linked programs including Gnomedesktop,browsingwithseveralFirefoxversions(in-
setuidandsetgidprograms.13 Thisapproachmakesiteas- cluding plugins for popular multi-media formats), of(cid:2)ce
iertotest existingsystems,butitmaynotbeabletointer- document browsing, printing with Adobe Acroread, soft-
poseoncallsbetweenfunctionswithinthesamelibrary. In ware compilationwith gcc, andsoftwarepackageinstalla-
additionitisnecessarytointerceptsomelibrarycallsnotre- tion.Thevastmajorityofthesetestspassedwithoutahitch.
latedto(cid:2)leaccess,topreventtheaccidentaldestructionof Mostsystemsandapplicationsneverattemptedanoperation
environmentvariablesor(cid:2)lehandlesthatour(cid:147)shim(cid:148)layer that would violate our safety policy, and thus they would
dependson. haveworkedjustaswellhadwecon(cid:2)guredoursafename
In the interposition library, we implemented the safe resolutioninenforcingmode. Onenotableexceptionisthe
pathname resolution and used it in the (cid:2)lesystem calls web-serverapplication,discussedinSection5.5.
open, fopen, creat, unlink, remove, mkdir,
rmdir, link, rename, chmod, chown, and the exec
5.3.Latentvulnerabilities
family. With openat and related functions, we did not
implementyetsafepathnameresolutionwithrespecttoar-
Inthecourseofourexperimentsweuncoveredanumber
bitrary directoryhandles; in ourmeasurements, such calls
oflatentprivilegeescalationvulnerabilities.Thelatentvul-
wereatinyminority.Sofarweonlyinstrumentedcallsthat
nerabilities occurwhereprivilegedsystem processeswrite
involve absolute pathnames, or pathname lookups relative
orcreate(cid:2)lesasrootindirectoriesthatarewritablebyan
tothecurrentdirectory.
unprivilegedprocess. In these cases, a compromise of an
We also kept some state related to the current working
unprivilegedprocesscouldresult in furtherprivilegeesca-
directory in our library, in order to implement safe name
lation:
resolutionforrelativepathnames. (Thesameapproachcan
beusedforthedirectoryhandlesusedbyopenatandre-
(cid:15) The Common UNIX Printing System (CUPS) saves
latedfunctions,butwedidnotimplementthisyet.)Amore
state in (cid:2)les job.cache and remote.cache.
detailed description of the implementation and its intrica-
These(cid:2)lesareopenedwithrootprivilegesandwith
ciesisprovidedinAppendixC.
(cid:3)ags O WRONLY|O CREAT|O TRUNC, in directory
/var/cache/cupswhichiswritablebygrouplp
5.2.MeasurementsofUNIXsystems
(onsomesystems groupcups). TheCUPS software
usesthisgroupwhenrunningunprivilegedhelperpro-
We ran our pathname safety measurements on several cesses for printing, noti(cid:2)cation, and more. If an un-
out-of-the-boxUNIXsystems,speci(cid:2)callyFedoraCore11, privileged process is corrupted, an attacker could re-
Ubuntu 9.04, and FreeBSD 7.2 for i386 (both server and placethestate(cid:2)lesbyhardorsymboliclinksandde-
desktop versions). These systems were run on VMware stroyorcorruptasensitive(cid:2)le.
workstation 5 for Linux and Windows hosts, and on real
hardware. We instrumented the top-level system start- (cid:15) On Fedora Core 11, a similar latent problem exists
up and shutdown scripts, typically /etc/rc.d/rc or with(cid:2)lesunderdirectory/var/log/cups.
/etc/init.d/rc,andwereabletomonitorsystemand
networkdaemonprocessesaswellasdesktopprocesses.14 (cid:15) During MySQL startup, the mysqld daemon
Inalloftheseexperiments,wecon(cid:2)guredourlibrarytorun opens a (cid:2)le hostname.lower-test with (cid:3)ags
in a report-onlymode, where policy violations are logged O RDWR|O CREAT as root, under directory
buttheintendedoperationisnotaborted.(Infact,following /var/lib/mysql which is owned by the mysql
the complete pathname resolution, our library will simply user. If the mysqlddaemonis corruptedlater when
maketheunderlyingsystemcallontheoriginalarguments it runswith usermysqlprivileges,an attackercould
andreturntheresult.) replacethis(cid:2)lebyahardorsymboliclinkandcorrupt
asensitive(cid:2)lewhenMySQLisrestarted.
13While the LDPRELOAD environment variable was suf(cid:2)cient to
instrument most programs, instrumenting setuid and setgid programs (cid:15) The Hardware Abstraction Layer daemon subsystem
required additional steps. We stored run-time linker instructions in
/etc/ld.so.preloadonLinux,andin/var/ld/ld.configon opensa(cid:2)lewith(cid:3)agsO RDWR|O CREATasroot,in
Solaris;wemodi(cid:2)edtherun-timelinker/libexec/ld-elf.so.1on directory/var/run/hald.Thisdirectoryisowned
FreeBSD.
byuserhaldaemon,whoalsoownsseveraldaemon
14Forthisinstrumentation, wedisabled security softwaresuchasAp-
processes. Someoftheseprocesseslistenonasocket
pArmorandSELinuxtoavoidinterference between ourinstrumentation
andtheirenhancedsecuritypolicies. thatisaccessibletolocalusers.(cid:15) The Tomcat subsystem opens a (cid:2)le with (cid:3)ags (cid:15) The FreeBSD package manager triggered warnings
O WRONLY|O APPEND|O CREATasrootindirec- about following ‘..’ when removing a temporary
tory /var/cache/tomcat6. This directory is directory tree under /var/tmp; these could be ad-
owned by user tomcat6, who also owns a process dressedbyamorepermissivepolicy(cf.Section6.1).
thatprovidesservicetoremotenetworkclients.
(cid:15) OnFedoraCore11,theGnomedesktopsoftwaretrig-
(cid:15) OnFedoraCore11,directory/var/lockiswritable geredpolicyviolationsthatwedidnotexperiencewith
by group lock, which is also the group of a setgid other systems. The violations happened when a pro-
program /usr/sbin/lockdev. System start- cess with gdm user and group privileges attempted
up scripts create (cid:147)lock(cid:148) (cid:2)les as root with (cid:3)ags tofollowsymboliclinksunderdirectory/var/lib/gdm.
O WRONLY|O NONBLOCK|O CREAT|O NOCTTY. This directory is writable by both owner gdm and
If the lockdev program has a vulnerability, an groupgdm.
attackercouldreplacealock(cid:2)lebyahardorsymbolic
These policy violations can be avoided with a more
linkandcorruptasensitive(cid:2)le.
sanecon(cid:2)gurationthatusesownergdmwritepermis-
(cid:15) XAMPP [24] (an integrated package of Apache, sion only. Our (cid:147)live(cid:148) measurements show that group
MySQL,PHPandothercomponents)onLinuxopens gdm is used only by processes that run as user gdm.
(cid:2)les, for error logging, as root in the directory Withasingle-membergrouplikegdm,ownergdmper-
/opt/lampp/var/mysqlwhich is owned by the missionissuf(cid:2)cient,andgroupgdmwritepermission
uidnobody.Acorruptedprocessrunningasnobody isunnecessary.(WefoundsimilarissueswithXAMPP
can replace this with a link to any (cid:2)le on the sys- for Linux, which installs with directories that have
tem which would then be overwritten. We note that ownernobodyandgrouprootwithgroupwriteper-
XAMPPrunsanumberofdaemonsprovidingnetwork mission.)
servicesasthenobodyuser,includinghttpd.
5.5.Aweb›serverapplication
In all these cases, our safe name resolution would protect
thesystemfromprivilegeescalationiftheunprivilegedpro-
cessesarecorrupted. Mostofourmeasurementsweredoneonbare-bonessys-
temsthatweinstantiatedspeci(cid:2)callyforthepurposeofrun-
5.4.Policyviolations ningtheexperiments. Theonlyproductionsystemthatwe
hadaccesstowasaDebian5.0systemrunninganApache
During our (cid:148)whole system(cid:148) tests we ran into a surpris- web server and some other services. On that system we
inglysmallnumberofactualsafetypolicyviolations.These did not attempt a whole-system measurement, but instead
turned out to be speci(cid:2)c to particularplatforms, and were only run speci(cid:2)c services under our measurement appara-
caused by quirks in the way that directory ownership and tus. Also on that system most services did not report any
permissionsweresetup: policy violations, with the notable exception of the web
server.
(cid:15) OnFreeBSD7.2,themancommandcouldtriggerpol-
Thewebsiteonthatsystemismanagedcooperativelyby
icy violations when a user requested a manual page. severalusers,wheredifferentusersareresponsiblefordif-
FreeBSDstorespre-formattedmanualpagesunderdi-
ferentpartsofthesite,andwithnoattemptforanyprotec-
rectoriesownedbyuserman(insteadofrootaswith
tionbetweentheseusers.Asaresult,theweb-treeisamesh
manyotherUNIXsystems). Accordingtoourpolicy,
ofdirectorieswithdifferentowners,manyofthemwritable
these directoriesare unsafefor users otherthanman. bytheweb-administratorgroup(whosemembersin-
This resulted in policy violations with pre-formatted cludeallthesedifferentusers).Roughlyspeaking,theentire
manualpage(cid:2)lesthathadmultiplehardlinks.
web-tree on that system is an UNsafe subtree. Moreover,
FreeBSDadoptedthis approachsothatpre-formatted somedynamic-contentpartsofthewebsitemakeheavyuse
manualpagescanbemaintainedbyanon-rootpro- ofsymboliclinks,e.g.,forusingthesamescriptindifferent
cess. This limits the impact of vulnerabilities in contexts.
document-formatting software. However, we (cid:2)nd Itisclearthatoursafe-openprocedurewillbreakthis
the bene(cid:2)ts of this approach dubious: document- website,butthisismoreanartifactofourparticularchoice
formatting software still runs with root privileges ofimplementationthanofthesecurityguaranteethatweset
when the super-userrequests a manualpage for soft- outtoensure.Indeed,inSection6.1wedescribeamoreper-
ware that is not part of the base system. By default, missive implementation of safe-open that still ensures
nopre-formattedmanualpagesexistforthissoftware thesamesecurityguarantee,but wouldnotbreakthis web
category,andthisiswherethebiggestriskwouldbe. site. (Theideaisthatwecanfollowsymboliclinksoffun-safe directories, as long as we ensure that the (cid:2)le that we links) must besafe. Moreover,this name must be the one
gettoattheenddoesnothaveanysafenames.) followedbythetimethatthename-resolutionarrivesatthe
(cid:2)leitself.
5.6.Conclusions Aswedescribedit,thismorepermissiveversionstillre-
fusestofollow‘..’whenthesecond(cid:3)agisinunsafemode.
Our experiments seem to indicate that our approach to Thiscanbeeasilyremedied,however: wesimplydropthe
safe name resolution is both effective and realistic. On restrictiononfollowing‘..’,andinsteadjustresetthesec-
onehand,it(cid:2)xesall177symlink-relatedvulnerabilitiesre- ond(cid:3)agtosafemodeafterevery‘..’.
portedinCVEsinceJanuary2008,andalsoprovidespro-
tectionagainstthe(latent)vulnerabilitiesthatweidenti(cid:2)ed 6.2. An alternative safe-open using extended at›
in our experiments. On the otherhand, most systems will tributes
continueworkingwithoutaproblemevenifthissafetymea-
sure was implemented. The fewthat breakcan be (cid:147)(cid:2)xed(cid:148) On some systems, a much more direct approach is
either by implementinga more standard permission struc- also possible. Recall that the problem that we try to ad-
turefortherelevantdirectoriesorbyimplementingthemore dress is that an adversary without permissions to a (cid:2)le is
permissivevariantofsafe-openfromSection6.1. able to add names to the (cid:2)lesystem that resolve to that
We stress that in our experiments, we did not identify (cid:2)le. If the (cid:2)lesystem supports extended attributes, then
even a single example where there is a legitimate need to we can avoid this problem simply by including with the
open (cid:2)les that would be inherently disallowed by our ap- (cid:2)leanattributethatlists allthepermissiblenamesforthat
proachtosafenameresolution. (cid:2)le. The open procedure, after opening the (cid:2)le, will
look for this extended attribute, and if found it will com-
6. VariationsandExtensions pare its pathname argumentagainst the list of permissible
names,andwillabortifthereisamismatch. Forexample,
6.1.Amorepermissivesafe-open the (cid:2)le sudo in /etc/init.d/ will have a permitted-
names attribute listing the names /etc/init.d/sudo
and /etc/rcS.d/S75sudo, and no program will ever
Our safe-open procedure does not follow symbolic
beabletoopenitusinganyothername.
linksoffanunsafedirectory,butisnothardtoseethatthis
Thissimplesolutionlooksquiteattractive,butitneces-
policyismorerestrictivethanwhatwereally needforour
sitates proper management of the additional attribute. In
security guarantee. Indeed, we only need to ensure that
particular,we must decidewhomayset this attribute(and
safe-openfailsonanunsafenameifthe(cid:2)letobeopened
underwhatconditions). Forexample,whenweaddtoour
has any other name that is safe. It turns out that a small
(cid:2)lesystemasymboliclink:
modi(cid:2)cationofsafe-opencanensurethesamesecurity
guaranteewhileallowingmorenamestobeopened. /var/spool/mail -> /var/mail
Theideaistokeeptwosafe/unsafe(cid:3)agsratherthanone.
doweneedtomodifythepermitted-nameattributeinallthe
Both (cid:3)ags begin in a safe state and switch to unsafe state
(cid:2)lesunder/var/mail/? Weleaveallthesequestionsto
whenvisitinganunsafedirectory,butone(cid:3)agis (cid:147)sticky(cid:148),
futurework.
inthatonceinunsafestateitstaysinthisstateuntiltheend
ofthenameresolution,whiletheotherisresettothesafe
statewheneverweareabouttofollowasymboliclinkwith 6.3.Grouppermissions
anabsolutepath. Thatis, thesecond(cid:3)agisresettosafe
statewheneverweareabouttoreturntotherootdirectory. Recallthatoursafe-openprocedureonlyusesuids
With these two (cid:3)ags, we can followarbitrarysymbolic todeterminesafetyofdirectories,whichmeansinparticular
links,andcanalsofollow‘..’aslongasthesecond(cid:3)agis thatwetreattwoprocesseswiththesameuidasequaland
insafemode. Whenwe(cid:2)nallyreachthe(cid:2)letobeopened, donottrytoprotectonefromtheother.Thisleavesopenthe
we abort the procedure only if (a) the (cid:147)sticky(cid:148) (cid:3)ag is in possibilityofprivilegeescalationby acquiringgrouppriv-
unsafemodeandthe(cid:2)lehasmorethanonehardlink,or(b) ileges: namely,anadversarialprocessmay tryto trickan-
thetwo(cid:3)agshavedifferentvalues. (Inthesecondcase,the otherprocesswiththesameeffectiveuidbutmoregroup
(cid:147)sticky(cid:148)(cid:3)agindicatesthatthegivenpathnamewasunsafe, privilegesintoopeninga(cid:2)lethattheadversarialprocessit-
while the resettable (cid:3)ag indicates that as part of the name selfcannotopen.
resolutionwefollowedsomesafenametoarriveatthe(cid:2)le.) In the work we do not try to protect against such at-
The reason that this more permissive procedure works, is tacks, indeed protection between different processes with
that if a (cid:2)le with only one hard link has any safe names, the same effective uid is virtually impossible in most
then its (cid:147)canonical(cid:148) name (i.e., the one with no symbolic POSIXsystems.Wementionthatitisnothardtochangethesafe-openprocedureitself so that it considersthe gid safe-open will not open that (cid:2)le with an unsafe name,
rather than the uid for the purpose of determining direc- anddemonstratedthatthisguaranteecanbeusedtothwart
torysafety,butthiswouldrequireachangeintheinterface, (cid:2)lename-based privilegeescalation attacks. This is useful
sincethecallingapplicationwouldneedtosomehowindi- not only for privileged programs that run in known-to-be
catethatitwantstousethisgid-basedsafetycheckinstead hostileenvironments,butalsoforprogramswrittenbynaive
ofthedefaultuid-basedcheck. developers,andprogramsthatarebeingdeployedinunfore-
We note that our approach for safe name resolution is seenenvironmentswithunexpected(cid:2)lepermissionseman-
quitecoarsewithrespecttogrouppermissions,inthatgroup tics.
write permissions always make a directory unsafe for ev- We implemented our safe name resolution routine in a
eryone. Thisisjusti(cid:2)edwhenthedirectorygidisthepri- library,usingportablecodeoverthePOSIXinterface,and
maryorsecondarygidofmultipleUNIX accounts,since performedextensiveexperimentstovalidatetheapplicabil-
multiple accounts are manipulators. However, contempo- ity of our solution to current operatingsystems and appli-
raryUNIX-eshavemanygidsthatareassociatedwithonly cations. We veri(cid:2)ed that this solution uniformly protects
oneuid(ormaybenoneatall,e.g. whenthegidisonly system against the documented cases of applications and
usedbytheexecutionofasetgidprogram). Ingeneralwe daemons vulnerable to pathname manipulation attacks, as
cannotanticipateall possible ways that a gid maybe ac- wellasagainstsomenew(latent)vulnerabilitiesthatweun-
tivated, and hence we consider the directory unsafe in all covered. We alsoinstrumentedcurrentversionsofUbuntu
thesecases. Thismaytriggerspuriouspolicyviolationsin 9.04,FedoraCore11andFreeBSD7.2toruneveryprocess
somecon(cid:2)gurations,butinourexperimentswedidnot(cid:2)nd throughaprogramwhichinterposescallsto(cid:2)lemanipula-
con(cid:2)gurations where such policy violations cannot be re- tionandrelatedcallsandchecksifthecorrespondingoper-
solved. ationmanipulatesasafepathname.Theseexperimentscon-
We alsonotethatinconjunctionwiththemorepermis- (cid:2)rmedthatveryfewexistingsystemsbreakwhenusedover
sive variant from above, this behavior lets administrators our safe name resolution, and the handful of cases where
bypass muchof oursafety mechanisms: To forgomost of oursolutionproducesfalsepositivescanbehandledeither
oursafetyprotectionsforsomesubtree(withoutotherwise by implementinga morestandardpermissionstructurefor
changinganypermissions),itissuf(cid:2)cienttomaketheroot therelevantdirectoriesorbyusingamorepermissivevari-
ofthatsubtree writable,e.g.,bytherootgroup. Assum- antofoursolution.
ingthatonlyrootisamemberofthisgroup,thiswillnot
change any real permissions in the system, but will make
References
thatentiresubtree unsafe,andthereforepermitopeningof
the(cid:2)lesinitalsousingotherunsafenames,evenoneswith
symboliclinks. (Thistrickdoesnothelpiftherearemulti- [1] M.Bishop. RaceConditions,Files,andSecurityFlaws;or
theTortoiseandtheHareRedux.TechnicalReportCSE-95-
plehardlinks,however.)
8,UniversityofCaliforniaatDavis,Sep1995.
7. Conclusion [2] M.BishopandM.Dilger. Checkingforraceconditionsin
(cid:2)leaccesses.ComputingSystems9(2),pp.131(cid:150)152,Spring
1996.
Inthispaperweconsideredtheproblemofprivilegees-
calation via manipulation of (cid:2)lesystem pathnames, which
[3] N. Borisov, R. Johnson, N. Sastry, and D. Wagner. Fix-
effect name resolution in system calls such as open,
ing races for fun and pro(cid:2)t: how to abuse atime. In 14th
unlink,etc. While manyprivilegedprogramstakemea-
USENIXSecuritySymposium,pp.303(cid:150)314,Jul2005.
surestoprotectagainstsuchattacks,thesemeasuresareal-
waysveryapplicationspeci(cid:2)c. Weproposeamoregeneral [4] X. Cai, Y. Gui, R. Johnson. Exploiting Unix File-System
approachofhavingsafepathnameresolutionaspartofthe Races viaAlgorithmic Complexity Attacks InIEEESym-
(cid:2)lesystem itself or a system library, thereby protecting all posium on Security and Privacy, Oakland, CaliforniaMay
applicationsbydefault. 2009.
Weintroducedtheconceptofthemanipulatorsofapath-
[5] R. Canetti. Universally Composable Security: A New
name, that includeanyonewhocan in(cid:3)uencethe outcome
Paradigm for Cryptographic Protocols. In FOCS, pages
of the pathname resolution. In POSIX these are the users
136(cid:150)145,2001.
who either own or can write in any directory visited dur-
ingthepathnameresolution. Usingthisconcept,wecalla
[6] R. Canetti, S. Chari, S. Halevi, B. P(cid:2)tzmann, A. Roy, M.
pathname safe for U if the only manipulatorsof the path- Steiner,W.Venema. ComposableSecurityAnalysisofOp-
name are root and U. We described a general routine eratingSystemServices. TechnicalReportRC24900,IBM
safe-open, ensuring that if a (cid:2)le has safe names then T.J.WatsonResearchCenter,2009.[7] H.Chen,D.Wagner,andD.Dean. SetuidDemysti(cid:2)ed. In [21] D.Tsafrir,T.Hertz,D.Wagner,andD.DaSilva. Portably
USENIXSecuritySymposium,pages171(cid:150)190,2002. preventing(cid:2)leraceattackswithuser-modepathresolution.
Technical Report RC24572, IBM T. J. Watson Research
[8] D.DeanandA.J.Hu. Fixingracesforfunandpro(cid:2)t: how Center,June2008.
touseaccess(2).In13thUSENIXSecuritySymposium,pp.
195(cid:150)206,Aug2004. [22] W. Venema. The Post(cid:2)x mail transfer agent. http://
www.postfix.org/.(AccessedDecember2009).
[9] CERT Coordination Center. CERT Advisory CA-
[23] R.N.M.Watson.ExploitingConcurrencyVulnerabilitiesin
1995-02. http://www.cert.org/advisories/
SystemCallWrappers. InProceedingsofthe1stUSENIX
CA-1995-02.html, January 26, 1995. (Accessed De-
WorkshoponOffensiveTechnologies,Boston,August2007.
cember2009).
[24] K. Seidler. The XAMPP software. http://www.
[10] CERT Coordination Center. CERT Advisory CA-
apachefriends.org/.(AccessedDecember2009).
1993-17. http://www.cert.org/advisories/
CA-1993-17.html,November11,1993.(AccessedDe-
cember2009). A Relativepathnames
[11] Common Vulnerabilities and Esposures. CVE-2001-0529.
When resolving a pathname relative to an initial direc-
http://cve.mitre.org/,March 9, 2002. (Accessed
tory (i.e. the current directory or a directory handle with
December2009).
functionssuchasopenat),theresolverneedstodetermine
[12] Security Vulnerability in inetd(1M) Daemon When if the initial directory is safe, before following the same
Debug Logging is Enabled CVE-2008-1684. stepsaswithabsolutepathnames(Section2.2).Forthis,the
http://web.nvd.nist.gov/view/vuln/ implementationneedstomaintainsafetyinformationabout
detail?vulnId=CVE-2008-1684, September directory handles, including the implicit directoryhandles
2008.(AccessedDecember2009). forthecurrentandrootdirectoriesofallprocesses.
The per-handle safety information needs to be initial-
[13] initscripts Arbitrary File Deletion Vulnerability.
izedwhenadirectoryhandleisinstantiatedwithfunctions
CVE-2008-3524. http://web.nvd.nist.gov/
such as open, chdir or chroot, and the safety infor-
view/vuln/detail?vulnId=CVE-2008-3524,
mation needs to be propagatedwhen a directoryhandle is
September2008.(AccessedDecember2009).
copiedwithfunctionssuchasdup,fcntl,fork,orwith
[14] T.Gar(cid:2)nkel. TrapsandPitfalls: PracticalProblemsinSys- functions that transmit a (cid:2)le handle over an inter-process
temCallInterpositionBasedSecurityTools.InProceedings communication channel. Maintaining this information is
oftheNetworkandDistributedSystemSecuritySymposium, straightforward in the (cid:2)le system itself (i.e. in the oper-
NDSS2003,SanDiego,California,USA.
atingsystemkernel).Wediscussouruser-levelapproachin
AppendixC.
[15] D.MazieresandF.Kaashoek.Secureapplicationsneed(cid:3)ex-
Inasimplisticimplementation,eachdirectoryhandlehas
ibleoperatingsystems.InIEEEWorkshoponHotTopicsin
a static (cid:3)ag that indicates if the directory is safe. How-
OperatingSyst.(HOTOS),p.56,1997.
ever, additional care is needed with processes that change
[16] National Vulnerability Database. http://nvd.nist. theireffectiveuid(forexample,aprocessthatinvokesthe
gov/.(AccessedDecember2009). seteuid function, or a process that executes a (cid:2)le with
thesetuidbitturnedon). Astheresultofaneffectiveuid
[17] The Open Group Base Speci(cid:2)cations Issue 7; IEEE Std
change,adirectorythatwassafemaybecomeunsafeorvice
1003.1-2008. http://www.opengroup.org/. (Ac-
versa. As a furthercomplication,the safety of a directory
cessedDecember2009).
depends on the program execution history. For example,
[18] M. Seaborn. Plash: tools for practical least privilege. a handle for directory /etc is normally safe for every-
http://plash.beasts.org/. (Accessed December one,butthatsamedirectoryhandlewouldbesafeonlyfor
2009). joeifapathnameresolvedthroughasymboliclinkunder
/home/joe.
[19] D.Tsafrir, D.Da Silva, and D.Wagner. The murky issue Toaccountforprocessesthatchangeexecutionprivilege,
ofchangingprocessidentity: revising(cid:147)setuiddemysti(cid:2)ed(cid:148),
weproposethateachdirectoryhandlewouldincludea(cid:2)eld
USENIX;login,33(3),pages55(cid:150)66.2008.
specifyingtheuidthatthedirectory’spathnamepre(cid:2)xwas
(cid:147)safe for(cid:148)when the pathnamewas resolved. Namely, this
[20] D.Tsafrir,T.Hertz,D.Wagner,andD.DaSilva. Portably
SolvingFileTOCTOURaceswithHardnessAmpli(cid:2)cation. (cid:2)eld will indicate root if the directory was reached via
InProceedingsof USENIXConferenceonFileandStorage a system-safe pathname, it will indicate a single non-root
Technologies(FAST),pages189(cid:150)206,2008. uid if it was reached via a pathname that has only uid/* Resolve a pathname and open the target file */ /* Resolve pathname, invoke action on final component */
safe_open(path, open_flags, is_safe_wd) safe_lookup(dirhandle, path, is_safe_wd, lookup_flags,
{ action_func, action_args)
if (path is absolute) { {
is_safe_wd = 1; dirhandle = null; if (path is empty) return ENOENT;
} else { if (path is absolute) {
dirhandle = open(".", O_RDONLY) or return error; dirhandle = open("/", O_RDONLY) or return error;
} fst = result of lstat("/") or return error;
return safe_lookup(dirhandle, path, is_safe_wd, skip leading "/" in path, and replace
lookup_flags_for_open, path by "." if the result is empty;
open_action_func, open_flags); } else
} fst =result of fstat(dirhandle) or return error;
while (true) {
/* Call-back to open the final pathname component */ /* check dirhandle permissions */
if (fst.owner not in [root, euid]
open_action_func(dirhandle, name, is_safe_wd, open_flags) || anyone not in [root, euid] can write)
{ is_safe_wd = false;
truncate = (open_flags & O_TRUNC);
flags = (open_flags & (cid:152)O_TRUNC); split path into first and suffix,
and replace all-slashes suffix by ".";
filehandle = openat(dirhandle, name, flags) lst = result of lstatat(dirhandle, first)
or return error; or return error;
fst = fstat(filehandle) or return error;
/* lstatat(args) is local alias for /* the meaning of "final pathname component" *
fstatat(args, AT_SYMLNK_NOFOLLOW) */ * depends on lookup_flags, it has different *
lst = lstatat(dirhandle, name) or return error; * meaning for open, unlink, etc. */
if (first component is final pathname component)
if (fst and lst don’t match) return EACCESS; return action_func(dirhandle, first,
check dirhandle permissions again, is_safe_wd, action_args);
and update is_safe_wd if unsafe;
if (!is_safe_wd && name is "..") return EACCES; if (first component is a symlink) {
if (!is_safe_wd && fst is not a directory newpath = readlinkat(dirhandle, first)
&& fst has multiple hard links) or return error;
return EACCES; check dirhandle permissions again,
if (truncate) ftruncate(filehandle,0) and return EACCES if unsafe;
or return error;
return filehandle; /* symlink at end of pathname */
} if (suffix == null)
return safe_lookup(dirhandle, newpath,
is_safe_wd, lookup_flags,
action_func, action_args);
Figure1.Thetop›levelsafe openandacall›
backfunctionopen action func. /* other symlink */
[newhandle, fst] =
safe_lookup(dirhandle, newpath, is_safe_wd,
lookup_flags, null, null)
or return error;
androotasmanipulators,anditwillindicateno-oneifthe } else {
/* first component is not a symlink */
pathnamehadmorethanonenon-rootmanipulator. When newhandle = openat(dirhandle,first,O_RDONLY)
or return error;
resolving a pathname relative to an initial directory, one
check dirhandle permissions again,
determinesthesafetyoftheinitialdirectorybycombining and update is_safe_wd if unsafe;
the(cid:147)safefor(cid:148)uidfromthehandlewithfreshinformation
if (!is_safe_wd && name is "..")
abouttheownerandwritersfortheinitialdirectoryitself. return EACCES;
fst = result of fstat(newhandle)
or return error;
if (first component is not a directory)
B Pseudo-Code Implementation return ENOTDIR;
lst = result of lstatat(dirhandle, first)
or return error;
if (lst does not match fst) return EACCES;
The safe-lookup procedure described in Figure 2
implements our safe pathname resolution principle and /* reached the end of readlinkat result */
if (suffix == null) return [newhandle, fst];
is the common routine used to implement safe-open, }
safe-createand other safe versions of the POSIX in- path = suffix;
dirhandle = newhandle;
terface. The speci(cid:2)cs of each individual function are re- }
(cid:3)ectedintheargumentslookup flags,action func }
and action args. The top-level function safe open
and the corresponding parameters to safe lookup are
Figure2.Thesafe lookuprecursivecall.
describedinFigure1.feasibility test themonitordoes notenforcepolicy,but in-
application stead passes control to the real open etc. function. The
in-process monitor forLinux, FreeBSD and Solaris is im-
plementedin about 2000lines of K&R-formattedC code,
open etc. other
commentsnotincluded,plusasmallshellscriptthatimple-
mentsthecommand-lineinterface.
monitor logfile
Besides interposingonfunctionssuch as openthat re-
quire pathname resolution, our in-process monitor inter-
poses on additional functions to ensure proper operation
of the monitor itself. For example, the monitor intercepts
library functioncallssuchascloseandclosefrom,toprevent
thelogging(cid:2)lehandlefrombeingclosedbyaccident. The
monitor intercepts function calls such as execve to en-
sureconsistentprocessmonitoringwhenanewprogramis
executed. Upon execve entry, the monitor exports envi-
kernel
ronment variables to control run-time linker behavior and
to propagatemonitor state, and it resets the close-on-exec
(cid:3)ag on the logging (cid:2)le handle. When the execve call
Figure3.In›processmonitorarchitecture.
returns in the newly-loadedprogram, the monitor restores
privatestatefromenvironmentvariablesbeforetheapplica-
C User-levelimplementation tion’scodestartsexecution.
Totrackper-handledirectorysafetystate, anin-process
Asmentionedearlierinthispaper,akernel-basedimple- monitorwouldneedtointerposeonfunctionsthatcopy(cid:2)le
mentation of safe pathname resolution is straightforward: handles such as dup or fcntl. Interposition is not nec-
whilevisitingeachpathnameelementoneatatime,main- essary with process-creating primitives such as fork or
tain a safety (cid:3)ag and apply the safety policy for follow- vfork,sincethesearenotdesignedtosharethein-kernel
ing symbolic links, (cid:147)..(cid:148), and for (cid:2)les with multiple hard (cid:2)ledescriptortableorprocessmemorybetweenparentand
links as appropriate. With a kernel-basedimplementation, childprocesses. Ontheotherhand,theLinuxcloneand
maintainingper-handledirectorysafetyinformationisalso BSD rfork process-creating primitives are designed so
straightforward. Thisapproachispreferable,butonlyafter thattheycansharethe(cid:2)ledescriptortableorprocessmem-
ithasbeendemonstratedthatsafepathnameresolutiondoes ory,meaningthatchangesmadebyoneprocesswillaffect
notbreakwell-behavedprograms. the other process. This behavior complicates a user-level
To demonstrate the feasibility of our pathname safety monitor implementation, and is not yet supported by our
policy, we chose an approach that is based on library-call monitor.
interposition with an in-process monitor. This approach Our preliminary in-process monitor maintains a
works with dynamically-linked programs, including pro- safe/unsafe (cid:3)ag for directory handles created with open
grams that are setuid or setgid, and it providesacceptable sothatitcancheckprogramsthatusetheopen-fchdir
performanceonLinux, FreeBSDandSolarissystems. We idiom. Themonitordoesnotyetchecklookupsrelativeto
optedagainstexternal-processmonitorssuchasstraceor adirectoryhandle. Inourmeasurements,wefoundthatthe
truss: they suffer from TOCTOU problems, they cause openat etc. functions are used by only few programs,
considerablerun-timeoverhead,andtheydon’thavedirect and that those functions are called almost exclusively
access to the monitored process’s effective uid which is with absolutepathnamesorwith pathnamesrelativetothe
neededforpathnamesafetydecisions. currentdirectory.Themonitorcurrentlydoesnotpropagate
Asillustratedin(cid:2)gure3,themonitorisimplementedasa the per-process current directory and root directory safety
librarymodulethatisloadedintotheprocessaddressspace state across function calls such as execve. Instead, it
between the application and the libraries that are dynami- initializes their safety state on the (cid:3)y at program start-up
callylinkedintotheapplication. Dependingoncon(cid:2)gura- time. Withoutmodi(cid:2)cationtomonitoredapplications,itis
tion,themonitorcanlogfunctioncallssuchasopenwith not practical for a user-level monitor to track safety (cid:3)ags
the effective uid, and can log whether or not a call vio- for directory handles that are sent over an inter-process
lates our pathname safety policy. For the purpose of the communicationchannel.Fortunately,suchusageisrare.