Server-side Verification of Client Behavior in Online Games
Darrell Bethea Robert A. Cochran MichaelK. Reiter
UniversityofNorthCarolinaat Chapel Hill
{djb,rac,reiter}@cs.unc.edu
Abstract operators are not the only ones for whom the stakes are
high. Hoglundand McGraw [18] argue that “games are a
Online gamingis a lucrative and growing industry, but harbingerof software security issues to come,” suggesting
onethatisslowedbycheatingthatcompromisesthegaming thatdefensesagainstgamecheatsandgame-relatedsecurity
experienceandhence drivesaway players(andrevenues). problems will be important techniques for securing future
In this paper we develop a technique by which game de- massivedistributedsystemsofothertypes.
veloperscanenablegameoperatorstovalidatethebehav- Inthispaper,wedevelopanapproachtodetectasignifi-
ior of game clients as being consistent with valid execu- cantclassofcheatsinwhichaplayerchangesagameclient
tion of the sanctioned client software. Our technique em- toallowbehaviorsthatasanctionedgameclientwouldnot
ploys symbolic execution of the client software to extract allow;toaccomplishthis,theplayermightmodifytheclient
constraints on client-side state implied by each client-to- executableorin-memorydatastructuresofarunningclient,
server message, and then uses constraintsolving to deter- for example. Today, the most robust defense against such
minewhetherthesequenceofclient-to-servermessagescan client modification is to maintain authoritative state at the
be “explained”by anypossible userinputs, in lightofthe server,beyondthereachofdirectmanipulationbycheaters.
server-to-client messages already received. The requisite This, however, exacts a heavy price from game operators,
constraints and solving components can be developed ei- owing to the increased bandwidth use that results due to
ther simultaneously with the game or retroactively for ex- sendinglow-levelclientevents(inthelimit,everyplayerin-
isting games. We demonstrate our approach in two case put)totheserverforaccessingsuchstateandconveyingthe
studies: oneoftheopen-sourcegameXPilot, andoneofa effects back to clients. As bandwidthis one of the largest
gamesimilartoPac-Manofourowndesign. costs for large-scalegameoperators[29] andalso a recur-
ringone,thistensionbetweenbandwidthuseandcheatpre-
ventionisproblematic:
1 Introduction
IntheUSandEuropeanmarkets,agoodgoalto
shootforis4-6kilobitspersecond(kps)/player
Multi-player online games are very popular and prof- orless. ... Ifyoucangetthebitratedownto
itable, andaregrowingmoreso. Since1996thecomputer 2kps,you’re“golden.” It’shardtoseehowthat
gameindustryhasquadrupled—in2008alone,worldwide canhappen,however,withoutputtingdangerous
video-game software sales grew 20 percent to $32 billion amountsofdatadirectlyintotheclient,whichis
[26]. Estimatesplacerevenuefromonlinegamesat$11bil- justaskingfortroublefromtalentedcheatersand
lion,withgamessuchasWorldofWarcraft,whichhasmore hackers.[29,p.112]
than10millionsubscribersworldwide,bringingin around
The movement of games to all manners of devices using
$1 billion in revenue for parent company Blizzard Enter-
wireless,volume-pricedcommunicationonlyreinforcesthe
tainment[1,34].
importanceofkeepingbandwidthutilizationtoaminimum.
Since its inception, the online game industry has been
Moreover, even with the amount of detailed client infor-
plaguedbycheatingofnumeroustypes,insomecaseswith
mation collected at the server, server-side checking today
financial repercussions to the game operator. Age of Em-
isheuristic(andthuspotentiallyincomplete)andmanually
pires and America’s Army are examples of online games
programmed(andthuseffort-intensive):
that suffered substantial player loss due to cheating [33],
and for subscription games, player loss translates directly Players love to cheat — especially in online
to a reduction in revenues. And game developers and games... bereadytoaddserver-sidesupporttopreventusercheatingwithmethodsthatyouwere asguidanceforgamedeveloperswhoareconsideringusing
notabletopredict.[17] thistechniquefordetectingcheatingintheirgames.
In this paper we demonstrate a technique to detect any
2 Related Work
typeofcheatingthatcausestheclienttoexhibitbehavior,as
seen by the server, thatis inconsistentwith the sanctioned
clientsoftwareandthegamestateknownattheserver.That Detecting the misbehaviorof remoteclients in a client-
is, our approach discerns whether there was any possible serverapplicationisanareathathasreceivedconsiderable
sequence of user inputs to the sanctioned client software attention.Onestrategy,ofwhichoursisaspecialcase,isto
that could have given rise to each message receivedat the construct a model of proper client behavior against which
server, given what the server knew about the game client actualclientbehaviorsarecompared. Giffinetal. [14] de-
based on previous messages from the client and the mes- velopedsuchanapproachforvalidatingremotesystemcalls
sagestheserversenttotheclient.Indoingso,ourapproach back to the home server from computationsoutsourced to
remediesthe previouslyheuristic and manualconstruction (potentiallyuntrusted) worker machines. In that work, re-
of server-side checks. Moreover, our approachpotentially mote system calls are compared to a control flow model
enables new game designs that reduce bandwidth use by generated from the binary code of the outsourced compu-
placingmoreauthoritativestate at the client, since ourap- tation,specificallyeitheranon-deterministicfinite-stateau-
proachverifiesthat the client’s behavioris consistent with tomatonorapush-downautomatonthatmirrorstheflowof
legal managementof that state. While reducing the inter- controlin the executable. A more recentexample is work
action with the client will generally increase the compu- byGuhaetal.[16]:throughstaticanalysisoftheclientpor-
tational cost of our verification, the verification need not tionofAjaxwebapplications(HTMLandJavaScript),their
be done on the critical path of gameplay, and can be per- systemconstructsacontrol-flowgraphfortheclientthatde-
formedselectively(e.g.,onlyforsuspectedorwinningplay- scribesthesequencesofURLsthattheclient-sideprogram
ers). Moreover,itcanbenefitfromthe dramaticgrowthof caninvoke.Anyrequestthatdoesnotconformtothisgraph
inexpensivecomputingpower(largernumbersofcores)in isthenflaggedaspotentiallymalicious.
game-operatorserverfarms. The technique we develop here follows this paradigm.
Ourstrategyexploitsthefactthatgameclientsareoften We similarly use analysis (in our case, of source code) to
structuredasaneventloopthatprocessesuserinputs,server develop a model of client behavior, against which inputs
messages, or other events in the context of current game (messagesfromtheclient)arecompared. Theprimarydif-
state,andthensendsanupdatetotheserveronthebasisof ferentiatorof our approachfrompreviousworksis sound-
itsprocessing. We symbolicallyexecutethelooptoderive ness:onlysequencesofclientmessagesthatcouldhaveac-
a predicate that characterizes the effects of the loop, and tuallybeenproducedthroughvalidclientexecution,onthe
specifically the update sent to the server, as a function of inputssent by the server, will be accepted. This precision
its inputs and game state. By partially instantiating these is accomplished though our use of symbolic execution to
predicates on the basis of the actual messages the server derivethe completeimplicationsof eachmessage valueto
receives from a client and what the server previously sent the client-side state. While this would hardly be tractable
to the client, a verifier can then use a constraint solver to foranyarbitraryclient-serverapplication,thecontrol-loop
determine whether the resulting predicate is satisfiable. If structure of game clients and the frequent communication
so,thenthisindicatesthatthemessagesareconsistentwith thatistypicallynecessaryforgameplayboundstheamount
properclientexecution—i.e.,thereweresomeuserinputs ofuncertaintythattheverifierfacesincheckingtheclient’s
thatcouldhaveyieldedthesemessages. messages.
We demonstrateourapproachwithtwocasestudies. In A differentapproachto protectingagainstclientmisbe-
the first, we apply our technique to the open-source game haviorinclient-serversettingsistoensurethatclientsman-
XPilot. Because XPilotwasdevelopedasis commonplace agenoauthoritativestatethatcouldaffecttheserverorthe
today, i.e., with low-level client events being sent to the larger application; as discussed in the introduction, this is
server,thiscasestudydoesnotfullyillustratethestrengths commonplacetodayforgames. Arecentsystemforimple-
of our approach. However, it does demonstrate the (few) mentingwebapplicationstohavethispropertyisSwift[9],
ways in which we found it necessary to adapt XPilot to forexample. Theextremeofthisapproachisfortheclient
use our technique efficiently and to allow for the realities tosimplyforwardallunseeninputs(e.g.,userinputs)tothe
of modern gaming, such as message loss on the network. server,whereatrustedcopyoftheclient-sidecomputation
For the second case study, we use a game of our own de- acts on these inputs directly; e.g., this is implemented for
signthatissimilartoPac-Manbutthathasfeaturestobet- Web2.0applicationsintheRipleysystem[35]. Incontrast,
terexerciseourtechnique. Together,thesetwocasestudies ourapproachdetectsanyclientbehaviorthatisinconsistent
illustrate the limits and benefitsofour approachandserve with legal client execution, without requiringthat all low-level events be sent to the server. Our approach also rep- tentionoccurswhenclientsdelayorsuppressreporting(and
resentsa middlegroundintermsofprogrammereffortbe- choosing)theirownactionsforagamestepuntilafterlearn-
tween automatic partitioning, which can require extensive ingwhatothershavechoseninthatstep(e.g.,[2,10]).Such
manual annotation of the program [9], and client replica- attackscanalsogounnoticedbyourtechniques,ifsuchde-
tionontheserver,whichrequiresnone.Inourcasestudies, layorsuppressioncouldbeexplainedbyfactors(e.g.,net-
we found that our approachwas largely automatic but did workcongestion)otherthanclientmodification. Ourtech-
requiremanualtuninginsomecasestobeefficient. niquesarecompatiblewithallproposeddefensesofwhich
weareawareforbothgamebotsanddelay/suppression,and
If the preceding approach can be viewed as a “pes-
so can be used togetherwith them. Finally, variousworks
simistic” way of eliminating trust in the client to manage
haveexaminedsecurityspecificallyforpeer-to-peergames,
authoritative state, one might say an “optimistic” version
e.g.,usingpeer-basedauditing[15,20,22]. Ourtechnique
wasproposedbyJhaetal.[21]. Insteadofmovingauthor-
may be applicable in some peer-to-peerauditing schemes,
itativestate toatrustedserver,atrustedauditserverprob-
butwefocusontheclient-serversettinghere.
abilisticallyauditsthemanagementofauthoritativestateat
Ourapproachtovalidatingclient-sideexecutionutilizes
the client. In this approach, each game client periodically
symbolic execution, a technique that has seen significant
commits to its complete state by sending a cryptographic
interest in the security communityfor generating vulnera-
hash of it to the audit server. If later challenged by the
bilitysignatures[3],generatinginputsthatwillinduceerror
audit server, the client turns over the requested commit-
conditions [6, 41], automating mimicry attacks [24], and
tedstateandallinformation(client-to-serverandserver-to-
optimizing privacy-preservingcomputations[36], to name
clientupdates, user inputs) neededto re-traceand validate
a few. A recentapproachto generatingweakest precondi-
the client’s behavior between this state and the next com-
mittedstate. Thisapproach,however,introducesadditional tions has shown promise as a more efficient alternative to
coststotheclientintheformofincreasedcomputation(to symbolic execution in some applications [4], and we plan
toinvestigatetheapplicationofthistechniquetoourprob-
cryptographicallyhash game state, which can be sizable),
storage (to retain the informationneeded to respond to an lemtomakeclientcheckingevenmoreefficient.
audit), and bandwidth (to transmit that information in the
eventof an audit); our approachintroducesnone of these, 3 Goals,Assumptions andLimitations
and can even enable bandwidthsavings. Moreover,verifi-
cationofclientsinthisschememustbedoneduringgame
The defense that we develop in this paper addresses a
play,sinceclientscannotretaintheneededinformationfor-
classofgamecheatsthatWebbandSohtermInvalidcom-
ever.Incontrast,ourapproachsupportsauditingatanytime
mands:
inthefuturebythegameoperator,providedthatitrecords
theneededmessages(towhichitalreadyhasaccess).
Usually implemented by modifying the game
Other work on defeating cheating specifically in online client,theinvalidcommandcheatresultsinthe
gamescomesinmanyflavors. Usefulsurveysoftheprob- cheatersendingcommandsthatarenotpossible
lemare dueto YanandRandell[40], Lyhyaouietal. [25], withanunmodifiedgameclient. Examplesin-
andWebbandSoh[38]. Onecommonapproachtodefeata cludegivingthecheater’savatargreatstrengthor
varietyofcheatsinvolvesaugmentingthe client-side com- speed. Thismayalsobeimplementedbymod-
puterwithmonitoringfunctionalitytoperformcheatdetec- ifyingthegameexecutableordatafiles. Many
tion (e.g., PunkBusterand [11, 12, 23, 28, 31]). Such ap- gamessufferthisformofcheating,includingcon-
proachesrequireconsiderationofhowtodefendthisfunc- solegamessuchasGearsofWar.[38,§4.2.3]
tionality from tampering, and some commercial examples
have met with resistance from the user community (e.g., Importantly,ourtechniquewillevendetectcommandsthat
WorldofWarcraft’sWarden,see[37]). Incontrast,ourap- are invalid in light of the history of the client’s previous
proachrequiresthatnomonitoringfunctionalitybeaddedto behaviorswitnessedbythegameserver,evenifthosecom-
clients. Otherworkfocusesonwhollydifferentcheatsthan mandscouldhavebeenvalidinsomeotherexecution.Sim-
we consider here. One example is game “bots” that per- plyput,ourapproachwilldetectanyclientgameplaythatis
form certain repetitive or precise tasks in place of human impossibletoobservefromthesanctionedclientsoftware.
gamers [7, 31, 39, 8, 27]. Bots that utilize the sanctioned Wedesignedourcheatdetectiontechniqueprimarilyfor
gameclienttodoso(asmanydo)willgoundetectedbyour use by game developers. As we present and evaluate our
scheme,sincetheclientbehaviorasseenbytheservercould approach, it requires access to source code for the game,
havebeen performedby the sanctionedgame clienton in- though potentially a similar approach could be developed
putsfromarealhumanuser(albeitanespeciallyskilledor with access to only the game executable. The approach
patientone). Anothercheatthathasreceivedsignificantat- shouldbeattractivetogamedevelopersbecauseitcansavethemsignificanteffortinimplementingcustomizedserver- could in fact have been produced by a valid game client.
sideverificationofclientbehaviors. Ourapproachiscom- Toward that end, a key step of our approach is to profile
prehensive and largely automatic; in our case study de- thegameclient’ssourcecodeusingsymbolicexecutionand
scribedin§5,weneededonlymodestadaptationstoanex- then use the results in our analysis of observed client out-
istingopen-sourcegame. puts. We begin with a summary of symbolic execution in
In order for detection to be efficient, our technique de- §4.1,andthendiscussitsapplicationinourcontextin§4.2–
pends on certain assumptions about the structure of the §4.6. The symbolic execution engine that we use in our
gameclient. We assume in this paperthat the gameclient workisKLEE[5],withsomemodificationstomakeitmore
isstructuredasaloopthatprocessesinputs(userinputs,or suitableforourtask.
messagesfromthegameserver)andthatupdatesthegame Beforewecontinue,weclarifyouruseofcertaintermi-
serveraboutcertain aspectsof its status that are necessary nology. Below,whenwerefertoavalidclient,wemeana
formultiplayergameplay(e.g.,theclient’scurrentlocation clientthatfaithfullyexecutesasanctionedgame-clientpro-
onagamemap,sothattheservercanupdateotherplayersin gram (and does not interfere with its behavior). Values or
thegamewiththatlocation).Updatesfromtheclienttothe messagesarethenvalidiftheycouldhavebeenemittedby
server need not be in exact one-to-one correspondence to avalidgameclient.
loopiterations. However,as the numberof loopiterations
that execute without sending updates increases, the uncer- 4.1 SymbolicExecution
taintyinthe verifier’s“model”oftheclientstate also gen-
erally increases. This increase will induce greater server-
Symbolic execution is a way of “executing”a program
side computationin verifyingthat future updatesfrom the
while exploring all execution paths, for example to find
clientareconsistentwithpastones. Aswewillseein§5,it
bugs in the program. Symbolic execution works by exe-
isusefulfortheseupdatesfromtheclienttoindicatewhich
cutingthe software with its initial inputsspecially marked
server-to-clientmessagestheclienthasreceived,butimpor-
sotheyareallowedtobe“anything”—thememoryregions
tantly,theinformationsentbytheclientneednotincludethe
ofthe inputaremarkedassymbolicandarenotgivenany
userinputsorafullaccountofitsrelevantstate. Indeed,it
initialvalue. The programis executedstep-by-step,build-
isthisinformationthata gameclientwouldtypicallysend
ingconstraintsonthesymbolicvariablesbasedonthepro-
today,andthatwepermittheclienttoelideinourapproach.
gram’s operations on those variables. For example, if the
Duetothescopeofwhatittriestodetect,however,our
programsets a ← b+c, where a, b, andc are allmarked
technique has some limitations that are immediately evi-
as symbolic, then after the operation, there will be a new
dent.First,ourtechniquewillnotdetectcheatsthatareper-
logical constraint on the value of a that states that it must
mittedbythe sanctionedclientsoftwaredueto bugs. Sec-
equalthesumofbandc. Whentheprogramconditionally
ond, modifications to the game client that do not change
branchesonasymbolicvalue,executionforksandbothpro-
its behavioras seen at the server will go unnoticedby our
gram branchesare followed, with the true branch forming
technique. Forexample,anyactionthatis possibletoper-
a constraint that the symbolic value evaluates to true and
form will be accepted, and so cheating by modifying the
thefalsebranchformingtheoppositeconstraint.Usingthis
clientprogramtomakedifficult(butpossible)actionseasy
strategy, symbolicexecutionattempts to follow everypos-
will go undetected. Put in a more positive light, however,
siblecodepathinthetargetprogram,buildingaconstraint
this means that our technique has no false alarms, assum-
foreachonethatmustholdonexecutionofthatpath.
ingthatsymbolicexecutionsuccessfullyexploresallpaths
Symbolic execution can help locate software bugs by
throughthe client. As anotherexample,a clientmodifica-
providingconstraintsthatenableaconstraintsolver(KLEE
tionthatdisclosesinformationto theplayerthatshouldbe
usesSTP[13])togenerateconcreteinputsthatcauseerrors
hidden,e.g.,suchasacommoncheatthatuncoverspartsof
to occur. For example, if execution reaches an error con-
the game map that should be obscured, will go unnoticed
dition (or a state thought to be “impossible”), then a con-
byourtechnique. Inthelimit,aplayercouldwritehisown
straint solver can use the constraints associated with that
version of the game client from scratch and still go unde-
path to solve for a concrete inputvalue which triggersthe
tected,providedthatthebehaviorsitemits,aswitnessedby
errorcondition.Havingaconcreteinputthatreliablyrepro-
the server, are a subset of those that the sanctioned client
ducesanerrorisagreathelpwhentryingtocorrectthebug
softwarecouldemit.
inthesourcecode.
4 OurApproach 4.2 GeneratingConstraints
Ourdetectionmechanismanalyzesclientoutput(asseen The first step of our technique is identifying the main
by the game server) and determines whether that output eventloopofthegameclientandallofitsassociatedclientstate, which should include any global memory, memory prev loc during the instrumentation phase, it remains an
thatisafunctionoftheclientinput,andmemorythatholds unconstrainedsymbolicvariableinallthreecases.Thestate
data received from the network. These state variables are variableloc,however,isconstraineddifferentlyoneachof
thenprovidedtothesymbolicexecutiontool,whichisused thethreepaths. Inthecasewhenkey isequalto‘↑’, sym-
togenerateaconstraintforeachpaththroughtheloopina bolicexecutionreportsloc=prev loc+1astheonlycon-
singleround.Theseconstraintsarethusreferredtoasround straint on loc. When key is equal to ‘↓’, the constraint is
constraints. thatloc = prev loc−1. Andwhenkey isnot‘↑’, ‘↓’, or
ESC,theconstraintisthatloc=prev loc.
100: loc←0; 200: prevloc←symbolic; Therefore,therearethreepossiblepathsthatcanleadto
101: 201: loc←prev loc;
a message being sent to the server. If the server receives
102: whiletruedo 202: whiletruedo
a message from a client — and the client is a valid client
103: key←readkey(); 203: key←symbolic;
104: ifkey=ESCthen 204: ifkey=ESCthen —thentheclientmusthavetakenoneofthesethreepaths.
105: endgame(); 205: endgame(); Sinceeachpathintroducesa constraintonthevalueofloc
106: elseifkey=‘↑’then 206: elseifkey=‘↑’then
asafunctionofitspreviousvalue,theverifiercantakethe
107: loc←loc+1; 207: loc←loc+1;
108: elseifkey=‘↓’then 208: elseifkey=‘↓’then disjunctionoftheseconstraints,alongwiththecurrentand
109: loc←loc−1; 209: loc←loc−1; previousvaluesofloc(whichtheserveralreadyknows)and
110: endif 210: endif see if they are all logicallyconsistent. Thatis, the verifier
111: sendlocation(loc); 211: breakpoint;
canchecktoseeifthechangeinvaluesforlocmatchupto
112: endwhile 212: endwhile
a possible path that a valid game client might have taken.
(a) Atoygameclient... (b) ...instrumentedtorunsym- If so, then this clientis behavingaccordingto the rulesof
bolically
avalidgameclient. Thedisjunctionofroundconstraintsin
thiscaseis:
Figure1.Examplegameclient
(loc=prev loc+1)∨
Forexample,considerthetoygameclientinFigure1(a).
(loc=prev loc−1)∨
Thisclientreadsakeystrokefromtheuserandeitherincre-
mentsor decrementsthe value of the location variable loc (loc=prev loc) (1)
basedon the keythatwas read. The new locationvalueis
For example, suppose the verifier knows that the client
thensenttotheserver,andtheclientloopstoreadanewkey
reportedonitspreviousturnthatitslocwas8. Iftheclient
fromtheuser. Althoughatoyexample,onecanimagineit
weretothenreportitsnewlocationasloc = 9,theverifier
formingthebasisforaPongclient.
couldsimplychecktoseeifthefollowingissatisfiable:
To preparefor symbolic execution, we modify the pro-
gramslightly, as shown in Figure 1(b). First, we initialize
(prev loc=8)∧(loc=9)∧[ (loc=prev loc+1)∨
thevariablekey notwith a concreteinputvaluereadfrom
(loc=prev loc−1)∨
theuser(line103)butinsteadasanunconstrainedsymbolic
(loc=prev loc) ]
variable(line203). Wethenreplacetheinstructiontosend
outputtotheserver(line111)withabreakpointinthesym-
Ofcourse,itissatisfiable,meaningthatthenewvalueloc=
bolic execution (line 211). Finally, we create a new sym-
9couldinfacthavebeengeneratedbyavalidgameclient.
bolic state variable, prev loc (line 200), which will repre-
Suppose,though,thatinthenextturn,theclientreportshis
sent the game state up to this point in the execution. The
new position at loc = 12. Following the same algorithm,
state variable loc will be initialized to this previous state
theverifierwouldcheckthesatisfiabilityof
(line201).
Symbolically executing this modified program, we see (prev loc=9)∧(loc=12)∧[ (loc=prev loc+1)∨
thattherearefourpossiblepathsthroughthemainloopthat (loc=prev loc−1)∨
the client could take in any given round. In the first pos- (loc=prev loc) ]
sible path, key is ESC, andthe gameends. Note thatthis
branchneverreachesthebreakpoint. Thesecondandthird Becausetheseroundconstraintsarenotsatisfiable,novalid
possiblepathsaretakenwhenkeyisequalto‘↑’and‘↓’,re- gameclientcouldhaveproducedthemessageloc = 12(in
spectively. Thefinalpathistakenwhenkey isnoneofthe this context). Therefore, the verifier can safely conclude
aforementionedkeys.Theselastthreepathsallterminateat thatthe senderofthatmessageisrunninganincompatible
thebreakpoint. gameclient—ischeating.
Via symbolicexecution,theverifiercanobtainthecon- There are also constraints associated with the variable
straints for all symbolic variables at the time each path key. We haveomittedthese hereforclarity, showingonly
reached the breakpoint. Because we artificially created theconstraintsonloc. Wehavealsoomittedtheconstraintsgeneratedbythepreambleoftheloop,whichinthiscaseare 300: Ci←∅
trivial(“loc = 0”)butingeneralwouldbeobtainedbyap-
301: M ←msgToConstraint(msgi)
302: forG∈G(i)do
plyingsymbolicexecutiontothepreambleseparately. Had 303: forC∈Ci−1do
there been any randomcoin flips or reading of the current 304: C′←C∧G∧M
time,thevariablesstoringtheresultswouldalsohavebeen
305: ifisSatisfiable(C′)then
306: Ci←Ci∪{C′}
declared symbolic, and constraints generated accordingly.
307: endif
Whilefileinput(e.g.,configurationfiles)couldalsobede- 308: endfor
claredsymbolic,inthispaperwegenerallyassumethatsuch 309: endfor
inputfilesareknowntotheverifier(e.g.,ifnecessary,sent
to the server at the beginning of game play), and so treat Figure2.ConstructionofC ifromC i−1andmsg i
theseasconcrete.
4.3 AccumulatingConstraints 2above)aswellasincludingthespecificvaluesgiveninthe
clientmessageatthatround(i.e.,loc
2
=9above).
Whilethebranchestakenbyaclientineachroundmay These three roundconstraintseach representa possible
not be visible to the verifier, the verifier can keep a set of path the clientmighthavetaken in the secondround. The
constraintsthat representpossible client executionsso far. verifiermustthereforeconsidereachoftheminturnasifit
Specifically,theverifierformsaconjunctionofroundcon- were the correct path. For example, if C1 = {loc 1 = 8},
straintsthatrepresentsasequenceofpossiblepathsthrough then the verifier can use each round constraintto generate
the client’s loop taken over multiple rounds; we call this thefollowingpossibleaccumulatedconstraints:
conjunction an accumulated constraint and denote the set
ofsatisfiableaccumulatedconstraintsattheendofroundi loc 1 =8∧[loc 2 =9∧loc 2 =loc 1+1]
byC . Thissetcorrespondstothepossiblepathstakenbya loc 1 =8∧[loc 2 =9∧loc 2 =loc 1−1]
i
clientthroughroundi. loc 1 =8∧[loc 2 =9∧loc 2 =loc 1]
The verifier updates a given set C i−1 of accumulated
Since the second and third constraints are not satisfiable,
constraints upon receiving a new client message msg in
i however,thisreducesto
round i. To do so, the verifier first combines the values
giveninmsg iwitheachroundconstraintforroundi,where C2 = {loc 1 =8∧[loc 2 =9∧loc 2 =loc 1+1]}
each symbolic variable in the round constraint represents
= {loc 1 =8∧loc 2 =9}
clientstate forroundi, andtheroundconstraintcharacter-
izesthosevariablesasafunctionofthevariablesforround
The basic algorithm for constructing C i from C i−1
i−1. Theverifierthencombineseachresultwitheachac- and msg is thus as shown in Figure 2. In this figure,
i
cumulatedconstraintinC i−1 andchecksforsatisfiability. msgToConstraint simply translates a message to the con-
For example, let us parameterize the round constraints straint representing what values were sent in the message.
forthetoyexamplein§4.2withtheroundnumberj: It is important to note that while |C | = 1 for each i in
i
our toy example, this will not generally be the case for a
G(j)= { loc
j
=loc j−1+1,
morecomplexgame.Inanothergame,theremightbemany
loc
j
=loc j−1−1,
accumulatedconstraintsrepresentedinC i−1,eachofwhich
loc j =loc j−1 } wouldhavetobeextendedwiththepossiblenewroundcon-
straintstoproduceC .
Note that each member of G(j) corresponds to a disjunct i
in (1). If in round i = 2 the server receives the message
4.4 ConstraintPruning
msg = 9 from the client, then it generatesthe constraint
2
M = “loc 2 =9”, because the value “9” in the message
EveryaccumulatedconstraintinC isaconjunctionC =
representsinformationcorrespondingtothevariablelocin i
the clientcode. Then, combiningM with each G ∈ G(2)
c 1∧...∧c n(orcanbewrittenasone,inconjunctivenormal
form). Inpractice,constraintscangrowveryquickly. Even
givesthethreeconstraints:
inthetoyexampleoftheprevioussection,theaccumulated
loc 2 =9∧loc 2 =loc 1+1 constraintinC2hasonemoreconjunctthantheaccumulated
loc 2 =9∧loc 2 =loc 1−1 constraintinC1. Assuch,theverifiermusttakemeasuresto
loc
2
=9∧loc
2
=loc
1
avoid duplicate constraint checking and to reduce the size
ofaccumulatedconstraints.
Note thatthe combinationof the clientmessage with each First,theverifierpartitionstheconjunctsofeachnewac-
roundconstraintinvolvesbothinstantiation(e.g.,usingj = cumulatedconstraintC′(line304)basedonvariables(e.g.,loc )referencedbyitsconjuncts. Specifically,considerthe of symbolic execution is incurred during verification,
2
undirectedgraphinwhicheachconjunctc inC′ isrepre- butonlythosepathsconsistentwithservermessagesob-
k
sentedasanodeandtheedge(c k,c k′)existsifandonlyif servedduringgameplayneedbeexplored.
there is a variable that appears in both c
k
and c k′. Then,
Ineithercase,itisnecessarythattheserverlogthemes-
eachconnectedcomponentofthisgraphdefinesablockin
sagesitsentandthattheverifierknowwhichofthesemes-
thepartitionofC′. BecausenotwoblocksforC′sharevari-
sagestheclientactuallyprocessed(versus,say,werelost).
ablereferences,theverifiercancheckeachblockforsatisfi-
Inourcasestudyin§5,wewilldiscusshowweconveythis
abilityindependently(line305),andeachblockissmaller,
informationtotheserver,whichitrecordsfortheverifier.
making each such check more efficient. And, since some
As discussed above, the eager approach permits sym-
accumulated constraints C′ will share conjuncts, caching
bolic execution to be decoupled from verification, in that
proofs of satisfiability for previously-checked blocks will
eager round constraints can be computed in advance of
allowsharedblockstobeconfirmedassatisfiablemoreef-
game play and then augmented with additional conjuncts
ficiently.
that represent server messages processed by the client in
Second,becauseroundconstraintsreferonlytovariables
that round. As such, the generation of round constraints
intwoconsecutiverounds—i.e.,anyG∈G(j)refersonly
in the eager approach is a conceptually direct application
to variables for round j and j −1 — the formulas G and of a tool like KLEE (albeit one fraughtwith game-specific
M in line 304 will refer only to variables in roundsi and
challenges, such as those we discuss in §5.4.1). The lazy
i−1. Therefore,ifthereareblocksofconjunctsforC′ in
approach,however,tightlycouplesthegenerationofround
line 304 that contain no references to variables for round
constraintsand verification; below we briefly elaborate on
i, then these conjunctscannot be rendered unsatisfiable in
itsimplementation.
futurerounds. Oncethe verifierdeterminesthatthisblock
Tosupportthelazyapproach,weextendKLEEbybuild-
of conjuncts is satisfiable (line 305), it can safely remove
ing a model of the network that permits it access to the
theconjunctsinthatblockfromC′.
log of messages the client processed (from the server) in
the currentroundi andany message the clientsentin that
4.5 ServerMessages round. Below, we use the term active path to refer to an
individual, symbolically executing path through the client
Roundconstraintsarenotafunctionofonlyuserinputs code. Eachactivepathhasitsownindexintothemessage
(and potentially random coin flips and time readings), but log,sothateachcaninteractwiththelogindependently.
also messages from the server that the client processes in Tohandleserver-to-clientmessagesfromthelog,wein-
thatround.Wehaveexploredtwoimplementationstrategies tercept the recv() system call and instead call our own
foraccountingforservermessageswhengeneratinground replacementfunction. Thisfunctionfirstcheckstoseethat
constraints: the next message in the network log is indeed a server-to-
clientmessage. Ifitis,wereturnthemessageandadvance
• Eager: In this approach, eager round constraints are
thisactivepath’spointerinthelogbyonemessage. Other-
generated with the server-to-client messages marked
wise, thisactivepathhasattemptedmorenetworkreadsin
symbolic in the client software, just like user inputs.
round i than actually occurred in the network log prior to
EachmemberofG(i)isthenbuiltbyconjoininganeager
reachingthe breakpointcorrespondingto a client-message
roundconstraintwithoneormoreconjunctsoftheform
send.Inthiscase,wereturnzerobytestotherecv()call,
“svrmsg = m”,wheresvrmsg isthesymbolicvariable
indicatingthatnomessageisavailabletoberead. Uponan
for a server message in the client software, and m is
activepathreachingthebreakpoint(whichcorrespondstoa
the concrete server message that this variable took on
client send), if the next message in the log is not a client-
inroundi. Werefertothisapproachas“eager”sinceit
to-servermessage,thenthisactivepathhasattemptedfewer
enablesprecomputationofeagerroundconstraintsprior
networkreadsthanthelogindicates,anditisterminatedas
to verification, but in doing so also computes them for
invalid.Otherwise,theroundconstraintbuiltsofarisadded
pathsthatmayneverbetraversedinactualgameplay.
toG(i)andtheloggedclientmessageisusedtoinstantiate
• Lazy: In this approach,lazy round constraintsare gen-
thenewconjunctM inline301ofFigure2.
eratedfromtheclientsoftwareafterithasbeeninstanti-
atedwiththeconcreteserver-to-clientmessagesthatthe
client processed in that round; these round constraints 4.6 ScalingtoManyClients
forroundithenconstituteG(i)directly.Sincetheserver
messages are themselves a function of game play, the Implementingourtechniqueonareal-worldonlinegame
lazy round constraints cannot be precomputed (as op- withalargeuserbasemightrequireitsownspecialimple-
posed to eager round constraints) but rather must be mentation considerations. As we will see in §5, our eager
computedas part of verification. As such, the expense and lazy implementations are not yet fast enough to per-form validation on the critical path of game play. So, the 5.1 TheGame
gameoperatormustlogallthemessagestoandfromclients
thatareneededtovalidategameplayoffline. Thatsaid,the
need for logging will not be news to game operators, and
theyalreadydosoextensively: The game’s style resembles that of Asteroids, in which
the player controls an avatar in the form of a spaceship,
LOGEVERYTHING,andofferarobustsystem whichshenavigatesthroughspace,avoidingobstaclesand
forreviewingthelogs.Whenhuntingdownbugs battling other ships. But XPilot adds many new dimen-
and/or reviewing player cries of foul, nothing sionstogameplay,includingcomputer-controlledplayers,
makesthejoboftheGMeasierthanknowing several multiplayer modes (capture the flag, death match,
thathe/shehasperfectinformationandcanstate racing, etc.), networking (needed for multiplayer), better
with100%accuracywhenaplayerisn’ttelling physics simulation (e.g., accountingfor fuel weight in ac-
thewholetruth.[32] celeration), and updated graphics. In addition, XPilot is a
highlyconfigurablegame,bothattheclientandtheserver.
As such, our approach introduces potentially little ad- Forexample,clientscansetkeymappings,andserverscan
ditional logging to what game operators already perform. configurenearlyeveryaspectofthegame(e.g.,shipmass,
Nevertheless, to minimize this overhead, game operators initial playerinventory,probabilityof each type of power-
mightuse a log-structuredfile system [30]. Such file sys- upappearingonthemap,etc.).
temswrite data sequentiallyin a log-likestructureand are
optimizedforsmallwrites(aswouldbethecasewhenlog- Aswe havediscussed, developersoftoday’snetworked
ging client and server messages). Log-structured file sys- gamesdesignclientswithlittleauthoritativestateinorderto
tems have been implemented for NetBSD and Linux, for helpaddresscheating. Inkeepingwiththatparadigm,XPi-
example. lotwaswrittenwithverylittlesuchstateintheclientitself.
Despitethisprovision,therearestillwaysamalicioususer
Oncethemessagesarelogged,theycanbesearchedlater
can send invalid messages in an attempt to cheat. In XPi-
to extract a specific game trace to be checked (e.g., for a
lot,therearesomesetsofkeysthattheclientshouldnever
winning player). The checking itself can be parallelized
reportpressingsimultaneously. Forexample,aplayercan-
extensively, in that the trace of a player can be checked
notpressthekeytofire(KEY FIRE SHOT)whileatthesame
independentlyof others’, and even blockswithin accumu-
lated constraints C′ (see §4.4) can be checked in parallel. timepressingthekeytoactivatehisshield(KEY SHIELD).A
validgameclientwillfilteroutanyattemptstodoso,deac-
Tracescanalsobepartiallychecked,bystartinginthemid-
tivatingtheshieldwheneveraplayerisfiringandbringing
dle of a trace, say at round i with client-to-server mes-
it back online afterward. However, an invalid game client
sagemsg ,andcheckingfromthatpointforward(i.e.,with
i mightattempttogainanadvantagebysendinga keyboard
C i−1 = {true}). Ofcourse,whilesucha partialcheckcan
update that includes both keys. As it happens, the server
validatetheinternalconsistencyofthepartofthetracethat
does its own (manually configured) checking and so the
is checked, it will not detect inconsistencies between the
cheatfailsinthiscase, butthefactthattheclientbehavior
validatedpartandotherparts.
isverifiablyinvalidremains. Therearenumerousexamples
ofsimilarcheatsinonlinegamesthatserversfailto catch,
5 CaseStudy: XPilot either because of programmingerrorsor because that par-
ticularmisuseoftheprotocolwasunforeseenbythegame
developers. Inourevaluations,weconfirmedthatourtech-
Inourfirstcasestudy,weapplyourtechniquetoXPilot,
nique detects this attempt to cheat in XPilot, as expected.
anopen-sourcemultiplayergamewritteninabout150,000
Thisdetectionwasadirectresultofthelogicinherentinthe
linesofCcode.XPilotusesaclient-serverarchitecturethat
gameclient,incontrasttothemanuallyprogrammedrulein
has influenced other popular open source games. For ex-
theXPilotserver.
ample,theauthorsofFreecivusedXPilot’sclient-serverar-
chitectureasabasisforthenetworkinginthatgame.XPilot At the core of the architecture of the XPilot client is a
wasfirstreleasedover15yearsago,butitcontinuestoenjoy mainloopthatreadsinputfromtheuser,sendsmessagesto
anactiveuserbase. Infact,inJuly2009,7b5Labsreleased theserver,andprocessesnewmessagesfromtheserver. In
anXPilotclientfortheAppleiPhoneandAppleiPodTouch §5.3and§5.4, we describethe verificationof XPilotclient
(seehttp://7b5labs.com/xpilotiphone),which behavior by generating lazy round constraints and eager
is the most recent of several forks and ports of the XPilot roundconstraintsfor this loop, respectively. However, we
code base over the years. We focus on one in particular first describemodificationswe made to XPilot, in orderto
calledXPilotNG(XPilotNextGeneration). performverification.5.2 GameModifications sendstheclient(usingthecustomreliable-deliveryprotocol
built over UDP). Reliable traffic is vital to the set-up and
tear-down of games and game connections, but once play
Messageacknowledgments Client-servercommunication
has begun, reliable messages are irrelevant for game play.
inXPilotusesUDP trafficforits timelinessanddecreased
Types of messages the server sends reliably are in-game
overhead — the majority of in-game packets are relevant
chatmessages(bothamongplayersandfromtheserverit-
only within a short time after they are sent (e.g., informa-
self), informationabout new players that have joined, and
tionaboutthecurrentgameround).Foranytrafficthatmust
score updates, all of which are relatively infrequent and
bedeliveredreliably(e.g.,chatmessagesbetweenplayers),
purely informational, in the sense that their delivery does
XPilotusesacustomlayerbuiltatopUDP.DuetoXPilot’s
notalter the permissible clientbehaviors. As such, we ig-
use of UDPand the factthatit can processarbitrarynum-
noredthemforthepurposeofouranalysis.
bersofmessagesinasingleclientloop,weaddedtoXPilot
Third, KLEE is built upon LLVM and requires the input
anacknowledgementschemetoinformtheserverofwhich
executabletobecompiledintothe LLVM intermediaterep-
inboundmessagestheclientprocessedineachloopiteration
resentation(IR).Likeallsoftware,XPilotdoesnotexecute
and between sending its own messages to the server. The
in isolation and makes use of external libraries; not all of
serverlogsthisinformationforusebytheverifier.Thereare
thesewerecompiledintoLLVMIR.Specifically,thegraph-
manypossibleefficientacknowledgementschemestocon-
icslibrarywasnotsymbolicallyexecutedbyKLEE,andin-
vey this information; the one we describe in Appendix A
steadanyreturnvaluesfromgraphicscallsthatXPilotlater
assumesthatout-of-orderarrivalofservermessagesisrare.
neededweresimplydeclaredsymbolic.
Theseacknowledgmentsenabletheservertorecordalog
ofrelevantclienteventsin the ordertheyhappened(asre-
5.3 VerificationwithLazyRoundConstraints
portedbytheclient).Foreachclient-to-servermessagethat
the server never received, the verifier simply replaces the
constraintM impliedbythemissingmessage(seeline301 In this section we measurethe performanceof verifica-
ofFigure2)withM =true. tionusinglazyroundconstraints. Asdiscussedin §4,lazy
round constraints are generated once the client-to-server
Floating-point operations XPilot, like most games of
and server-to-client messages are known. Thus, the only
evenmoderatesize,includesanabundanceoffloating-point
unknown inputs to the game client when generating lazy
variablesandmath. However,itisnotcurrentlypossibleto
roundconstraintsaretheuserinputsandtimereadings(and
generateconstraintson floating-pointnumberswith KLEE.
randomcoinflips,butthesedonotaffectserver-visiblebe-
Therefore,weimplementXPilot’sfloating-pointoperations
haviorinXPilot).
usinga simple fixed-pointlibraryof ourown creation. As
In generating lazy round constraints, we departed
a result, symbolic execution on the XPilot client produces
slightly from the description of our approach in §4, in
constraintsfromthislibraryforeverymathematicalopera-
that we inserted multiple breakpoints in the client event
tion in the client code involving a symbolic floating-point
loop, rather than only a single breakpoint. Each break-
number. This, in turn, inflates the verification speeds re-
point provides an opportunity to prune accumulated con-
portedin§5.4,inparticular.
straints and, in particular, to delete multiple copies of the
Client trimming The XPilot client, like presumablyany same accumulated constraint. This is accomplished using
gameclient,containsmuchcodethatisfocusedonenhanc- avariantofthealgorithminFigure2,usingconstraintsde-
ingtheusergamingexperiencebutthathasnoeffectonthe rivedfromprefixesoftheloopleadingtothebreakpoint,in
messagesthattheclientcouldsendtotheserver. Toavoid placeoffullroundconstraints. Someoftheseextrabreak-
analyzingthiscode,wetrimmedmuchofitfromthegame points correspond to the (multiple) send locations in XPi-
clientthatwe subjectedto analysis. Below we summarize lot’s loop. Aside from this modification, we implemented
thethreeclassesofsuchcodethatwetrimmed.Asidefrom ourapproachasdescribedin§4.
these three types of code, we also trimmed mouse input- We ran our lazy client verifier on a 2,000-round XPi-
handling code, since all game activities can be performed lot game log (about a minute of game-play time) using a
equivalentlyusingthekeyboard. machine with a 2.67GHz processor. Figure 3(a) describes
First,severaltypesofuserinputsimpactonlythegraph- theper-roundvalidationcost(inseconds)usingabox-and-
ical display of the game but have no effect on the game’s whiskersplot per 125 rounds: the boxillustrates the 25th,
permissible behaviorsas seen by the server. For example, 50th,and75thpercentiles;thewhiskerscoverpointswithin
onetypeofkeypressadjuststhedisplayofgame-playstatis- 1.5 times the interquartile range; and circles denote out-
ticsontheuser’sconsole. Assuch,weexcisedtheseinputs liers. Theper-roundverificationtimesaveraged14.7swith
fromtheclientsoftwareforthepurposesofouranalysis. a standard deviation of 3.8s. As an aside, in every round,
Second,therearecertain“reliable”messagestheserver there was exactly one remaining satisfiable accumulatedRound
)sdnoces(
tsoC
noitacifireV
0 500 1000 1500 2000
02
01
5
(a) Costperround(lazy)
Round
)sdnoces(
tsoC
noitacifireV
0 500 1000 1500 2000
01
1
1.0
10.0
thegameclientwascalled. Thefirstbandcontainsrounds
whichcalledtheinputhandlerzerotimesandrepresentsthe
majority (90.1%) of the total rounds. These rounds were
the quickestto process, with a mean cost of 26.1msand a
standarddeviationof10.0ms.Thenext-largestband(5.1%)
contains roundswhich called the input handler only once.
Theseroundstooklongertoprocess,withameanof3.38s
and a standard deviation of 650ms. The final band repre-
sentsroundswithmorethanonecalltotheinput-handling
function. Thisband tookthe longestto process(14.9s, on
average), but it was also the smallest, representing only
4.1%ofallrounds.
5.4 VerificationwithEagerRoundConstraints
In this section we discuss verification of XPilot using
eager constraint generation. Recall that eager round con-
straints are precomputed from the sanctioned client soft-
warewithoutknowledgeofthemessagestheclientwillpro-
cessinanygivenloopiteration.However,wefoundthisap-
proachtorequiresubstantialmanualtuningtobepractical,
aswedescribebelow.
5.4.1 ManualTuning
A direct application of our method for generating eager
round constraints for the XPilot client loop would replace
the user key press with symbolic input and any incoming
(b) Costperround(lazy)withXPilot-specificop-
timizations servermessage with a symbolicbuffer,and subjectthe re-
sulting clientprogramto KLEE. Such a directapplication,
Figure 3. Verification cost per round us however,encounteredseveraldifficulties.Inthissectionwe
ing lazy round constraints, while checking a describethemaindifficultiesweencounteredinthisdirect
2,000 roundXPilotgamelog approachandtheprimaryadaptationsthatwemadeinorder
toapplyittotheXPilotclient. Theseadaptationshighlight
animportantlesson: theeagertechnique,whilelargelyau-
tomatic, can require some manual tuning to be practical.
constraint, indicating that, withoutclient state, there is lit- Becauseourtechniqueistargetedtowardgamedevelopers,
tleambiguityattheverifieraboutexactlywhatishappening we believe that allowing for such manual tuning is appro-
insidetheclientprogram,evenfromacrossthenetwork. priate.
By employinganXPilot-specificoptimization,wewere Frame processing In XPilot, messages from the server
abletosignificantlyimproveverificationperformance. Af- to the client describing the current game state are called
terthetrimmingdescribedin§5.2,theuserinputpathsthat frames. Each frame is formed of a chain of game pack-
we included within our symbolic execution of the client ets (not to be confused with network packets). The first
eachcausedanotherclient-to-servermessagetobesent,and andlastpacketsinaframearealwaysspecialstart-of-frame
sothenumberofsuchsendsinaroundindicatestothever- andend-of-framepackets,calledPKT STARTandPKT END.
ifier an upper bound on the number of user inputs in that Figure 4 shows an XPilot frame, containing a packet of
round. As such, we could tune the verifier’ssymbolic ex- typePKT FUELandpotentiallyothers(indicatedby“...”).
ecution to explore only paths throughthe client where the Packet headers are a single byte, followed by packet data
numberofinvocationsoftheinput-handlingfunctionequals that can carry anything from a single byte to an arbitrary-
the number of client messages for this round in the log. length, NULL-terminated string, depending on the packet
This optimization yields the graph in Figure 3(b). Notice type. Framesmaycontainmultiplepackettypesandmulti-
thattherearethreedistinctbandsinthegraph,correspond- pleinstancesofthesamepackettype.
ing to how many times the input-handlingfunctionwithin Considertheclient’sframe-processingalgorithm.GivenPKT STARTheader ofasinglepacketwouldbe
PKT STARTdata
. (p=PKT START)∧(constraints for(PKT START))
.
. (p=PKT FUEL)∧(constraints for(PKT FUEL))
PKT FUELheader (p=PKT TIME LEFT)∧(constraints for(PKT TIME LEFT))
PKT FUELdata (p=PKT END)∧(constraints for(PKT END))
.
.
. where p is a variable for the packet type and
... constraints for(PKT START) represents the additional
constraints that would result from symbolic execution of
PKT ENDheader
thepackethandlerforPKT START.Withthisnewmodelof
PKT ENDdata
. packetprocessing,theverifiercanbuildaframe-processing
.
. constraint to represent any given frame from the logs. In
this way, when the verifier checks the behavior of a given
Figure4.XPilotframelayout
client, it does so armed with the frames the server sent to
theclient,themessagestheserverreceivedfromtheclient,
and the frame-processing constraints that characterize
aframe,itreadsthepacketheader(i.e.,thefirstbyte),then the client’s processing of each frame, which the verifier
callsthehandlerforthatpacket,whichprocessesthepacket constructsfromthepacket-processingconstraints.
andadvancestheframepointersothatthenew“firstbyte”
Packetprocessing Certainindividualpackettypespresent
is the packet header of the next packet in the frame. This
theirowntractabilitychallengesaswell. Forexample,the
continues until the packet handler for PKT END is called, payloadforacertainpacketbeginswitha32-bitmaskfol-
thereturnofwhichsignifiestheendoftheframehandling.
lowedbyonebyteforeachbitinthemaskthatisequalto1.
Therefore,givenacompletelysymbolicbufferrepresenting
Theclientthenstorestheseremainingbytesina32-bytear-
theframe, oursymbolicexecutionwouldneedto walk the
rayattheoffsetsdeterminedbythemask(settinganybytes
clientcodeforeachpossiblesequenceofpacketsinaframe,
not included in the message to 0). In the packet handler,
up to the maximum frame size. But XPilot has dozens of
theXPilotclientcodemustsamplethevalueofeachbitin
packet types, some of which include a very small amount
the mask in turn. Since the payload (and thus the mask)
data. Asevidenceoftheinfeasibilityofsuchanapproach,
is symbolic, each of these conditionalsresults in a forkof
considerthefollowing(veryconservative)lowerboundon
twoseparatepaths(forthetwopossiblevaluesofthebitin
thenumberofpacketsequences:Thereareatleast10types
question). Our symbolic execution of this packet handler,
of packets that we considered whose total size is at most
then,wouldproduceover4billionroundconstraints,which
5bytes. Themaximumsize fora server-to-clientframein
isagaininfeasible. WecouldhavechangedtheXPilotnet-
XPilotis 4,096bytes, which means there is roomfor over
work protocol to avoid the using mask, sending 32 bytes
800 of these packets. That gives at least 10800 possible
eachtime,butdoingsowouldincreasenetworkbandwidth
packetsequencesthatsymbolicexecutionwouldtraverseto
needlessly. Instead, we note that the result of this packet
generateconstraints,whichisobviouslyinfeasible.
handleris thatthe destination array is set accordingto the
To make eager constraint generation feasible, then, we mask and the rules of the protocol. We thus added a sim-
adapt our approach to generate round constraints by start- pleruletotheverifierthat,whenprocessingapacketofthis
ing and stopping symbolic execution at multiple points type, generates a constraint defining the value of the des-
within the loop, as opposed to just the beginning and end tinationarraydirectly,exactlyasthepackethandlerwould
of the loop. In particular, we apply symbolic execution have. Then, when symbolically executing the packet han-
to the frame processing and user input processing por- dlers,priortoverification,wecansimplyskipthispacket.
tionsoftheloopseparately,toobtainuser-inputconstraints Toavoidsimilarmodificationstotheextentpossible,we
and frame-processing constraints, which in turn the ver- prunedthepacketstheverifierconsidersduringverification
ifier pieces together during verification to construct the to only those that are necessary. That is, there are several
roundconstraints. Moreover,theverifiercanconstructthe packettypesthatwillnotalterthepermissiblebehaviorsof
frame-processing constraints on the basis of the particu- the client as could be witnessed by the server, and so we
lar frame the server sent to the client. It does so dynam- ignoredthemwhenapplyingourtechnique. Mostofthese
ically from packet-processingconstraints that characterize packet types represent purely graphical information. For
how the client should process each packet in the partic- example, a packetof type PKT ITEM simply reportsto the
ular frame. For example, if the only packet types were clientthatagameitemofagiventype(e.g.,apower-upor
PKT START,PKT FUEL,PKT TIME LEFT,andPKT END,the a new weapon)is floatingnearbyat the givencoordinates.
packet-processing constraints representing the processing Theseinstructionsallow theclientto drawtheitem onthescreen, but they do not affect the valid client behaviorsas
observablebytheverifier.1
User input The first part of the client input loop checks
forandhandlesinputfromtheplayer. Gatheringuser-input
constraintsisfairlystraightforward,withtheexceptionthat
XPilotallowsplayerstodoanextensiveamountofkeyboard
mapping, including configurations in which multiple keys
areboundtothesamefunction,forexample.Wesimplified
thegenerationofconstraintsbyfocusingontheuseractions
themselvesratherthanthephysicalkeypressesthatcaused
them. Thatis,whilegeneratingconstraintswithintheuser-
input portion of XPilot, we begin symbolic execution af-
0 500 1000 1500 2000
ter the client code looks up the in-game action bound to
thespecificphysicalkeypressed,butbeforetheclientcode
processesthataction. Forexample,ifauserhasboundthe
action KEY FIRE SHOT to the key ‘a’, our analysis would
focusontheeffectsoftheactionKEY FIRE SHOT,ignoring
theactualkeytowhichitisbound. However,aswithother
client configuration options, the keyboard mapping could
easily be sentto the serveras a requirementof joiningthe
game,invokingasmall,one-timebandwidthcostthatwould
allowtheverifiertocheckthephysicalkeyconfiguration.
5.4.2 EagerVerificationPerformance
We ran our eager client verifier on the same 2,000-round
XPilot game log and on the same computer as the test
in §5.3. Figure 5 describes the per-round validation cost
(in seconds) using a box-and-whiskers plot. As in Fig-
ure3(b),weemployedhereanXPilot-specificoptimization
byobservingthatthenumberofclientmessagesinaround
boundsthe number of user inputs in that round. As such,
in piecing together round constraints, the verifier includes
a number of copies of user-input constraints (see §5.4.1)
equal to the client sends in that round. Figure 5 exhibits
three bands(the third comprisinga few large values), cor-
respondingto differentnumbers of copies. The large per-
centage of rounds contained no user inputs and were the
quickestto process, with a mean cost of 1.64s and a stan-
darddeviationof0.232s.Asecondbandofrounds—those
with a single user input — took longer to process, with a
meanof11.3sandastandarddeviationof1.68s.Remaining
roundscontainedmultipleuserinputsandtookthelongest
toprocess(34.2s,onaverage),buttheywerebyfartheleast
frequent.
Comparing Figures 5 and 3(b), the times for the eager
approach are substantially slower than those for the lazy
approach, when applied to XPilot. This performance loss
1Inparticular, whethertheclientprocessesthispacketisirrelevant to
determiningwhethertheclientcanpickupthegameitemdescribedinthe
packet. Whethertheclientobtainstheitemisunilaterally determinedby
theserverbasedonitcomputingtheclient’slocationusingthelow-level
clienteventsitreceives—anexampleofhownearlyallcontrolisstripped
fromclientsintoday’sgames,owingtohowtheycannotbetrusted.
05
02
01
5
2
1
Round
)sdnoces(
tsoC
noitacifireV
00000000000000005555555555555555
00000000000000002222222222222222
00000000000000001111111111111111
5555555555555555
2222222222222222
1111111111111111
Figure5.Verificationcostperroundusingea
gerroundconstraintsandXPilot specificopti
mizations, while checking a 2,000 round XPi-
lotgamelog
is due to the fact that a large portion of the XPilot client
codeis dedicatedto handlingservermessages. Andwhile
the verifierin the eager case has preprocessedthis portion
ofthecode,theresultingroundconstraintsaremuchmore
complex than in the lazy approach, where the the verifier
knows the exact values of the server messages when gen-
erating round constraints. This complexity results in con-
straintsolvingintheeagercase(line305ofFigure2)being
moreexpensive.
It is also importantto recall that lazy and eager are not
interchangeable,atleastintermsofgamedevelopereffort.
Asdiscussedin§5.4.1,achievingfeasiblegenerationofea-
gerroundconstraintsrequiredsubstantialadditionalmanual
tuning,and consequentlygreateropportunityfor program-
mer error. As such, it appearsthat eager is an inferior ap-
proachtolazyforXPilot.Anothercomparisonbetweenlazy
andeager,withdifferingresults,willbegivenin§6.
6 CaseStudy: Cap-Man
Our client verification technique challenges the current
game-design philosophy by allowing servers to relinquish
authoritative state to clients while retaining the ability to
validate client behavior and thus detect cheating. As a
way of demonstratingthis notion, we have written a game
called Cap-Man that is based on the game Pac-Man. In
some ways Cap-Man is easier to validate than XPilot was
— it representsa considerablysmaller codebase (approx-
imately 1,000 lines of C code) and state size. However,
whereas XPilot was written with virtually no authoritative
client state, we will see that Cap-Man is intentionally rifewithit,providingamoreinterestingchallengeforourtech- servertoseewhetherornotaplayerislyingaboutabomb
niquebecauseitissomuchmorevulnerabletoinvalidmes- placementby,forexample,announcinganexplosionatco-
sages. The size of its code base also allows us to conduct ordinatesthathehadnotactuallyoccupied5roundsearlier.
amoredirectcomparisonbetweenlazyandeagerverifica- Infact, theCap-Manservercontainsnoinformationabout
tion. (ormanualchecksregarding)theinternallogicofthegame
client.
6.1 TheGame In order to detect cheating in Cap-Man, we apply our
technique in both its lazy and eager flavors. Due to Cap-
Man’ssmallersizeandsimplercodestructure,wecangen-
Cap-ManisaPac-Man-likegameinwhichaplayercon-
erate roundconstraintsoveran entireiterationof the main
trols an avatar that is allowed to move through a discrete,
loopineachcase,withouttheneedtocompartmentalizethe
two-dimensional map with the aim of consuming all re-
codeandadoptsignificanttrimmingmeasuresaswedidfor
maining “food” items before being caught by the various
XPilot.
enemies(who are also wanderingthe map). Eachmap lo-
cationiseitheranimpenetrablewalloranopenspace,and
6.2 Evaluation
theopenspacescancontainanavatar,anenemy,piecesof
food,apower-up,ornothingatall. Whenaplayerreaches
a map location that contains food or a power-up, he auto- Using our technique, we are able to detect invalid-
matically consumes it. Upon consuming a power-up, the command cheats of all the types listed above. Below we
playerentersa temporary“power-upmode,”duringwhich present the results of client-validity checks on a game log
hispursuersreversecourse — tryingto escape ratherthan consistingof2,000rounds(about6-7minutesofgame-play
pursuehim—andhe isableto consume(andtemporarily time),duringwhichtheplayermovedaroundthemapran-
displace) them if he can catch them. In addition to these domly, performing(legal)bombplacementsat randomin-
features(whichwerepresentinPac-Manaswell),wehave tervals.
addedanewfeaturetoCap-Mantoinvitefurtherabuseand Figure 6 shows that the verification costs for Cap-Man
create more uncertainty at the server: A player may set a were consistently small, with a mean and standard devi-
bomb (at his currentlocation), which will then detonate 5 ation of 814ms and 1.10s for verification via lazy round
roundsinthefuture,killinganyenemies(ortheplayerhim- constraints (Figure 6(a)) and a mean and standard devia-
self) within a certain radius on the map. Players are not tionof260msand45.0msforverificationusingeagerround
allowedtosetasecondbombuntilthefirstbombhasdeto- constraints (Figure 6(b)). The lazy method was (on aver-
nated. age)roughly2.5timesslowerthantheeagermethod,owing
Cap-Manusesaclient-serverarchitecture,whichwede- to the overhead of symbolic execution to compute round
signedspecificallytogoagainstcurrentgame-development constraintsforeach roundindividuallyduringverification.
bestpractices: i.e.,itistheserver,nottheclient,whichhas While in the XPilot case study, eager verification required
aminimumofauthoritativestate. Theclienttrackshisown significantly greater development effort (see §5.4.1), this
map position, power-up-modetime remaining, and bomb- additionaleffortwasunnecessarywithCap-Manduetoits
placement details. Specifically, at every round, the client relativesimplicity.
sendsamessagetotheserverindicatingitscurrentmappo- Figure 6(c) shows the number of satisfiable accumu-
sitionandremainingtimeinpower-upmode. Italsosends lated constraints, which did not trend upward during the
the position of a bomb explosion, if there was one during run. Note that these valueswere identicalfor both the ea-
that round. Note that the client never informs the server ger and lazy approaches, as expected. In the case of XPi-
when it decidesto set a bomb. It merely announceswhen lot, the number of satisfiable accumulated constraints was
andwheredetonationhasoccurred. Theserver,incontrast, always 1, but in Cap-Manthere were often multiple accu-
sendstheclienttheupdatedpositionsofhisenemies—this mulated constraints that remained satisfiable at any given
beingthe onlygamestate for whichthe serverhasthe au- round. ThisincreaseresultedprimarilyfromstatetheCap-
thoritativecopy. Manclientmaintainsbutdoesnotimmediatelyreporttothe
ThedesignofCap-Manleavesitintentionallyvulnerable server (e.g., whether a bomb has been set). The relation-
toahostofinvalid-messageattacks. Forexample,although shipbetweenthishiddenstateandthenumberofsatisfiable
validgameclientsallowonlycontiguouspathsthroughthe accumulatedconstraintsisan importantone. Considerthe
map,acheatingplayercanarbitrarilyadjusthiscoordinates, verificationofaCap-Mangamethatiscurrentlyinroundi,
ignoringthe rulesof the game — a cheatknownin game- withnobombplacementsinthelast5rounds(unbeknownst
securityparlanceas“telehacking.” Hemightalsoputhim- to the verifier). The verifier must maintain accumulated
selfintopower-upmodeatwill,withoutbotheringtoactu- constraintsthatreflectpossiblebombplacementsateachof
allyconsumea power-up. Finally, thereis nocheckatthe roundsi−4throughi.Uponencounteringmsg withan
i+10 500 1000 1500 2000
5
4
3
2
1
0
Round
)sdnoces(
tsoC
noitacifireV
5555555555555555
4444444444444444
3333333333333333
2222222222222222
1111111111111111
0000000000000000
0 500 1000 1500 2000
(a) Costperround(lazy)
7.0
6.0
5.0
4.0
3.0
2.0
Round
)sdnoces(
tsoC
noitacifireV
7777777777777777................0000000000000000
6666666666666666................0000000000000000
5555555555555555................0000000000000000
4444444444444444................0000000000000000
3333333333333333................0000000000000000
2222222222222222................0000000000000000
0 500 1000 1500 2000
(b) Costperround(eager)
53
03
52
02
51
01
5
0
Round
stniartsnoC
detalumuccA
elbaifsitaS
#
55555555555555553333333333333333
00000000000000003333333333333333
55555555555555552222222222222222
00000000000000002222222222222222
55555555555555551111111111111111
00000000000000001111111111111111
5555555555555555
0000000000000000
(c) Satisfiable accumulated con-
straintsperround
Figure6.Verifyinga2,000 roundCap-Mangamelog
announcementofabombexplosion,theverifiercandiscard in an automated fashion. We explored both lazy and ea-
not only all current accumulated constraints which do not ger approaches to constraint generation, and investigated
includeabombplacementatroundi−4butalsothoseac- the programmer effort each entails and their performance
cumulated constraints which do include bomb placements intwocasestudies.
inroundsi−3throughi+1,becauseplayerscanonlyhave
In our first case study, we applied our validation ap-
one pending bomb at a time. This rule was not manually
proachtoXPilot,anexistingopen-sourcemultiplayergame.
configuredintotheverifier—itwasinferredautomatically
Wedetailedthewaysweadaptedourtechnique,inboththe
fromtheclientcodeitself.
lazyandeagervariants,toallowforefficientconstraintgen-
erationandserver-sidechecking. Whilethiseffortdemon-
7 Conclusion stratedtheapplicationofourapproachtoarealgame,itwas
lesssatisfyingasatestforourtechnique,inthatXPilotwas
developedin the mold of modern games — with virtually
Theneedtodetectcheatsinonlinegameshasheavilyin-
noauthoritativestateattheclient. Wethusalsoappliedour
fluencedgamedesignforwellmorethanadecade. Cheat-
technique to a simple game of our own design that illus-
inghasdrivengamedeveloperstominimizeoreliminatethe
tratedthestrengthsofourtechniquemoreclearly.
management of authoritative state at game clients. These
measureshavedirectimpactonthegameoperator’sbottom Webelievethattheadvanceinthispapercanchangehow
line, in particular due to the inflated bandwidth costs that gamedevelopersaddressanimportantclassofgamecheats
resultandtothemanualandheuristic(andhenceongoing) today,andindoingsoopensupnewavenuesofgamedesign
effortof programmingserver-side checkson client behav- that permit lower bandwidth utilization and better perfor-
iors. mance.Weplantoexaminetheapplicationofthistechnique
Inthispaperwehavedevelopedanewapproachtoval- toothertypesofdistributedapplicationsinfuturework.
idate the server-visible behavior of game clients. Our ap-
proach validates that game-client behavior is a subset of
thebehaviorsthatwouldbewitnessedfromthesanctioned Acknowledgements
game-clientsoftware, in light of both the previous behav-
iors from the client and the game state sent to that client.
Ourtechniqueexploitsacommonstructureingameclients, WearedeeplygratefultoCristianCadar,DanielDunbar,
namelyaloopthatacceptsserveranduserinputs,manages andDawsonEnglerforhelpfuldiscussionsandforpermit-
client state, and updates the server with information nec- ting us access to an early release of KLEE. Srinivas Kr-
essary for multiplayer game play. Our technique applies ishnan, Alana Libonati, Andy White and the anonymous
symbolicexecutiontothislooptoproduceconstraintsthat reviewersprovidedhelpfulcommentson draftsof this pa-
describeitseffects. Thegameoperatorcanthencheckthe per. This work was supportedin part by NSF awardsCT-
consistencyofclientupdateswiththeseconstraintsoffline, 0756998andTC-0910483.References [15] J.GoodmanandC.Verbrugge. Apeerauditingschemefor
cheat elimination in MMOGs. In Proceedings of the 7th
ACMSIGCOMMWorkshoponNetworkandSystemSupport
[1] L. Alexander. World of warcraft hits 10 million sub-
forGames,pages9–14,Oct.2008.
scribers, Jan. 2008. http://www.gamasutra.com/
php-bin/news_index.php?story=17062. [16] A.Guha,S.Krishnamurthi,andT.Jim. Usingstaticanaly-
[2] N.E.BaughmanandB.N.Levine. Cheat-proofplayoutfor sisforAjaxintrusiondetection. InProceedingsofthe18th
centralizedanddistributedonlinegames. InProceedingsof InternationalWorldWideWebConference,pages561–570,
IEEEINFOCOM,Apr.2001. Apr.2009.
[3] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. [17] S. Hawkins, consultant for Segaof America. Quoted [29,
Towardsautomaticgenerationofvulnerability-basedsigna- p.182].
tures. InProceedingsofthe2006IEEESymposium onSe- [18] G. Hoglund and G. McGraw. Exploiting Online Games:
curityandPrivacy,May2006. Cheating Massively Distributed Systems. Addison-Wesley
[4] D.Brumley, H.Wang, S.Jha, and D.Song. Creatingvul- Professional,2007.
nerabilitysignaturesusingweakestpre-conditions. InPro- [19] D.A.Huffman.Amethodfortheconstructionofminimum-
ceedings ofthe2007ComputerSecurityFoundations Sym- redundancycodes. ProceedingsoftheInstituteofRadioEn-
posium,July2007. gineers,40(9):1098–1101,Sept.1952.
[5] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted [20] T. Izaiku, S. Yamamoto, Y. Murata, N. Shibata, K. Ya-
andautomaticgenerationofhigh-coveragetestsforcomplex sumoto, and M. Ito. Cheat detection for MMORPG on
systemsprograms. InProceedingsofthe8thUSENIXSym- P2Penvironments. InProceedingsof5thACMSIGCOMM
posium onOperatingSystemsDesignandImplementation, WorkshoponNetworkandSystemSupportforGames,Oct.
Dec.2008. 2006.
[6] C.Cadar,V.Ganesh,P.M.Pawlowski,D.L.Dill,andD.R. [21] S. Jha, S. Katzenbeisser, C. Schallhart, H. Veith, and
Engler. EXE:Automaticallygeneratinginputsofdeath. In S. Chenney. Enforcing semantic integrity on untrusted
Proceedingsofthe13thACMConferenceonComputerand clients in networked virtual environments (extended ab-
CommunicationsSecurity,Nov.2006. stract). In Proceedings of the 2007 IEEE Symposium on
[7] K.-T.Chen,J.-W.Jiang,P.Huang,H.-H.Chu,C.-L.Lei,and SecurityandPrivacy,pages179–186,May2007.
W.-C.Chen. IdentifyingMMORPGbots: Atrafficanalysis
[22] P. Kabus, W. W. Terpstra, M. Cilia, and A. P. Buchmann.
approach.InProceedingsofthe2006ACMSIGCHIInterna- AddressingcheatingindistributedMMOGs.InProceedings
tionalConferenceonAdvancesinComputerEntertainment
of4thACMSIGCOMMWorkshop onNetworkandSystem
Technology,June2006.
SupportforGames,Oct.2005.
[8] K.-T. Chen, H.-K. K. Pao, and H.-C. Chang. Game bot
[23] E. Kaiser, W. Feng, and T. Schluessler. Fides: Remote
identification based on manifold learning. In Proceedings
anomaly-based cheat detection using client emulation. In
ofthe7thACMSIGCOMMWorkshoponNetworkandSys-
Proceedingsofthe16thACMConferenceonComputerand
temSupportforGames,pages21–26,Oct.2008.
CommunicationsSecurity,Nov.2009.
[9] S.Chong,J.Liu,A.C.Myers,X.Qi,N.Vikram,L.Zheng,
[24] C.Kruegel,E.Kirda,D.Mutz,W.Robertson,andG.Vigna.
andX.Zheng. Securewebapplicationsviaautomaticpar-
Automatingmimicryattacksusingstaticbinaryanalysis. In
titioning. In Proceedings of the 21st ACM Symposium on
Proceedingsofthe14thUSENIXSecuritySymposium,pages
OperatingSystemsPrinciples,pages31–44,Oct.2007.
161–176,July2005.
[10] E.Cronin, B.Filstrup, andS.Jamin. Cheat-proofing dead
[25] Y. Lyhyaoui, A. Lyhyaoui, and S. Natkin. Online games:
reckonedmultiplayergames. InProceedingsofthe2ndIn-
Categorizationofattacks. InProceedingsofthe2005Inter-
ternationalConferenceonApplicationandDevelopmentof
national Conference onComputer asaTool(EUROCON),
ComputerGames,Jan.2003.
Nov.2005.
[11] M.DeLap,B.Knutsson,H.Lu,O.Sokolsky,U.Sammapun,
[26] M.Magiera.VideogamessalesbiggerthanDVD-Blu-rayfor
I.Lee,andC.Tsarouchis. Isruntimeverificationapplicable
firsttime, Jan.2009. http://www.videobusiness.
tocheatdetection? InProceedingsof3rdACMSIGCOMM
com/article/CA6631456.html.
WorkshoponNetworkandSystemSupportforGames,Aug.
2004. [27] S.Mitterhofer,C.Platzer,C.Kruegel,andE.Kirda. Server-
side bot detection in massive multiplayer online games.
[12] W. Feng, E. Kaiser, and T. Schluessler. Stealth measure-
mentsforcheatdetectioninon-linegames. InProceedings IEEESecurityandPrivacy,7:18–25,32009.
ofthe7thACMSIGCOMMWorkshoponNetworkandSys- [28] C.Mo¨nch, G.Grimen, andR.Midtstraum. Protectingon-
temSupportforGames,pages15–20,Oct.2008. line games against cheating. In Proceedings of 5th ACM
[13] V. Ganesh and D. L. Dill. A decision procedure for bit- SIGCOMMWorkshop on Networkand System Support for
vectors and arrays. In Computer Aided Verification, 19th Games,Oct.2006.
International Conference, CAV 2007, pages 519–531, July [29] J. Mulligan and B. Patrovsky. Developing Online Games:
2007. AnInsider’sGuide. NewRidersPublishing,2003.
[14] J.T.Giffin,S.Jha,andB.P.Miller. Detectingmanipulated [30] M.RosenblumandJ.K.Ousterhout. Thedesignandimple-
remote call streams. In Proceedings of the 11th USENIX mentationofalog-structuredfilesystem.ACMTransactions
SecuritySymposium,Aug.2002. onComputerSystems,10(1):26–52,1992.[31] T. Schluessler, S. Goglin, and E. Johnson. Is a bot at the symbols that encode events in the order they happened at
controls? Detecting input data attacks. In Proceedings of the client. The symbols in eventSeq[] can be any of the
the6thACMSIGCOMMWorkshoponNetworkandSystem following. Below, s2cAckd is the largest sequence num-
SupportforGames,pages1–6,Sept.2007. ber s2cNbr receivedby the client beforesendingmessage
[32] D. Schubert, former lead designer for Meridian 59.
c2sAckd, andsimilarlyloopAckd isthelargestclientloop
Quoted[29,p.221].
iterationcompletedattheclientpriortoitsendingc2sAckd.
[33] D. Spohn. Cheating in online games. http://
internetgames.about.com/od/gamingnews/ • Loop denotes a completed loop iteration. The j-th oc-
a/cheating.htm. currenceofLoopin eventSeq[]denotesthe completion
[34] G. Staff. Analyst: Online games now $11b
ofloopiterationloopAckd +j.
of $44b worldwide game market, June 2009.
• Senddenotesthesendingofamessagetotheserver.The
http://www.gamasutra.com/php-bin/news_
j-thoccurrenceofSendineventSeq[]denotesthesend-
index.php?story=23954.
ingofclientmessagec2sAckd +j.
[35] K.Vikram,A.Prateek, andB.Livshits. Ripley: Automat-
icallysecuringWeb2.0applicationsthroughreplicatedex- • Recv and Skip denote receiving or skipping the next
ecution. In Proceedings of the 16th ACM Conference on server message in sequence. The j-th occurrence of
ComputerandCommunicationsSecurity,Nov.2009. Recv or Skip in eventSeq[] denotes receiving or skip-
[36] R. Wang, X. Wang, Z. Li, H. Tang, M. K. Reiter, and ping, respectively,server message s2cAckd +j. Here,
Z.Dong. Privacy-preservinggenomiccomputationthrough a message a skipped if it has not arrived by the time a
program specialization. In Proceedings of the 16th ACM server message with a larger sequence number arrives,
Conference on Computer and Communications Security,
andsoaseriesofoneormoreSkipsymbolsisfollowed
Nov.2009.
onlybyRecvineventSeq[].
[37] M. Ward. Warcraftgamemaker inspying row, Oct.2005.
• Late denotes the late arrival of a message, i.e., the ar-
http://news.bbc.co.uk/2/hi/technology/
4385050.stm.
rivalofamessagethatwaspreviouslyskipped.Thej-th
[38] S.WebbandS.Soh. Asurveyonnetworkgamecheatsand occurrenceofLateineventSeq[]denotesthearrivalof
P2Psolutions. AustralianJournalofIntelligentInformation servermessagelateMsgs[j].
ProcessingSystems,9(4):34–43,2008.
As such, lateMsgs[] contains a sequence number for
[39] R. V. Yampolskly and V. Govindaraju. Embedded nonin-
eachservermessagethatarrivesafteranotherwithalarger
teractivecontinuousbotdetection. ComputersinEntertain-
ment,5(4):1–11,Oct.2007. sequence number, and so lateMsgs[] should be small.
[40] J.YanandB.Randell. Asystematicclassificationofcheat- eventSeq[]maycontainmoreelements,butthesymbolscan
inginonlinegames.InProceedingsof4thACMSIGCOMM be encodedefficiently, e.g., using Huffmancoding[19] or
WorkshoponNetworkandSystemSupportforGames,Oct. anothercodingscheme, andin at mostthree bits per sym-
2005. bol in the worst case. Note that the server can determine
[41] J. Yang, C.Sar, P.Twohey, C. Cadar, and D. Engler. Au-
s2cAckd andloopAckd basedonthepreviousmessagesre-
tomatically generating malicious disks using symbolic ex-
ceivedfromtheclient.
ecution. In Proceedings of the 2006 IEEE Symposium on
SecurityandPrivacy,May2006.
A AnXPilotAcknowledgement Scheme
As discussed in §5.2, an efficient acknowledgement
schemeallowstheserver(andhenceverifier)knowledgeof
theorder(andloopiterations)inwhichtheclientprocessed
servermessagesandsentitsownmessages. Belowwede-
scribeonesuchschemethatisoptimizedformessagesthat
arriveattheclientmostlyinorder.
In this scheme, the XPilot client includes a sequence
numberc2sNbr oneachmessageitsendstotheserver,and
similarlytheserverincludesasequencenumbers2cNbr on
eachmessageitsendstotheclient. Eachmessagefromthe
servertoaclientalsoincludesthelargestvalueofc2sNbr
receivedfromthatclient. Ineachclientmessage,theclient
includesc2sAckd, the largestvalueofc2sNbr receivedin
a server message so far; a sequence lateMsgs[] of server
message sequencenumbers; and a sequenceeventSeq[] of