FLAX: Systematic Discovery of Client-side Validation Vulnerabilities
in Rich Web Applications
PrateekSaxena§ SteveHanna§ PongsinPoosankam‡§ DawnSong§
{prateeks,sch,ppoosank,dawnsong}@eecs.berkeley.edu
§UniversityofCalifornia,Berkeley
‡CarnegieMellonUniversity
Abstract side component and a client-side component. The server-
side component processes the user’s request and generates
The complexity of the client-side components of web an HTML response that is sent back to the browser. The
applications has exploded with the increase in popularity client-sidecodeofthewebapplication,typicallywrittenin
of web 2.0 applications. Today, traditional desktop ap- JavaScript,issentwiththeHTMLresponsefromtheserver.
plications, such as document viewers, presentation tools Theclient-sidecomponentexecutesinthewebbrowserand
and chat applications are commonly available as online isresponsibleforprocessinginputdataanddynamicallyup-
JavaScriptapplications. datingtheviewofwebpageontheclient. WedefineaCSV
Previous research on web vulnerabilities has primarily vulnerabilityasonewhichresultsfromunsafeusageofun-
concentratedonflawsintheserver-sidecomponentsofweb trusteddataintheclient-sidecodeofthewebapplication.
applications. Thispaperhighlightsanewclassofvulnera- CSV vulnerabilities belong to the general class of in-
bilities,whichwetermclient-sidevalidation(orCSV)vul- put validation vulnerabilities, but are different from tradi-
nerabilities. CSVvulnerabilitiesarisefromunsafeusageof tional web vulnerabilities like SQL injection [10,35] and
untrusted data in the client-side code of the web applica- reflected/storedcross-sitescripting[18,26,37,39]. Forex-
tion that is typically written in JavaScript. In this paper, ample, one type of CSV vulnerability involves data that
wedemonstratethattheycanresultinabroadspectrumof enters the application through the browser’s cross-window
attacks. Our work provides empirical evidence that CSV communicationabstractionsandisprocessedcompletelyby
vulnerabilitiesarenotmerelyconceptualbutareprevalent JavaScript code, without ever being sent back to the web
intoday’swebapplications. server. Another type of CSV vulnerability is one where a
We propose dynamic analysis techniques to systemati- webapplicationsanitizesinputdatasufficientlybeforeem-
cally discover vulnerabilities of this class. The techniques beddingitinitsinitialHTMLresponse, butdoesnotsani-
are light-weight, efficient, and have no false positives. We tizethedatasufficientlyforitsuseintheJavaScriptcompo-
implementourtechniquesinaprototypetoolcalledFLAX, nent.
whichscalestoreal-worldapplicationsandhasdiscovered
CSV vulnerabilities are becoming increasingly likely
11vulnerabilitiesinthewildsofar.
due to the growing complexity of JavaScript applications.
Increasingdemandforinteractiveperformanceofrichweb
2.0applicationshasledtorapiddeploymentofapplication
1 Introduction logicasclient-sidescripts. Asignificantfractionofthedata
processing in AJAX applications (such as Gmail, Google
Docs, and Facebook) is done by JavaScript components.
Input validation vulnerabilities constitute a majority of
JavaScripthasseveraldynamicfeaturesforcodeevaluation
web vulnerabilities and have been widely studied in the
and is highly permissive in allowing code and data to be
past [4,8,24,28,30,35,42,43]. However, previous vul-
inter-mixed.Asaresult,attacksresultingfromCSVvulner-
nerabilityresearchhasfocusedprimarilyontheserver-side
abilitiesoftenresultincompromiseofthewebapplication’s
components of web applications. This paper focuses on
integrity.
client-sidevalidation(orCSV)vulnerabilities, anewclass
of vulnerabilities which result from bugs in the client-side Goals. As a first step towards finding CSV vulnerabil-
code. ities, we aim to develop techniques that analyzes a web
A typical Web 2.0 application has two parts: a server- application in an end-to-end manner. Since most existingworks have targeted their analyses to server-side compo- if the analysis treats any use of untrusted data which has
nents(writteninPHP,Java,etc.),thispaperdevelopscom- beenpassedthroughaparsing/validationconstructassafe,
plementarytechniquestodiscovervulnerabilitiesinclient- it is likely to miss many bugs. Static analysis is another
side code. In particular, we develop a framework for sys- approach [14,17]; however static analysis tools do not di-
tematic analysis of JavaScript1 code. Our objective is to rectly provide concrete exploit instances and require addi-
buildatoolforvulnerabilitydiscoverythatdoesnotrequire tionaldeveloperanalysistopruneawayfalsepositives.
developer annotations, has no false positives and is usable Recently,symbolicexecutiontechniqueshavebeenused
onreal-worldapplications. fordiscoveringanddiagnosingvulnerabilitiesinserver-side
logic[9,23,25,42]. However,webapplicationspervasively
Challenges. Thefirstchallengeofholisticapplicationanal-
usecomplicatedoperationsonstringandarraysdatatypes,
ysisisindealingwiththecomplexityofJavaScript. Many
both of which raise difficulties for decision procedures in-
JavaScript programs use code evaluation constructs to dy-
volved in symbolic execution techniques. The power and
namically generate code as well as to serialize strings into
expressiveness of string decision procedures today is lim-
complex data structures (such as JSON arrays/objects). In
ited. Practical implementations of string decision proce-
addition, the language supports myriad high-level opera-
durespresentlydonotdealwiththegeneralityofJavaScript
tionsoncomplexdatatypes,whichmakesthetaskofprac-
string constraints involving common operations (such as
ticalanalysisdifficult.
String.replace,regularexpressionmatch,concatena-
In JavaScript application code, we observe that parsing
tion and equality) expressed together over multi-variable,
operations are syntactically indistinguishable from valida-
variable-lengthinputs[9,20,23,25]. Otherapproacheshave
tion checks. This makes it infeasible for automated syn-
beenlimitedtoasubsetofinput-transformationoperations
tacticanalysestoreasonaboutthesufficiencyofvalidation
in PHP [4]. The present limitations of symbolic execution
checks in isolation from the rest of the logic. Due to the
tools motivate the need for designing lighter-weight tech-
convenience of their use in the language, developers tend
niques.
to treat strings as a universal type for exchange, both of
code as well as data. Consequently, complex string op- OurApproach. Weproposeadynamicanalysisapproach
erations such as regular expression match and replace are to discover vulnerabilities in web applications called taint
pervasivelyusedbothforparsinginputandforperforming enhanced blackbox fuzzing. Our technique is a hybrid ap-
customvalidationchecks. proach that combines the features of dynamic taint analy-
Third,inmanywebapplicationstheclient-sidecodepe- sis with those of automated random fuzzing. It remedies
riodically sends data to a remote server for processing via the limitations of purely dynamic taint analysis (described
browser interfaces such as XMLHttpRequest, and then above),byusingrandomfuzztestingtogeneratetestcases
operatesonthereturnedresult. Wecallsuchaflowofdata, thatconcretelydemonstratethepresenceofaCSVvulner-
to a server and back, a reflected flow. Client-side analyses ability. Thissimplemechanismeliminatesfalsealarmsthat
facetheinherentdifficultyofdealingwithhiddenprocess- wouldresultfromapurelytaint-basedtool.
ingonremoteserversduetoreflectedflows. Thenumberoftestcasesgeneratedbyvanillablackbox
fuzzingincreasescombinatoriallywiththesizeoftheinput.
Existing Approaches. Fuzzing or black-box testing is a
In our hybrid approach, we use character-level precise dy-
popular light-weight mechanism for testing applications.
namictaintinformationtoprunetheinputsearchspacesig-
However,black-boxfuzzingdoesnotscalewellwithalarge
nificantly. Dynamic taint information extracts knowledge
number of inputs and is often inefficient in exploration of
of the type of sink operation involved in the vulnerability,
theinputspace. Amoredirectedapproachusedinthepast
thereby making the subsequent blackbox fuzzing special-
in the context of server-side code analysis is based on dy-
ized for each sink type (or in other words, be sink-aware).
namic taint-tracking. Dynamic taint analysis is useful for
Taint enhanced blackbox fuzzing scales well because the
identifying a flow of data from an untrusted source to a
resultsofdynamictaintanalysisareusedtocreateindepen-
critical operation. However, dynamic taint-tracking alone
dentabstractionsoftheoriginalapplicationwhicharesmall
alonecannotdetermineiftheapplicationsufficientlyvali-
and take fewer inputs, and can be tested efficiently with
datesuntrusteddatabeforeusingit,especiallywhenparsing
sink-awarefuzzing. Fromourexperiments(Section5),we
andvalidationchecksaresyntacticallyindistinguishable. If
report an average reduction of 55% in the input sizes with
an analysis tool treats all string operations on the input as
theuseofdynamictaintinformation.
parsing constructs, it will fail to identify validation checks
and will report false positives even for legitimate uses (as SummaryofResults. Weimplementourtechniquesintoa
shownbyourexperimentsinSection5). Ontheotherhand, prototype tool called FLAX. So far, FLAX has discovered
11CSVvulnerabilitiesinourpreliminarystudyof40pop-
1OurJavaScriptanalysistechniquestakeablackboxviewoftheserver-
ular real-world JavaScript-intensive programs in the wild,
sidecodecurrently,thoughinthefuturethesecouldbebecombinedwith
existingwhiteboxanalysesofserver-sidecomponents which includes several third-party iGoogle gadgets, websites, AJAX applications and third-party libraries. These userdata(suchasfromformfieldsortextareas)istreated
vulnerabilities were unknown to us prior to the experi- asuntrustedaswell. Untrusteddatacouldentertheclient-
ments. Our findings confirm that CSV vulnerabilities are side code of a web application in three ways. First, data
notmerelyconceptualbutareprevalentinwebapplications from an untrusted web attacker could be reflected in the
today. Ourexperimentalresultsalsoprovideaquantitative honestwebserver’sHTMLresponseandsubsequentlyread
measurementoftheimprovementstaintenhancedblackbox for processing by the client side code. Second, untrusted
fuzzinggainsovervanilladynamictaintanalysisorrandom datafromotherwebsitescouldbeinjectedviathebrowser’s
testinginourapplication. cross-window communication interfaces. These interfaces
includeHTML5’spostMessage,URLfragmentidenti-
SummaryofContributions. Thispapermakesthefollow-
fiers, and window/frame cross-domain properties. Finally,
ingcontributions:
user data fed in through form fields and text areas is also
1. We introduce client-side validation vulnerabilities, a markedasuntrusted.
newclassofbugswhichresultfromunvalidatedusage The first two untrusted sources are concerned with the
ofuntrusteddatainJavaScriptcode. Weprovide em- threat model where the attacker is a remote entity that has
pirical evidence of these vulnerabilities in real-world knowledgeofaCSVvulnerabilityinanhonest(butbuggy)
applications. web application. The attacker’s goal is to remotely ex-
ploitaCSVvulnerabilitytoexecutearbitrarycode,topoi-
2. WebuildaframeworktosystematicallydiscoverCSV
son cookie data (possibly inject session identifiers), or to
vulnerabilitiescalledFLAX,whichhasfound11pre-
issue web application-specific commands on behalf of the
viouslyunknownCSVbugs. Internally,FLAXsimpli-
user. The attack typically only involves enticing the user
fies JavaScript semantics to an intermediate language
into clicking a link of the attacker’s choice (such as in a
that has a simple type system and a small number of
reflectedXSSattack).
operations. This enables dynamic analyses employed
Wealsoconsiderthe“user-as-an-attacker”threatmodel
in FLAX to be implemented in a robust and scalable
wheretheuserdataistreatedasuntrusted. Ingeneral,user
way. Additionally, FLAX is designed to analyze ap-
datashouldnotbeinterpretedaswebapplicationcode. For
plications with reflected flows without the need for a
instance,ifusercaninjectscriptsintotheapplication,such
serveranalysiscomponent.
abugcanbeusedinconjunctionwithothervulnerabilities
3. FLAX employs taint enhanced blackbox fuzzing : a (suchasalogin-CSRFvulnerabilities)inwhichthevictim
hybrid, dynamic analysis approach which combines user is logged-in as the attacker while the application be-
the benefits of dynamic taint analysis and random havior is under attacker’s control [6]. In our view, FLAX
fuzzing. Thistechniqueislight-weightascomparedto shouldmakedevelopersawareoftheexistenceoferrorsin
symbolic execution techniques, has no false positives thisthreatmodel, eventhoughtheseverityofresultingex-
and is scalable enough to use on real-world applica- ploitsisusuallylimitedandvariessignificantlyfromappli-
tions. cationtoapplication.
ThispaperaddressestheproblemoffindingCSVvulner-
2 ProblemDefinition abilitiesinthetargetwebapplicationbygeneratingconcrete
witnessinputs. Theproblemofvulnerabilitydiscoveryhas
twoorthogonalchallenges—exploringtheentirefunction-
Inthissection, weoutlineourthreatmodel, giveexam-
ality of the program, and finding an input that exposes a
ples of CSV vulnerabilities and conceptualize them as a
vulnerabilityinsomeexploredfunctionality. Inthispaper,
class, and define the problem of finding CSV vulnerabili-
wefocussolelyonthesecondchallenge,assumingthatour
ties.
analysis would be driven by an external test harness that
explores the large space of the application’s functionality.
2.1 ThreatModelandProblemDefinition
Specifically, the input to our analysis is a web application
andaninitialbenigninput. Ouranalysisaimstofindanex-
We define a CSV vulnerability as a programming bug
ploit instance by systematically searching the equivalence
which results from using untrusted data in a critical sink
class of inputs that force the program execution down the
operation without sufficient validation. A critical sink is a
samepathasthegivenbenigninput.
point in the client-side code where data is used with spe-
cialprivilege, such as inacode evaluation construct, or as RunningExample. Foreaseofexplanationandconcrete-
an application-specific command to a backend logic or as ness, we introduce a running example of a hypothetical
cookiedata. AJAX chat application. The example application consists
In our analysis, any data which is controlled by an ex- of two windows. The main window, shown in Figure 1,
ternal web principal is treated as untrusted. Additionally, asynchronously fetches chat messages from the backend1: var chatURL = "http://www.example.com/";
2: chatURL += "chat_child.html";
3: var popup = window.open(chatURL);
4: ...
5: function sendChatData (msg) {
6: var StrData = "{\"username\": \"joe\", \"message\": \"" + msg + "\"}";
7: popup.postMessage(StrData, chatURL);
}
Figure 1. An example of a chat application’s JavaScript code for the main window, which fetches
messagesfromthebackendserverathttp://example.com/
server. Another window receives these messages from the structs(suchaseval). Thisclassofattacksiscommonly
main window and displays them, the code for which is referredtoasDOM-basedXSS[27,29].Anexampleofthis
shown in Figure 2. The communication between the two attackisshowninFigure 2online19. Intheexample,the
windowsislayeredonpostMessage2,whichisastring- displaychildwindowusesevaltoserializetheinputstring
based message passing mechanism proposed for inclusion from a JSON format, without validating for its expected
in HTML 5. The application code in the display window structure. Suchattacksareprevalenttodaybecausepopular
has two sources of untrusted data — the data received via data exchange interfaces, such as JSON, were specifically
postMessage that could be sent by any browser win- designed for use with the eval constructs. In Section 5,
dow,andtheevent.originproperty,whichistheorigin we outline additional phishing attacks in iGoogle gadgets
(port,protocolanddomain)ofthesender. layeredonsuchXSSvulnerabilities,toillustratethatawide
rangeofnefariousgoalscanbeachievedoncetheapplica-
2.2 AttacksresultingfromCSVVulnerabilities tionintegrityiscompromised.
Whilesomeofthevulnerabilitiesdescribedbelowhave Command injection. Many AJAX applications use un-
beendiscussedinpreviousresearchliteraturebyleveraging trusted data to construct URL parameters dynamically,
otherwebvulnerabilities,inthissectionweshowthatthey whicharethenusedtodirectXMLHttpRequestrequests
canresultfromCSVvulnerabilitiesaswell. toabackendserver. SeveraloftheseURLparametersfunc-
Origin Mis-attribution. Certain cross-domain commu- tion as application-specific commands. For instance, the
nication primitives such as postMessage are designed chatapplication intheexample sendsaconfirmation com-
to facilitate sender authentication. Applications using mand to a backend script on lines 29-31. The backend
postMessage are responsible for validating the authen- server script may take other application commands (such
ticity of the domain sending the message. The example in as adding friends, creating a chat room, and deleting his-
Figure 2illustratessuchanattackonline13. Thevulnera- tory) similarly from HTTP URL parameters. If the HTTP
bilityarisesbecausetheapplicationchecksthedomainfield requestURLisdynamicallyconstructedbytheapplication
of the origin parameter insufficiently, though the protocol inJavaScriptcode(asdoneonline30)usinguntrusteddata
sub-fieldiscorrectlyvalidated. Thefailedcheckallowsany without validation, the attacker could inject new applica-
domainnamecontaining“example”,includinganattacker’s tion commands by inserting extra URL parameters. Since
domainhostedat“evilexample.com”,tosendmessages. As thevictimuserisalreadyauthenticated,commandinjection
aresult,thevulnerablecodenaivelytruststhereceiveddata allows the attacker to perform unintended actions on be-
eventhoughthedataiscontrolledbyanuntrustedprincipal. half of the user. For instance, the attacker could send ’hi
Intherunningexample, forinstance, anuntrustedattacker &call=addfriend&name=evil’asthemessagewhichcould
cansendchatmessagestovictimusersonbehalfofbenign resultinadding theattacker tothebuddy listofthevictim
users. user.
Code injection. Code injection is possible because
JavaScript can dynamically evaluate both HTML and Cookie-sink vulnerabilities. Web applications often use
script code using various DOM methods (such as cookiestostoresessiondata,user’shistoryandpreferences.
document.write) as well as JavaScript native con- These cookies may be updated and used in the client-side
code. Ifanattackercancontrolthevaluewrittentoacookie
2In the postMessage interface design, the browser is responsible byexploitingaCSVvulnerability,shemayfixthevaluesof
forattributingeachmessagewiththedomain, port, andprotocolofthe
thesessionidentifiers(whichmayresultinasessionfixation
senderprincipalandmakingitavailableasthe“origin”stringpropertyof
themessageevent[7,40] attack)orcorrupttheuser’spreferencesandhistorydata.1:function ParseOriginURL (url) { 17:// Parse JSON into an array object
2: var re=/(.*?):\/\/(.*?)\.com/; 18:function ParseData (DataStr) {
3: var matches = re.exec(url); 19: eval (DataStr);
4: return matches; 20:}
5:} 21:function receiveMessage(event) {
6: 22: var O = ParseOriginURL(event.origin);
7:function ValidateOriginURL (matches) 23: if (ValidateOriginURL (O)) {
8:{ 24: var DataStr = ’var new_msg =(’ +
9: if(!matches) return false; 25: event.data + ’);’;
10: if(!/https?/.test(matches[1])) 26: ParseData(DataStr);
11: return false; 27: display_message(new_msg);
12: var checkDomRegExp = /example/; 29: var backserv = new XMLHttpRequest(); ...;
13: if(!checkDomRegExp.test (matches[2])) { 30: backserv.open("GET","http://example.com/srv.php?
14: return false; } call=confirmrcv&msg="+new_msg["message"]);
15: return true; // All Checks Ok 31: backserv.send();} ... } ...
16:} 32: window.addEventListener("message",
receiveMessage,...);
Figure2.Anexamplevulnerablechatapplication’sJavaScriptcodeforachildmessagedisplaywin
dow,whichtakeschatmessagesfromthemainwindowviapostMessage. Thevulnerablechildmes
sagewindowcodeprocessesthereceivedmessageinfoursteps,asshowninthereceiveMessage
function. First,itparsestheprincipaldomainofthemessagesender. Next,ittriestocheckiftheori
gin’sportanddomainare“http”or“https”and“example.com”respectively. Ifthecheckssucceed,
the popup parses the JSON [3] string data into an array object and finally, invokes a function for
displayingreceivedmessages. Inlines29 31, thechildwindowsendsconfirmationofthemessage
receptiontoabackendserverscript.
analysis. Dynamic taint analysis identifies all uses of un-
trusted data in critical sinks. This analysis identifies two
piecesofinformationabouteachpotentiallydangerousdata
flow: the type of critical sink, and, the fractional part of
theinputthatisinfluencesthedatausedinthecriticalsink.
Specifically,weextracttherangeofinputcharactersIS that
onwhichdataargumentsofasinkoperationS aredirectly
dependent. All statements that operate on data that is di-
Figure3.ApproachOverview
rectly dependent on IS, including path conditions, are ex-
tracted into an executable slice of the original application
3 Approach whichwetermasanacceptorslice(denotedasAS). AS is
termed so because it is a stand-alone program that accepts
allinputsintheequivalenceclassofI,inthesensethatthey
In this section, we present the key design points of our
executethesameprogrampathasI uptothesinkpointS.
approachandexplainourrationaleforemployingahybrid
dynamicanalysistechniqueintoFLAX.
As the second step, we fuzz each AS to find an input that
exploits a bug. Our fuzzing is sink-aware because it uses
the details of the sink node exposed by the taint analysis
3.1 ApproachandArchitecturalOverview
step. FuzztestingonAS semanticallysimulatesfuzzingon
theoriginalapplicationprogram. Usinganacceptorsliceto
Figure 3 gives a high-level view of our approach – the
linkthetwohigh-levelstepshastwoadvantages:
boxed,shadedpartrepresentstheprimarytechnicalcontri-
bution of this work. The input to our analysis is an ini-
• Programsizereduction. AS canbeexecutedasapro-
tialbenigninputandthetargetapplicationitself. Thetech-
gram on its own, but is significantly smaller in size
nique explores the equivalence class of inputs that execute
thantheoriginalapplication. Fromourexperimentsin
thesameprogrampathastheinitialbenigninputandfindsa
Section5,AS istypicallysmallerthantheexecutedin-
flowofuntrusteddataintoacriticalsinkwithoutsufficient
structionsequencebyafactorof1000. Thus,fuzzing
validation.
onaconciseacceptorsliceinsteadoftheoriginalcom-
Approach. Inthefirststep,weexecutetheapplicationwith plex application is a practical improvement. Itavoids
theinitialinputIandperformcharacter-leveldynamictaint applicationrestart,decouplesthetwohigh-levelsteps,andallowstestingofmultiplesinkstoproceedinpar- robust platform for simplified implementation of dy-
allel. namictaintanalysisandotheranalyses.
• Fuzzing search space reduction. Sink-aware fuzzing • Aliasing. Therearenumerouswaysinwhichtwodif-
focusesonlyonIS foreachAS,ratherthantheentire ferent syntactic expressions can refer to the same ob-
input. Additionally,oursink-awarefuzzerhascustom jectatruntime.Thisarisesbecauseofthedynamicfea-
rules for each type of critical sink because each sink turesofJavaScript,suchasreflection,prototype-based
resultsindifferentkindsofattacksandrequiresadif- inheritance,complexscopingrules,functionoverload-
ferent attack vector. As an example, it distinguishes ing, aswellasdue tonumerous exposed interfaces to
evalsinks(whichallowinjectionofJavaScriptcode) access DOM elements. Reasoning about such a di-
fromDOMsinks(whichallowHTMLinjection). Our verse set of syntactic variations is difficult. Previous
sink-aware fuzzing employs input mutation strategies staticanalysistechniquesappliedtothisproblemarea
thatarebasedongrammarssuchastheHTMLsyntax, requiredcomplexpoints-toanalyses[14,17].
JavaScriptsyntax,orURLsyntaxgrammars.
Thisformsoneofthemainmotivationsfordesigning
FLAXasadynamicanalysistool. FLAXdynamically
3.2 TechnicalChallengesandDesignPoints
translates JavaScript operations to JASIL, and by de-
signeachoperand(anobject,variableordataelement)
One of our contributions is to design a framework that
inJASILisidentifiedbyitsallocatedstorageaddress.
simplifies JavaScript analysis and explicitly models re-
WithappropriateinstrumentationoftheJavaScriptin-
flectedflowsandpathconstraints. Weexplaineachofthese
terpreter, we identify element accesses regardless of
designpointsindetailbelow.
the syntactic complexity of the access pattern used in
Modeling Path Constraints. The running example in
thereferences.
Figure 2 shows how validation checks manifest as condi-
tionalchecks, affectingthechoiceofexecutionpathinthe
Dealing with reflected flows. In this paper, we consider
program. Saner, an example of previous work that pre-
dataflowsoftwokinds: directandreflected. Adirectflow
ciselyanalyzesserver-sidecode,hasconsideredonlyinput-
is one where there is a direct data dependency between a
transformationfunctionsassanitizationoperationsinitsdy-
sourceoperationandacriticalsinkoperationinscriptcode.
namicanalysis,therebyignoringbranchconditions[4].Our
Dynamic taint analysis identifies such flows as potentially
techniquesimproveonSaner’sbyexplicitlymodellingpath
dangerous. Areflectedflowoccurswhendataissentbythe
constraints, thereby enabling FLAX to capture the valida-
JavaScript application to a backend server for processing
tion checks as branch conditions, as shown in the running
andthereturnedresultsareusedinfurthercomputationon
exampleintheAS.
the client. Our dynamic taint analysis identifies untrusted
Simplifying JavaScript. There are two key problems in data propagation across a reflected flow using a common-
designinganalysesforJavaScriptcode. substringbasedcontentmatchingalgorithm3. Duringare-
flected flow, data could be transformed on the server. The
• Rich data types and complex operations. JavaScript
exact data transformation/sanitization on the server is hid-
supports complex data types such as string and ar-
denfromtheclient-sideanalysis. Toaddressthis,wecom-
ray, with a variety of native operations on them. The
positionallytesttheclient-sidecodeintwosteps. First,we
ECMA-262specificationdefinesover50operationson
test the client-side code independently of the server-side
stringandarraydatatypesalone[1]. JavaScriptanal-
code by generating candidate inputs that make simple as-
ysis becomes complex because there are several syn-
sumptions about the transformations occurring in reflected
tactic constructs that can perform the same semantic
flows. Subsequently, it verifies the assumption by running
operations. As a simple indicative example, there are
the candidate attack concretely, and reports a vulnerability
severalwaystosplitastringonagivenseparator(such
iftheconcretetestsucceeds.
asbyusingString.split,String.match,String.indexOf,
andString.substring).
4 DesignandImplementation
In our approach, we canonicalize JavaScript opera-
tions and data references into a simplified intermedi-
ate form amenable for analysis, which we call JASIL We describe our algorithm for detecting vulnerabilities
(JAvascript Simplified Instruction Language). JASIL and present details about the implementation of our proto-
hasasimplertypesystemandasmallersetofinstruc- typetoolFLAX.
tions which are sufficient to faithfully express the se-
3Itispossibletocombineclient-sidetainttrackingwithtainttracking
mantics of higher-level operations relevant to the ap-
ontheserver; however,inpresentworkwetakeablackboxviewofthe
plications we study. As a result, JASIL serves as a webserver.HTTP Request/Response Tainting
2
JASIL
Web Server Browser
Trace
XMLHttp
Request/Response
1
5
Fuzzing
4
Candidate Sink-Aware 3
Verification Acceptor
Inputs Random Testing
Figure4.SystemArchitectureforFLAX
4.1 Algorithm
Figure 4 shows the architectural overview of our taint
Input: T : Trace
enhanced blackbox fuzzing algorithm. The pseudocode of
Output: V : AttackStringList
the algorithm is described in Figure 5. At a high level, it
typeFlow:{
consistsof5steps:
varSink,Source: IntList,
1. Dynamic trace generation and conversion to JASIL. varTaintedInsList: IntList,
Run the application concretely in our instrumented varInputOffset: (Int,Int)List
web browser to record an execution trace in JASIL };
form. varFlowList:FlowList;
FlowList=CalculateFlows(T);
2. Dynamictaintanalysis. Performdynamictaintanaly- varCandidates=InputStringList;
sisontheJASILtracetoidentifyusesofexternaldata varV =InputStringList;
in critical sinks. For each such potentially dangerous foreachF inFlowListdo
dataflowintoasinkS,ouranalysiscomputesthepart AS =GenAutomaton(F,T);
oftheuntrustedinput(IS)whichflowsintothecritical Candidates=Fuzz(AS
sink. ,max length,max iters);
foreachC inCandidatesdo
3. Generate an acceptor slice. For each sink S and the
CT =ExecuteOnInput(C)
given associated information about S from the previ-
varResult=VerifyAttack(T,CT)
ousstep,theanalysisextractsanexecutableslice,AS,
ifResultthen
asdefinedinSection3.1.
V.append([F,CT.input]);
4. Sink-awareRandomtesting. Applyrandomfuzzingto end
checkifsufficientvalidationhasbeenperformedalong end
the path to a given sink operation. For a given AS, end
ourfuzzergeneratesrandominputsaccordingtosink- returnV;
specificrulesandcustomattackvectors.
Figure5.AlgorithmforFLAX
5. Verification of candidate inputs. Randomized testing
ofAS generatescandidatevulnerabilityinputsassum-
ing a model of the transformation operations on thex: τ ::= v: τ (Assignment,TypeConversion)
x: τ ::= ∗(v: Ref(τ)) (Dereference)
x: Int::= v1: Intopv1: Int (Arithmetic)
x: Bool::= v1: τ opv1: τ (Relational)
x: Bool::= v1: Boolopv1: Bool (Logical)
x: PC::= if(testvar: Bool)then(c: Int)else(c: Int) (ControlFlow)
x: String::= substring(s: String,startpos: Int,len: Int) (StringOps)
x: String::= concat(s1: String,s2: String) (StringOps)
x: String::= fromArray(s1: Ref(τ)) (StringOps)
x: String::= convert(s1: String) (StringOps)
x: Char∗κ::= convert(i: Int) (CharacterOps)
x: Int::= convert(i: Char∗κ) (CharacterOps)
x: τ ::= F (i1: τ,...,in: τ) (UninterpretedFunctionCall)
Figure6.SimplifiedoperationssupportedinJASILintermediaterepresentation
τ := η|β[η]|Bool|Null|Undef |PC ful to the semantics of the operations as implemented
η:= Int|β therein. In our work, we lower all the native string oper-
β := Ref(τ)|String(κ)|Char(κ) ations,arrayoperations,integeroperations,regularexpres-
κ:= UTF8|UTF7|... sionbasedoperations,globalobjectfunctions,DOMfunc-
tions, and the operations on native window objects. Low-
Figure 7. Type system of JASIL intermediate ering to JASIL simplifies analyses. For instance, consider
representation aString.replaceoperationinJavaScript. Intuitively,
areplaceoperation retainssomepartsofitsinputstringin
itsoutputwhiletransformingtheotherpartswithspecified
serverthatmayoccurinreflectedflow. Thisfinalstep strings. An execution of the replace operation can be re-
verifies that the assumptions hold, by testing the at- placedbyaseriesofsubstringoperationsfollowedbyafinal
tacks concretely on the web application and checking concatenation of substrings. With JASIL, subsequent dy-
thattheattacksucceedsbyusingabrowser-basedora- namictaintanalysisisgreatlysimplifiedbecausethetaint-
cle. ingengineonlyneedstoreasonaboutsimpleoperationslike
substringextractionandconcatenation.
Inadditiontoloweringsemanticsofcomplexoperations,
4.2 JASIL JASIL explicitly models procedure call/return semantics,
parameter evaluation, parameter passing, and object cre-
To simplify further analysis, we lower the semantics of ationanddestruction. Propertylook-upsonJavaScriptob-
the JavaScript language to a simplified intermediate repre- jects and accesses to native objects such as the DOM or
sentation which we call JASIL. JASIL is designed to have windowobjectsareconvertedtooperationsonafunctional
asimpletypesystemwithaminimalnumberofoperations map in JASIL (denoted by β[η] in its type system). This
onthedefineddatatypes. Abriefsummaryofitstypesys- canonicalization of references makes further analysis eas-
tem and categories of operations are outlined in Figure 7 ier.
and Figure 6 respectively. JavaScript interpreters already In JASIL, each object, variable or data element is iden-
perform some amount of semantic lowering in converting tified by its allocated storage address, which obviates the
to internal bytecode. However, the semantics of typical needtoreasonaboutmostformsofaliasing. Asoneexam-
JavaScript bytecode are not substantially simpler, because pleofhowthissimplificationallowsrobustreasoning,con-
most of the complexity is hidden in the implementation of siderthecaseofprototype-basedinheritanceinJavaScript.
therichnativeoperationsthattheinterpreter’sruntimesup- In JavaScript, whenever an object O is created, the ob-
ports. ject inherits all the properties of a prototype object corre-
JASIL has a substantially smaller set of operations, spondingtotheconstructorfunction,accessiblethroughthe
shown in Figure 6. In our design, we have found JASIL .prototypepropertyofthefunction(functionsarefirst-
to be sufficient to express the operational semantics of a class types in JavaScript and behave like normal objects).
subset of JavaScript commonly used in real applications. The prototype object of the constructor function could in
Our design is implemented using WebKit’s JavaScript in- turninheritfromotherprototypeobjectsdependingonhow
terpreter, the core of the Safari web browser, and is faith- theyarecreated.WhenareferenceO.fisresolved,thefieldCriticalFlowSinks ResultingExploit
Sources eval(),window.execScript(),
window.setInterval(), Scriptinjection
window.setTimeout()
document.URL document.write(...),document.writeln(...),
document.URLUnencoded document.body.innerHtml,document.cookie
document.location.* document.forms[0].action, HTMLcodeinjection
document.referrer.* document.create(),document.execCommand(),
window.location.* document.body.*,window.attachEvent(),
event.data document.attachEvent()
event.origin document.cookie Sessionfixationattacks
textbox.value XMLHttpRequest.open(,url,), CommandInjectionand
forms.value document.forms[*].action, parameterinjection
Figure8.(Left)Sourcesofuntrusteddata. (Right)Criticalsinksandcorrespondingexploitsthatmay
resultifuntrusteddataisusedwithoutpropervalidation.
fis firstlooked up in theobject O. Ifitisnot found, itis character-levelprecise.
lookedupintheprototypeobjectofOandinthesubsequent
We list the taint sources and sinks used by default in
objects of the prototype chain. Thus, determining which
FLAX in Figure 8. FLAX models only direct data de-
objectisreferencedbyOstaticallyrequiresacomplexalias
pendencies for this step; additional control dependencies
analysis. InsimplifyingtoJASIL,weinstrumentedthein-
forpathconditionsareintroducedduringAS construction.
terpreter to record the address identifier for each variable
It performs taint-tracking offline on the JASIL execution
used after the reference resolution process (including the
trace, which reduces the intrusiveness of the instrumen-
scopeandprototypechaintraversals)iscompleted. There-
tation by not requiring transformation of the interpreter’s
fore, further analysis does not need any further reasoning
coresemanticstosupporttaint-tracking. Inourexperience,
aboutprototypesorscopes.
thishasresultedinamorerobustimplementationthanour
TocollectaJASILtraceofawebapplicationforanaly-
previous work on online taint-tracking [29]. Taint propa-
sis we instrumented the browser’s JavaScript interpreter to
gation rules are straight-forward — assignment and arith-
translate the bytecode executed at runtime to JASIL. This
metic operations taint the destination operand if one of
required extensive instrumentation of the JavaScript inter-
the input operands is tainted, while preserving character-
preter,bytecodecompilerandruntime,resultinginapatch
level precision. The JASIL string concatenation and
of6032linesofC++codetothevanillaWebKitbrowser.To
substringoperationsresultinamergeandslicingoper-
facilitaterecoveringJavaScriptsourceformfromtheJASIL
ationover theranges oftainteddataintheinputoperands,
representation,auxiliaryinformationmappingthedynamic
respectively. The convert operation, which imple-
allocation addresses to native object types is embedded as
ments character-to-integer and integer-to-character con-
metadataintheJASILtrace.
version, typically results from simplifying JavaScript en-
code/decodeoperations(suchasdecodeURI).Taintprop-
4.3 Dynamictaintanalysis agationrulesforconvertaresimilar:theoutputistainted
iftheinputistainted.Othernativefunctionsthatarenotex-
plicitly modeled are treated as uninterpreted transfer func-
Character-levelprecisemodelingofstringoperationse-
tions,actingmerelytotransfertaintfrominputparameters
mantics. JavaScriptapplicationsarearray-andstring-cen-
tooutputparametersinaconservativeway.
tric;loweringofJavaScripttoJASILisakeyfactorinrea-
soningaboutcomplexstringoperationsinourtargetappli- Tracking data in reflected flow. During this anal-
cations. Dynamic taint analysis has been used with suc- ysis data may be sent to a backend server via the
cessinseveralsecurityapplicationsoutsideoftherealmof XMLHttpRequest object. We approximate taint propa-
JavaScript applications [31,32,43]. For JavaScript, Vogt gation across such network data flows by using an exact
et al. have previously developed taint-tracking techniques substring match algorithm, which is a simplified form of
to detect confidentiality attacks resulting from cross-site black-boxtaintinferencetechniquesproposedintheprevi-
scriptingvulnerabilities[39]. Incontrasttotheirwork,our ous literature [33,34]. We record all tainted data sent in
techniquesmodelthesemanticsofstringoperationsandare a reflected flow, and perform a longest common substringfunction acceptor (input) {
var path_constraints = true;
http://evilexample.com/ /(.*?):\/\/(.*?)\.com/
var re = /(.*?):\/\/(.*?)\.com/;
var matched = re.exec(input);
if (matched == null) {
exec
path_constraints = path_constraints & false;
}
if (!path_constraints) return false;
var domain = matched[2];
http evilexample
var valid = /example/.test(domain);
http://
path_constraints = path_constraints & valid; evilexample.
com
if (!path_constraints) return false;
var port = matched[1]; /https?/ test test /example/
valid = /https?/.test(port);
path_constraints = path_constraints & valid;
if (!path_constraints) return false;
return true; True True
}
Figure9.(Left)AcceptorSliceshowingvalidationandparsingoperationsonevent.originfieldin
the running example. (Right) Execution of the Acceptor Slice on a candidate attack input, namely
http://evilexample.com/
match on the data returned. Any matches that are above a pendencies, i.e., all path constraints, conditions of which
threshold length are marked as tainted, and the associated aredirectlydatadependentonIS. Pathconstraintsarecon-
taintmetadataispropagatedtothereflecteddata. Thistech- ditional checks corresponding to each branch point which
niquehasprovedsufficientfortheAJAXapplicationsinour force the execution to take the same path as IS. Data val-
experiments. ueswhicharenotdirectlydatadependent(markedtainted)
in the original execution, are replaced with their concrete
Implicit Sinks. Certain source operations do not have ex-
constantvaluesobservedduringtheprogramexecution.
plicit sink operations. For instance, in our running exam-
ple (Figure 2) the event.origin field has no explicit Acceptor Slice for the Running Example. The instruc-
sink. However, this field must be sanitized before any use tionsoperatingontheevent.originintherunningex-
of event.data. We model this case of implicit depen- ample that influences the implicit eval sink is shown in
dence between two fields by introducing an implicit sink Figure 9. It shows the AS for the the event.origin
node for event.origin at any use of event.data fieldofourexample,aftercertainoptimizations,likedead-
in critical sink operation. This has the effect that for code elimination. This program models all the validation
any use of event.data, the path constraint checks on checks performed on that field, until its use in the implicit
event.origin are implicitly included in the acceptor sinknodeateval.
slice.
4.5 Sink awarefuzzing
4.4 AcceptorSliceConstruction
Thisstepinouranalysisperformsrandomizedtestingon
After dynamic taint analysis identifies a sink point, each AS. Note that each critical sink operation can result
FLAX extracts a dynamic executable slice from the pro- in a different kind of vulnerability. Therefore, it is useful
gram, by walking backwards from the critical sink to the to target each sink node (S) with a set of specialized at-
source of untrusted data. In order to fuzz the slice, the tackvectors. Forinstance,anuncheckedflowthatwritesto
JASIL slice is converted back to a stand-alone JavaScript theinnerHTMLpropertyofaDOMelementcanresultin
function. Thisresultsinanexecutablefunctionthatretains HTML code injection and our fuzzer attempts to inject an
the operations on IS, and returns true for any input that HTMLtagintosuchasink. Forevalsink,ourtestingtar-
executesthesamepathastheoriginalrun. Theslicingop- getstheinjectionofJavaScriptcode.Weincorporatealarge
eration captures (a) data dependencies, i.e., all operations corpusofpubliclyavailableattackvectorsforXSS[19]in
directlyprocessingIS and(b)alimitedformofcontrolde- ourfuzzing.While testing for an attack input that causes AS to re- gadget initspage. To explore each application’s function-
turntrue,ourfuzzerutilizestheaforementionedattackvec- ality, we entered data into text boxes, clicked buttons and
torsandagrammar-awarestrategy. Startingwiththeinitial hyperlinks,simulatingthebehaviorofanormaluser.
benigninput,thefuzzeremploysamutation-basedstrategy Google gadgets constitute the largest fraction of our
totransform, prependandappendslanguagenonterminals. study because they are representative of third-party appli-
Foreachchoice,thefuzzerfirstselectsterminalcharacters cations popular among internet users today. Most gadgets
basedontheknowledgeofsurroundingtext(suchasHTML arereportedtohavethousandsofuserswithoneofthevul-
tags,JavaScriptnonterminals)andfinallyresortstorandom nerablegadgetshavingover1,350,000users,asperthedata
charactersifthegrammar-awarestrategyfailstofindavul- available from the iGoogle gadget directory on December
nerability. 17th 2009 [2]. TheotherAJAXapplicationsconsistofso-
To check if a candidate attack input succeeds we use a cialnetworkingsites, chatapplicationsandutilitylibraries
browser-based oracle. Each candidate input is executed in which are examples of the trend towards increasing code
AS andthetestoracledeterminesifthespecificattackvec- sharing via third-party libraries. All tests were performed
torisevaluatedornot. Ifexecuted,theattackisverifiedas usingourFLAXframeworkrunningonaUbuntu8.04plat-
being a concrete attack instance. For instance, in our run- formwitha2.2GHz,32-bitInteldual-coreprocessorand2
ning example, the event.origin acceptor slice returns GBofRAM.
true for any URL principal which is not a subdomain of
http://example.com4. Our fuzzer tries string muta- 5.2 ExperimentalResults
tionsoftheoriginaldomainhttp://example.comand
quicklydiscoversthatthereareotherdomainsthatcircum- FLAX found several distinct taint sinks in the applica-
ventthevalidationchecks. tions,onlyasmallfractionofwhicharedeemedvulnerable
by the tool. Column 2 and 3 of Table 1 reports the num-
berofdistinctsinksandnumberofvulnerabilitiesfoundby
5 Evaluation
FLAXrespectively. Theuseofcharacter-levelprecisetaint
trackinginFLAXprunesasignificantfractionoftheinput
Our primary objective is to determine if taint enhanced
in several cases for further testing. To quantitatively mea-
blackbox fuzzing is scalable enough to be used on real-
sure this saving we observe the average sizes of the orig-
worldapplicationstodiscovervulnerabilities. Asasecond
inal input and the reduced input size in the acceptor slices
objective, we aim to quantitatively measure the benefits of
(usedforsubsequentfuzzing),whichisreportedincolumns
taintenhancedblackboxfuzzingovervanillataint-tracking
4and5ofTable1respectively. Wemeasurethereduction
andpurelyrandomtesting. Inourexperiments,FLAXdis-
in the acceptor size, which results in substantial practical
covers11previouslyunknownvulnerabilitiesinrealappli-
efficiencies in subsequent black-box fuzzing. We find that
cations and our results show that our design of taint en-
theacceptorslicesaresmallenoughtooftenenablemanual
hanced blackbox fuzzing offers significant practical gains
analysis for a human analyst. Columns 6 and 7 report the
overvanillataint-trackingandfuzzing. Wealsoinvestigate
sizeofdynamicexecutiontraceandtheaveragesizeofthe
thesecurityimplicationsofthevulnerabilitiesbyconstruct- acceptor slices respectively5. The last two columns in Ta-
ing proof-of-concept exploits and we discuss their varying
ble1showthenumberoftestcasesittakestofindthefirst
severityinthissection.
vulnerability in each application and the kinds of vulnera-
bilityfound.
5.1 TestSubjects
5.2.1 PrevalenceofCSVvulnerabilities
We selected a set of 40 web applications consisting of
Ofthe18applications inwhichFLAXobserved adanger-
iGoogle gadgets and other AJAX applications for our ex-
ousflow,itfoundatotalof11vulnerabilitieswhichwere-
periments. Of these, FLAX observed untrusted data flows
portinthethirdcolumnofTable1. Thevulnerabilitiesare
intocriticalsinksforonly18ofthecases,consistingof13
evidence of a broad range of attack possibilities, as con-
iGooglegadgetsand5webapplications. Wereportdetailed
ceptualizedinSection2, thoughcodeinjectionvulnerabil-
resultsforonlythese18applicationsinTable1. Wetested
ities were the highest majority. FLAX reported 8 code in-
eachsubjectapplicationmanuallytoexploreitsfunctional-
jection vulnerabilities, 1 origin mis-attribution vulnerabil-
ity,givingbenigninputstoseedourautomatedtesting. For
ity,1cookie-sinkvulnerabilityand1applicationcommand
instance,alloftheiGooglegadgetsweretestedbyvisiting
thebenignURLusedbytheiGooglewebpagetoembedthe 5In our implementation, the acceptor slices are converted back to
JavaScriptformforfurtheranalysis:thesizeofacceptorslicesincreasesas
4Recall that the running example acceptor does not have an explicit aresultofthisconversionbyafactorof4atmostinourimplementation,
sink,thereforeonlyreturntrueonsuccessandfalseotherwise. ascomparedtothenumbersreportedincolumn7Name #of Verified Sizeof Sizeof TraceSize Avg.size #ofTests VulnerabilityType
TaintSinks Vuln. TotalInputs Acceptor (#ofinsns) ofAS toFind
Inputs 1stVuln.
Plaxo 178 0 119 60 557,442 36 - -
Academia 1 1 334 21 156,621 286 16 OriginMis-attribution
FacebookChat 44 0 127 127 6,460,591 1,151 - -
ParseURI 1 1 78 62 55,179 638 6 Codeinjection
AjaxIM 20 2 28 28 223,504 517 93 Codeinjection,Application
CommandInjection
AskAWord 3 1 26 26 59,480 611 93 CookieSink
BlockNotes 1 1 474 96 11,539 766 28 Codeinjection
BirthdayReminder 6 0 632 246 2,178,927 664 - -
CalorieWatcher 3 0 681 20 449,214 733 - -
ExpensesManager 6 0 1,137 65 522,788 1,454 - -
MyListy 1 1 578 47 17,054 1,468 4 Codeinjection
NotesLP 5 0 740 30 144,829 3,327 - -
ProgressBar 151 0 496 264 118,108 475 - -
SimpleCalculator 1 1 27 27 72,475 4 93 Codeinjection
TodoList 1 0 632 40 647,849 1,181 - -
TVGuide 2 1 586 66 24,144,843 188 8,366 Codeinjection
WordMonkey 1 1 26 26 237,837 99 93 Codeinjection
ZipCodeGas 5 1 412 69 410,951 248 2 Codeinjection
Table 1. Applications for which FLAX observed untrusted data flow into critical sinks. The top 5
subjectapplicationsarewebsitesandtherestareiGooglegadgets.
injection vulnerability. We confirmed that all vulnerabili- alyzedemployedsufficientvalidation–forinstance, Face-
tiesreportedweretruepositivesbymanuallyinspectingthe book Chat application correctly validates the origin prop-
JavaScriptcodeandconcretelyevaluatingthemwithexploit erty of every postMessage event it received in the exe-
inputs. The severity of the vulnerabilities varied by appli- cution. Several other applications validate the structure of
cation and source of untrusted input, which we discuss in theinputbeforeusingitinaJavaScriptevalstatementor
section5.2.3. strip dangerous characters before using it in HTML code
evaluationsinks.
5.2.2 Effectiveness Efficiency of sink-aware fuzzing. Table 1 (column 8)
shows the number of test cases FLAX generated before it
We quantitatively measure the benefits of taint enhanced
found the vulnerability for the cases it deems unsafe. Part
blackbox fuzzing over vanilla taint-tracking and random
of the reason for the small number of cases on average, is
fuzzingfromourexperimentalresults.
thatourfuzzingleveragesknowledgeofthesinkoperations.
False Positives Comparison. The second column in Ta-
Column 4 of the Table 1 shows that the size of the origi-
ble 1 shows the number of distinct flows of untrusted data
nalinputsformostapplicationsisintherangeof100-1000
into critical sink operations observed; only a fraction of
characters. Slicingonthetainteddataprunesawayasignif-
thesearetruepositives.Eachofthesedistinctflowsisanin-
icant portion of the input space, as seen from column 5 of
stancewhereaconservativetaint-basedtoolwouldreporta
Table 1. We report an average reduction of 55% from the
vulnerability. Incontrast,thesubsequentstepofsink-aware
originalinputsizetothesizeoftestinputusedinacceptor
fuzzinginFLAXeliminatesthespuriousalarms,andavul-
slices.
nerability is reported (column 3 of Table 1) only when a
Further, the average size of an acceptor slice (reported
witness input is found. It should be noted that FLAX can
incolumn7ofTable1)issmallerthantheoriginalexecu-
havefalsenegativesandcouldhavemissedbugs,butcom-
tion trace by approximately 3 orders of magnitude. These
pletenessisnotanobjectiveforFLAX.
reductionsintestprogramsizeforsink-awarefuzzingallow
We manually analyzed the taint sinks reported as safe
sink-awarefuzzingtoworkwithmuchsmallerabstractions
by FLAX and, to the best of our ability, found them to be
oftheoriginalapplication, therebysignificantlyimproving
truenegatives. Forinstance,wedeterminedthatmostofthe
theefficiencyofthisstep.
sinks reported for the Plaxo case were due to code which
outputthelengthoftheuntrustedinputtotheDOM,which Qualitative comparison to other approaches. Figure 10
executedrepeatedlyeachtimetheusertypedacharacterin shows one of the several examples that FLAX gener-
the text box. Many of the true negatives we manually an- ates which can not be directly expressed to the languagesfunction acceptor(input) { (AjaxIM), and one URL parsing library’s demonstration
//input = ’{"action":"","val":""}’; page. Wemanuallyverifiedthatalloftheseweretruepos-
must_match = ’{]:],]:]}’;
itives and resulted in script execution in the context of the
re1 =/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
re2 =/"[ˆ"\\\n\r]*"|true|false|null| vulnerabledomains,whentheuntrustedsourcewassetwith
-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; amaliciousvalue. Fourofthecodeinjectionvulnerabilities
re3 = /(?:ˆ|:|,)(?:\s*\[)+/g; wereexploitablewhenremoteattackersenticetheuserinto
rep1 = input.replace(re1, "@");
clicking a link of an attacker’s choice. The affected web
rep2 = rep1.replace(re2, "]");
rep3 = rep2.replace(re3,""); applicationswerealsoavailableasiGooglegadgetsandwe
if(rep3 == must_match) { return true; } discuss an a gadget overwriting attack using the CSV vul-
return false;
nerabilitiesbelow. Theremaining4codeinjectionvulnera-
}
bilitieswereself-XSSvulnerabilitiesastheuntrustedinput
sourcewasuser-inputfromaformfield,atextbox,oratext
Figure 10. An example of a acceptor slice
area. As explained in section 2.1, these vulnerabilities do
whichusescomplexstringoperationsforin
not directly empower a remote attacker without additional
put validation, which is not directly express
social engineering (such as enticing users into copy-and-
ibletotheoff the shelfstringdecisionproce
pasting text). All gadget developers we were directly able
duresavailabletoday.
tocommunicatewithpositivelyacknowledgedtheconcern
andagreedtopatchthevulnerabilities.
Gadget Overwriting Attacks. In a gadget overwriting at-
supported by off-the-shelf existing string decision proce-
tack,aremoteattackercompromisesagadgetandreplaces
dures[21,25],whichFLAXdeemsassafe. Webelievethat
it with the content of its choice. We assume the attacker
even human analysis for such cases is tedious and error-
isanentitywhichcontrolsaweb-siteandhastheabilityto
prone.
enticethevictimuserintoclickingamaliciouslink. Wede-
scribeagadgetoverwritingattackwithanexampleofhow
5.2.3 SecurityImplicationEvaluationandExamples itcanbeusedtocreateaphishingattacklayeredonthegad-
get’sCSVvulnerability. Inagadgetoverwritingattack,the
To gain insight into their severity we further analyzed the
victim clicks an untrusted link, just as in a reflected XSS
vulnerabilities reported by FLAX and created proof-of-
attack,andseesapagesuchastheoneshowninFigure11
concept exploits for a few of them to validate the threat.
in his browser. The URL bar of the page points to the le-
All vulnerabilities were disclosed to the developers either
gitimateiGooglewebsite,butthegadgethasbeencompro-
throughdirectcommunicationorthroughCERT.
mised and displays attacker’s contents: in this example, a
Origin Mis-attribution in Facebook Connect. FLAX phishing loginbox whichtempts theusertogive away his
reported an origin mis-attribution vulnerability for credentials for Google. If the user enters his credentials,
academia.edu, a popular academic collaboration and theyaresenttotheattackerratherthanGoogleorthegad-
document sharing web site used by several academic get’swebsite. Theattackmechanicsareasfollows. First,
universities. FLAX reported that the application was vul- thevictimvisitstheattacker’slinkwhichpointstothevul-
nerable due to a missing validation check on the origin nerablegadgetdomain(typicallyhostedatasubdomainof
property of a received postMessage event. We manually gmodules.com).ThelinkexploitsacodeinjectionCSVvul-
createdaproof-of-conceptexploitwhichdemonstratesthat nerabilityinthegadgetandtheattackpayloadisexecutedin
any remote attacker could inject arbitrary script code into thecontextofthegadget’sdomain. Theattacker’spayload
the vulnerable web application. On further analysis, we thenspawnsanewwindowwhichpointstothefulliGoogle
found that the vulnerability existed in the code for Face- webpage(http://www.google.com/ig)containing
bookConnectlibrary, whichwasusedbyacademia.edu as severalgadgetsincludingthevulnerablegadgetinseparate
well as several other web applications. We disclosed the iframes. Lastly,theattacker’spayloadreplacesthecon-
vulnerability to Facebook developers on December 15th tent of the vulnerable gadget’s iframe in the new window
2009andtheyreleasedapatchforthevulnerabilitywithin withcontentsofitschoice. Thiscross-windowscriptingis
6hoursofthedisclosure. permitted by browser’s same-origin policy because the at-
tacker’s payload and the gadget’s iframe principal are the
CodeInjection. FLAXreported8codeinjectionvulnera-
same.
bilities(DOM-basedXSS)inourtargetapplications,where
untrustedvalueswerewrittentocodeevaluationconstructs We point out thatGoogle/IG isdesigned such thateach
in JavaScript (such as eval, innerHTML). One DOM- iGooglegadgetrunsasaseparatesecurityprincipalhosted
based XSS vulnerability was found on each of the follow- at a subdomain of http://gmodules.com. This mitigation
ing: 6 distinct iGoogle gadgets, an AJAX chat application prevents an attacker who compromises a gadget fromhav-Figure11.AgadgetoverwritingattacklayeredonaCSVvulnerability. Theuserclicksonanuntrusted
linkwhichshowstheiGooglewebpagewithanoverwritteniGooglegadget. TheURLbarcontinues
topointtotheiGooglewebpage.
ing any access to the sensitive data of the google.com do- sponsewithoutanyclient-sideorserver-sidevalidation. We
main. In the past, Barth et al. described a related attack, subsequently informed the developers about the cookie at-
calledagadgethijackingattack,whichallowsattackers6 to tributeinjectionandthereflectedXSSvulnerabilitythrough
stealsensitivedatabynavigatingthegadgetframetoamali- thecookiechannel,andthedeveloperspatchedthevulner-
cioussite[7].Barthetal.proposednewbrowserframenav- abilityonthesameday.
igation policies to prevent these attacks. Gadget overwrit-
ingattacksresultingfromCSVvulnerabilitiesinvulnerable Application Command Injection. One vulnerability re-
gadgets can also allow attacker to achieve the same attack portedbyFLAXforAjaxIMchatapplicationindicatedthat
objectives as those remedied by the defenses proposed by such bugs can result in practice. FLAX reported that un-
Barthetal.[7]. trusted data from an input text box could be used to inject
applicationcommands. AjaxIMusesuntrusteddatatocon-
Cookie-sinkVulnerabilities. FLAXreportedacookiecor-
structaURLthatdirectsapplication-specificcommandsto
ruption vulnerability in one of AskAWord iGoogle gad-
itsbackendserverusingXMLHttpRequest. Thesecom-
getswhichprovidetheAskAWord.comdictionaryandspell
mandsincludeadding/deletingchatrooms,adding/deleting
checkerservice. FLAXreportedthatthecookiedatacould
friends and changing the user’s profiles. FLAX dis-
be corrupted with arbitrary data and additional cookie at-
covered a vulnerability where an unsanitized input from
tributescouldbeinjected, whichisalowseverityvulnera-
an input-box is used to construct the URL that sends a
bility. However,onfurtheranalysis,wefoundthatthegad-
GET request command to join a chat room. An attacker
get used the cookie to store the user’s history of previous
can exploit this vulnerability by injecting new parame-
searcheswhichwasechoedbackontheserver’sHTMLre-
ters (key-value pairs) to the URL. A benign command re-
questURLtojoinachatroomnamed‘friends’inAjaxIM
6AgadgetattackerdescribedbyBarthetal.requirestheprivilegethat
is of the form ajaxim.php?call=joinroom&room=friends.
theintegratorembedsagadgetoftheattackerchoice,whichisdifferent
fromtheattackermodelinagadgetoverwritingattack We confirmed that by providing a room name as‘friends&call=addbuddy&buddy=evil’ results in overrid- 43]. However,applyingthesetodiscoverattacksisdifficult
ing the value of the call command from ‘joinroom’ to a becausereasoningaboutvalidationchecksisimportantfor
commandthataddsanuntrusteduser(called“evil”)tothe precision. CertaintoolssuchasPHPTaint[38]approximate
victim’sfriendlist. this by implicitly clearing the taint when data is sanitized
Theseverityofthisvulnerabilityisverylimitedasitdoes usingabuilt-insanitizationroutine.
notallowaremoteattackertoexploitthebugwithoutaddi-
Directed random testing. Our taint enhanced blackbox
tionalsocialengineering. However,weinformedthedevel-
fuzzing technique shares some of the benefits of a related
opers and they acknowledged the concern agreeing to fix
techniquecalledtaint-baseddirectedwhiteboxfuzzing[15].
thevulnerability.
Both techniques use taint information to narrow down the
space of inputs that are relevant; however, our technique
6 RelatedWork usestheknowledgeofthesinktoperformadirectedblack-
boxanalysisforthevulnerabilityasopposedtotheirwhite-
boxanalysisduetothelimitationofcurrentdecisionproce-
CSVvulnerabilitiesconstituteattackcategoriesthathave
dures in our application domain. Techniques developed in
similarcounterpartsinserver-sideapplicationlogic—this
thispaperarerelatedtodynamicsymbolicexecutionbased
hasdrivenamajorityoftheresearchonwebvulnerabilities
approaches[11,12,16,21]whichusedecisionproceduresto
to analysis of server-side logic written in languages such
exploretheprogramspaceoftheapplication. Asdiscussed
asPHP.First,wediscussthetechniquesemployedinthese
earlier,automateddecisionproceduresfortheoryofstrings
andcompareitourtaintenhancedblackboxfuzzing. Next,
today do not support the expressiveness to directly solve
wecomparethebenefitsofourapproachwithpurelytaint-
practicalconstraintsweobserveinrealJavaScriptapplica-
based analysis approaches, and other semi-random testing
tions. Incomparison, ourtaintenhancedblackboxfuzzing
based approaches. Finally, we discuss the recent frame-
algorithm is a lighter-weight mechanism which, in prac-
worksproposedforanalysisofJavaScriptapplications.
tice, efficiently combines the benefits of taint-based anal-
Server-sidevulnerabilities. XSS,SQLinjection,directory yseswithrandomizedtestingtoovercomethelimitationsof
traversal,cross-siterequestforgeryandcommandinjection decision-procedurebasedtools.
havebeenthemostimportantkindofwebvulnerabilitiesin
JavaScript analysis frameworks. Several works have re-
the last few years [36]. Techniques including static anal-
centlyappliedstaticanalysisonJavaScriptapplications[14,
yses [22,24], model checking [28], mixed static-dynamic
17]. Incontrast,wedemonstratethepracticaleffectiveness
analyses[4],aswellasdecisionprocedurebasedautomated
ofacomplimentarydynamicanalysistechniqueandweex-
analyses[21,25]havebeendevelopedforserver-sideappli-
plain the benefits of our analyses over their static counter-
cationswritteninPHPandJava. Ofthesetechniques,only
parts. GateKeeper enforces a different set of policies us-
afewworkshaveaimedtopreciselyanalyzecustomvalida-
ingstatictechniqueswhichmayleadtofalsepositives. Re-
tionroutines. Balzarottietal. werethefirsttoidentifythat
centframeworksfordynamicanalyses [44]havebeenpro-
theuseofcustomsanitizationcouldbeanimportantsource
posedforsource-levelinstrumentationforJavaScript;how-
of both false positives and negatives for analysis tools in
ever, source-level transformations are much harder to rea-
theirworkonSaner[4]. Theproposedapproachusedstatic
sonaboutinpracticeduetothecomplexityoftheJavaScript
techniques for reasoning about multiple paths effectively.
language.
However,thesanitizationanalysiswaslimitedtoasubsetof
Browser vulnerabilities. CSV vulnerabilities are related
stringfunctionsandignoredvalidationchecksthatmanifest
to, but significantly different from browser vulnerabili-
asconditionalconstraintsontheexecutionpath. Thoughan
ties [5,7,13,41]. Research on these vulnerabilities has
areaofactiveresearch,themorerecentstringdecisionpro-
largelyfocusedonbetterdesignsofinterfacesthatcouldbe
ceduresdonotyetsupportthefullgeneralityofconstraints
usedsecurelybymutuallyuntrustedprincipals. Inthispa-
we practically observed in our JavaScript subject applica-
per, we showed how web application developers use these
tions [9,21,25].
abstractions,suchasinter-framecommunicationinterfaces,
Dynamictaintanalysisapproaches. Vogtetal. havede-
inaninsecureway.
velopedtaint-analysistechniquesforJavaScripttostudythe
problem of confidentiality attacks resultingfromXSS vul-
7 Conclusion
nerabilities [39]. In addition to the features provided by
theirwork,ourtaint-trackingtechniquesarecharacter-level
precise and accurately model the semantics of string oper- Thispaperpresentsanewclassofvulnerabilities,which
ations as our application domain requires such precision. we call CSV vulnerabilities. We proposed a hybrid ap-
Purelydynamictaint-basedapproacheshavebeenusedfor proachtoautomaticallytestJavaScriptapplicationsforthe
runtimedefenseagainstwebattacks [18,29,32,35,37,38, presenceofthesevulnerabilities. Weimplementedourap-proachinaprototypetoolcalledFLAX.FLAXhasdiscov- GI International Conference on Detection of Intrusions &
eredseveralreal-worldbugsinthewild,whichsuggeststhat Malware,andVulnerabilityAssessment,2008.
such tools are valuable resources for security analysts and [9] N.Bjorner,N.Tillmann,andA.Voronkov. Pathfeasibility
developers of rich web applications today. Results from analysisforstring-manipulatingprograms. InTACAS’09:
Proceedingsofthe15thInternationalConferenceonTools
running FLAX provide key insight into the prevalence of
and Algorithms for the Construction and Analysis of Sys-
this class of CSV vulnerabilities with empirical examples,
tems,2009.
and point out several implicit assumptions and program-
[10] S.W.BoydandA.D.Keromytis.SQLrand:PreventingSQL
mingerrorsthatJavaScriptdeveloperstodaymake.
injectionattacks. InProceedingsofthe2ndAppliedCryp-
tographyandNetworkSecurity(ACNS)Conference, pages
8 Acknowledgments 292–302,2004.
[11] C. Cadar, D. Dunbar, and D. R. Engler. Klee: Unassisted
andautomaticgenerationofhigh-coveragetestsforcomplex
WethankAdamBarth,StephenMcCamant,AdrianMet-
systemsprograms. InOSDI,2008.
tler, JoelWeinberger, MatthewFinifter, Devdatta Akhawe,
[12] C.Cadar,V.Ganesh,P.M.Pawlowski,D.L.Dill,andD.R.
JuanCaballeroandMinGyungKangforhelpfulfeedback
Engler. EXE:Automaticallygeneratinginputsofdeath. In
onthepaperatvariousstages. Wearealsothankfultoour
CCS,2006.
anonymous reviewers for suggesting improvements to our
[13] S.Chen,D.Ross,andY.-M.Wang. Ananalysisofbrowser
work. This work is being done while Pongsin Poosankam domain-isolation bugs and a light-weight transparent de-
is a visiting student researcher at University of California, fense mechanism. In Proceedings of the 14th ACM con-
Berkeley. This material is based upon work partially sup- ferenceonComputerandCommunicationsSecurity, pages
ported by the National Science Foundation under Grants 2–11,NewYork,NY,USA,2007.ACM.
No. 0311808, No. 0448452, No. 0627511, and CCF- [14] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged
0424422, by the Air Force Office of Scientific Research informationflowforJavaScript. InPLDI,2009.
under Grant No. 22178970-4170, and by the Army Re- [15] V. Ganesh, T. Leek, and M. Rinard. Taint-based directed
whitebox fuzzing. In Proceedings of the 2009 IEEE 31st
search Office under Grant No. DAAD19-02-1-0389. Any
InternationalConferenceonSoftwareEngineering,2009.
opinions,findings,andconclusionsorrecommendationsex-
[16] P.Godefroid,N.Klarlund,andK.Sen. DART:directedau-
pressedinthismaterialarethoseoftheauthorsanddonot
tomatedrandomtesting. InPLDI,2005.
necessarilyreflecttheviewsoftheNationalScienceFoun-
[17] S.GuarnieriandB.Livshits. Gatekeeper: mostlystaticen-
dation, the Air Force Office of Scientific Research, or the
forcementofsecurityandreliabilitypoliciesforJavaScript
ArmyResearchOffice. code. In Proceedings of the Usenix Security Symposium,
Aug.2009.
References [18] M.V.GundyandH.Chen.Noncespaces:Usingrandomiza-
tiontoenforceinformationflowtrackingandthwartcross-
sitescriptingattacks. InNDSS,2009.
[1] Ecmascript language specification, 3rd edition.
[19] R.Hansen. XSScheatsheet. http://ha.ckers.org/
http://www.ecma-international.org/
xss.html.
publications/standards/Ecma-262.htm.
[20] P.HooimeijerandW.Weimer.Adecisionprocedureforsub-
[2] iGoogleGadgetDirectory.http://www.google.com/
set constraints over regular languages. In ACM SIGPLAN
ig/.
ConferenceonProgrammingLanguageDesignandImple-
[3] IntroducingJSON. http://www.json.org/.
mentation(PLDI),pages188–198,June2009.
[4] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic,
[21] P. Hooimeijer and W. Weimer. A decision procedure for
E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing
subsetconstraintsoverregularlanguages. InPLDI,2009.
StaticandDynamicAnalysistoValidateSanitizationinWeb
[22] Y.Huang,F.Yu,C.Hang,C.Tsai,D.Lee,andS.Kuo. Se-
Applications.InProceedingsoftheIEEESymposiumonSe-
curingwebapplicationcodebystaticanalysisandruntime
curityandPrivacy,Oakland,CA,May2008.
[5] A.Barth, J.Caballero, andD.Song. Securecontentsniff- protection. The 13th International Conference on World
ingforwebbrowsersorhowtostoppapersfromreviewing WideWeb,2004.
themselves.InProceedingsofthe30thIEEESymposiumon [23] S. Jha, S. A. Seshia, and R. Limaye. On the computa-
SecurityandPrivacy,Oakland,CA,May2009. tionalcomplexityofsatisfiabilitysolvingforstringtheories.
[6] A.Barth, C.Jackson, andJ.C.Mitchell. Robustdefenses CoRR,abs/0903.2825,2009.
forcross-siterequestforgery. InCCS,2008. [24] N.Jovanovic,C.Kru¨gel,andE.Kirda. Pixy: Astaticanal-
[7] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame ysistoolfordetectingwebapplicationvulnerabilities(short
communication in browsers. In Proceedings of the 17th paper). InIEEESymposiumonSecurityandPrivacy,2006.
USENIX Security Symposium (USENIX Security 2008), [25] A.Kiez˙un,V.Ganesh,P.J.Guo,P.Hooimeijer,andM.D.
2008. Ernst. HAMPI:Asolverforstringconstraints. InProceed-
[8] P.BishtandV.N.Venkatakrishnan. XSS-GUARD:precise ingsoftheInternationalSymposiumonSoftwareTestingand
dynamic prevention of cross-site scripting attacks. In 5th Analysis,2009.[26] E.Kirda,C.Kruegel,G.Vigna,andN.Jovanovic. Noxes: [43] W.Xu,S.Bhatkar,andR.Sekar. Taint-enhancedpolicyen-
a client-side solution for mitigating cross-site scripting at- forcement: Apracticalapproachtodefeatawiderangeof
tacks. In Proceedings of the ACM Symposium on Applied attacks.InProceedingsoftheUSENIXSecuritySymposium,
Computing,2006. 2006.
[27] A. Klein. DOM based cross site scripting or XSS of the [44] D.Yu,A.Chander,N.Islam,andI.Serikov. JavaScriptin-
thirdkind.Technicalreport,WebApplicationSecurityCon- strumentation for browser security. In Proceedings of the
sortium,2005. ACM SIGPLAN-SIGACT symposium on Principles of pro-
[28] M.MartinandM.S.Lam.AutomaticgenerationofXSSand gramminglanguages,2007.
SQLinjectionattackswithgoal-directedmodelchecking.In
17thUSENIXSecuritySymposium,2008.
[29] Y.Nadji, P.Saxena, andD.Song. Documentstructurein-
tegrity: A robust basis for cross-site scripting defense. In
NDSS,2009.
[30] S. Nanda, L.-C. Lam, and T. Chiueh. Dynamic multi-
process information flow tracking for web application se-
curity. InProceedingsofthe8thACM/IFIP/USENIXinter-
nationalconferenceonMiddlewarecompanion,2007.
[31] J. Newsome and D. Song. Dynamic taint analysis for au-
tomaticdetection,analysis,andsignaturegenerationofex-
ploitson commodity software. InProceedings oftheNet-
workandDistributedSystemSecuritySymposium(NDSS),
2005.
[32] A.Nguyen-Tuong,S.Guarnieri,D.Greene,J.Shirley,and
D.Evans. Automaticallyhardeningwebapplicationsusing
precisetainting. 20thIFIPInternationalInformationSecu-
rityConference,2005.
[33] R.Sekar.Anefficientblack-boxtechniquefordefeatingweb
applicationattacks. InNDSS,2009.
[34] E.StinsonandJ.C.Mitchell. Characterizingbots’remote
controlbehavior.InBotnetDetection,volume36,pages45–
64.2008.
[35] Z. Su and G. Wassermann. The essence of command in-
jection attacks in web applications. In Proceedings of the
ACM SIGPLAN-SIGACT symposium on Principles of Pro-
grammingLanguages,2006.
[36] Symantec Corp. Symantec internet security threat report.
Technicalreport,Apr.2008.
[37] M. Ter Louw and V. N. Venkatakrishnan. BluePrint: Ro-
bustPreventionofCross-siteScriptingAttacksforExisting
Browsers. InProceedingsoftheIEEESymposiumonSecu-
rityandPrivacy,2009.
[38] W.Venema.TaintsupportforPHP.http://wiki.php.
net/rfc/taint,2007.
[39] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross-Site Scripting Prevention with Dy-
namic Data Tainting and Static Analysis. In Proceeding
oftheNetworkandDistributedSystemSecuritySymposium
(NDSS),Feb.2007.
[40] W3C. HTML 5 specification. http://www.w3.org/
TR/html5/.
[41] H.J.Wang,X.Fan,J.Howell,andC.Jackson. Protection
andcommunicationabstractionsforwebbrowsersinmashu-
pos. InSOSP,2007.
[42] G. Wassermann, D. Yu, A. Chander, D. Dhurjati, H. Ina-
mura, and Z. Su. Dynamic test input generation for web
applications. InISSTA’08: Proceedingsofthe2008inter-
nationalsymposiumonSoftwaretestingandanalysis,2008.