An Evil Copy: How the
Loader Betrays You
Xinyang Ge1,3, Mathias Payer2 and Trent Jaeger
3
Microsoft Research1
Purdue University2
Penn State University3
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 1Problem: A Motivating Example
// test.c
// main.c
const int foo = 10;
extern const int foo;
int main()
{
*(int *)&foo = 100;
return 0;
}
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 2Problem: A Motivating Example
// test.c
// main.c
const int foo = 10;
extern const int foo;
int main()
{
*(int *)&foo = 100;
return 0;
}
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 2Problem: A Motivating Example
1 Executable
•
‣ cc main.c test.c
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
‣ cc [–fPIE] main.c -L. –ltest
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 3Problem: A Motivating Example
1 Executable
•
‣ cc main.c test.c
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
‣ cc [-fPIE] main.c -L. –ltest
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 3Problem: A Motivating Example
1 Executable
•
‣ cc main.c test.c
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
…Nothing happened?
‣ cc [-fPIE] main.c -L. –ltest
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 3Problem: A Motivating Example
1 Executable
•
‣ cc main.c test.c
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
…Nothing happened?
‣ cc [-fPIE] main.c -L. –ltest
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
‣ cc –fPIC main.c -L. –ltest
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 3Problem: A Motivating Example
1 Executable
•
‣ cc main.c test.c
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
…Nothing happened?
‣ cc [-fPIE] main.c -L. –ltest
1 Executable + 1 Library
•
‣ cc -fPIC –shared test.c –o libtest.so
‣ cc –fPIC main.c -L. –ltest
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 3What happened so far...
non-PIC executable PIC executable
local “foo”
foreign “foo”
…Nothing happened?
Obviously, foo is not in
read-only memory in the
above case, but WHY?
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 4Building Process
compiling linking loading
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 5Building Process
compiling linking loading
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 5What does “extern” mean
// main.c
extern const int foo;
int main()
{
*(int *)&foo = 100;
return 0;
}
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 6What does “extern” mean
foo is defined in a different file but
// main.c
still in the same image
(w/o -fPIC flag)
extern const int foo;
int main()
{
*(int *)&foo = 100;
return 0;
}
foo is defined in a different file and
potentially in a different image
(w/ -fPIC flag)
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 6What does “extern” mean
foo is defined in a different file but
// main.c
still in the same image
(w/o -fPIC flag)
extern const int foo;
int main()
{
*(int *)&foo = 100;
return 0;
}
foo is defined in a different file and
potentially in a different image
(w/ -fPIC flag)
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 6foo is defined in the same image
// main.o – assuming same image
<main>:
push %rbp
mov %rsp,%rbp
mov $0x64,offset_to_foo(%rip)
mov $0x0,%rax
pop %rbp
ret
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 7foo is defined in the same image
// main.o – assuming same image
The compiler assumes
<main>:
foo’s location can be
push %rbp
statically determined by
mov %rsp,%rbp
the linker, and emits a
mov $0x64,offset_to_foo(%rip)
mov $0x0,%rax
single MOV instruction to
pop %rbp
write to foo.
ret
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 7foo is defined in the same image
data
foo
// main.o – assuming same image
The compiler assumes
<main>:
foo’s location can be
push %rbp
statically determined by
mov %rsp,%rbp
GOT
the linker, and emits a
mov $0x64,offset_to_foo(%rip)
mov $0x0,%rax
single MOV instruction to
pop %rbp
write to foo.
ret
code
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 7What does “extern” mean
foo is defined in a different file but
// main.c
still in the same image
(w/o -fPIC flag)
extern const int foo;
int main()
{
*(int *)&foo = 100;
return 0;
}
foo is defined in a different file and
potentially in a different image
(w/ -fPIC flag)
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 8foo is defined in a different image
// main.o – assuming same image
<main>:
push %rbp
mov %rsp,%rbp
mov offset_to_foo_got(%rip),%rax
mov $0x64,(%rax)
mov $0x0,%rax
pop %rbp
ret
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 8foo is defined in a different image
The compiler assumes
// main.o – assuming same image
foo’s loca;on cannot be
<main>:
sta;cally determined
push %rbp
and emits two MOV
mov %rsp,%rbp
instruc;ons: one to
mov offset_to_foo_got(%rip),%rax
mov $0x64,(%rax)
retrieve foo’s address
mov $0x0,%rax
from its GOT slot, and
pop %rbp
the other to actually
ret
write to foo.
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 8foo is defined in a different image
data
The compiler assumes
// main.o – assuming same image
foo’s loca;on cannot be
<main>:
sta;cally determined
push %rbp
and emits two MOV
mov %rsp,%rbp
instruc;ons: one to
mov offset_to_foo_got(%riGpO)T, %rax
mov $0x64,(%rax)
retrieve foo’s address
foo’s address
mov $0x0,%rax
from its GOT slot, and
pop %rbp
the other to write to
ret
code
foo.
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 8Without –fPIC flag, GCC and Clang
on Linux assumes foo is defined in
the same image.
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 9Building Process
compiling linking loading
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 10Copy Relocation
data
Hi, I am the linker. Oops, foo is
actually defined in a different
image. How can I resolve the
reference to foo?
GOT
code
<main>:
...
mov $0x64,offset_to_foo(%rip)
...
executable
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 11Copy Relocation
data
Let me allocate a local copy of
foo and have the dynamic
loader to relocate the original
variable to this new copy.
GOT
code
<main>:
...
mov $0x64,offset_to_foo(%rip)
...
executable
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 11Copy Relocation
data
Let me allocate a local copy of
foo and have the dynamic
foo = 0
loader to relocate the original
variable to this new copy.
GOT
code
<main>:
...
mov $0x64,0x200970(%rip)
...
executable
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 11Building Process
compiling linking loading
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 12Copy Relocation
data data
foo = 0
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 13Copy Relocation
data data
foo = 0
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 13Copy Relocation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 13Copy Relocation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 13Copy Relocation Violation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 13Security Concerns
Expose “read-only” data to memory corruption attacks
•
‣ Making C++ vtables mutable can break existing defenses
• VTV, Interleaving, SafeDispatch
‣ Making format string writable can enable printf-oriented
programming
• Printf-oriented programming requires mutable format string to
implement branching
‣ File names
‣ IP addresses
‣ ...
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 14Security Concerns
Copy Relocation Violation does not directly lead to
•
exploitation
Defenses depending on read-only data being
•
immutable can be bypassed
‣ vtables
‣ format strings
‣ file names
‣ IP addresses
‣ ...
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 14Evaluations
Do Copy Relocation Violations commonly exist?
•
‣ Analyze 54,045 packages in Ubuntu 16.04 LTS
• 34,291 executables + 58,862 dynamic libraries
Do Copy Relocation Violations weaken security
•
mitigations?
‣ Evaluate a set of CFI defenses in face of copy relocation
violations
Implications on other platforms?
•
‣ Windows and macOS
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 15Real-world Copy Relocation Violations
Copy Reloca;on Viola;ons
• 69,098 copy relocation
violations in 6,449 (out of
34,291) executables
• 28,497 vtables copied to
writable memory in 4,291
executables
• Among the top 10 most
common copy relocation
violations, 8 of them are
vtables func. ptrs.
vtables from libstdc++.so
generic ptrs. format str
file names generic strs
others
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 16Security Evaluation
Developed a small C++ program that has an
•
intentional vtable corruption vulnerability
Evaluate the program under 7 CFI defenses
•
Defenses Check Func Check VTable Bypassable
Ptr
VTrust
VTV
vfGuard
Interleaving
SafeDispatch
SafeDispatch2
RockJIT
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 17Other Platforms
Windows
•
‣ MSVC requires explicit annotation to differentiate “intra-
module extern” from “inter-module extern”
‣ The example program cannot be built on Windows
macOS
•
‣ The compiler conservatively assumes “extern” is from a
different image
‣ The linker uses GOT to serve those references
‣ Copy relocations do not exist on macOS
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 18macOS issue
macOS has its own issue that results in the same
•
consequence
‣ macOS’s compiler allocates data that potentially
requires runtime patching in __DATA__.__const section
‣ However, the loader does not reprotect it as read-only
after runtime patching
‣ Read-only data (e.g., vtable) remains writable
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 19Copy relocation violations seem
prevalent in current Linux systems.
Then, how can we get rid of them?
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 20Mitigations
Eliminate copy relocations entirely
•
‣ Recompile executable using -fPIC flag, -fPIE not enough
‣ -fPIC flag forces the compiler to treat non-static global variables
as defined in a different image
Respect the memory protection while performing copy
•
relocations
‣ Determine the memory protection permission at link time
‣ Allocate the variable copy from a section protected by RELRO
‣ Both GNU Binutils and LLVM are adopting this approach
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 21Mitigations
Eliminate copy relocations entirely
•
‣ Recompile the executable using -fPIC flag
‣ -fPIC flag forces the compiler to treat non-static global variables
as defined in a different module
Respect the memory protection while performing copy
•
relocations
‣ Determine the memory protection permission at link time
‣ Allocate the variable copy from a section protected by RELRO
‣ Both GNU Binutils and LLVM are adopting this approach
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 22Conclusions
• Identified a design flaw in the compiler toolchain on Linux
‣ Copy relocation can strip the “const” attribute specified by the
programmer
• Proposed mitigations
‣ Eliminate copy relocations entirely
‣ Preserve the memory protection of the relocated variables
• Evaluated copy relocation violations in real world
‣ Studied 54,045 packages in Ubuntu 16.04 LTS
‣ Copy relocation violations occur commonly in many programs
‣ Copy relocation violations can subvert existing defenses
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 23Questions
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 24Variable Type Inference
Requirements
•
‣ No source code
‣ No debug information
Heuristics
•
‣ Pointers:
• Use relocation information to identify pointers in general
• Use pointer value to determine code pointer vs data pointer
‣ Strings:
• All bytes are ASCII characters
• Use ‘/’ to determine file paths and ‘%’ to determine format strings
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 45Copy Relocation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
What if the library accesses foo?
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 46Copy Relocation
data data
foo = 10
GOT
address of foo
The dynamic loader patches foo’s
GOT rodata
GOT entry in the library so that
foo = 10
it points to the new copy
code code
<main>:
What if the library accesses foo?
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 47Copy Relocation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
What if the library accesses foo?
...
mov $0x64,0x200970(%rip)
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 48Copy Relocation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
What if the library accesses foo?
...
Can the library access foo without
mov $0x64,0x200970(%rip)
the GOT indirec<on?
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 49Copy Relocation
data data
foo = 10
GOT
address of foo
GMOTo stly it won’t because, broyd ata
default, libraries treat exporfotoe =d 1 0
global variables as “external”
code code
<main>:
What if the library accesses foo?
...
Can the library access foo without
mov $0x64,0x200970(%rip)
the GOT indirec<on?
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 50Copy Relocation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
What if the library accesses foo?
...
Can the library access foo without
mov $0x64,0x200970(%rip)
the GOT indirec<on?
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 51Copy Relocation Violation
data data
foo = 10
GOT
address of foo
GOT rodata
foo = 10
code code
<main>:
What if the library accesses foo?
...
Can the library access foo without
mov $0x64,0x200970(%rip)
the GOT indirec<on?
...
executable library
Systems and Internet Infrastructure Security Laboratory (SIIS) Page 52