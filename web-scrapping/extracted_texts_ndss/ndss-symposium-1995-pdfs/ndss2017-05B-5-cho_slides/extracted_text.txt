Dynamic Virtual Address Range Adjustment
for Intra-Level Privilege Separation on ARM
Yeongpil Cho, Donghyun Kwon, Hayoon Yi, Yunheung Paek
Seoul National University
11SoCOptimizations & Restructuring
System Software
For example,
 Operating System
 Hypervisor
System Software plays roles of
 Resource Manager
 Trusted Computing Base
A variety of system software has the monolithic design
 so, the entire can suffer from small exploits.
Exploit
System Software
2SoCOptimizations & Restructuring
Privilege Separation
One of fundamental security principles
 Protect security critical parts by separating from the others
- ex) key management, page table management , system monitoring, …
How to enforce this principle to system software?
 Relying on higher privileged entity
Target system software
protect the critical parts of the target
Higher privileged
system software
One fundamental question
“ how to enforce this principle to the higher privileged system software? “
3SoCOptimizations & Restructuring
Intra-Level Privilege Separation
Divide the monolithic body of system software
into the outer domain and inner domain
 Two domains run at the physically same but logically different privilege level
 Two domains have asymmetric memory view
Outer domain Inner domain
(less privileged) (more privileged)
System Software
Two core mechanisms of intra-level privilege separation
 intra-level isolation mechanism
- prevent the outer domain from accessing the inner domain
 domain switching mechanism
- transfer control between the outer and inner domains
4SoCOptimizations & Restructuring
Motivation of our work
To efficiently and securely implement two core mechanisms,
a hardware feature for memory protection is used
The type of system software that can be supported is
determined by the used hardware features.
Solution Architecture Key Hardware Feature Target System Software
HyperSafe
x86 64-bit Write-Protection Hypervisor, Normal OS*
[S&P‘10]
Nested Kernel
x86 64-bit Write-Protection Normal OS, Hypervisor*
[ASPLOS‘15]
SKEE
ARM 32-bit TTBCR Normal OS, Secure OS*
[NDSS‘16]
SKEE
ARM 64-bit Extended Paging Normal OS
[NDSS‘16]
* : not mentioned in the paper, but can be supported with the same technique
5SoCOptimizations & Restructuring
Motivation of our work
ARM’s 64-bit architecture (a.k.a AArch64) is widely used
in mobile devices
Various types of system software coexist to enrich
the functionality of the AArch64-based devices
 Exception Level has the same meaning as Privilege Level
Normal World Secure World
Exception Level 1 Normal OS Secure OS
Exception Level 2 Hypervisor
Not only normal OS but also secure OS and hypervisor
suffer from exploits
6SoCOptimizations & Restructuring
Hilps
A technique that can enforce intra-level privilege separation
to a variety of system software on AArch64
Normal World Secure World
Normal OS Secure OS
Outer Inner Outer Inner
Exception Level 1
domain domain domain domain
Hypervisor
Outer Inner
Exception Level 2
domain domain
To achieve the goal of Hilps, two core mechanisms for intra-
level isolation and domain switching must be applicable
regardless of exception level
7SoCOptimizations & Restructuring
Hilps
AArch64 contains a hardware feature that allows dynamically
adjusting valid virtual address range at each exception level
 Hilps can create a special memory region that is temporally hidden from
other memory regions
Valid Virtual Address Space
Dynamic Virtual Address
Range Adjustment
Valid Virtual Address Space
Access Fault
8SoCOptimizations & Restructuring
Hilps
9SoCOptimizations & Restructuring
Background: Address Translation on AArch64
System control registers for address translation
 TTBRx_ELx (Translation Table Base Register)
- points to the base address of the current page table
 TCR_ELx (Translation Control Register)
- controls address translation
10SoCOptimizations & Restructuring
Background: Address Translation on AArch64
Each exception level has its own control registers
Normal World Secure World
Normal OS Secure OS
TTBR1_EL1 TTBR1_EL1
Exception Level 1
TCR_EL1 TCR_EL1
Hypervisor
TTBR0_EL2
Exception Level 2
TCR_EL2
11SoCOptimizations & Restructuring
Background: Virtual Address Range Adjustment
TxSZ-field of TCR_ELx determines the valid range of the
virtual address space translated by the paired TTBRx_ELx
TCR_EL1
TCR_EL2
12SoCOptimizations & Restructuring
Background: Virtual Address Range Adjustment
Change of valid virtual address range depending on TxSZ-
field
13SoCOptimizations & Restructuring
Background: Virtual Address Range Adjustment
Typically, multi-level page tables are used for effective
management
 1st-level page table is directly referenced by virtual address
When valid virtual address range changes,
the number of valid 1st-level page table entries also varies
proportionally
1st-level page table 2st-level page table
7
Expanded
Virtual Address Physical
3
Address
TTBR 0
14SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
System software that runs with TTBR0_ELx
Exception Level 1 Normal OS Secure OS
 ex) Hypervisor
Exception Level 2 Hypervisor
Valid virtual address space and valid 1st-level page table
entries change in the same direction
Valid Virtual Address Space Valid 1st-level page table entries
VA[12]
0x1FFF 1
base addr 0x0 0 base entry
expand valid VA range
VA[12:13]
0x3FFF 3
base addr 0x0 0 base entry
15SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
System software that runs with TTBR0_ELx
Exception Level 1 Normal OS Secure OS
 ex) Hypervisor
Exception Level 2 Hypervisor
Valid virtual address space and valid 1st-level page table
entries change in the same direction
Valid Virtual Address Space Valid 1st-level page table entries
VA[12]
0x1FFF 1
base addr 0x0 0 base entry
expand valid VA range
Inner Domain
VA[12:13]
0x3FFF 3
base addr 0x0 0 base entry
16SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
System software that runs with TTBR1_EL1
Exception Level 1 Normal OS Secure OS
 ex) Normal OS and secure OS
Exception Level 2 Hypervisor
Valid virtual address space and valid 1st-level page table
entries change in the opposite direction
Valid Virtual Address Space Valid 1st-level page table entries
VA[12]
base addr 0xFFFF 1
0xE000 0 base entry
expand valid VA range
base addr 0xFFFF VA[12:13] 3
0xC000 0 base entry
17SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
System software that runs with TTBR1_EL1
Exception Level 1 Normal OS Secure OS
 ex) Normal OS and secure OS
Exception Level 2 Hypervisor
Valid virtual address space and valid 1st-level page table
entries change in the opposite direction
Valid Virtual Address Space Valid 1st-level page table entries
VA[12]
base addr 0xFFFF 1
0xE000 0 base entry
expand valid VA range
base addr 0xFFFF VA[12:13] 7
0x8000 0 base entry
18SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
System software that runs with TTBR1_EL1
Exception Level 1 Normal OS Secure OS
 ex) Normal OS and secure OS
Exception Level 2 Hypervisor
Valid virtual address space and valid 1st-level page table
entries change in the opposite direction
Valid Virtual Address Space Valid 1st-level page table entries
VA[12]
base addr 0xFFFF 1
0xE000 0 base entry
expand valid VA range
Inner Domain
base addr 0xFFFF VA[12:13] 7
0x8000 0 base entry
19SoCOptimizations & Restructuring
Domain switching mechanism
A way to enter the inner domain
mrs x5, DAIF
Disable interrupts
stp x30, x5, [sp, #-16]!
msr DAIFset, 0x3
1:
mrs x5, tcr_el1
and x5, x5, #0xfffffffffffdffff Configure TCR to expand valid virtual address
orr x5, x5, #0x400000
range and reveal the inner domain
msr tcr_el1, x5
isb
mov x6, #0xc03f
mov x7, #0x1b
movk x6, #0xc07f, lsl #16
Verify the value of TCR
movk x7, #0x8059, lsl #16
and x5, x5, x6
cmp x5, x7
b.ne 1b
mrs x6, mpidr_el1
ubfx x5, x6, #8, #4
and x6, x6, #0xf
orr x6, x6, r5, lsl #2
add x6, x6, #1 Switch to the inner domain stack
adrp x5, InnerDomain_stack
add x5, x5, x6, lsl #12
mov x6, sp
mov sp, x5
str x6, [sp, #-8]!
adrp x5, InnerDomain_handler Jump to the inner domain
blr x5
20SoCOptimizations & Restructuring
Domain switching mechanism
A way to return back to the outer domain
ldp x6, [sp], #8
Switch to the outer domain stack
mov sp, x6
mrs x5, tcr_el1
Configure TCR to reduce valid virtual address
and x5, x5, #0xffffffffffbfffff
orr x5, x5, #0x20000 range and hide the inner domain
msr tcr_el1, x5
mov x6, #0xc03f
mov x7, #0x1b
movk x6, #0xc07f, lsl #16
movk x7, #0x801b, lsl #16 Verify the value of TCR
and x5, x5, x6
cmp x5, x7
b.ne 2b
ldp x30, x5, [sp], #16
msr DAIF, x5 Enable interrupts
isb
ret
21SoCOptimizations & Restructuring
Evaluation
V2M-Juno r1 platform
 Cortex-A57 1.15 GHz dual-core
 Cortex-A53 650 MHz quad-core
 2 GB of DRAM
Target
 AArch64 Linux Kernel 3.10 of Android 5.1.1
22SoCOptimizations & Restructuring
Evaluation
Round-Trip Cycles between the outer and inner domains
 Big core : 424 cycles, Little core : 210 cycles
LMbench to measure the kernel performance
30.0%
20.0%
Avg : 9.77%
10.0%
0.0%
-10.0%
Application benchmarks to measure the system performance
Avg : 0.84%
23Thank you!
2244SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
Exception Level 1 Normal OS Secure OS
Exception Level 2 Hypervisor
(128 GB)
(128 GB) (128 GB)
25SoCOptimizations & Restructuring
Intra-level isolation mechanism
Normal World Secure World
Exception Level 1 Normal OS Secure OS
Exception Level 2 Hypervisor
(128 GB)
(128 GB)
26SoCOptimizations & Restructuring
Intra-level isolation mechanism
An attacker in the outer domain would access the inner
domain through the cached TLB entries
Outer domain Inner domain Outer domain
inner’s inner’s
outer’s outer’s outer’s
TLB TLB TLB
How to prevent the outer domain from referencing cached
TLB entries for the inner domain?
 at Exception Level 1
- use different ASIDs between the two domains
 at Exception Level 2
- invalidate cached TLB entries when switching between the two domains
27SoCOptimizations & Restructuring
Domain switching mechanism
An attacker would cause a malicious interrupt to bypass the
verification process for TCR and access to the inner domain
 thwarting this attack by inserting a code snippet to verify the value of TCR
Entry gate of IDC
Jump Interrupt disabling
TCR configuration Interrupt
Interrupt Vector Table
Verification of TCR
Subverting …
control-flow
at EL1:
No
Interrupt if TCR_EL1.T1SZ == 27
Halting the system
Inner Domain at EL2 or EL3:
if TCR_ELx.T0SZ == 27
Yes
Jump …
Interrupt Interrupt Handler
TCR configuration
Verification of TCR
Interrupt enabling
Exit gate of IDC
28SoCOptimizations & Restructuring
Efficiency of the domain switching mechanism
Round-Trip Cycles between the outer and inner domains
 Measured by the performance monitor provided by AArch64
Big core Little core
with ASID with TLB inv. with ASID with TLB inv.
RTC 424 832 210 249
29SoCOptimizations & Restructuring
Efficiency of Hilps
LMBench to measure the kernel performance
Big core Little core
with ASID with TLB inv. with ASID with TLB inv.
null syscall 0.00 % 0.00 % 2.33 % 2.33 %
open/close -0.31 % 1.10 % 0.16 % 0.71 %
stat -0.38 % 0.38 % 0.99 % 1.8 %
handler inst 0.00 % 1.47 % 0.00 % 0.00 %
handler ovh 0.31 % 1.84 % -0.67 % -0.17 %
pipe latency 11.40 % 43.48 % 6.89 % 19.10 %
page fault 27.66 % 102.13 % 31.32 % 96.44 %
fork+exit 19.20 % 61.89 % 14.57 % 44.95 %
fork+execv 19.42 % 55.34 % 12.44 % 41.71 %
mmap 20.36 % 71.85 % 11.45 % 44.35 %
average 9.77 % 33.95 % 7.95 % 25.12 %
Application benchmarks to measure the system performance
with ASID with TLB inv.
CF-Bench 2.68 % 12.96 %
single core -0.21 % 0.31 %
GeekBench
multi core 0.59 % 0.30 %
Quadrant 0.56 % -0.02 %
productivity 2.07 % -2.56 %
Smartbench
gaming 1.74 % 1.32 %
browser 0.07 % 1.12 %
Vellamo
metal -0.13 % 0.15 %
Antutu 0.17 % 1.79 %
aberage 0.84 % 1.71 %
30