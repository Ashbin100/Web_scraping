PSI: Precise Security Instrumentation
for Enterprise Networks
Tianlong Yu†, Seyed K. Fayaz†, Michael Collins(cid:91), Vyas Sekar†, Srinivasan Seshan†
†Carnegie Mellon University, (cid:91)RedJack
Abstract—Despite soaring investments in IT infrastructure, existing approaches enforce policies at topological “choke
thestateofoperationalnetworksecuritycontinuestobeabysmal. points” [41]. This induces both logical and performance
We argue that this is because existing enterprise security ap- interference. For example, reconfiguring a firewall to block
proaches fundamentally lack precision in one or more dimen- a specific user can unintentionally block others (logical
sions:(1)isolationtoensurethattheenforcementmechanismdoes
interference),orprocessingtrafficmayoverloadthefirewall,
not induce interference across different principals; (2) context
cause dropped packets (performance interference) and may
to customize policies for different devices; and (3) agility to
lead to the shutting down of advanced security functions
rapidly change the security posture in response to events. To
[16].
address these shortcomings, we present PSI, a new enterprise
network security architecture that addresses these pain points. •Context: Second, a defense system must be able to enforce
PSI enables fine-grained and dynamic security postures for customizedpoliciesforindividualnetworkdevicesbasedon
different network devices. These are implemented in isolated the context — all the security-related device attributes and
enclavesandthusprovidespreciseinstrumentationontheseabove
states. For example, a firewall protecting a database should
dimensions by construction. To this end, PSI leverages recent
allow a http server with OpenSSL 1.0.1g to access the
advances in software-defined networking (SDN) and network
database(heartbleedpatched),butshoulddenytheaccessof
functions virtualization (NFV). We design expressive policy ab-
the other http server with OpenSSL 1.0.1f (vulnerable
stractions and scalable orchestration mechanisms to implement
thesecuritypostures.WeimplementPSIusinganindustry-grade to heartbleed), even if both servers are exposing the same
SDN controller (OpenDaylight) and integrate several commonly IP and ports to the firewall (via NAT). The state of the
used enforcement tools (e.g., Snort, Bro, Squid). We show that practice relies on traffic attributes such as IP addresses
PSI is scalable and is an enabler for new detection and preven- or netblocks. Unfortunately, this induces significant “blind
tion capabilities that would be difficult to realize with existing spots” as the relevant contextual attributes may be obscured
solutions. due to topological artifacts; e.g., the device origin may be
hidden behind a NAT [36].
I. INTRODUCTION •Agility: Finally, a defense system must be able to change
policyatfine-grainedtimescales.Weknowthatattackersdy-
Despite dramatic escalation in cost (e.g., 7.3 billion dol-
namically alter their strategies (e.g., moving laterally inside
lars/year for the US Government [47]) the state of operational
the perimeter, switching to different exploit kits at different
network security is still abysmal. We continue to hear about
stage [55]). Ideally, we should be able to dynamically
high-profile breaches and failures of existing network security
change our posture when specific internal hosts appear to
infrastructures [33], [37], [56]. In many ways, these indicate
be engaging in suspicious activities. Unfortunately, today’s
thecollectivefailureoftraditionalnetworksecurityapproaches
mechanismsarederivedfromstaticabstractions(e.g.,ACLs,
for enterprises including perimeter-defenses [65], distributed
signatures)andcannotexpressandimplementsuchdynamic
firewalls [41], Security Information and Event Management
capabilities.
(SIEM) systems [21], network management products [13],
[71], among others.
To address these limitations, let us consider a hypothet-
As a well-known fact in the operational security commu- ical design point as shown in Figure 1 where we can: (1)
nity [1], [26], current solutions do not and cannot effectively physically and logically isolate the processing applied to the
implement precise defenses along three key dimensions: iso- traffic to/from one device from traffic to/from other devices;
lation, context, and agility (§II): (2) ensure fine-grained customization based on the relevant
•Isolation: First, a defense system must ensure that security context (e.g., this traffic is from a device with heartbleed
policiesdonotinterferewitheachotherandcausecollateral vulnerability); and (3) dynamically instantiate the necessary
damage. Due to cost and network management limitations, security processing (e.g., if a BYOD device suddenly tries to
connect to an irrelevant internal server (suspicious), subject
it to deep inspection or quarantine it). By construction, this
Permission to freely reproduce all or part of this paper for noncommercial design addresses the above limitations—it has deep context
purposes is granted provided that copies bear this notice and the full citation
intoeverypacket,theprocessingcanbedynamicallyadjusted,
on the first page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the first-named author anditguaranteeszerointerference.Basedonthecurrenttrajec-
(for reproduction of an entire paper only), and the author’s employer if the tory of enterprise security solutions (i.e., relying on statically
paper was prepared within the scope of employment. configured hardware appliances deployed at designated net-
NDSS ’17, 26 February - 1 March 2017, San Diego, CA, USA
work chokepoints), however, this design may seem hopelessly
Copyright 2017 Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23200 elusive in terms of cost, complexity, and deployability.Internet
Many false +/-­‐ Traditional network security
Coarse, Sta+c Policies
FW
1
Lack Inter ference Inter net
Visibility H Apa prd liw ana cre
e s
s
IPS
1
Lack Context 0 FW DB
2
Fin Pe o-­‐ sg tr ua ri en se d ConP trS oI l ler PSI vision NAT s 1 DHCP s 2 s 3
Dynamic Orchestra+on
host host host laptop server server
Inter net 1 2 3 1 2
Fig. 2: An example enterprise network from an enterprise
intrusion incident [10].
Isolated, Customized Appliances
Fig. 1: Contrasting today’s approaches vs. PSI II. MOTIVATION
In this section, we motivate the need for isolation, context,
and agility using a simple but realistic enterprise network
topology(§II-A).Then,wediscussourthreatmodel,highlight-
In this paper, we present Precise Security Instrumentation
ing the attackers’ goals, capabilities, and potential strategies
(PSI), which serves as a proof-by-construction realization of
in §II-B. Given this setup, §II-C presents attack scenarios that
this hypothetical design (§III). PSI uses recent advances in
highlightkeyshortcomingsincurrentmechanismswithrespect
Network Functions Virtualization (NFV) to launch virtualized
to isolation, context, and agility.
security functions (e.g., virtual NIDS) on demand [30] inside
an on-premise cluster and SDN capabilities to route the traffic
to the desired virtual appliances. Thus, PSI can serve as an A. Problem setting
enabler for new precise security detection and prevention ca-
pabilitiesthatwouldbeexceedinglydifficult,ifnotimpossible, Network Description: Figure 2 depicts a small enterprise
with existing mechanisms. network composed of multiple switches1 and middleboxes
(e.g., firewalls, NATs, proxies, IPSes). This network connects
multiple devices such as hosts, databases and servers. The
Contributions: Our goal in this paper is to design the tech- devices are protected by a collection of security middleboxes
nical foundations for PSI, rather than develop new detection (e.g., FW , FW and IPS ). Like most enterprise networks,
1 2 1
and prevention algorithms. To this end, we make three key thedepictednetworkhassomemorecomplexsubcomponents:
contributions: a NAT changes IP and port addresses of packets; DHCP dy-
•Expressive Polices (§IV): We design a PSI policy abstrac- namicallyassignsIPtosomedevicesandserver isconnected
1
tion that can express agile and contextual traffic processing. toboths ands withdifferentIPaddressestosupportfailure
2 3
This allows us to express rich multi-stage security-relevant recovery or high throughput [20].
processing mapped to a security-relevant state for each
device; e.g., a host in normal state is subject to simple IDS- Securityintent: Theintentoftheoperatoristoenforcesecu-
followed-by-firewallbutin“suspicious”statemaybesubject rityposturesasafunctionofnetworkdevicesandtheircontext
to additional on-demand exfiltration detection modules. We (device attributes and security states), namely, intent =
also provide mechanisms to incorporate legacy policies that function(device,context ). For example, a device may
device
need to be applied to a group of devices. be a HTTP server, and the context may be it has n-day
Heartbleed vulnerability.
•Scalability and Responsiveness (§V): Naively applying
SDN/NFV mechanisms in security context is problematic
and can introduce new avenues for DoS attacks [63]. We
B. Threat Model
develop a scalable orchestration platform by synthesizing
three key ideas: (a) proactive forwarding schemes based on The goal of attackers is to compromise devices, exfiltrate
logical tags that do not need to involve the controller; (b) data, or disrupt services. To achieve these goals, attackers
effective techniques for horizontally scaling the controller need to evade the detection and mitigation of current defense
infrastructure; and (c) prefetching future enforcement states system.Therearefourgeneralstrategiestheattackerscanuse:
to improve responsiveness. being stealthy, being dynamic, causing collateral damage, and
•Practical Implementation (§VI–§VII): We prototype overloading the defense:
PSI in an industry-grade SDN control platform •Being stealthy: Attackers can use “blind spots”—devices
(OpenDaylight) [17]. We extend a range of widely or traffic routes not visible to the defense system, to avoid
used open source network security tools (e.g., Snort, Squid, detection. For example, an attacker can exploit a BYOD
iptables) and integrate them within PSI. We show that device and use it to launch internal attacks that can avoid
PSI can coordinate complex policies on networks of up to the detection of IPS at the department gateway, as seen in
100,000 hosts without significant performance overload. the Shady RAT exploit [10].
Finally, we demonstrate use cases showing how PSI can
enable new security capabilities (e.g., IoT patch). 1Weusethetermsrouterandswitchinterchangeably.
2•Being dynamic: Attackers can adjust their attack postures AAacker 1. Malware
toachievetheirgoals.Forinstance,wecommonlyseemulti-
stage and multi-vector attacks such as using a zero-day
FW
1
2. BYOD
3. Internal scan & exploit
attack to bypass the defense and compromise an initial IPS
device [5], then using multiple exploit toolkits [11] to
1.
s
0
1
4.
4. data exfiltra?on
compromise others from private network.
•Causing collateral damage: Attackers can force the de- s 2 s 3
DHCP
fense system to act on innocent users or not act at all. 3.
For example, an attacker behind a NAT can force an IPS host laptop server server
3 1 2
to enforce deep packet inspection (DPI) for all traffic at
2.
the gateway, which can degrade performance for legitimate Fig. 3: A typi cal APT attack: firewall and IPS lacks the
traffic [16]. context and visibility to prevent internal exploit and data
•Overloading the defense: Attackers can overload the de- exfiltration.
fensesystemsortheadministrator.Forexample,anattacker
can increase the traffic volume to overload an IPS or use Then to provide isolation using distributed Firewall/IPS tech-
malformed packets to generate a large scale of alerts to niques would require costly distributed Firewall/IPS hardware
overload the alerting systems or the administrator. deployed for each device and rewiring the network.
Our threat model assumes that the attacker cannot directly Context: Bydefinition,enforcingsecurityintentsasdiscussed
compromise the defense system (e.g., infect the IDS or the in §II-A requires taking into account the context of devices.
SIEM system). To illustrate why this is challenging in practice, Figure 3
showsanadvancedpersistentthreat(APT)[10]intheexample
C. Motivating Scenarios network. The goal of the attacker is to compromise server
2
and exfiltrate sensitive data. To do so, the attacker can use a
Next we walk through several scenarios to highlight how
stealthy strategy: exploiting several blind spots in the defense
theattackerscanevadeexistingmechanismssuchasperimeter
(FW , IPS and vLAN at s and s ). In the first step, the
defense [24], distributed Firewall/IPS [12], [41], [51], [58], 1 1 2 3
attacker compromises a laptop in a loosely protected home
SIEM (Security Information & Event Management) [6], [21],
network with malware. Then, the attacker uses the laptop (as
and network segmentation (e.g., vLAN [13]). These scenarios
a BYOD device) to access other enterprise network devices.
highlight the importance of isolation, context, and agility in
Unfortunately, the context that BYOD laptop is accessing
mitigating the attacker’s strategies above.
server is not visible to FW and IPS for enforcing more
1 1 1
Isolation: Our example network (Figure 2) lacks isolation in stringent policies. Next, the attacker compromises server 1
two ways: performance interference and logical interference. from the laptop with internal scan and exploits, uses it to
Attackerscanexploitthisinterferencetocausecollateraldam- get through the segmented vLANs between s 2 and s 3, and
age.Performanceinterferenceresultsfromtheneedtoprocess exfiltrate data from server 1.
traffic through narrow enforcement points. For example, in
Current approaches: Perimeter defenses (FW , IPS )
Figure2,IPS issharedacrossalldevices’trafficfrom/tothe 1 1
1 lack visibility and context about devices inside the network.
Internet.Suppose,anattackerisexploitingserver ,whichhas
1 Similarly, vLAN are coarse and lack context about server
massive inbound/outbound traffic, and the administrator uses 1
across two subnets. Even if we use distributed Firewall/IPS
a DPI module at IPS to stop the exploit. Here IPS can be
1 1 and deploy two IPSes at s and s , the fact that server
overloaded, and the throughput of other devices (e.g., host ) 2 3 1
3 is accessed by a BYOD laptop is hidden from IPS at s
willalsodecrease.Thus,theattackcausescollateraldamageto 2
(could be access from host ?). This is because DHCP may
host . Logical interference results from the fact that common 3
3 dynamically assigns IPs to laptop and host , and the IPS
enforcementpointsoftenresultinpolicyspecificationsthatare 3
cannot distinguish them by IP address (i.e., hidden context);
coarse-grainedorpronetomisconfiguration[75].Forexample,
Ideally, we want the enforcement mechanism to be logically
suppose an attacker has compromised host and use it to
1 deep inside the network and have fine-grained visibility into
access to the database server DB. To stop the attack, the
the security relevant context of individual devices.
administrator updates the firewall policy at FW to block the
2
IPofhost .DuetotheNAT,host andhost areexposingthe
1 1 2 signatures?(cid:1)
same IP and the updated policy can unintentionally interfere
!me 0: Zero-day
withhost 2’saccesstoDB.Thiskindofproblemiscommonly
exploits Flash
a+acker IPS
1
host
1
reported on operational forums [3], [49]. In terms of the
security intent we defined in §II-A, interference conceptually legi5mate web request?(cid:1)
means that the same device can be affected with conflicting !me 1: User ini!ated
host IPS www.drovemee5ng.in
intents. Exploit Kit download 1 1
Current approaches: existing isolation mechanisms are new security posture?(cid:1)
!me 2: Inside a>ack
either too coarse-gained or too costly to resolve all the host host
with Exploit Kit 1 2
logical/performance interferences. For example, network seg-
Fig. 4: Does defense system have the agility to mitigate a
mentationmechanisms(e.g.vLAN)cannotsupportfine-grained
multistage attack [5]?
isolation at a subnet level [73], e.g., host and host in
1 2
Figure 2 cannot be isolation as they share the same subnet. Agility: Securityposturesneedtobeupdatedasthecontext of
3adevicemaychange.Figure4describesamulti-stageattackon Detect
Scan
our example network similar to those seen in recent incidents
[5]. At time 0, host
1
receives a phishing mail containing a D Se ct ae nc t DPI
zero-dayattackexploitingaFlash Playervulnerability.At policy
time 1, the host 1 contacts a drive-by-download website and Policy Engine(cid:1)
install a powerful toolkit Magnitude EK [11]. The infected
context intent PSI Controller
host initiates the download (so the defender does not block
1 Orchestra0on(cid:1)
the outgoing request), the attacker uses a short-lived name for
the download (so the site is not blacklisted). The (dynamic) Control Plane(cid:1) events launch/configure
context here is host is accessing a suspicious website and Data Plane(cid:1) ψmboxes(cid:1)
1 PSI ψcluster(cid:1)
getting infected. At time 2, host 1 contacts and infects host 2 DeS tc ea cn to r DPI
using the toolkit, bringing it under the botnet’s control. Note
that the attacker dynamically adjusted the attack posture by E Dxfi el tt era ct2 oo rn
using different techniques at each step, as described in § II-B, tunneling
which makes it hard for static defenses to mitigate.
Current approaches: To address such dynamic attacks, we
need to change the network defenses across different stages.
Original E nterprise Network
For example, from time 0 to time 1, the administrator would
Fig. 5: A high-level view of the PSI.
need to reconfigure the defense mechanisms from checking
for malicious destination IPs in packet headers to checking
for suspicious file download with DPI. From time 1 to time the DPI module on-demand for TCP flows to suspicious
2, having determined that host might have been compro- destinations.
1
mised, the administrator would want to subject host ’s traffic
1 By construction, this design addresses the pain points
to heavier intrusion prevention to prevent potential exploits
mentioned earlier. First, since we have a dedicated processing
againstcriticalresourcessuchashost .However,adjustingthe
2 appliance per-device, the policy applied is logically isolated
behavior of existing systems, such as distributed Firewall/IPS,
and there is no cross-device performance interference due
is difficult as they are constrained by topology; e.g., placing
to multiplexing. Second, because this appliance is directly
an IPS filter in inline mode on demand requires rewiring the
connected to the device it is protecting, it has all the relevant
network topology and routing. In addition, changes need to
processing context needed to apply a given security posture.
happenatthetimescaleofminutesorseconds.Unfortunately,
Finally, the rules and modules can be added/dropped dynami-
current approaches are not designed to evolve at such fine
cally to provide the necessary agility to change the posture.
timescales.
Challenges with the idealized solution: Unfortunately, the
Insummary,thesemotivatingscenarioshighlightthatisola-
approach described above is impractical on several fronts.
tion,context,andagilityarefundamentalrequirementsthatany
First,intermsofdeploymentcomplexity,weneedadedicated
enterprise network security strategy should provide. However,
hardware appliance attached to every device. Even ignoring
existing approaches exhibit key shortcomings on one or all
the complexity of rewiring the network, this is an uphill task
of these dimensions, as they are constrained by the network
given the number of wireless, mobile, and virtualized devices.
topology, the use of fixed hardware-based defenses, and by
The second issue is cost; adding as many physical hardware
static policy abstractions. Our goal in designing PSI is to
appliances as there are devices is a non-starter for medium-
address these pain points.
to-large scale enterprise networks with tens of thousands of
devices.Third,suchanomnipotentdevicethatcandynamically
III. SYSTEMOVERVIEW
reconfigure its traffic processing does not exist today. While
future solutions (e.g., [59]) may offer such a consolidated
In this section, we begin with an idealized approach to
appliance, we have to embrace the practical concern that
addresstheaboveproblemsandhighlightwhyrealizingitwith
securityfunctionsarefragmentedacrossdifferentvendorswith
current techniques may incur high cost and complexity. Then,
diverse capabilities. Finally, even if we had the appliances,
we describe the PSI architecture and show how PSI leverages
the policy abstractions offered by current frameworks are not
recent advances in SDN/NFV to realize this ideal approach.
expressive enough to capture agile security postures.
We conclude by highlighting key technical challenges that we
address in designing PSI. The obvious question then is whether we can realize the
ideal solution with low cost, without requiring changes to the
Idealized solution: Let us consider an ideal solution that can
existing network topology, and by using existing appliance
providethedesiredisolation,context,andagility.Westartwith
capabilities? In a nutshell, this is the practical problem that
acollectionofintegrated“omnipotent”securityappliancesthat
PSI solves.
canperformanyofthenecessarysecurityfunctions;e.g.,Layer
3firewall,DPI,anti-virus,andapplication-levelfirewalling.We PSI approach: To address this problem, PSI decouples the
ensure that each device has one of these appliances physically deploymentofsecurityappliancesfromtopologicalconstraints
connected as its immediate “next hop”. Finally, we employ by tunneling a device’s traffic to a server cluster ψcluster.2
a global policy enforcement algorithm that can dynamically This ψcluster can provide an appropriate appliance for any
configure these appliances in real-time to add/drop processing
modulesasneededandchangetheconfiguration;e.g.,invoking 2PSIreadastheGreeksymbolψ.
4traffic, on demand. To address the cost issue, PSI leverages •Scalableandresponsiveorchestration(§V):Naiveorchestra-
NFV to build “tiny” virtualized appliances (ψmbox in Fig- tion schemes to realize PSI would cause several scalability
ure 5) to share commodity hardware and reduce cost. Note and responsiveness problems. For instance, naively send-
thatonecommodityservercansupportuptohundredsofsuch ing the first packet of every context change to a central
appliances [46]. To address the lack of dynamic omnipotent controller introduces new control plane attacks [29], [64].
appliances, PSI uses SDN capabilities to compose existing Naive scheme to launch new ψmboxes instances at every
appliances (e.g., Snort or Bro) to dynamically steer the traffic context change wastes time and resources (CPU/memory).
within the ψcluster. Finally,iftheorchestrationcannotscaleout,theattackercan
easily overload the system of PSI. To address these issues,
Incremental deployability: To deploy PSI, the enterprise we develop a scalable orchestration platform using a com-
needs to add a pool of commodity server machines. Each bination of proactive orchestration, pre-fetched installation
device’s first-hop edge switch is configured to tunnel packets of ψmboxes, and horizontal scaling.
to/fromthedevicetothegatewayswitchoftheψcluster.Note
that this tunneling capability is supported even in commodity IV. PSIPOLICYABSTRACTION
non-SDN switches. Note that we need SDN and NFV capa-
bilitiesonlyinsidetheψcluster,whichiseasytodeploy[14]. Inthissection,weidentifykeyexpressivenessrequirements
thatPSIpoliciesshouldsatisfyandthendescribeoursolution.
PSI walkthrough: Next, we conceptually walk through the
various components of PSI. The PSI PolicyEngine takes as A. Requirements
inputthehigh-levelsecurityposturefromtheadministratorand
We begin by highlighting three key requirements that the
translatestheseintoper-deviceintents.TheOrchestrationmod-
PSI policy abstraction should meet to help the administrator
ule enforces these intents by launching/configuring ψmboxes
to express intents that govern how the devices’ traffic should
and switches. Each device’s traffic is tunneled to/from, and
be processed/forwarded.:
processed, in the ψcluster. Event from the ψmbox or switch
are sent to the Orchestration module and passed to Policy •Context-based forwarding & processing: The administrator
Engine.ThelogicinPolicyEnginewillupdatetheintentbased shouldbeallowedtodefineasetofcontextforeachdevice,
on the context, and the Orchestration module dynamically and express forwarding & processing based on the context.
launches and/or reconfigures the ψmboxes (and switches) For example, if a host is sending oversized DNS packets
based on the updated intent. (detected by header checker), the administrator should be
allowed to define a context to note that a host is suspicious
Isolation, context and agility provided by PSI: Now let’s for data exfiltration (DNS-based), and specifies that the
briefly explain how PSI framework provides the isolation, oversized DNS packets should be forwarded to a DPI for
context and agility desired. For isolation, the Orchestration payload check to prevent potential data exfiltration.
module will assign a number of dedicated ψmboxes to each •Agile intent evolution: The administrator’s intent over a
device, and by default allocate a fixed amount of CPU cores device’strafficmayevolveovertimeasthecontextchanges.
and memory to each ψmbox. To isolate the logic, each device For instance, if a host initiated a HTTP connection to a
has dedicated policies enforced by its dedicated ψmboxes so suspicious website, the context is changed from host is
thatupdatingthe policieswillnoteffectthe otherdevices.For normal to host is suspicious, and the inbound traffic to this
context,PSIattachesthedetectionandmitigationψmboxes to host should be put under deeper scrutiny (e.g., DPI) to stop
the device’s next-hop switches with tunneling, so the traffic malicious downloads.
from/to the device can not bypass the security enforcements.
•Supporting legacy aggregate policies: Given that existing
Therefore, PSI has full visibility to all the context of a device
deployments use security functions that monitor many de-
and there is no “blind spot” that attackers can exploit. For
vices, there may be legacy policies that an administrator
agility, PSI simplifies and speeds up the procedure to update
may want to define over aggregated views of the traffic,
securitypostures.Deployingnewsecurityfunctionisassimple
e.g., per department policies or global policies [18]. The
aslaunchingafewvirtualizedinstances,avoidingthehighcost
PSI policy abstraction should also be able to express such
of deploying hardwares. Similarly, the network configuration
legacy policies.
issimplifiedasPSIautomaticallytranslatesthesecuritypolicy
to context-based forwarding on switches and ψmboxes. A natural question then is whether prior policy abstrac-
tions can satisfy the requirements. We evaluated a num-
Challenges: Given this overview, two key challenges remain: ber of existing approaches including distributed Firewall/IPS
•Expressive policy abstractions (§IV): Traditional policy ab- configurations (Cisco’s PIX [9],Bro [51]) and more recent
stractions (e.g., in firewall, IDS, ACL) that rely on a simple SDNpolicylanguages(Kinetic[43],Merlin[67],Group-based
if-match-then-action paradigm are not sufficient for the Policies (GBP) [18], PGA [52]), and found that they cannot
agile and context-aware defenses we envision. To this end, meet the first two requirements. For distributed Firewall/IPS
we develop an expressive policy abstraction based on an configurations, the context and agility that can be expressed
intuitive combination of finite state machines to capture is limited to one type of tools, e.g., a firewall cannot tell
the security state and directed acyclic graphs to capture a oversized packet to be forwarded to a IPS for DPI. We
context-based security actions. We design a Policy Engine qualitatively evaluated distributed Firewall/IPS configurations
that interpret the policy abstraction and computes the real- in the coverage test in Section VII-A, and the result shows
time security intent updates for each device based on the that the context-based and agile policies prevented 35% more
current context. potential attacks than distributed Firewall/IPS configurations.
5NF:
Context 2 proces3 sing 3 Context 3 the ψFSM captures current state and future state evolution;
and the ψDAG captures the current intent with respect to the
current state.
NF: NF:
Ingress proces1 sing
1
proces2 sing
2
Egress Network traffic space
Context
1
Fig. 6: Express context-based intent with ψDAG. traffic class predicate predicate … predicate
1 2 n
Similarly, SDN policy languages are largely limited to switch state ψFSM 1 ψFSM 2 … ψFSM n
contexts (packet header attributes), and their agility is limited
to static forwarding capabilities.
Our goal in designing the PSI policy abstraction is not to intent ψDAG 1 ψDAG 2 … ψDAG n
claim a novel theoretical or programming language contribu- Fig. 8: PSI policy at per device/traffic granularity.
tion (e.g., [31], [54]). Rather, it is a practical abstraction for
capturing context-dependent and agile processing. Expressing aggregate policies by scoping: Next we discuss
how we can support legacy policies expressed in terms of
B. High-Level Ideas traffic aggregates, e.g., a device belongs to multiple logical
groups[18].Tothisend,weaddthenotionofscopetodenote
Context-based processing: To enable administrator to ex- the range of devices that a ψFSM and a ψmbox would apply
press traffic forwarding and processing based on context, to. For example, local ψmboxes denoted as X :NFInstance
L
PSI uses a Directed Acyclic Graph called ψDAG, as shown is dedicated to a device, while global ψmboxes denoted as
in Figure 6. Formally, this is a two tuple ψDAG = X : NFInstance apply to all devices. For each device, we
G
(cid:104)NFInstances,NextHops(cid:105). Each vertex in ψDAG represents compose its local X : ψFSM and global X : ψFSM as
L G
a processing function (e.g., IPS) denoted as NFInstance that a new ψFSM. Then for each state in the composed ψFSM,
can: (1) tag the traffic based on the processing outcome (e.g., we merge the local X : ψDAG and global X : ψDAG.
L G
tagpacketwith“oversized”ascontext);(2)applycustompro- Followingtheaboveprocess,it’seasytoconvertlegacygroup-
cessbasedonthetags(e.g.,checkthepayloadforpacketwith based policies to per-device PSI policies. For example, using
“oversized” context). The edge relation NextHops specifies thescopenotion,weport348distributedFirewall/IPSpolicies
the intended sequence of traversal through processing tools toPSIpoliciesinthelogicalinterferencepartinSectionVII-A.
with respect to context; e.g., packet with “oversized” context
is forwarded to a IPS (to check payload). Illustrative Example: Let’s consider an end-to-end example
to put the ideas together and see how PSI policy abstraction
SupportingintentevolutionwithψFSM: WhiletheψDAG enables us to express effective security postures. Figure 9
abstraction captures context-dependent processing, it does illustrates a dynamic policy that can filter out spurious alarms
not capture the evolution of security intent. For instance, and precisely identify a multistage attack in real-time. The
the operator may have an inkling of future “states” of the multi-stage attack includes two stages: 1) Tempting a user to
host (contexts at different time) and may want to proac- click a link to suspicious websites (unknown IP, initial sign);
tively express the intent for these subsequent likely states 2) Device initiated downloads of malicious payloads (worms,
as well. Similarly, the intent may evolve as new information Trojans,ExploitKits).Currently,theinitialsignoftheattackis
arrives; e.g., new vulnerabilities or new alerts from external hiddeninadelugeofalerts(accessingaunknownwebsitecan
sources. To capture such intent evolution, we introduce the be normal user activity) and always checking the payload will
ψFSM abstraction. Formally, the ψFSM is a Moore machine cause collateral damage to the network. With the PSI policy
ψFSM := (cid:104)S,s ,E,F,T,O(cid:105) that maps the traffic’s state language, the administrator can enforce a dynamic scrutiny
start
to a specific ψDAG via the output function O (S → F). In policy[60]toreacttotheinitialsignoftheattack.Asshownin
the simplest case, we have a single global state for a specific Figure9,theadministratorcandefinethetrafficofadevice(IP
classwithasingleψDAG.Moregenerally,wecandefinestate 10.2.0.1) by set the sip field of a predicate to 10.2.0.1. Then
transitions based on different events E ∈ E and the ψDAG the administrator uses the corresponding ψDAG to specify
j
will depend on the current state. the possible security states (normal, suspicious and malicious)
and state transitions of the traffic. By setting a ψDAG for
each state, the administrator means that: when the traffic is at
state ψDAG
1 1 normal state, the traffic will be processed by a light weight
IPS (L-IPS) performing only header check (e.g., checking for
ψFSM event
access to unknown IP); if L-IPS detects access to unknown
state ψDAG IP, the context will be updated with unknown IP event and
2 2
triggers the traffic to transit from normal to suspicious, and
state intent L-IPS will forward the packet to a heavy payload check (H-
evolution evolution IPS);ifexploitpayloadisdetected,thenthemulti-stageattack
Fig. 7: PSI agile intent evolution.
isconfirmed,thetrafficstatewillbechangedtomalicious,and
corresponding packets will be dropped.
Note that from Section III, our policy is isolated at a
per device/traffic granularity. Therefore, each device/traffic is Once we have the abstract policy, the PSI Policy Engine
assigned with a ψFSM and a ψDAG, as shown in Figure 8; willinterprettheabstractpolicyandcomputethereal-timese-
6Predicates ψFSMs headerψ DAGs
in Figure 10(a), PSI will configure the L-IPS to send pkt1
Context s si Mp: A1 C0 :. a2 n.0 y. 1
Normal
Ingress L-IPS Egress (destination IP is in the normal IP list) with context “normal”
Packet: …(cid:1) tothecontroller,andthecontrollerwillreactivelyinstallarule
1 …0 (cid:1).2.0.1 …(cid:1) Unknown IP(cid:1) header no pr am yla ol a d at the switch to forward pkt1 to port1.
E Uv ne kn nt o:
wn IP(cid:1)
Suspicious Ingress L-IPS
u
nknownIPH -IPS
n
ormaE lg ress
Event processing: The previous discussion handles the case
…(cid:1) Malicioe uxp sloit
header
payloae dx ploit
D rop
f mo ar ya trg igiv ge en
r
s ata st te ats e. trO at nh se itr iot nyp ie ns to hf
e
e ψv Fen St Ms (e ,.g e. ., g.I ,D tS rana sl ie tr iots n)
Ingress L-IPS H-IPS i
unknownIP from normal state to suspicious state in Figure 9. This in
turn may require a new ψDAG to be instantiated. In this
Fig. 9: A dynamic scrutiny policy expressed via PSI. case, the controller retrieves the ψFSM corresponding to the
i
event,3 looks up the s current and identifies the s next. The
i i
controllerthenidentifiesthenewψDAGnext correspondingto
curityintent(ψDAG)foreachdevice’strafficbasedoncurrent
the new state s, deactivates the current ψDAG, and launches
context. In Section V, we show how to translate the intents to new ψmbox instances to implement ψDAGnext, and updates
concrete ψmbox deployment and network configurations. We
internaldatastructurestoindicateastatechange.Forexample,
alsodescribeaGUIfortheadministratorstosimplifytheinput
when transiting from normal state to suspicious state, the
of the abstract policy in Section VI.
orchestrationmodulewilllaunchaψmbox runningIPSwitha
set of payload check rules to implement the H-IPS node with
V. PSICONTROLLER
the payload check. Figure 10(a) shows one of the rules in the
In this section, we describe the PSI controller’s orches- IPS: check if the payload contains “meta” and ”EmulateIE7”
tration mechanisms to translate the high-level intents into to block Magnitude EK.
a concrete realization. To highlight the key scalability and
Challenges: While this above workflow is conceptually
responsiveness challenges, we begin with a simple reactive
correct, we identify two key challenges:
design.Then,wediscussourideastoaddressthesechallenges:
proactive tag-based forwarding, elastic controller scaling, and
1. Scalability with adversarial workloads: First, handling ev-
ψDAG prefetching.
ery packet presents a fundamental scaling challenge - a
single controller has to process a control message for
A. Conceptual View and Challenges
every packet in the network. Second, even if we do not
The input to the PSI orchestration module is the policy interpose the controller on every packet at every hop, the
intent (ψDAG) for each device. The goal of the controller controllerneedstodealwithalargenumberofeventsinany
is to translate these into a concrete realization; i.e., launch reasonable-sizednetworkthatwillinduceψDAG updates.4
ψmbox instances and set up forwarding rules. Recall that Thus, an adversary can easily saturate the CPU, memory,
PSI intents capture dynamic packet processing at two levels. or the control channel bandwidth with this naive approach.
First,theforwardingpathmaydependonflow-specificcontext 2. Security downtime: Transitioning from the ψDAGcurrent
informationfromupstreamnodesintheψDAG.Forexample, to the ψDAGnext will need new VMs to be launched
inFigure9,trafficwithcontextunknownIPfromL-IPSshould
and other forwarding rules to be setup. Even with fast
be forwarded to H-IPS for further payload analysis. Second,
VM bootup techniques, there will be a non-trivial latency.
the ψDAG may itself be updated based on ψFSM transitions
Thus, adversaries can exploit these delays in setting up
inresponsetoalertsorotherevents.Forexample,inFigure9, ψDAGnext to achieve their goals for the types of multi-
the ψDAG will be updated when L-IPS raise an unknown IP
stage attacks described earlier.
alert and the state transits from normal to suspicious.
A seemingly natural solution to implement these intents is B. Key Ideas in PSI
to adopt a reactive mechanism, which configures forwarding
rules and deploy ψmboxes on-demand whenever the context Next, we describe how address each of these challenges.
changes.Letususetheintentsfornormalstateandsuspicious
Proactivecontext-basedforwarding: Thereactivecontroller
state in Figure 9 as an example to show how such a reactive
does not scale as it interposes on every packet at every logical
controllerwouldreacttopacketarrivalsandotherevents/alerts
forwarding between two ψmboxes.
(Figure 10).
To avoid this, our goal is to keep packets in the data plane
Per-packetprocessing: Supposeapacketbelongingtoclassi
as much as possible [36]. We achieve this with a proactive
arrives at a network interface (either at a ψmbox or a switch).
forwarding approach extending prior work [36]. The core idea
Bydefault,thisnodewillnothaveanyforwardingrule.Thusit
is illustrated in Figure 10. Each ψmbox tags outgoing packets
buffers the packet and sends an PKTIN event to the controller
specifying the relevant context needed for forwarding along
with the packet’s header and any relevant processing context.
theψDAG.Forexample,inFigure10,allpacketsareinitially
On receiving the PKTIN event, the controller retrieves the
under “normal” tag and the tag changes to “suspicious”. The
current state s current corresponding to this packet’s class and
i forwardinglogicofthenetworkswitcheswillincorporatethese
uses it to get ψDAGcurrent. Based on the current context and
the node that generated the packet, the controller decides the
3Weassumethateventsareannotatedwiththeclassvalue(i).
nexthopforthispacketandsetsupforwardingrulestoensure 4Evenifthelikelihoodofupdatesforasingledeviceislow,atanygiven
that the packet will traverse the intended path. For example, timetherearelikelytobeseveraldevicesthatneedupdates.
7Reac%ve PSI Controller ψDAG prefetching: The combination of proactive context-
Controller
based forwarding, partitioning, and elastic scaling effectively
context(cid:1) tag(cid:1) tag(cid:1) next-hop(cid:1) addresses the scalability bottleneck. However, the problem of
Pkt1 normal Pkt1 port1 normal(cid:1) (cid:2)(cid:1) (cid:2)(cid:1) port 1(cid:1)
Pkt2 unknownIP(cid:1) Pkt2 port2(cid:1) unknownIP(cid:1) (cid:1) 2(cid:1) port 2(cid:1) security downtime during ψFSM transitions still remains.
port (cid:2) (cid:1) port (cid:2) (cid:1)
L-IPS Egress (cid:1) L-IPS Egress (cid:1) To address this, we use the following idea. Since the
alert tcp any-> port 2(cid:1) port 2(cid:1) controllerhastheentireψFSM describedbythepolicyintent,
unknownIP-list
H-IPS H-IPS
it can look ahead and predict the next k possible states for
each class class. Then, it proactively installs the ψmboxes
alert tcp (content=<meta "; content:"content=|22|
IE=EmulateIE7|22|"; ) corresponding to the ψDAGs for these next k possible states,
(a) reac%ve (b) proac%ve in order to mask the latency involved when these might be
(cid:1) (cid:1)
needed in the future.
Fig. 10: Comparing reactive and proactive design.
One concern might be that this needlessly increases the
tagsaspartoftheirpacketprocessingactions.Forexample,in resourcesusedbytheψcluster asψDAG instancesmaynever
Figure 10, if the packet is tagged as “normal”, it is forwarded be exercised. While this is theoretically valid, in practice, we
to port 1, and if the packet is tagged as ”suspicious” it is canaddressitasfollows.First,thecontrollerinstallsthefuture
forwarded to port 2. Note that because the controller has a ψDAGs for the same class to be multiplexed on the same
logically global view it can proactively install these per-tag hardware as the current ψDAG for that class. Since there is
forwarding rules for each class class without waiting for a only one active ψDAG for a given traffic class at a given
PKTIN event. time, this incurs no additional hardware resources. Second,
weimplementsomesimpleoptimizationstodoanincremental
Now, there might be two potential deployment concerns.
launch; e.g., if there are common ψmbox instances across the
First, we need sufficient space in the packet header to add
future ψDAGs then we can reuse these instead of cloning
these tags. This is not an issue as new standards for virtual
them.Thislastoptimizationalsoindirectlyhelpstoreducethe
network forwarding and network service chaining headers
downtime by reducing the number of new VMs we need to
explicitly include additional header space for metadata [70],
launch.
[71]. With software switching (e.g., OpenvSwitch) and new
switch pipelines [28], it is possible to add flexible header
matching rules based on these tag bits. Furthermore, these
VI. PSIIMPLEMENTATION
headertagsareonlyneededinsidetheψcluster,whereweare
not constrained by legacy networking. Second, the ψmboxes We have implemented a fully functional PSI system using
havetoexplicitlyexposethesetags.Priorworkshowsthatthe opensourceSDN/NFVtools,consistingofaround8Klinesof
modifications required to commodity middleboxes to add the code [19]. In this section, we briefly our implementation and
tagging logic is less than 50 lines of code [36]. theextensionswemadetoopensourcetoolstoenablethePSI
vision.
Scale-out controller: While proactive forwarding addresses
the scaling problem in dealing with PKTIN arrivals, it does
Controller: We choose OpenDaylight a popular
not address the issue of an adversary sending crafted data to
industry-grade SDN controller as our starting point. Since
generate a large event/alert volume to overload the controller.
OpenDaylight only focuses on simple forwarding func-
Note, however, that it may be hard to distinguish events
tions, we add several extensions to support PSI:
triggered by adversary actions vs. legitimate users. Rather
than introduce ad hoc anomaly detection algorithms to try
1. Operator interface: We write a custom GUI to make it
and differentiate legitimate vs. adversary-induced events, we
easy for operators to enter intended policies, as shown in
exploit the fact that the PSI design allows us to logically
Figure 11. The PSI GUI can take in both textual (in a
partitiontheeventhandlingacrossdifferenttrafficclasses.That
domain-specific language) and graphical (by adding and
is,wecansimplyhorizontallyscalethePSIcontrollerandadd
inter-connecting graph nodes) forms. Then a policy parser
more instances as needed depending on the offered load [32],
translates the input into ψFSM and ψDAG data structures
[45].Thisisespeciallyeasybecausethedifferenttrafficclasses
for each traffic class. The policy parser also verifies the
are independent and do not introduce any synchronization
consistencyofthepolicy(e.g.,thesametrafficflowisnotbe
bottlenecks at the controller.
assignedconflictingpolicyactions,suchasdrop/pass)using
Wedesignascale-outmechanismsimilartoelasticscaling checking mechanisms similar to those of Fireman [74].
solutions in cloud deployments [4], [32]. While the elastic
2. Event handler: OpenDaylight natively only handles
scaling solutions only migrates switches states, PSI’s scale-
OpenFlow messages from SDN switches. We extend it to
out mechanism migrates device attributes, security states and
handleeventsfromcommonsecurityappliances;e.g.,Snort
policyspecificationswithinthepredicates,ψFSM andψDAG
IDS alerts.
structures. A simple runtime monitor inspects the response
time for each controller instance. If the response time is 3. Orchestration: We write custom code to setup tag-based
starting to increase more than a preset threshold, it invokes forwarding rules on switches. Our VM launching scripts
an elastic scaling routine that adds an extra control instance interact with the KVM hypervisor running at the ψmbox
and splits the traffic classes currently handled by the over- node(seebelow).Thisorchestrationmoduleisalsorespon-
loaded instance across the added instances, and migrate the sible for implementing the ψDAG prefetching logic from
corresponding structures. the previous section.
81/30/2016 Cy3 Import Demo
1/29/2016 Cy3 Import Demo
P ψre Fd Si Mca te dips :i $p E:1 X0 T. ,2 d.0 p. o1 r, ts :p 80o ,r t d:a Mn Ay,
C
s
:
M anA yC
,
:
p
a rn oy
to
# r
r
r
r r
r
r r
r
r r
s
s
s
s,
E 1
1
1
1 1
1
2 2
2
2 2
1
1
2
2
n
:
f r
s
s
s s
s
s s
s
s s
o
o
o
o6
o 2
1
2
3 4
5
6 7
8
9 1
z
z
z
zr
0
1
5
3
4
c
b
b
a
b
e men t
#IssssssssssssssAAssssEn55511144662222PP3333nt fessshhhsshhhssAlMssssor146ooo23oooeePaoeeeern
sss
sssrr
pbrrrrce
ttt
tttvv
tivvvvet
123
564ee
oleeee
m
rr
perrrr
es
13
1234n5 t
s3 oz3b
s3 oz6b
s4 oz1a
s4 oz2a
s4 oz5a
ψDAG s s s s4 5 5
5
o o o oz z z z7 2 2 7a b b
b
(b) A enterprise network that
s s6 6 o oz z1 5a b (a) Stanford backbone network, suffers from a five-year RAT
s7 oz3a
s s7 8 o oz z6 3a b eachozisconnectedwith4devices. APT[10].
s s8 8 o oz z6 6b b 1/30/2016 Cy3 Import Demo
s s9
9
o oz z2 7a
a
s10 oz2b
s10 oz7b #Enforcement
ISP1 r1
ISP2 r2
r1 r2
r1 PIX1
r1 PIX2
r2 PIX1
r2 PIX2
PIX1 PIX2
PIX1 s1
PIX1 s2
PIX1 s3
PIX1 AP
s1 host1
s1 host2
Fig. 11: The dynamic scrutiny policy expressed via PSI s2 host2
s2 server1
s2 server2
GUI. s s2 3 s se er rv ve er r3 3
s A3 P s le ar pv te or p 4 (c)EnterprisewithciscoPIXfirewall.
AP mobile
PIX2 s2
PIX2 s3
PIX2 s4
s4 s5
4. ψmbox controlchannel:Wealsoimplementcustomcontrol s s s4 4 4 s s se e 5r rv ve er r7 8 Fig. 12: Evaluation topologies.
s5 server5
channels between the PSI controller and the individual s5 server6
ψmboxes. These serve two purposes. First, they implement
switchtosteerthetraffictotheψcluster.Theseψmboxes need
ψmbox-specific messages for reconfiguring policies; e.g.,
twominimalextensionstointegratewithPSI.First,weextend
installingandupdatingψmbox-specificconfigurations.Sec-
the ψmbox implementations to support the addition of tags
ond, these control the tagging behavior of the ψmbox to
to ouftilge:///Uoseris/ntianglongyup/Docaumcentks/Preojecttss/PSI/gtithoub/Topeolongy/aTopbololgye/indext.hthmle tag-based forwarding [316/1].
enabletheproactivetag-basedforwardingschemedescribed
Second,weneedtoforwardevents/alertstothePSIcontroller.
earlier.
Weimplementthisbyhavingalight-weightPSIclientprogram
5. Runtime scale-out: We implemented simple Java runtime thatparsesthesealerts(e.g.,Snortalerts)andforwardsthemto
monitors to inspect the response time on eacfileh:///Usecrs/toianlnongtyur/Dooclumleentsr/Projects/PSI/gtithhub/eTopolcogyo/Tonpoltogryo/indlexl.hetmrl. This alert parsing program1/1is configurable and
instance. Once the response time exceeds a threshold, we can be customized to only forward relevant events to reduce
scale out the instance asfollows. Suppose the stressed con- the control plane load.
troller instance is C1, the corresponding runtime monitor
RM1 then: 1) launch a new instance C2; 2) offload half VII. EVALUATION
of the traffic classes, and their FSM, NFDAG with the
FSM current state into a policy configuration file and In this section, we evaluate PSI to show that:
send to C2 in a notify message. C2 then inputs the policy •Security benefits: When working against stealthy attacks,
configurationfilefromRM1,andsetupconnectionswiththe PSI identifies and mitigates 35% more attacks than a dis-
relatedNFsandswitches.Finally,C2 sendaACKmessage tributedFirewall/IPSsolution.PSIisabletomoreeffectively
toC1 andC1 closesthesocketconnectionswiththerelated file:///Users/tiainlmongyup/Dolceumments/Perojnectst/PSIc/giothubm/Toppologlye/Toxpologdy/inidsex.thtrmlibutedsolutions.PSIeliminat1e/1sthe
NFs and switches. logical interference and reduces the performance interfer-
ence damage by 85%.
6. Composing ψFSM and scoping ψmbox instances: We
implementedanψFSM compositionmodulethatcaninput •Scalability, responsiveness and resilience: Proactive
all policy intents that applies to a device and compose context-based forwarding reduces the end-to-end latency by
the policy ψFSM by calculating the cross product of the at least 10X over the baseline performance. PSI’s ψDAG
states,theunionofeventsandthenewtransitions.Toscope prefetching mechanism reduces security downtime during
ψmbox instances, we implemented a scoping scheme that ψFSM transitions from seconds scale to zero. With the
inputs the natural scoping order (a sequence of scope IDs) optimizations,asinglePSIcontrollercansupportanetwork
fromtheadministrator,assigningeachψmbox instancewith with 100K devices, and can support complex policies with
a corresponding scope ID, and steering all the traffic in upto10stateswithasize-10DAGforeachstate.Ourscale-
scope through the instance, following the scoping order. out scheme cuts the response time down to 10ms even in
the presence of an adversary.
PSI data plane: To realize each ψmbox, we use virtual SincePSIisanenablerforexisting/emergingsecuritytools,
machines.Wechosethisoveralternativeslikecontainers(e.g., notanewdetectionalgorithmforaspecificattack,weevaluate
Docker) as it offers stronger performance isolation across the benefits for a whole enterprise network (coverage over
different traffic classes. We currently support several open attack paths, collateral damage) rather than show the ROC
source security functions; e.g., NAT/firewalls using iptables, (receiver operating characteristic) curve (FP vs. FN) for a
IDS/IPS using Snort [57], proxies using Squid [23], and load particular end-point.
balancers using Balance [7]. Each ψmbox runs inside a VM;
weuseCentos6.5asthehostOSrunningtheKVMhypervisor. Experimental Testbed: Our experiments run on a cluster
We set up simple tunnel-based forwarding rules at the ingress of 12 Dell R720 machines, each with 20-core 2.8 GHz Xeon
9CPUs and 128GB of RAM. A single PSI controller is running the malware traffic. This yields a coverage metric of the form:
on a VM with CentOs 6.5, assigned with 4 cores and 8GB coverage= num. of prevented attacks . This coverage metric
num. of all possible attacks
RAM.Onthetestbed,wesetupthreetypicalenterprise/campus evaluates how many potential attacks are prevented in a given
topologies as shown in Figure 12, details about the topologies network topology.
are given in Table I. We use 1 Dell R720 machine as the PSI
Topology distributedFirewall/IPSCoverage PSICoverage
ψcluster. To stress test our setup (controller scalability/over- mini-stanford[42] 52% 92%
loading from adversary), we extended the cbench tool [68] apt-mcafee[10] 59% 91%
to emulate IDS/IPS alerts in large enterprise-like settings.5 pix-cisco[22] 56% 89%
all 56% 91%
Topology Devices Switches Information TABLE II: Coverage over stealthy attacks.
mini-stanford[42] 56 12 Stanfordbackbonenetwork
apt-mcafee[10] 12 6 Enterprise network with In our evaluation, we instantiate the three enterprise net-
APT,reportedbyMcAfee
works in Table I in our testbed and install distributed Fire-
pix-cisco[22] 14 8 Enterprise network with
CiscoPIXfirewall wall/IPS and PSI respectively. For distributed Firewall/IPS,
TABLE I: Experiment topologies. we assume there are no resource constraints and deploy a
distributed instance at every switch in the topology. To setup
insider threats in each enterprise network, each time a device
A. Security Benefits for Network Structure
is set as an insider and it exfiltrate data from all other devices
We now show how PSI’s context-aware, dynamic and using ftp-based exfiltration or DNS-based exfiltration [2]. For
isolated approach can mitigate stealthy attacks and reduce the APT, we setup a device in external network as an attacker,
collateral damage caused by logic&performance interference. andassumeitcanalwaysbreak-inwithazero-dayattack.We,
Here a stealthy attack is one where the attacker can exploit then,usetwopcaptraces(AnglerEKandMagnitudeEK[15])
a blind spot in network design to circumvent defenses. For to emulate the following port-scanning and exploits phases of
example, an insider threat that originates within a network, the APT attack and see if the exploit traffic can reach another
evading all outward-facing defenses. In this section, we con- device (if yes, the APT attack on the device is valid).
duct two analyses. First, we compare PSI against distributed
Firewall/IPS approach by evaluating their capabilities to pre-
vent potential insider threats and APT (Advanced Persistent
Threats) in three sample enterprise networks. Second, we use
real enterprise policy and manipulated enterprise traffic to
showhowPSI’sisolationmechanismcaneffectivelyreducethe
collateral damage caused by logic/performance interference.
Coverage over stealthy attacks: We now evaluate PSI’s
ability to deal with stealthy attacks. To do so, we conduct an
attack graph analysis against two example stealthy attacks: an mini-stanford apt-macafee pix-cisco
example insider threat attack and an example APT. We com-
pare distributed Firewall/IPS’s and PSI’s ability to detect and
mitigate both attacks over three different network topologies
shown in Table I. Through this analysis, we show that PSI
is capable of identifying and mitigating 35% more potential
stealthy attacks than a distributed Firewall/IPS approach, as
demonstrated in Table II. These results are due to topological
blind spots that PSI is designed to address, and which are
common on live enterprise networks such as the examples in
Table I.
Attack graph analysis [61] evaluates defensive systems via
graph coverage. Each attack is expanded to a graph showing
the potential routes the attacker can use to achieve their goals,
and defenses are evaluated by comparing the number of paths
each defense cuts off from the attack. We chose attack graph
analysis because it integrates the structural impact of the
network’s design on the attack’s effectiveness, and enables us
to identify the cause of defensive failure. Our attack graphs
consist of a tree, G, where each node is a device on the
network, and each edge is an attack step. In G, an attack
is a path from the root device (the source of the attack) to
the leaf (target), e.g., an malware exploit from a laptop to a
server through a local switch. An attack is prevented if one
step of the attack is detected and prevented by the defense
system, e.g., a IPS connected to the switch detects and blocks
5cbenchonlysupportssimpleOpenFlowmessagesbydefault.
.muN
htaP
detagitiM
Distributed Firewall/IPS
150 PSI
Total Path Num.
APT
100 APT
Insider Insider APT
50 Insider
0
Fig. 13: Detailed results about coverage for insider threats
and APT in each enterprise network.
The detailed evaluation results are presented in Figure 13
and Table II. In summary, out of 428 potential attack paths,
distributed Firewall/IPS mitigates 240 paths (56% coverage),
while PSI mitigates 392 potential paths (91% coverage). We
analyzed the 152 paths that PSI mitigated but distributed
Firewall/IPS did not—all of them are caused by one or more
fundamental topology constraints that distributed Firewall/IPS
cannot address. Specifically, 103 paths involve NAT/DHCP;
75 paths involve devices connected to multiple switches (e.g.,
For high bandwidth or failure tolerance [20]); and 54 paths
involvedumb,unmanagedswitches.PSIcannotprovideperfect
coverage because first step, a zero-day attack, is undetectable.
Insummary,PSIimprovesthecoverageforstealthyattacksby
35%.
Logical interference: Now,weevaluatethedefensesystem’s
ability to reduce logical interference. To do so, we take real
ACLpolicies[22]fromenterprise/campusnetworksandseeif
distributed Firewall/IPS configuration or PSI policy language
causes any logical interference when expressing them. The
ACLpoliciesarealreadyexpressedasdistributedFirewall/IPS
configurations by the administrator; 249 are expressed using
Cisco PIX, 65 policies using Juniper SRX, and 34 using
iptables.WeuseSpringbok[22],anautomatedfirewallmiscon-
figurationcheckingtoolusingthemechanismsinFireman[74],
10tocheckthelogicalinterferenceinthedistributedFirewall/IPS
configurations. Springbok checks for three types of logical
interferences: shadowing, redundancy and correlation; in each
case a packet is specified with two interfering actions (pass/-
drop). Then, we express all 348 policies using PSI policy
abstractionandcheckthelogicalinterferencewithaSpringbok
implementation extended to support PSI policies.
DPI DPI+AV DPI+AV+AppCtrl
System policies Shadowing Redundancy Correlation
CiscoPIX 249 8 14 4
JupiterSRX 65 5 5 3
Iptable 34 4 6 4
PSI 348 0 0 0
TABLE III: logical interferences in distributed Firewal-
l/IPS configurations/PSI policy abstractions.
Table III shows the number of interferences of each type
between configuration rules. As the table suggests, logical
interferenceoccursinthePIX,SRCandiptableconfigurations,
whileitisabsentinPSI.Thekeyreasonisthatthedistributed
Firewall/IPS configurations follow an If-Match-Then-Action
list where preceding rules can interference with the rules
after; while PSI provides isolated states and intents for non-
overlapping traffic.
Performance Interference: Next, we evaluate the defense
system’s ability to reduce performance interference. To do
so, we generate one elephant traffic flow and several mice
flows in the network when different security functionalities
aredeployed,andmeasurethedamageinducedbytheelephant
flow (in terms of packet drops).
We install both PSI and distributed Firewall/IPS on the
three topologies in Table I. The security functionalities we
run include deep packet inspection (DPI), anti-virus (AV) and
application control (AppCtrl). We generate 8 pcap files by
accessing a server in our testbed that runs ssh, ftp, smtp and
http service; each pcap file records 24 hours’ traffic. The pcap
files contains 9% of SSH (secure shell), 12% of FTP (file
transfer), 19% of SMTP (email) and 60% of HTTP traffic (by
traffic volume). Then, we replay the pcap files on 8 devices
in each topology. To generate the elephant flow, we replay a
24 hours trace in 10 min. The other 7 traces are replayed at
normal speed as mice flows. We enforce DPI, DPI +AV
or DPI +AV +AppCtrl on the elephant flow with PSI or
distributed Firewall/IPS. We measure the average packet loss
rate over all 8 Devices as the metric to indicate the collateral
damage. The results in Figure 14 show that PSI generates
around 5% average packet drop rate in three cases, while
packet drop rate with distributed Firewall/IPS is 34%. This is
because PSI provides customized & isolated ψmbox for each
device, and can precisely enforce DPI only on the elephant
flow. In conclusion, PSI reduces the collateral damage of an
elephant flow (in terms of average packet drop) by 85%.
B. Benefits of PSI optimizations
Next, we demonstrate how PSI’s optimizations from Sec-
tion V improve the system performance.
Proactive context-based forwarding: To analyze the impact
of proactive controller setup, we send flows from one host to
anotherusingaψDAG withtwopathsandmeasurethelatency
perflow.Withareactivecontroller,thefirstpacketoftheflow
etaR
porD
tekcaP
egarevA
0.4 PSI
NGFW
0.3
0.2
0.1
0
Fig. 14: Collateral damage due to an elephant flow.
generates an event (Snort alert) and waits for the controller to
process the event, select the path, and install the forwarding
rules. With proactive handling, the packet is tagged at the NF
as discussed in §V-B. We gradually increase the load and see
how it affects the end-to-end latency in Figure 15. We see
that proactive handling mechanism reduces latency by at least
10X. Note that, unlike the reactive controller, the latency of
proactive handling is independent of the traffic rate.
101 102 103 104 105
Event Rate (events/s)
)sm(
ycnetaL
dne-ot-dnE
Reactive
15 PSI
10
5
0
Fig. 15: Proactive context-based forwarding.
ψDAG prefetching: To evaluate the effect of ψDAG
prefetching, we test the following scenario: a host H1 is
protected by a policy with 11 states, each with a unique
ψDAG. For simplicity, the state transitions are sequential as
E1 E2 E3 E10
s −−→ s −−→ s −−→ ··· −−→ s . An attacker create 10 0 1 2 10
types attack flows a1,··· ,a10 against H1, which triggers the
transition event E1,··· ,E10 respectively. The hope of the
attacker is to make transitions from a1 to a10 sequentially
to get through before the defense system can respond. In
our evaluation, we write a script to send 10 attack flows
a1,··· ,a10 as a group (with different payloads) sequentially
from H2 to H1 to simulate such this attacker. We vary
the attack flow arrive interval from 2s to 5s to simulate the
frequencyoftheattack,asillustratedbythexaxisofFigure16.
We measure the time between the arrivals of the first and the
lastpacketsoftheflowatH1asthedowntimeoftheflowand
calculatetheaveragedowntimeacross10000groupsofflows.
We compare a naive update scheme which waits for the event
to trigger ψDAG launch vs. our prefetch scheme with 1-hop
and 2-hop look-ahead. For the naive-scheme, there are 3 VMs
in each ψDAG and they are launched in parallel. Figure 16
showsthatwitha2-hopprelaunch,wecanensurezerosecurity
downtime.
Controller scale-out: In this evaluation, we stress our con-
troller with our test generator to emulate an adversary and
see how PSI’s scale-out scheme maintains a small response
time under attack. We connect 20 test generators to our
controller, with a 100 events/s rate initially. Then, we select
10 test generators to increase the rate to 110,000 events/s
simultaneouslytoemulatetheadversary.AteachPSIcontroller
112 3 4 5
Flow arrive interval (s)
)sm(
emitnwoD
4000
3000
no prefetch
2000 1-hop prefetch
2-hop prefetch
1000
0
Fig. 16: Effect of ψDAG prefetching.
VM,PSImonitorstheaverageprocesstimeofeacheventwith
anhighdelaythreshold(setto8ms).Ifthethresholdisreached,
then PSI scale-out scheme will launch new VMs to scale-out
as described in Section V-B.
Figure 17 shows the changes of the response time as
the load increases. We observed that each peak decrease is
caused by scaling out the PSI controller to 2, 3, 4 and 5 VMs
respectively. From the result we can conclude that the PSI
scale-outschemesuccessfullypreventstheresponsetimefrom
increasing beyond 10ms in the presence of an adversary.
12
10
8
6
4
2
0
2 4 6 8 10
Load on Controller (events/s) x 105
)sm(
emit
esnopseR
state) respectively from 2 to 10 to measure the controller’s
performance’s sensitivity to policy complexity. Figure 18
showsthatwhilethepolicycomplexitydoesimpactthroughput
and response time, it is quite negligible. The RAM increases
linearlywiththenumberofψFSMsorψDAGsbutcaneasily
supported by extension. In summary, we observe that richer
policies are not fundamental bottlenecks for PSI deployment.
2 3 4 5 6 7 8 9 10
Scale-out Scale-out Scale-out Scale-out
to 2 VMs to 3 VMs to 4 VMs to 5 VMs
Fig. 17: PSI controller scale-out.
C. PSI Scalability
We now evaluate PSI’s scalability in supporting a large-
scale enterprise network.
Singlecontrollerbenchmark: First,webenchmarktheevent
processing throughput a single PSI controller instance. Our
test generator sends event messages to the controller as fast as
possible (until their TCP send buffer blocks). Each message
triggers a state change in the controller logic. We increase the
number of generators and measure the observed throughput.6
In this evaluation, the controller is assigned 8 GB RAM, and
hostsψFSM andψDAGsfor100,000devices(onepolicyfor
each device). Each ψFSM has 4 states and each ψDAG has
4 NFInstances. The result shows that a single PSI Controller
has a maximum throughput of around 230,000 events/s (not
shown). To put this in context, if each device generates one
eventevery5s(ahighaveragealertrate[43]);asingleinstance
could still handle a network with 100,000 devices.
Sensitivity to policy complexity: Next, we evaluate the
impact of ψFSM and ψDAG size, which reflect the policy
complexity. In this evaluation, the controller is fixed to host
ψFSM and ψDAGs for 100k devices (one policy for each
device). Then increase the size of ψFSM (number of states)
and size of ψDAG (number of security appliances for one
6Weobservedthatasinglegeneratorcannotsaturatethecontroller.
tuphguorhT
.xaM
)s/stneve(
#105
2
1 FSM Size
DAG Size 0
2 3 4 5 6 7 8 9 10
egasU
yromeM )BG(
10
5 FSM Size
DAG Size
0
2 3 4 5 6 7 8 9 10
Policy Complexity (FSM/DAG Size)
emiT
dnopseR )sm( 5
FSM Size
DAG Size
0
Fig. 18: Sensitivity to policy complexity.
D. PSI Use Cases
In this section, we describe a number of use cases that
demonstrate how PSI can enable new security capabilities:
Protecting IoT devices with default passwords: Commonly
knowndefaultpasswordsareaproblemforembeddeddevices.
To secure these devices, we implemented a simple proxy
system as shown in Figure 19. This IoT-ψmbox (A Ubuntu
VM with a customized Squid proxy) serves as a gateway to
all traffic to embedded systems on the network. The target
in this example, was a D-link surveillance camera, which
ships with a hardcoded admin password that the user has no
interfacetodelete.Inthiscase,incomingtrafficisinspectedfor
known suspicious password combinations (e.g., admin/admin)
are dropped and actual access is only granted by rewriting
packets to the correct password combination. The ψmbox can
enforce the use of a new administrator-chosen password to
access the camera’s management interface or images.
Patch camera with new secure password
new secure password PSI Controller
IoT password proxy(cid:1)
With
Current
PSI
World
admin/admin(cid:1)
Fig. 19: ψmbox to Patch Embedded Vulnerability.
Disrupting botnets via on-demand captchas: Today’s com-
munication between bots and command-and-control (C&C(cid:2)(cid:1))
servers use common protocols such as HTTP to hide among
legitimate traffic flows. Now a naive whitelist-based approach
(i.e., allowing known popular sites) that raises an alert (or
worse block) every off-whitelist HTTP URL access can result
in very high false positives (or disrupt legitimate traffic.)
12Instead, we can enable a agile botnet disruptor to verify if the (c) lack of expressiveness to tackle novel threats; and (d)
connection was intended by the user as shown in Figure 20. undesirable tradeoffs between stronger security postures vs.
We implement this a ψmbox running an Apache server, with user backlash [16]. By design, PSI addresses these pain
the Google ReCaptcha service as follows. when a user is points. PSI’s vision shares conceptual similarity with classical
seen sending a log of suspicious HTTP requests (e.g., short- work on distributed firewalls [27], [41]. Other work addresses
lived domains), then the botnet disruptor dynamically forces orthogonal problems related to scalability (e.g., [69]) and alert
the user to enter a “captive portal” with a captcha forcing the correlation (e.g., [58]).
user to verify the connections. If the request was legitimate
and validated as human, the connection is allowed, otherwise SDN, NFV, and Security: Prior work has aimed to take
the device is flagged (or disconnected pending further investi- advantageofSDNandNFVtomakenetworksecurityenforce-
gation). ment more flexible. Ethante [29] uses a centralized controller
controls switches at critical points to authorized traffic. Flow-
Guard [40] resolves interfering ACL policies from firewalls
Admin(cid:1)
in SDN network. However, Ethane or FlowGuard does not
support security policies beyond ACLs and do not allow
PSI Controller
Step3: is bot more advanced security policies captured by ψDAGs and
Step2: Ac7ve Check ψFSMs. Flowtags [36] and Simple [53] are two other related
“meethue.com”(cid:1)
is Human(cid:1) works close to PSI. Flowtags provides interfaces between
Step1: human/bot? middleboxesandtheSDNcontrollertoenabletheenforcement
or(cid:1)
“google.com”(cid:1)
of “fixed” ψDAG. Simple provides simplified traffic steering
normal(cid:1) over a set of statically deployed middleboxes. FlowTags or
IPS(cid:1)
SimplesupportsneitherdynamicallychangingψDAGs(which
Fig. 20: PSI Bot Disruptor.
areaccommodatedinPSIusingψFSMs)norguaranteespolicy
isolation.
Context-AwareOn-DemandDecoys: Scansandbackground
radiation are an operational reality today viewed as “ankle FRESCO [62] implements detection and mitigation mod-
biters”thatarefundamentallynotworthanalystattention[26]. ules in the SDN controller. However, the controller becomes a
However,insomecases,scansmightforeshadowanupcoming critical bottleneck for scalability and requires reimplementing
attack; e.g., after HeartBleed is disclosed, and understanding functionality that is commonly available in security mid-
the attack workflow may provide valuable information for dleboxes. OFX [66] and Kinetic [43] focuses on networks
futuredefenses.Buildingontheearlierexample,weimplement composed of switches. PBS [39] shares some our motivation
acontext-awaredynamicdecoysystem[25].Onceweidentify in addressing security challenges induced by BYOD. In con-
a specific scanner IP from a host H (e.g., Ubuntu-12.04, trast to PSI, PBS: (a) only focuses on BYOD mobile apps;
1
SSL1.01-4), we subject it to tighter monitoring via an IPS. If (b) involves a reactive controller; and (c) needs end-point
the IPS detects a follow-up exploit action, then PSI instantiate instrumentationonAndroid.Otherworkfocusesonexploiting
a “decoy” honeypot ψmbox tailored to Ubuntu-12.04 with SDN/NFVtoprovideelasticscalingofsecurityfunctions[34],
SSL1.01-4 and redirects the exploit traffic to the honeypot in [50]; such elastic scaling is orthogonal to the focus of PSI.
order to investigate the attack’s intent. That said, the PSI ψcluster can leverage these elastic scaling
capabilities if needed.
Admin(cid:1) Controller scaling, either via horizontal scaling (e.g., [32],
True Threats [44]) or proactive orchestration (e.g., [34], [36]) are active
PSI Controller areas of work in SDN/NFV. PSI synthesizes and extends
Step1: Nmap Step2: exploit Step3: Launch these efforts through a combination of proactive tag-based
Scan Detected on 10.1.0.1 customized decoy forwarding and elastic scaling.
detected mimic H1
IPS Honeypot Policy languages: There has been renewed interest in pro-
UC bS ue S nn L tt 1 uO . 10S 216 .e. 05 1 4 0 .1H .0.1 1 S “c Ha en a D rfo te brt l e ec et do ”r At rt hMa oc e sk tt aa 1st 0 pT .1li om .0it .e 1 1 : C Se Sn Lt 1O .0S 16 e.5 g v dr i yda nm e as mm a ii cn adg lo lymab a cs i ht nr aa nsc gpti eeo cn Ois fi pc efo nlr Fan ln oge wut aw sgo wer ik tas cn hd[4 a3 a cn] t, ioS[ n4 D s8 N] [. 43cK ]o .i nn Hte rt ooi wc lle ep r vr eo t ro- ,
SSL1.01-4 H 2 Devices H (cid:2) Kinetic is constrained and cannot express richer policies
10.2.0.1
Attack at Time 0: that involve stateful middleboxes [38]. PGA [52] provides
Nmap Scan
support for composing forwarding policies across aggregates
Fig. 21: Context-aware Decoy.
and detecting conflicts. PSI provides a richer abstraction that
subsumes these prior efforts.
VIII. RELATEDWORK
Industryefforts: Google’sBeyondCorpinitiative[72]focuses
Firewalls and IDSes: Middleboxes such as firewalls and on authentication and user trust, and can conceivably be de-
IDS/IPS [51], [57] are the “workhorses” of network security feated by evading the authentication system (e.g., a malicious
mechanismstoday.Unfortunately,thesehavewell-documented insider). PSI’s focus on traffic behavior is intended to be
concerns with respect to (a) performance (e.g., 30% of ad- robust to insider threat and other attacks by avoiding a single
ministrator disable useful security features such as DPI and point of trust. VMWare’s NSX and microsegmentation tackles
anti spoofing [16]); (b) misconfigurations (e.g., [35], [49]); datacenter security by pushing firewalling functionality into
13hypervisorstotackle“east-west”traffic,whichisnotprotected [8] Cisco Evolved Services Platform. http://www.cisco.com/
byperimeterfirewalls[71].However,thesecuritymechanisms c/en/us/solutions/collateral/service-provider/service-provider-
and abstractions are restricted to simple firewalling rules. In strategy/brochure-c02-731348.html.
contrast, PSI targets a much richer set of policies that can [9] Ciscopix500seriessecurityappliances.http://www.cisco.com/c/en/us/
products/security/pix-500-series-security-appliances/index.html.
involve multiple security middleboxes and does not rely on
every device to run atop a hypervisor. Finally, the vision of [10] Diary of a rat. http://www.provision.ro/threat-management/data-
security/content-aware-and-dlp/diary-of-a-rat-remote-access-tool.
SDN/NFV is gaining a lot of traction in industry; e.g., Cisco’s
[11] Exposed: An inside look at the magnitude exploit kit.
Evolved services platform [8] describes a high-level architec-
http://www.csoonline.com/article/2459925/malware-cybercrime/
ture similar to PSI. Based on public documentation, however, exposed-an-inside-look-at-the-magnitude-exploit-kit.html.
itdoesnotspecificallytacklethekindsofsecurity,policy,and
[12] Fireeye. https://www.fireeye.com/.
scalability challenges we describe here. These trends further
[13] Ieee std. 802.1q-2005, virtual bridged local area networks. http:
corroborate our arguments that the PSI architecture is viable, //standards.ieee.org/getieee802/download/802.1Q-2005.pdf.
and likely the inevitable culmination in response to today’s
[14] Integratingsdnintothedatacenter. http://www.juniper.net/us/en/local/
security woes. pdf/whitepapers/2000542-en.pdf.
[15] malware-traffic-analysis.net. http://malware-traffic-analysis.net/.
IX. CONCLUSIONS [16] McAfee Report Reveals Organizations Choose Network Performance
Over Advanced Security Features. http://www.mcafee.com/us/about/
Existing network security mechanisms leave defenders at news/2014/q4/20141028-01.aspx.
a disadvantage as they have fundamental limitations in terms [17] Opendaylight. http://www.opendaylight.org/.
of:(1)isolation,leadingtopoliciesinterferingwitheachother;
[18] Opendaylight,group based policy. https://wiki.opendaylight.org/view/
(2)context,preventingthedefendersfromcreatingatrulycus- Group Based Policy (GBP).
tomized response; and (3) agility, constraining the defenders’ [19] Psi. https://github.com/PreciseSecurity/PSI.git.
abilitiestospecifydynamicsecuritypostures.Toaddressthese
[20] Server nic teaming to multiple switches. http://itknowledgeexchange.
pain points, PSI leverages recent advances in software-defined techtarget.com/network-engineering-journey/server-nic-teaming-to-
networkingandnetworkfunctionsvirtualizationtoenableiso- multiple-switches/.
lated,context-aware,andagilesecuritypostures.Weaddressed [21] Splunk. http://www.splunk.com/.
key challenges in developing expressive policy abstractions [22] springbok. https://github.com/conix-security/springbok.
and scalable orchestration mechanisms. We showed that PSI [23] Squid:Optimisingwebdelivery. http://www.squid-cache.org/.
is scalable and can be an enabler for new security capabilities [24] Throughput and Scalability Report, McAfee NGFW 5206, v5.8.
that would be exceedingly difficult to implement with legacy http://www.mcafee.com/us/resources/reports/rp-miercom-throughput-
solutions. scalability-ngfw.pdf.
[25] M. H. Almeshekah and E. H. Spafford. The case of using negative
Weidentifytwonaturaldirectionsforfuturework:(1)bet- (deceiving) information in data protection. In Academic Conferences
ter user interfaces for operators to express PSI-based policies andPublishingInternational,2014.
and (2) support for cross-device policies (e.g., when the IPS [26] R.Bejtlich. TheTaoofnetworksecuritymonitoring:beyondintrusion
flagsahost,theadministratormaywanttoincreasemonitoring detection. PearsonEducation,2004.
fidelity for other hosts in the same subnet.) Finally, we [27] S.Bellovin.Distributedfirewalls. login,pages39–47,November1999.
acknowledgethatPSIisnotapanaceaandcanbevulnerableto [28] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford,
covert channels used by attackers; e.g., malware via encrypted C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese, et al. P4: Pro-
gramming protocol-independent packet processors. ACM SIGCOMM
cloudstorage.Thatsaid,PSIisasignificantstepthatcanhelp
ComputerCommunicationReview,44(3):87–95,2014.
restore some balance in favor of defenders in the constant
[29] M. Casado et al. Ethane: Taking control of the enterprise. In Proc.
tussle with more advanced adversaries.
SIGCOMM,2007.
[30] M.Chiosi,D.Clarke,J.Feger,C.Cui,J.Benitez,U.Michel,K.Ogaki,
ACKNOWLEDGMENTS M.Fukui,D.Dilisle,I.Guardini,etal.Networkfunctionsvirtualisation:
An introduction, benefits, enablers, challenges and call for action. In
This work was supported in part by NSF award number SDNandOpenFlowWorldCongress,2012.
CNS-1440056 and by Intel Labs University Research Office.
[31] A. Cimatti, E. Clarke, E. Giunchiglia, F. Giunchiglia, M. Pistore,
M.Roveri,R.Sebastiani,andA.Tacchella. Nusmv2:Anopensource
REFERENCES tool for symbolic model checking. In Computer Aided Verification,
pages359–364.Springer,2002.
[1] 10 strategies of a world-class cybersecurity operations center.
[32] A. Dixit, F. Hao, S. Mukherjee, T. Lakshman, and R. Kompella.
https://www.mitre.org/sites/default/files/publications/pr-13-1028-mitre-
Towards an elastic distributed sdn controller. In Proceedings of the
10-strategies-cyber-ops-center.pdf.
second ACM SIGCOMM workshop on Hot topics in software defined
[2] 13 signs that bad guys are using dns exfiltration to steal networking,pages7–12.ACM,2013.
yourdata.https://theworldsoldestintern.wordpress.com/2012/11/30/dns-
[33] B. Elgin, D. Lawrence, and M. Riley. Neiman Marcus Hackers Set
exfiltration-udp-53-indicators-of-exfiltration-udp53ioe/.
Off60,000AlertsWhileBaggingCreditCardData. BloombergBusi-
[3] Aclandnatconflicteachother.routerstopworking. www.networking- nessWeek, http://www.businessweek.com/articles/2014-02-21/neiman-
forum.com/viewtopic.php?f=33&t=7635. marcus-hackers-set-off-60-000-alerts-while-bagging-credit-card-data.
[4] Amazon web service: Elastic load balancing. http://aws.amazon.com/ [34] S.K.Fayaz,Y.Tobioka,V.Sekar,andM.Bailey. Flexibleandelastic
elasticloadbalancing/. ddosdefenseusingbohatei. InUSENIXSecuritySymposium,2015.
[5] Angler ek exploits recently patched flash bug to deliver bedep. [35] S.K.Fayaz,T.Yu,Y.Tobioka,S.Chaki,andV.Sekar. Buzz:Testing
http://www.securityweek.com/angler-ek-exploits-recently-patched- context-dependentpoliciesinstatefulnetworks. InProc.NSDI,2016.
flash-bug-deliver-bedep.
[36] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul.
[6] Arcsight. http://www.ndm.net/arcsight. Enforcingnetwork-widepoliciesinthepresenceofdynamicmiddlebox
[7] Balance. https://www.inlab.de/balance.html. actionsusingFlowTags. InProc.NSDI,2014.
14[37] FirstPost. Wikileaks trial: Tech experts tie Bradley Manning to [60] A. Sharma, Z. Kalbarczyk, R. K. Iyer, and J. Barlow. Analysis of
databasebreach.http://tech.firstpost.com/news-analysis/wikileaks-trial- credentialstealingattacksinanopennetworkedenvironment. InNSS,
tech-experts-tie-bradley-manning-to-database-breach-214128.html. pages144–151,2010.
[38] M.Handley,V.Paxson,andC.Kreibich. Networkintrusiondetection: [61] O.Sheyner,J.Haines,S.Jha,R.Lippmann,andJ.M.Wing.Automated
Evasion, traffic normalization, and end-to-end protocol semantics. In generationandanalysisofattackgraphs.InSecurityandprivacy,2002.
USENIXSecuritySymposium,pages115–131,2001. Proceedings.2002IEEESymposiumon,pages273–284.IEEE,2002.
[39] S.Hong,R.Baykov,L.Xu,S.Nadimpalli,andG.Gu. Towardssdn- [62] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson.
definedprogrammablebyod(bringyourowndevice)security.InNDSS, FRESCO: Modular composable security services for software-defined
2016. networks. InProc.NDSS,2013.
[40] H. Hu, W. Han, G.-J. Ahn, and Z. Zhao. Flowguard: building robust [63] S.Shin,Y.Song,T.Lee,S.Lee,J.Chung,P.Porras,V.Yegneswaran,
firewalls for software-defined networks. In Proceedings of the third J. Noh, and B. B. Kang. Rosemary: A robust, secure, and high-
workshoponHottopicsinsoftwaredefinednetworking,pages97–102. performance network operating system. In Proceedings of the 2014
ACM,2014. ACMSIGSACConferenceonComputerandCommunicationsSecurity,
pages78–89.ACM,2014.
[41] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M. Smith.
Implementing a distributed firewall. In Proceedings of the 7th ACM [64] S.Shin,V.Yegneswaran,P.Porras,andG.Gu. Avant-guard:Scalable
conferenceonComputerandcommunicationssecurity,pages190–199. andvigilantswitchflowmanagementinsoftware-definednetworks. In
ACM,2000. Proceedings of the 2013 ACM SIGSAC conference on Computer &
communicationssecurity,pages413–424.ACM,2013.
[42] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis:
Staticcheckingfornetworks. InProc.NSDI,2012. [65] P. Simmonds. Perimeter Security: In Memoriam. Infose-
curity Magazine, http://www.infosecurity-magazine.com/view/30984/
[43] H. Kim, J. Reich, A. Gupta, M. Shahbaz, N. Feamster, and R. Clark. perimeter-security-in-memoriam/.
Kinetic: Verifiable dynamic network control. In 12th USENIX Sym-
[66] J.Sonchack,J.M.Smith,A.J.Aviv,andE.Keller. Enablingpractical
posiumonNetworkedSystemsDesignandImplementation(NSDI15),
software-defined networking security applications with ofx. In NDSS,
pages59–72,Oakland,CA,May2015.USENIXAssociation.
2016.
[44] T.Koponenetal.Onix:ADistributedControlPlatformforLarge-scale
[67] R.Soule´,S.Basu,R.Kleinberg,E.G.Sirer,andN.Foster. Managing
ProductionNetwork. InProc.OSDI,2010.
thenetworkwithmerlin. InProc.HotNets,2013.
[45] A. Krishnamurthy, S. P. Chandrabose, and A. Gember-Jacobson.
[68] A.Tootoonchianetal. Oncontrollerperformanceinsoftware-defined
Pratyaastha: an efficient elastic distributed sdn control plane. In
networks. InUSENIXHot-ICE,2012.
Proceedings of the third workshop on Hot topics in software defined
networking,pages133–138.ACM,2014. [69] M.Vallentin,R.Sommer,J.Lee,C.Leres,V.Paxson,andB.Tierney.
The NIDS cluster: scalable, stateful network intrusion detection on
[46] J. Martins, M. Ahmed, C. Raiciu, V. Olteanu, M. Honda, R. Bifulco,
commodityhardware,2007.
and F. Huici. ClickOS and the art of network function virtualization.
InProc.NSDI,2014. [70] VMWare. The vmware nsx network virtualization platform.
https://www.vmware.com/files/pdf/products/nsx/VMware-NSX-
[47] S.McCarthy. BusinessStrategy:U.S.FederalGovernmentITSecurity
Network-Virtualization-Platform-WP.pdf.
Spending Forecast and Market Outlook. IDC Govenrment Insights,
[71] Vmware. Next generation security with vmware nsx and palo alto
2013.
networksvm-series. InWhitePaper,pages1–25,2013.
[48] C.Monsanto,J.Reich,N.Foster,J.Rexford,andD.Walker.Composing
[72] R. Ward and B. Beyer. Beyondcorp: A new approach to enterprise
software-definednetworks. InProc.NSDI,2013.
security. ;login:,Vol.39,No.6:6–11,2014.
[49] T.Nelson,C.Barratt,D.J.Dougherty,K.Fisler,andS.Krishnamurthi.
[73] M. Yu, J. Rexford, X. Sun, S. Rao, and N. Feamster. A survey of
Themargravetoolforfirewallanalysis. InLISA,2010.
virtual lan usage in campus networks. Communications Magazine,
[50] S. Palkar, C. Lan, S. Han, K. J. amd Aurojit Panda, S. Ratnasamy, IEEE,49(7):98–103,2011.
L.Rizzo,andS.Shenker. E2:AframeworkforNFVapplications. In
[74] L. Yuan, H. Chen, J. Mai, C.-N. Chuah, Z. Su, and P. Mohapatra.
Proc.SOSP,2015.
Fireman:Atoolkitforfirewallmodelingandanalysis. InSecurityand
[51] V.Paxson. Bro:Asystemfordetectingnetworkintrudersinreal-time. Privacy,2006IEEESymposiumon,pages15–pp.IEEE,2006.
InComputerNetworks,pages2435–2463,1999.
[75] H. Zeng. Automatic Data Plane Testing. PhD thesis, Stanford
[52] C. Prakash, J. Lee, Y. Turner, J.-M. Kang, A. Akella, S. Banerjee, University,2014.
C.Clark,Y.Ma,P.Sharma,andY.Zhang.Pga:Usinggraphstoexpress
and automatically reconcile network policies. In Proc. SIGCOMM,
2015.
[53] Z. Qazi, C. Tu, L. Chiang, R. Miao, and M. Yu. SIMPLE-fying
middleboxpolicyenforcementusingsdn. InProc.SIGCOMM,2013.
[54] M. N. Rabe, P. Lammich, and A. Popescu. A shallow embedding of
hyperctl*.ArchiveofFormalProofs,Apr.2014.http://afp.sf.net/entries/
HyperCTL.shtml,Formalproofdevelopment.
[55] F. Rashid. For discerning hackers, malware is so last year.
http://www.infoworld.com/article/2980341/security/for-discerning-
hackers-malware-is-so-last-year.html.
[56] M. Riley, B. Elgin, D. Lawrence, and C. Matlack. Missed Alarms
and 40 Million Stolen Credit Card Numbers: How Target Blew
It. Bloomberg BusinessWeek, http://www.businessweek.com/articles/
2014-03-13/target-missed-alarms-in-epic-hack-of-credit-card-data.
[57] M. Roesch etal. Snort: Lightweight intrusion detectionfor networks.
InLISA,volume99,pages229–238,1999.
[58] S. Roschke, F. Cheng, and C. Meinel. A flexible and efficient alert
correlationplatformfordistributedids.InNetworkandSystemSecurity
(NSS),20104thinternationalconferenceon,pages24–31.IEEE,2010.
[59] V.Sekar,N.Egi,S.Ratnasamy,M.K.Reiter,andG.Shi. Designand
Implementation of a Consolidated Middlebox Architecture. In Proc.
NSDI,2012.
15