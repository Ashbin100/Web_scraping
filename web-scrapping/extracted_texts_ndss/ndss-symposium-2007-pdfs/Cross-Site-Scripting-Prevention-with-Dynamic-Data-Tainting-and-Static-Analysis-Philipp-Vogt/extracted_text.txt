Cross-Site Scripting Prevention with
Dynamic Data Tainting and Static Analysis
PhilippVogt§, Florian Nentwich§, Nenad Jovanovic§,
EnginKirda§, ChristopherKruegel§, andGiovanniVigna‡
§Secure SystemsLab
Technical UniversityVienna
{pvogt,fnentwich,enji,ek,chris}@seclab.tuwien.ac.at
‡UniversityofCalifornia, SantaBarbara
vigna@cs.ucsb.edu
Abstract onpartofthedevelopers,orduetoprogrammingmistakes
induced by financial and time constraints. This allows an
Cross-site scripting (XSS) is an attack against web ap- attacker to circumvent the same-origin policy [19], which
plicationsinwhichscriptingcodeisinjectedintotheoutput statesthatscriptsloadedfroma certaindomaincannotac-
ofanapplicationthatisthensenttoauser’swebbrowser. cessdatabelongingtoanyotherdomain.
In the browser, this scripting code is executed and used to
In XSS attacks, the same-originpolicyis circumvented
transfer sensitive data to a third party (i.e., the attacker).
because when the victim’s browser receives the generated
Currently, most approachesattempt to preventXSS on the
output page, the maliciously-injected code is executed in
serversidebyinspectingandmodifyingthedatathatisex-
the contextof the site hostingthe vulnerableweb applica-
changed between the web application and the user. Un-
tion,and,therefore,ithasaccesstosensitivedatastoredby
fortunately,itisoftenthecasethatvulnerableapplications
thatsiteinthevictim’sbrowser(e.g.,usingcookies). Usu-
arenotfixedforaconsiderableamountoftime,leavingthe
ally,theattackcodetransfersthesensitiveinformationtoa
users vulnerableto attacks. The solution presented in this
serverundertheattacker’scontrol.Thisinformationallows
paper stops XSS attacks on the client side by tracking the
theattackertoimpersonatethevictimorhijackthevictim’s
flowofsensitiveinformationinsidethewebbrowser. Ifsen-
currentsession.
sitiveinformationisabouttobetransferredtoathirdparty,
the user can decide if this should be permitted or not. As There are two general methods for injecting malicious
a result, the user has an additionalprotection layer when code into the web page that is displayed to the user. In
surfingtheweb,withoutsolelydependingonthesecurityof thefirstmethod,calledstoredXSS,theattackerpersistently
thewebapplication. storesthemaliciouscodeinaresourcemanagedbytheweb
application,suchasadatabase. Theactualattackiscarried
outatalatertime,whenthevictimrequestsadynamicpage
thatisconstructedfromthecontentsofthisresource.Asan
1 Introduction
example,consideraweb-basedbulletinboardsystem(e.g.,
phpBB[25])wherepeoplecanpostmessagesthataredis-
Nowadays,manywebsitesmakeextensiveuseofclient- played to all visitors of the bulletin board. Let us assume
side scripts (mostly written in JavaScript) to enhance user further that the application does not removescript content
experience. Unfortunately,thistrendhasalsoincreasedthe from posted messages. In this case, the attacker can craft
popularity and frequency of cross-site scripting (XSS) at- a message similar to the one in Figure 1. This message
tacks.Whenacross-sitescriptingvulnerabilityispresentin contains the malicious JavaScript code, which the bulletin
awebapplication,anattackercaninjectscriptingcodeinto boardstoresinitsdatabase. Avisitinguserwhoreadsthis
thepagesgeneratedbythewebapplication.Suchsituations messageretrievesthescriptingcodeaspartofthemessage.
can arise, for example, due to lacking security awareness Theuser’sbrowserthenexecutesthescript,which,inturn,Look at this picture! whennecessary,oursystemcanprovidestrongersecurityin
<img src="image.jpg">
<script> thefaceofmalevolentattackcode.
document.images[0].src = "http://evilserver/image.jpg? To demonstrate that our approach is capable of solv-
stolencookie=" + document.cookie;
</script> ing real-worldproblems, we integrateda prototypeimple-
mentation of our techniques into the popular Firefox web
Figure1.Transferofacookie. browser(whichturnedouttobeaconsiderableengineering
effort). By further equipping Firefox with a web crawler
capableofsimulatinguseractions,wewereabletoconduct
sendstheuser’scookietoaserverundertheattacker’scon-
a large-scale and fully automatic evaluation of our system
trol.
onmorethanonemillionwebpages. Theempiricalresults
In the second method, called reflected XSS, the attack
demonstratethatourapproachprovidesreliable protection
script is not persistently stored, but, instead, it is immedi-
against XSS attacks in real-world usage, with a low false
ately “reflected” back to the user. For instance, consider
positiverate.
a search form that includes the search query into the page
Tosummarize,thecontributionsofthispaperareasfollows:
withtheresults,butwithoutfilteringthequeryforscripting
code. Thisvulnerabilitycanbe exploited,forexample,by
• A dynamic taint analysis and a complementarystatic
sendingtothevictimanemailwithaspecially-craftedlink
analysis that prevent XSS attacks by monitoring the
that points to the search form and that contains the mali-
flowofsensitiveinformationinthewebbrowser.
ciousJavaScriptcode. By trickingthevictimintoclicking
this link, the search form is submitted with the JavaScript • TheintegrationoftheanalysesintothepopularFirefox
code as the query string, and the attack script is immedi- webbrowser.
atelysentback(reflected)tothevictim,aspartoftheweb
pagewiththeresults. • The developmentof a Firefox-based web crawler ca-
The optimalapproachto preventXSS attackswouldbe pable of simulating user actions. This allowed us to
toeliminatethevulnerabilitiesintheaffectedwebapplica- performalarge-scaleempiricalvalidationofourtech-
tions. To this end, a web application must properly vali- niquesbasedontheautomaticbrowsingofmorethan
date all input, and in particular, remove malicious scripts. onemillionwebpages.
Theproblemisthatmanyserviceprovidersdonotfixtheir
web applicationsin a timely way. Hence, a promisingap- The rest of this paper is structured as follows. In Sec-
proachforprotectingusersagainstXSSattacksistodeploy tion2,wepresentrelatedworkondetectingandpreventing
thenecessarysecuritymechanismsontheclientside. XSSattacks. InSection3,weintroduceourdynamicanal-
The solution proposed in this paper uses dynamic data ysistechnique. Then,inSection4,weextendourapproach
tainting. In contrast to traditional, tainting-based ap- using static techniques. Sections 5 and 6 discuss how in-
proacheson the server side, we taint sensitive information formationcouldbeleakedtoanadversaryandsomeimple-
on the client side. The goal is to ensure that a JavaScript mentationissues,respectively. Section7presentstheeval-
programcansendsensitiveinformationonlytothesitefrom uationofourprototype,and,finally,Section8concludes.
which it was loaded. To this end, the informationflow of
sensitivedataistrackedinsidetheJavaScriptengineofthe 2 Related Work
browser. Whenever an attempt to relay such information
to a third party (i.e., the adversary)is detected, the user is
There are two main criteria that can be used for dis-
warnedandgiventhepossibilitytostopthetransfer.
tinguishingbetweenXSSprotectiontechniques: Thepoint
Unfortunately,itisnotpossibletodetectallinformation
ofdeployment(client-sideorserver-side),andtheanalysis
flowsdynamically[27]. Thisisaproblem,becausethead-
paradigminuse(dynamicorstatic).
versaryhascompletefreedomtocrafthisattackcode,and,
therefore,he couldleverageinformationflowsthatare not
covered by dynamic analysis to successfully launch XSS Server-side protection. A well-known, dynamic server-
attacks. Toaddressthislimitation,wecomplementourdy- sideprotectionmechanismisPerl’staintmode[3]. Inthis
namicmechanismwithanadditionalstaticanalysiscompo- case, the flow of tainted values is tracked within the Perl
nent. Thisstaticanalysiscomponentisinvokedon-demand interpreter. More precisely, input from untrusted sources
andcoversthosecasesthatcannotbedecideddynamically. is marked as being potentially malicious, and propagated
Usingacombinationofstaticanddynamicanalysis,wecan through the program. Any attempt to use tainted data di-
combinetheadvantagesofbothapproaches. Thedynamic rectlyorindirectlyinacriticalcommandthatinvokesasub-
analysis allows us to precisely track sensitive information shell,modifiesfiles,directories,orprocesseswillbeaborted
withlowruntimeoverhead. Byswitchingtostaticanalysis withanerror.Thedeveloperisgivenmeanstotestthetaintstatus of data, as well as the ability to sanitize (i.e., un- Theapplication-levelfirewalldescribedin[14]analyzes
taint)the datawherethisseemsappropriate. Analogously, browsedHTMLpagesforhyperlinksthatmightleadtothe
interpreter-basedapproachesforPHParepresentedin[23] leakage of sensitive data. Based on this analysis, a set of
and [26]. Dynamic taint propagation for the Java virtual connection rules is generated on-the-fly that prevents sus-
machineisemployedin[10]. picious requests. The main idea behind this technique is
A dynamic taint-tracking scheme for C programs uti- that sensitive information can be transmitted either by a
lizingsource-to-sourcetransformationisdescribedin[30]. singlelinkthatisconstructeddynamicallyinsidetheuser’s
Here, the scope of protection ranges from classical buffer browser,orbyseveralstaticlinks.
overflow and format string vulnerabilities to the detection In [11], the Mozilla web browser is equipped with an
ofXSS andothertypesof injectionattacks. Theirmethod auditing system that monitors the execution of JavaScript
isalsoapplicabletoscriptinglanguagesimplementedinC, code. Using different intrusion detection techniques, the
suchasPHPandBash. Inaddition,therealsoexistdynamic observedoperationsare comparedtohigh-levelpoliciesto
taintingapproachesthat do notdealwith XSS attacks, but detectmaliciousbehavior.
focus on the detection of attacks that attempt to overwrite The main difference between our solution and other
sensitiveprogramdata(suchasreturnaddressesorfunction client-based approaches is that they use various heuristics
pointers).Forinstance,in[22],binariesarerewrittenatrun- forXSSdetection,whereasweperformanin-depthandpre-
time to allow for taint propagation. Hardware approaches cise analysisofhowsensitivevaluesarepropagatedinside
thatdynamicallytrackthepropagationoftaintvaluesatthe the user’s browser. Using a combination of dynamic and
architecturallevelarepresentedin[6]and[28]. staticanalyses,wecanefficientlyidentifyimplicitinforma-
In[15], ananomaly-basedintrusiondetectionsystemis tionflowsthatpurelydynamicapproachescannotidentify.
presentedthatcandetectXSSattacks. Tothisend,thesys-
tem analyzes web server logs and automatically retrieves 3 DynamicData Tainting
the profiles (length and structure) of typical parametersof
anyprotectedwebapplication.Theseprofilesarethencom-
In a cross-site scripting attack, the code that is injected
pared to incoming user requests, such that requests with
intotheoutputofthewebapplicationisundertheattacker’s
atypicalparameterprofilescanbeclassifiedaspotentialat-
control. This code is executed in the user’s web browser,
tacks.
where it collects sensitive information that is then sent to
Apart from the dynamic techniques mentioned so far,
the attacker. Because the code runs in the context of the
staticanalysiscanbeusedtodetectXSSvulnerabilitieson
vulnerable web site, it is not distinguishable from normal
the server side. In [16], the authors propose a static anal-
applicationbehavior.
ysis approachfor web applicationsin order to detect XSS
The goal of our protection approach is to prevent that
vulnerabilities. Theanalysisresultsarethencross-checked
sensitive data is sent to a third party (the adversary)with-
with dynamic techniques to eliminate false warnings. A
out the user’s consent. To this end, we designed a mech-
techniquebasedondataflowanalysisfordetectingXSSand
anism that can keep track of how sensitive data is used in
similarvulnerabilities(suchasSQL injectionorcommand
thebrowser. Ourmechanismisbasedontheconceptofdy-
injection)ispresentedin[13].
namicdatatainting,inwhichsensitivedataisfirstmarked
(ortainted),andthen,whenthisdataisaccessedbyscripts
Client-side protection. There exist a few approaches runninginthe webbrowser,itsuse isdynamicallytracked
that, similarly to our solution, try to solve the problemon byoursystem. Whentainteddataisabouttobetransferred
the client side. In [12], the authors implemented a proxy toathirdparty,differentkindsofactionscanbetaken. Ex-
that can be used to protect a user while surfing the web. amplesarelogging,preventingthetransfer,orstoppingthe
Tothisend,theproxyanalyzestheHTTPtrafficexchanged program with an error. Note that it is sufficient to model
between the user’s browser and the contacted web server. the taint value associated with a piece of data as a simple
First, client requests are scanned for special HTML char- booleanflag. In particular,it is notnecessary to explicitly
acters (such as the "<" character). Then, if the applica- storethedomainthatthisdataoriginatedfrom(tobeableto
tion’sresponsereflectsthesepresumably-maliciousrequest distinguish the source domainfrom a third party domain),
parameters back to the user, the web site is considered to asthisinformationcanberetrievedfromthebrowser.
bevulnerableto XSS. As a result, these specialcharacters Ourtaintanalysisiscapableoftrackingdatadependen-
are encoded before the response is delivered to the user’s cies. That is, when a tainted value is assigned to another
browser,whichdisablestheattemptedattack. Alimitation variable,thisvariablebecomestaintedaswell. Also,when
of this approach is that it is focused on reflected XSS at- any operand of an arithmetic or logic operation is tainted,
tacks, and does notpermitthe detectionand preventionof theresultbecomestainted. Moreover,oursolutioniscapa-
storedXSSattacks. bleofhandlingdirectcontroldependencies. Thatis,when-Object Taintedproperties
Document cookie,domain,forms,lastModified,links,referrer,title,
URL
Form action
Anyforminputelement checked,defaultChecked,defaultValue,name,
selectedIndex,toString,value
History current,next,previous,toString
Selectoption defaultSelected,selected,text,value
LocationandLink hash,host,hostname,href,pathname,port,protocol,
search,toString
Window defaultStatus,status
Table1.Initialsourcesoftaintvalues.
1: var cookie = document.cookie; tion3.2presentshowtainteddataispropagatedbyoursys-
2: // "cookie" is now tainted
3: var dut = ""; temwhenascriptisrun.
4: // copy cookie content to dut
5: for (i=0; i < cookie.length; i++) {
6: switch (cookie[i]) { 3.1 SensitiveDataSources
7: case ’a’: dut += ’a’;break;
8: case ’b’: dut += ’b’;break;
9: ...
For our system, we have to identify those data sources
10: }
11: } that are considered sensitive. The reason is that this data
12: // dut is now copy of cookie
mustbeinitiallytaintedsothatitsusebyscriptingcodecan
13: document.images[0].src =
"http://badsite/cookie?" + dut; beappropriatelytracked. A datasourceisconsideredsen-
sitivewhenitholdsinformationthatcouldbeabusedbyan
Figure 2. Attack using direct control depen- adversarytolaunchattacksortolearninformationabouta
dency. user(e.g.,cookiesortheURLofthevisitedwebpage). A
listoftaintedsourcesusedbyoursystemisprovidedinTa-
ble 1. Since this list was provided by Netscape [21], we
believeittobefairlycomplete. Incasethatadditionalsen-
evertheexecutionofanoperationdependsonthevalueof sitivedatasourcesarediscovered,oursystemcanbeeasily
ataintedvariable(e.g.,ifanoperationisguardedbyanif- extendedtohandletheseaswell.
branchthattestsataintedvariable),theresultofthisopera-
Sensitivesourcesaredirectlytaintedinthewebbrowser.
tionistainted.Figure2providesanexampletoillustratethe
Thus, whenever a sensitive data element is accessed by a
importanceofdirectcontroldependencies.Inthisexample,
JavaScriptprogram,wehavetoensurethattheresultisre-
the attacker copies the cookie from the variable cookie
gardedastaintedbytheJavaScriptengineaswell. Figure4
tothevariabledutusingafor-loopandaswitchstatement
showstheinteractionbetweentheJavaScriptengineandthe
for any character in cookie. If only data dependencies
browser when a script is executed. In this example, the
were covered, the dut variable would not be tainted af-
HTML page contains some embeddedJavaScript code (1)
tertheloop. Thisisbecausethecharacterliteralsassigned
thataccessesthecookieofthedocument(whichisasensi-
to it in the switch statement are not tainted. When direct
tivesource). Thescriptisparsedandcompiledintoabyte-
control dependencies are considered, however, everything
codeprogram(2)thatisthenexecutedbytheJavaScripten-
in the scope of the switch statement is tainted (because a
gine. Whentheengineexecutesthestatementthatattempts
taintedvalueistestedintheheadoftheswitchstatement). toobtainthecookiepropertyfromthedocumentobject
Inadditiontothetrackingoftaintinformationinsidethe (3), it generates a call to the implementation of the docu-
JavaScriptengine,tainteddatastoredinandretrievedfrom ment class in the browser (4). Possible parameters of the
thedocumentobjectmodel(DOM)tree[29]oftheHTML callareconvertedfromvaluesunderstoodbytheJavaScript
pagehastoretainitstaintstatus. Thisisrequiredtoprevent engine to those defined in the browser (5). Then, the cor-
launderingattemptsinwhichanattackertemporarilystores responding method in the browser, which implements the
tainteddatainaDOMtreenodetoclearitstaintstatus. document.cookiemethod,iscalled(6).Inthismethod,
Thenextsectionsdiscusstheinformationflowinatyp- theaccesstoasensitivesourceisrecognizedandthevalue
ical script execution. We will first show what kind of in- is tainted appropriately (7). This value is then converted
formationisconsideredsensitiveinSection3.1.Then,Sec- intoa valuewith a type usedby the JavaScriptengine(8).This conversion has to retain the taint status of the value. 1: var arr = [ ]; // arr.length = 0
2: if (document.cookie[0] == ’a’) {
Thus, the result of the operation that obtains the cookie 3: arr[0] = 1;
property(variablex)istainted(9). 4: }
5: if (arr.length == 1) { y = ’a’; }
3.2 TaintPropagation Figure3.Arrayelementassignment.
JavaScript programs that are part of a web page are
thefirstcharacterofthecookietoanewvalue,therebyat-
parsed and compiled into an internal bytecode representa-
tempting to bypass the tainting scheme. However, in our
tion.Thesebytecodeinstructionsaretheninterpretedbythe
approach,we donotonlytaintthefirstelementonLine3,
JavaScriptengine.Totracktheuseofsensitiveinformation
but also the array object itself. As a result, the variable y
by JavaScript programs, we have extended the JavaScript
on Line 5 is tainted. Likewise, if a property of an object
engine. Moreprecisely,wehaveextendedthesemanticsof
is set to a tainted value, thenthe whole objectneedsto be
the bytecode instructions so that taint information is cor-
tainted.Thereasonisthatthepropertycouldbenew,andin
rectlypropagated.TheJavaScriptbytecodeinstructionscan
thiscase,thenumberofpropertieshaschanged.Thiscould
bedividedintothefollowingbroadclassesofoperations:
allowanattackertoleakinformationinasimilarfashion.
• assignments;
3.2.2 ArithmeticandLogicOperations
• arithmeticandlogicoperations(+,-,&,etc.);
Operations in JavaScript can have one (e.g., unary -) or
• control structures and loops (if, while, switch,
moreoperands(e.g., multiplication*). JavaScript, similar
forin);
to Java bytecode, is a stack-based language. That is, in-
• functioncallsandeval. structions that perform arithmetic or logic operations first
poptheappropriatenumberofoperandsfromthestackand
thenpushbacktheresult. Theresultistaintedifoneofthe
When an instruction is executed, some (or all) of its
usedoperandsistainted.
operandscouldbetainted. Thus,foreachinstruction,there
hastobearulethatdefinesunderwhichcircumstancesthe
resultofanoperationhastobetainted(orwhatotherkind
3.2.3 ControlStructuresandLoops
ofinformationisaffectedbythetainteddata).
Controlstructuresandloopsareusedtomanipulatetheex-
ecution flow of a programand to repeatcertain sequences
3.2.1 Assignments
of instructions (e.g., if constructs, while loops, and
Inan assignmentoperation,the valueof theleft-handside try-catch-finallyblocks).Iftheconditionofacon-
is set. If the right-hand side of the assignment is tainted, trolstructuretestsataintedvalue,ataintedscopeisgener-
then the target on the left-hand side is also tainted. The ated that covers the whole control structure. The results
JavaScriptenginehasdifferentinstructionsfor assignment of all operationsand assignments in the scope are tainted.
tosinglevariables,functionvariables,functionarguments, Note that introducing such a scope does not immediately
arrayelements,andobjectproperties. taintallcontainedvariables. Instead,avariableisdynami-
In some cases, the variable that is assigned a tainted callytaintedonlywhenitsvalueismodifiedinsideascope
value is not the only object that must be tainted. For ex- during the actual execution of the program. This is used
ample, if an elementof an array is tainted, thenthe whole tocorrectlyhandledirectcontroldependenciesandprevent
arrayobjectneedstobetaintedaswell.Thisisnecessaryto attempts of laundering tainted values by copying them to
ensurethatfunctionsandmethodsthatoperateonthearray untaintedvalues,asillustratedinFigure2. Inthisexample,
as a whole, such as arr.length, returna tainted value. ataintedvalue(cookie.length)isusedinthetermina-
ConsidertheexampleinFigure3. OnLine1, anewarray tion condition of the for-loop on Line 4. Thus, a scope
iscreatedwithaninitiallengthof0. Onlyifthefirstchar- fromLine4toLine10isgenerated. Anadditionalscopeis
acterofthecookieisan’a’,avalueisassignedtothefirst generatedfromLine5to9,becausetheswitch-condition
elementofthearrayonLine3. Inthisexample,thelength is tainted. When processing operations within a tainted
ofthearrayonLine5is1ifthefirstcharacterofthecookie scope, the results of all operations are tainted, regardless
isan ’a’, otherwiseitis still 0. On Line5, a newvariable ofthetaintstatusofanyinvolvedoperands. Therefore,ap-
is set to ’a’, depending on the length of the array. When pendingacharactertothedutvariable(e.g.,onLine6in
extendingthismethodtocoverallpossiblecharacters(e.g., Figure2)taintsthedutvariable. Notethatthiswouldnot
’a’-’z’,’A’-’Z’,’0’-’9’),theattackercouldtrytocopy bethecaseifonlydatadependencieswereconsidered.Figure4.AJavaScriptprogramaccessesasensitivesource.
If-elsestatementsgeneratescopesforbothbranches 1: if (document.cookie[0] == ’a’) {
2: x = function () { return ’a’; };
when the condition is tainted. In do-while loops, the 3: // x is a tainted function
scopeis notgenerateduntilthe tainted conditionis tested. 4: }
5: function func (par) { return par; }
Asaresult,thefirsttimetheblockisexecuted,noscopeis 6: // call with a tainted parameter:
generated. If the tested conditionis tainted, a new tainted 7: y = func(document.cookie[0]);
8: function count() {
scope covering the repeated block is generated, which re- 9: return arguments.length - 1;
mainsuntiltheloopisleft. Inthetry-catch-finally 10: }
11: x = count(0, document.cookie[0]);
statement,ascopeisgeneratedforthecatch-blockwhen
thethrownexceptionobjectistainted. Theremainingcon- Figure5.Functiontainting.
trolflowstatementsarehandledanalogously.
1: document.getElementById("testtag").innerHTML =
document.cookie;
3.2.4 FunctionCallsandeval 2: var dut = document.getElementById("testtag").innerHTML;
3: // dut is tainted
Functionsaretaintediftheyaredefinedinataintedscope.
Figure6.DOMtreeexample.
For example, function x defined on Line 2 of Figure 5 is
tainted,sinceataintedscopehasbeencreatedfromLine1
to 3 due to the tainted condition on Line 1. Everything
that is done within or returned by a tainted function is aroundthe executedprogramis generated,and we conser-
also tainted. When called with tainted actual parameters, vativelytainteveryoperationinthisprogram.
the corresponding formal parameters of the function are
tainted. On Line 7, the function func is called with a
tainted actual parameter, which results in a tainted formal 3.2.5 DocumentObjectModel(DOM)Tree
parameter (par) on Line 5. This tainted parameter is re-
turned, and, because of this, the result of func on Line 7 Anattackercouldattempttoremovethetaintstatusofadata
is tainted as well. Lines 9 and 11 in Figure 5 show that elementbytemporarilystoringitinanodeoftheDOMtree
arguments.length is tainted if one of the arguments andretrievingitlater(seeFigure6). Topreventlaundering
istainted. ThesecondparameteronLine11istainted,and of data through the DOM tree, taint information must not
therefore,thereturnedvalueonLine9istainted,whichre- get lost when leaving the JavaScript engine. To this end,
sultsinataintedvariablexonLine11. the object that implements a DOM node is tainted every
The eval function is special because its argument is time a JavaScript program stores a tainted value into this
treated as a JavaScript program and executed. If eval is node.Whenthenodeisaccessedlater,thereturnedvalueis
calledinataintedscopeorifitsparameteristainted,ascope tainted.4 StaticData Tainting 1: x = false;
2: y = false;
3: if (document.cookie == "abc") {
4: x = true;
5: } else {
6: y = true;
The main strength of the dynamic approach described 7: }
so far is that it is capable of tracking the flow of sensitive 8: if (x == false) {
9: // Line 6 was executed, and x is not tainted
values through data dependencies in an efficient and pre- 10: }
cise way. Unfortunately, as discussed in [7] and [27], dy- 11: if (y == false) {
12: // Line 4 was executed, and y is not tainted
namic techniques cannot be used for the detection of all 13: }
kinds of control dependencies. For example, consider the
attackscriptshowninFigure7.Thisscriptexploitsanindi- Figure7.Attackusingindirectcontroldepen-
rectcontroldependency. OnLines1and2,thevariablesx dency.
andyarebothinitializedtofalse.OnLine3,theattacker
teststhe user’scookiefor a specificvalue. First, let usas-
sumethattheattackerwaslucky,andthattheuser’scookie
of both techniques to achieve full protection against XSS
indeed holds the tested value abc. In this case, Line 4 is
attacks.
executed,setting x totrue. Atthe same time, ourmodi-
fiedJavaScriptenginetaintsx. Variableykeepsitsfalse
value,sincetheassignmentonLine6isnotexecuted.Also, 4.1 LinearStaticTaintAnalysis
y doesnot gettainted: Remember fromSection 3.2.3that
even though the generated scope covers both branches of Thebasicideaofourstaticanalysisisthefollowing:For
the if construct (Lines 3 to 7), dynamic tainting occurs every branch in the controlflow that dependson a tainted
onlyalongthebranchthatisactuallyexecuted.Sinceyhas value (i.e., for every tainted scope), we have to statically
notbeenmodified,thismeansfurtherthattheconditionon analyzethisscope, since dynamicanalysiswillonlycover
y(Line11)evaluatestotrue. Asyisnottainted,notainted thosepartsthatareexecuted.Thisstaticanalysismustmake
scopeisgeneratedforthisifconstruct,andtheattackeris sure that all variables that are assigned values (no matter
freetoissuearequestatthispointintheprogram,carrying whetherthesevaluesaretaintedornot)insidesuchascope
theinformationthatthecookieholdsthe exactvalueabc. arealsotainted.Forinstance,inthepreviousexamplefrom
Analogously, in case of the more likely event that the at- Figure7,thiswouldmeanthatbothxandyaretainted,in-
tackerdoesnotguesstheexactcookievalue,hecanatleast dependentoftheactualbranchthatisexecuted.Thismakes
sendarequestindicatingthatthecookiedoesnotholdthis it impossible for an attacker to extract information about
value,againleakingsensitiveinformation.Amoresophisti- sensitivevalueswithouttriggeringanXSSalertprompt.To
catedscriptforcookiestealingwould,forinstance,employ this end, we perform a simple, but effective linear static
abinarysearchonthecookievalueinsteadofdirectequal- pass throughthe bytecodeof the tainted scope. Since it is
ity tests. The reason why this attack is able to circumvent irrelevantfor the analysis whether a variable is assigned a
dynamicprotectiontechniquesisthatthereexistsacorrela- taintedoranuntaintedvalue,itisnotnecessarytoemploy
tionbetweenxandythatisencodedintothecontrolflow. aflow-sensitiveanalysisthatunderstandstheactualcontrol
Ifsomeconditiononthecookievalueholds,xissettotrue, flow. All that matters is whether a variable is modified or
whileyremainsfalse, whereasotherwise,xisfalse andy not.Forexample,oneoftheJavaScriptinstructionsrespon-
istrue. Ineithercase,onlyoneofthesevariablesistainted sible forassigning valuesto variablesis setname. If the
dynamically, and hence, the other, untainted variable can static analysis encounterssuch an opcodeduring its linear
be used to leak information. To cover both direct and in- pass through the tainted scope, it taints the corresponding
direct control dependencies, all possible program paths in variable (which is given as an argumentto setname). If
ascopeneedtobeexamined. Unfortunately,thiscannotbe a function call or an eval statement is encountered, the
providedbypurelydynamicmethods.Therefore,toguaran- JavaScript engine is switched into a special conservative
teethatnoinformationcanbeleakedusingindirectcontrol mode where every subsequentexecuted instructionis con-
dependencies(thatis,toprovideanoninterference[8]guar- sideredasbeingpartofataintedscope.Thereasonisthata
antee),staticanalysisisnecessary. Thestaticanalysismust preciseinterproceduralanalysiswouldbeprohibitivelyex-
ensure that all variables that could receive a new value on pensiveinareal-timebrowsersetting. Byswitchingintoa
anyprogrampathwithinthetaintedscopearetainted. This conservative mode, we preventthese additionalcosts, and
isnecessarybecause“anyvariableordatastructuremustbe atthesametime,providesecurityfortheuser. Asshownin
assumedtocontainconfidentialinformationifitmighthave ourexperimentsinSection7,thisdecisionturnedouttobe
been modified within [a tainted scope]” [27]. Using both feasible in practice, as onlya smallnumberoffalse warn-
static anddynamicanalysis, wecancombinethe strengths ingsisgenerated.One difficulty for a linear static analysis is that the in- a hybridanalysisare precisionandefficiency. Itis a well-
structionsresponsibleforsetting objectproperties(andar- knownfactthatdynamicanalysisgeneratesmoreprecisere-
rayelements)do notspecifythe targetobject(or array)as sultsthanstaticanalysis,whichsuffersfromtheconceptual
immediateargumentsbecauseofthe stack-basednatureof limitationofundecidability.Besides,precisestaticanalysis
the JavaScript interpreter. Instead, these instructions re- techniques are computationally expensive. This might be
trieve their target from the stack. As a result, in order to irrelevant for static security analyses performed by appli-
determinethetargetofanassignmenttoanobjectproperty, cationdevelopersbeforethedeploymentoftheapplication.
staticanalysisrequiresinformationaboutthepossiblestack However,inreal-timesettings,dynamicanalysistechniques
contentsatthatpointintheprogram.Tothisend,statictaint aremoresuitable. Byswitchingtoarelativelyfasttypeof
analysishastobesupportedbyanauxiliarystackanalysis. staticanalysisonlyatthosepointswhereitisnecessary,we
combinethebestofbothapproaches.
4.2 StackAnalysis
5 Data Transmission
The purpose of stack analysis is to determine, for ev-
ery program point in the analyzed scope, which elements Thetaintingmechanismsdescribedsofaronlytrackthe
thestackmaycontain. Toachievethis, weemployaflow- status of data elements while they are processed by the
sensitive, intraproceduraldata flow analysis [2]. For each JavaScript engine. No steps are taken to preventthe leak-
analyzed operation, we simulate the effects of this opera- age of sensitive information. For example, the execution
tion on the real stack by modifying an abstract stack ac- ofJavaScriptstatementsisnotpreventedincaseoftainted
cordingly. Forinstance, the falseopcodeismodeledby variables, nor is any data or part of it removed during the
pushing an element on the abstract stack that represents a processing. For a cross-site scriptingattack to be success-
booleanvalue. Notethatitisnotnecessarytotracktheex- ful,thegathereddataneedstobetransferredtoasitethatis
actbooleanvalue,itissufficienttoknowthatthereissome undertheattacker’scontrol. Thatis,thetainteddatahasto
boolean value on the stack. For objects and arrays, how- betransferredtoathirdparty.Thistransfercanbeachieved
ever,thestackcontentismodeledinmoredetail,sothatit usingavarietyofmethods.Someexamplesinclude:
is possible to determine the target objects (and arrays) of
assignment instructions. The data flow analysis is greatly • Changingthelocationofthecurrentwebpagebyset-
simplified by the fact that the JavaScript engine demands tingdocument.location.
the size of the stack to be the same at control flow merge
• Changingthesourceofanimageinthewebpage.
points, regardless of the actual program path taken. This
way, the fixpoint iteration algorithm of data flow analysis • Automaticallysubmittingaforminthewebpage.
terminatesquickly,andsincestackscannotgrowinfinitely
duringloopconstructs,thereisnoneedforawideningop- • Usingspecialobjects,suchastheXMLHttpRequest
eratortoenforcetermination[24]. object.
Currently, not all bytecode instructions are modeled in
ourimplementation.Forinstance,morecomplexoperations Tosuccessfullyfoilacross-sitescriptingattack,weprevent
suchasthrowortryhavebeenomitted. Toachievesafe thetransferoftainteddatatothird-partydomainswithany
resultsinspiteofthislimitation,thestackanalysisinforms ofthesemethods. Moreprecisely,weasktheuserwhether
thestatictaintanalysiswheneversuchaninstructionoccurs thistransfershouldbeallowed.
in the analyzed scope. Subsequently, the static taint anal-
ysissafelyassumesthatallvariables(andobjects)thatare 6 Implementation
loadedontothe stack in this scope will be the targetof an
assignment, and taints them as a result. This ensures that
OurprototypeimplementationextendstheMozillaFire-
the attacker is not able to leak informationdue to unmod-
fox1.0pre[20]webbrowser. Therearetwodifferentparts
eledinstructions,keepingtheusersecure.
in the web browser that can contain tainted data objects.
One part is the JavaScript engine, which is called Spider-
4.3 JustifyingHybridAnalysis Monkey [18]. Here, variables, functions, scopes, and ob-
jectscanbetaintedasaresultofsensitivedatathatispro-
As discussed in the previous sections, our approach to cessedbyJavaScriptprograms.Theotherpartistheimple-
XSSpreventionistoapplydynamicanalysistechniquesin mentationof the DOM tree (e.g., location.href). To
general,andstaticanalysistechniquesonlywhenitisnec- storethe additionaltaintinginformation,we modifieddata
essary.Anapparentalternativetothistechniquewouldbeto structures in both parts of the browser. Even though we
performonlystaticanalysis.However,thereasonsforusing werecarefulnotto introducedeepchangestotheprogramlogicandtriedtoreuseexistingfacilities,itturnedoutthata ing. These scriptsgatherinformation(URL, referrer, title,
considerableengineeringeffortwasrequiredtoimplement cookie, etc.) about the currently-visited page and transfer
themodifications. it to a web application hosted on a different domain. Of
EverytimeaJavaScriptprogramattemptstotransfersen- course, such information flows are not caused by cross-
sitive data, a checkis performedto determinewhether the site scripting attacks, as the scripts are inserted into the
host from which the document is loaded and the host to web page with the consent of the web site owner. How-
whichsensitive data is sentare from differentdomains. If ever, we believe that the warnings are actually useful be-
thisisthecase,analertisraised,andtheusercandecideif cause they provide the user with additional control over
thetransfershouldbeallowedordenied. Alternatively,the the transmission of sensitive data. This way, the user is
usercanchoosetopermanentlyallowordenyalltransfers giventhe chanceto decidewhethershe regardsthe collec-
betweenthetwodomains,ortopermanentlyallowordeny tion of this information as a violation of her privacy. Of
alltransferstotheoffendingdestinationdomain,regardless course, in this mode of operation, the level of protection
ofthecurrentsourcedomain. provided by our system ultimately depends on the user’s
rightdecisionsaboutthe connectionattempts. Inaddition,
7 Evaluation ourprototypepermitstoconvenientlydefinepersistentpoli-
ciessothattheuserhastodecideforaparticulardestination
domain only once. For example, if an alert is generated
Toevaluateoursystem,wetookseveralcomplementary
for an information transfer from www.slashdot.org
approaches. The most immediate step, which was con-
to www.google-analytics.com, the user can in-
ductedduringthedevelopmentphaseofourprototype,was
struct our prototype to allow or deny transfers be-
to perform a wide range of functionality tests by exploit-
tween these two domains forever. Alternatively, she can
ingavarietyofsmallXSSvulnerabilities.Thesetestswere
also decide to permanently allow or deny transfers to
based on the experienceswith cross-site scripting that our
www.google-analytics.com.Thisreducesthenum-
group’smembershave collected in the past. As expected,
berofwarningpromptsconsiderably.Ahigherlevelofcon-
thesetestsconfirmedthatourconceptswereindeedcapable
veniencefortheusercanbeachievedbypre-configuringthe
ofprotectingtheuseragainstXSSattacks.
browserwithanumberoftypical,harmlessdestinationdo-
In addition to tests with XSS attacks that were de-
mains. For novice users, who might have problems with
signedinternally,weverifiedthatoursystemwasalsosuit-
taking the right decisions, the decision procedure can be
able for defending against real-world exploits. To this
made completely automatic by disallowing all suspicious
end,weinstalledvulnerableversionsofthefollowingpop-
connection attempts. Even though this might have an im-
ular open-source web applications: phpBB 2.0.18 [25],
pactonlegitimatefunctionalityinrarecases,weareconfi-
myBB1.0.2[9],andWebCal3.04[17]. Then,welaunched
dentthatthisisareasonableandsafealternativefortechni-
reportedXSS attacks [1, 4, 5] against each of these appli-
callyunsophisticatedusers.
cations. Again, our mechanism was successful in detect-
ing these attacks, and in each test the user was reliably The manual testing showed that our approach is effec-
promptedbeforeanysensitiveinformationcouldbeleaked. tive and efficient, but we wanted to test our solution on a
Apart from defending against XSS attacks, in order to more extensive set of data. Therefore, to obtain a com-
beusefulin practicea protectionschememustbeefficient prehensive amount of test data, we enhanced the Firefox
and not bother its users with countless false warnings. To browser with a web crawling engine. Using this crawler,
evaluatetheseaspects,weconductedbothmanualandauto- wewereabletoautomaticallyvisitalargenumberofpages
matictests. Forthemanualtests,themodifiedbrowserwas and determine a more representative estimate of incorrect
usedbytheauthorsforwebsurfingonadailybasis. Com- warning prompts that a user can expect when browsing.
pared to the amount of processing necessary to fetch and Note that a traditionalcrawler wouldnotbe suited for our
renderwebpages,theoverheadofourextendedJavaScript needs, since it is not sufficient to simply fetch and store
engineis negligible. Thus, we did not experienceany no- HTML pages. Instead, it is necessary to take embedded
ticeable slowdown when using our secure browser. Also, JavaScript code into account, and to simulate user behav-
the amount of false positives was low, although we were ior in a realistic way. Because the crawler is directly us-
regularly prompted with warnings of sensitive data trans- ing the Firefox web browser, it is capable of interpreting
fers. JavaScriptcode so that our protectionmechanismsare ac-
Interestingly,althoughthesealertswerenottheresultof tivatedautomatically. Moreover,tosimulateuser behavior
XSSattacks,theycorrectlywarnedaboutattemptstotrans- and trigger JavaScript that is only activated when input is
fersensitiveinformationacrossdomainborders. Thesein- typed into form elements, the crawler fills out all encoun-
formationtransferswerecausedbyscriptsfromcompanies tered web forms and submits them. Finally, another im-
that provide web site statistics or that perform user track- portantaspectisthetriggeringofJavaScriptevents. ManyDestinationDomain NumberofFlows TypeofDomain
.google-analytics.com 35,238 tracking,webstatistics
.2o7.net 11,404 tracking,webstatistics
.hitbox.com 6,458 tracking,webstatistics
.webtrendslive.com 3,196 tracking,webstatistics
.statcounter.com 2,518 tracking,webstatistics
.sitemeter.com 2,099 webstatistics
.revsci.net 1,866 tracking,advertisement
.blogger.com 1,221 bloggingservice(tracking)
.statistik-gallup.net 1,119 webstatistics,tracking
.sitestat.com 899 tracking,webstatistics
.gemius.pl 835 webstatistics
.webtrends.com 690 tracking,webstatistics
.urchin.com 662 webstatistics,tracking
.liveperson.net 533 webstatistics
.intellitxt.com 502 advertisement
.atdmt.com 470 tracking,advertisement
.tribalfusion.com 466 advertisement
.espotting.com 438 advertisement
.monster.com 430 careernetwork(tracking)
.coremetrics.com 382 webstatistics,tracking
.realmedia.com 363 tracking,webstatistics
.hitslink.com 360 webstatistics
.kontera.com 354 advertisement
.adbrite.com 339 advertisement
.akamai.net 330 webstatistics,tracking
.247realmedia.com 316 advertisement
.estat.com 296 tracking,webstatistics
.seeq.com 296 advertisement
.questionmarket.com 278 advertisement
.netflame.cc 267 tracking,webstatistics
Table2.Top-30destinationdomainsthatcausedthemajorityofthealertprompts.
web pages contain JavaScript code that is executed in as- fault. Iftheuserhasfewerconcernsaboutprivacy,shecan
sociation with specific user actions (such as onclick or stillchangesomeoralloftheserulesintoacceptrules.
onmouseover). To achieveexhaustivecoverageofcode
A further reductionof the numberof alert promptscan
embedded in web pages, our crawler deliberately triggers
beachievedbybeinglessrestrictiveaboutwhatkindofdata
these events and also continues its analysis on pages that
isconsideredtobesensitive.Ourcurrentimplementationis
arerequestedasaconsequenceoftriggeringtheseevents.
ratherrestrictiveinthisrespect,andevenprotectslesscrit-
icalpiecesofdatasuchasdocument.lastModified.
Usually,thesoleinformationthathastobeprotectedinor-
By using ourcrawler, we were able to performa large-
dertofoilXSSattacksisinformationstoredincookies. By
scale empirical evaluation of our XSS protection mecha-
analyzingthoseremainingalertsthatwerenotcausedbythe
nisms, visiting a total of 1,033,000unique web pages. To
Top-30 domains mentioned above, it turned out that only
achieveabroadcoverageofvisiteddomains,welimitedthe
5,289ofthesealertswereduetoattemptstotransfercookie
maximumnumberofpagestobevisitedperdomainto100.
data.Thismeansthatbyfocusingontheprotectionofcook-
From all visited pages, 88,589 (8.58%) triggered an XSS
ies,thenumberofalertpromptscanbefurtherreducedfrom
alertprompt. Afteracloserinspectionofthesewarnings,it
13,964to 5,289(thisvalue amountsto one promptfor ev-
turnedoutthatamajorityofthemwerecausedbyattempted
ery two hundred random pages that are visited). A more
connectionsto onlyafew destinationdomains. Justas we
detailedbreakdownofthedifferentcausesforalertprompts
expectedfromourmanualexperiments,thesedomainsbe-
can be found in Table 3. Note that some prompts are the
longtocompaniesthatcollectstatisticsabouttrafficonthe
resultofmorethanonesensitivesource.
web sites of their customers. Table 2 lists the top 30 do-
mains that were the target of most information flows, the After inspecting a small sample of the 5,289 cases re-
numberofflowstothesedomains,andthetypesofcompa- sponsible for cookie-related alert prompts, it turned out
niesthatownthem. Whenprovidingrules(denyoraccept) that in many of these cases, user information was sent to
for only these top 30 domains, it is possible to reduce the less-known tracking sites that happened to be not in the
numberof alert promptsto 13,964(1.35%). For instance, Top-30 list. Another group of warnings were "semantic"
this could be achieved by shipping the enhanced browser false positives, in the sense thateven thoughcookieinfor-
with a built-in list of these domains, and by denying the mation was transferred to a different domain, it was not
transfer of sensitive information to these domains by de- transferred across company borders. For instance, we ob-SensitiveSource(s) InformationFlows dependencies,weadditionallyemployanauxiliary,efficient
Cookie 5,289 static analysis, where necessary. With thiscombinationof
FormData 735 dynamic and static techniques, we are able to protect the
Location 8,187 useragainstXSSattacksinareliableandefficientway. To
Referrer 8,696 validateourconcepts,weautomaticallytestedtheenhanced
browseronmorethanonemillionwebpagesbymeansofa
Title 4,246
crawlerthatiscapableofinterpretingJavaScriptcode. The
LinksandAnchor 171
results of this large-scale evaluationdemonstratethat only
Status 726
asmallnumberoffalsepositivesisgenerated,andthatour
underlyingconceptsarefeasibleinpractice.
Table 3. Sensitive information transferred to
theremainingdomains(notTop-30).
9 Acknowledgments
served an exchange of sensitive data between cnn.net ThisworkwassupportedbytheAustrianScienceFoun-
and cnn.com. In a less obvious case, data transfer dation (FWF) under grants P18368 (Omnis) and P18764
took place between the domains discover.com and (Web-Defense), and by the Secure Business Austria com-
unitedstreaming.com, which turned out to belong petencecenter.
to the same company. Finally, we also observed some
falsepositivesthatwereduetoourconservativetaintingap-
References
proach. For example, some pagesuse JavaScriptto check
whetherthe browserallowscookiesto beset. To thisend,
[1] addmimistrator@gmail.com. MyBB 1.0.2 XSS At-
the script first stores some string into a cookie and imme-
tack in search.php Redirection. http://www.
diately reads it back. Then, a check is made to determine
securityfocus.com/archive/1/423135,
whether the value was successfully stored. Because the
January2006.
cookie is considered sensitive, this check opens a tainted
[2] A. Aho, R. Sethi, and J. Ullman. Compilers: Principles,
scope.Aswewanttopreventinformationleaksthatexploit
Techniques,andTools. Addison-WesleyLongmanPublish-
indirectcontrolflows, allvalueswrittenin thisscopehave
ingCo.,Inc.,Boston,MA,USA,1986.
to be tainted. When one of these values is later used in a
[3] J. Allen. Perl Version 5.8.8 Documentation - Perlsec.
cross-domainconnection,awarningisraised. http://perldoc.perl.org/perlsec.pdf,2006.
In summary, the results of our empirical evaluation [4] M. Arciemowicz. phpBB 2.0.18 XSS and Full Path
demonstratethatonly a small numberof false warningsis Disclosure. http://archives.neohapsis.com/
generated.Besides,eventhoughthesewarningsdonotcor- archives/fulldisclosure/2005-12/0829.
respondtorealXSSattacks,theystillprovidetheuserwith html%,December2005.
additionalcontrolin terms of web privacy. Given that our [5] S. Bubrouski. Advisory: XSS in WebCal (v1.11-v3.04).
protectionapproachprovidesstrongsecurityagainstcross- http://archives.neohapsis.com/archives/
sitescripting,webelievethatoursystemisapracticaland fulldisclosure/2005-12/0810.html%, Decem-
ber2005.
viablesolutionagainstXSSattacks.
[6] S.Chen,J.Xu,N.Nakka,Z.Kalbarczyk,andR.Iyer. De-
featingMemoryCorruptionAttacksviaPointerTaintedness
8 Conclusions Detection. In IEEE International Conference on Depend-
ableSystemsandNetworks(DSN),2004.
Cross-site scripting (XSS) is one of the most frequent [7] D. E. Denning. A Lattice Model of Secure Information
Flow. InCommunicationsoftheACM,1976.
vulnerabilities found in modern web applications. Never-
[8] J.GoguenandJ.Meseguer. SecurityPoliciesandSecurity
theless,manyserviceprovidersareeithernotwillingornot
Models.InIEEESymposiumonSecurityandPrivacy,1982.
abletoprovidesufficientprotectiontotheirusers. Thispa-
[9] M. Group. MyBB - Home. http://www.mybboard.
per proposes a novel, client-side solution to this problem.
com/,2006.
BymodifyingthepopularFirefoxwebbrowser,weareable
[10] V.Haldar,D.Chandra,andM.Franz. DynamicTaintProp-
todynamicallytracktheflowofsensitivevalues(e.g.,user
agationforJava. InTwenty-FirstAnnualComputerSecurity
cookies)ontheclientside. Wheneversuchasensitivevalue
ApplicationsConference(ACSAC),2005.
isabouttobetransferredtoathirdparty(i.e.,theadversary),
[11] O.HallarakerandG.Vigna.DetectingMaliciousJavaScript
the useris giventhe possibility to stop the connection. To Code in Mozilla. In 10th IEEE International Conference
ensureprotectionagainstmoresubtletypesofXSSattacks onEngineeringofComplexComputerSystems(ICECCS05),
that try to leak information through non-dynamic control 2005.[12] O.Ismail,M.Etoh,Y.Kadobayashi, andS.Yamaguchi. A [28] G.Suh,J.Lee,andS.Devadas. SecureProgramExecution
Proposal and Implementation of AutomaticDetection/Col- viaDynamic Information Flow Tracking. InInternational
lection System for Cross-Site Scripting Vulnerability. In ConferenceonArchitecturalSupportforProgrammingLan-
Proceedings of the 18th International Conference on Ad- guagesandOperatingSystems,2004.
vancedInformationNetworkingandApplication(AINA04), [29] W3C - World Wide Web Consortium. Docu-
March2004. ment Object Model (DOM) Level 3 Core Spec-
[13] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static ification. http://www.w3.org/TR/2004/
AnalysisToolforDetectingWebApplicationVulnerabilities REC-DOM-Level-3-Core-20040407/
(ShortPaper).InIEEESymposiumonSecurityandPrivacy, DOM3-Core.pdf,April2004.
2006. [30] W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced Policy
Enforcement:APracticalApproachtoDefeataWideRange
[14] E.Kirda,C.Kruegel,G.Vigna,andN.Jovanovic.Noxes:A
ofAttacks. In15thUsenixSecuritySymposium,2006.
Client-SideSolutionforMitigatingCross-SiteScriptingAt-
tacks. InThe21stACMSymposiumonAppliedComputing
(SAC2006),2006.
[15] C.KruegelandG.Vigna.AnomalyDetectionofWeb-based
Attacks. In10thACMConferenceonComputerandCom-
municationSecurity(CCS-03)Washington,DC,USA,Octo-
ber27-31,pages251–261,October2003.
[16] G.D.Lucca,A.Fasolino,M.Mastroianni, andP.Tramon-
tana.IdentifyingCrossSiteScriptingVulnerabilitiesinWeb
Applications.InSixthIEEEInternationalWorkshoponWeb
SiteEvolution(WSE’04),pages71–80,September2004.
[17] marndt@bulldog.tzo.org. WebCal - A Web Based Calen-
dar Program. http://bulldog.tzo.org/webcal/
webcal.html,May2003.
[18] Mozilla Foundation. SpiderMonkey - MDC.
http://developer.mozilla.org/en/docs/
SpiderMonkey,December2005.
[19] Mozilla Foundation. JavaScript Security: Same Ori-
gin. http://www.mozilla.org/projects/
security/components/same-origin.html,
February2006.
[20] Mozilla Foundation. Mozilla.org - Home of the Mozilla
Project. http://www.mozilla.org,2006.
[21] Netscape. Using data tainting for security.
http://wp.netscape.com/eng/mozilla/3.
0/handbook/javascript/advtopic.htm%,2006.
[22] J.NewsomeandD.Song.DynamicTaintAnalysisforAuto-
maticDetection,Analysis,andSignatureGenerationofEx-
ploitsonCommoditySoftware. InNetworkandDistributed
SystemSecuritySymposium(NDSS),2005.
[23] A.Nguyen-Tuong, S.Guarnieri,D.Greene,J.Shirley,and
D.Evans. AutomaticallyHardeningWebApplicationsUs-
ingPreciseTainting.In20thIFIPInternationalInformation
SecurityConference,Makuhari-Messe,Chiba,Japan,0506
2005.
[24] F.Nielson, H.Nielson, and C.Hankin. Principlesof Pro-
gramAnalysis. Springer-VerlagNewYork,Inc.,Secaucus,
NJ,USA,1999.
[25] phpBB Group. phpBB.com :: Creating Communities.
http://www.phpbb.com,2006.
[26] T. Pietraszek and C. Berghe. Defending against Injection
AttacksthroughContext-SensitiveStringEvaluation.InRe-
centAdvancesinIntrusionDetection(RAID),2005.
[27] A.SabelfeldandA.Myers. Language-Based Information-
FlowSecurity. InIEEEJournalonSelectedAreasinCom-
munications,pages5–19,January2003.