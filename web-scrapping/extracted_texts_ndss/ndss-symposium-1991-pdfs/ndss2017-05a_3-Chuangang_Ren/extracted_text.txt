WindowGuard:
Systematic Protection of GUI System in Android
Chuangang Ren, Peng Liu, Sencun Zhu
Department of Computer Science and Engineering
The Pennsylvania State University
1Android Graphic User Interface
• Android GUI greatly promotes user experience
• One of the most sophisBcated sub-systems in Android
2Android GUI Security
• However, Android GUI system has been plagued by
a variety of aIacks that compromise the integrity
and availability of Android GUI system.
• We call them GUI a4acks
3GUI Integrity Breach
• Mobile phishing aIack1,2
1 Chen et al. 2Android Trojan
USENIX’14 Svpeng 4GUI Integrity Breach
• Mobile phishing aIack
(USENIX’14, Svpeng malware)
• Task hijacking aIack
(USENIX’15)
x
Paypal
Account
Fake
Password
Paypal
5GUI Integrity Breach
• Mobile phishing aIack
(USENIX’14, Svpeng malware)
• Task hijacking aIack
(USENIX’15)
• Tapjacking aIack tricks user perform undesirable
acBons 4
4Blackhat 12
6GUI Availability Breach
• Ransomware migrates to mobile environment1,
infecBng 900K user devices within 2 years
• Adware repeatedly presents unwanted (someBme
“uncloseble”) ad windows 2
1Ransomware 2Rastogi, NDSS’16
Police Locker
7Serious Security Threats
σ
τ
α
ε
ρ
η
τ
σ
υ
ο
ι
ρ
ε
Σ
8Existing Defense
• Google has taken steps to remedy the security problems
in newer Android versions
§ Add security aIributes to GUI components, e.g.
setFilterTouchesWhenObscured
§ Require explicit user consent when using certain permissions
• Challenges: adopBon of the security features takes Bme
§ CompaBbility issues for exisBng funcBonaliBes
§ Older devices or apps are vulnerable
9Existing Defense
• Bianchi et al. (Oakland’15) proposes a two layer defense
§ An app vedng process based on staBc analysis
§ On-device defense mechanism
Ransomware: FBILock-A App Locker 10Contributions
• We systemaBcally scruBnize the security implicaBon of
Android GUI system and find the root cause of GUI aIacks
• We propose a new UI integrity model for Android - Android
Window Integrity (AWI)
• We create WindowGuard – an implementaBon of AWI that
protects user devices from all known GUI aIacks
11Building Blocks of GUI System
§ AcBvity:
• An app component that provides GUI to the user
§ Window:
• Conceptually, a visual area on screen that shows the GUI
• A container to hold all GUI components
§ An acBvity must include a window
12Android GUI System
13Activity Management
AMS
App A
Focused
Task A AcLvity
A2
A2
A1
A1
App B Back
Task B
Stacks
B1
B1
AcLvity
Task L
Launcher
AcLvityRecord
Launcher
L
14Window Management
Window Tokens Window Stack
Important NoLons:
Window stack, Window Z-order, Window visibility, Window Token
15Android GUI System Security
ExisLng security mechanisms:
• App sandboxing, protected by Linux UID
• Window token
• Permission
Security Risk: an user session is beyond the scope of
exisBng security mechanism protecBons
16Activity Session
• An user session or acLvity session is a sequence of acBviBes that
user has interacted in a parBcular job
• AcBviBes in an user session may come from different apps
• Great flexibility that allows apps to control acBvity and window
behaviors
Two acLvity sessions:
• Launcher -> A1 -> A2
• Launcher -> B1 -> C2
No security
guarantees
17Android Window Integrity (AWI)
• Key principle: no app has permission to perform any operaBons
that would adversely affect other app’s acBvity session
• Display owner: display owner is the app of focused acBvity. Display
owner “owns” the screen. Display owner and the focused user session is
protected by AWI.
C is display owner
Focused
AcLvity
SessionAndroid Window Integrity (AWI)
AWI is composed of three legiBmacy:
§ LegiBmacy of acBvity session
§ LegiBmacy of future windows
§ LegiBmacy of exisBng windows
19Legitimacy of Activity Session
Criteria: focused acBvity session should always be
consistent with the back stacks in AMS
Formally:
: a back stack (a sequence of acBviBes)
: all back stacks in the system
: focused acBvity session (a sequence of acBviBes)
20Valid System State
A valid example: Focused Ac:vity
Tasks:
AcLvity
L -> B1 -> B2 L -> A1 -> A2
sequence:
AcLvity
Sessions:
21Invalid System State
A task hijacking example: Focused Ac:vity
Phishing
AcLvity
Back AcLvity
Stacks:
AcLvity
L -> A1 -> A2 L -> A1 -> A2 -> M1 -> M2 -> U
Sequence:
AcLvity
Sessions:
22WindowGuard
• We implement AWI as a Xposed module – WindowGuard, by
hooking various framework components in Android GUI system
• WindowGuard prompts the user for the final decision once a security
violaBon occurs. This design meets the diverse needs of users and app
developers in the Android ecosystem.
• 5 security features, such as integrity of acBvity session, legiBmacy of
windows start/resume, etc.
23Tapjacking Attack Example
An Android malware (BankRob) example:
Please click ok to
upgrade this app
Ok!
V
Device Admin Request Tapjacking Overlay WindowGuard Security
ConfirmaLon Dialog Window Alert
(a) (b) (c) 24Effectiveness
Consequences
A4ack Vectors
Data Privilege User Denial of Malware
Stolen EscalaLon Spoofing Service InfecLon
UI IntercepLon
Tap-jacking
Toast Message A4ack
WindowGuard can defeat all known GUI a4acks.
Phishing A4ack
Ransomware
Back-bu4on Hijacking
AcLvity launch hijacking
User Monitoring A4ack
Adware
25Usability
• We evaluate the usability by automaBcally exercising each of 12,060
most popular Google Play apps for 5 minutes on devices with
WindowGuard enabled
• Only 1% apps triggers security alert
• Among those apps that trigger security alert, 62.5% triggers
security alert only once
26Limitation
• WindowGuard introduces 1% of false posiBves
• The flexibility of ledng user make the final security decision
may introduce false negaBves.
• The current implementaBon of WindowGuard is based on
Xposed, which can only be used on rooted devices.
27Conclusion
• We systemaBcally scruBnize the security implicaBon of Android
GUI system
• We propose a new UI integrity model – Android Window
Integrity model
• We implement WindowGuard, which is able to effecBvely defeat
all known GUI aIacks
28Thank you!
(Contact: chuangang.ren@gmail.com)
29Back-up Slides
30Existing Defense
• Bianchi et al. (Oakland’15) proposes a two layer defense
§ An app vedng process based on staBc analysis
Ransomware: FBILock-A App Locker 31Challenges
• Challenges of exisBng on-device defense
§ NegaBve impact on user experience
§ Low detecBon accuracy (max. 76% in an user study)
§ Only capable of defending against GUI confusion aIack
32Put Everything Together
Permission
Check
addView()
33Existing Defense
• Bianchi et al. (Oakland’15) proposes a two layer defense
§ An app vedng process based on staBc analysis
§ On-device defense mechanism
Extended ValidaLon green address bar App idenLty indicator
in modern browsers in Android
34Legitimacy of Windows
Legitimacy of Future Windows
Criteria: the principal that launches (or resumes) a window
must be either the display owner app or a white list of
principals (e.g., system UI).
Legitimacy of Existing Windows
Criteria: no exisBng windows should be placed on top of the
display owner’s window, unless it is from a white list of
principals
35Performance
• We evaluate the performance of WindowGuard by a
comparison study.
• We generate the same sequence of 5000 user events to 10
app w/ and w/o WindowGuard installed
• On average, Windowguard incurs 0.8% performance
overhead.
36