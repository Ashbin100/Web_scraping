DARK HAZARD: LEARNING-BASED,
LARGE-SCALE DISCOVERY OF HIDDEN
SENSITIVE OPERATIONS IN ANDROID
APPS
Xiaorui Pan, Xueqiang Wang, Yue Duan*,
XiaoFeng Wang, Heng Yin*
Indiana University Bloomington, *University of California Riverside§ Automated Runtime Analysis§ The problem?
Ø Hidden Sensitive Operations (HSO):
Malware (or benign) apps conducted
sensitive operations only on certain
conditions (trigger) to hide from
a utomated runtime analysis
Hacking Team Remote Control System§ Hidden Sensitive Operations (HSO)
Ø Anti-emulator
Ø QEMU property
Ø Performance difference
Ø Anti-sandbox
Ø FireEye Sandbox Profiled
Ø Logic bomb
Ø time, location
Ø Anti-runtime analysis
Ø Determine the absense of a human user§ Traditional Approaches
Ø Academia solutions
Ø Morpheus ACSAC 14
Ø High false positive as a detection tool
Ø TriggerScope S&P 16
Ø Precise but heavyweight: symbolic execution
Ø Need to know the types of trigger in advance
Ø Currently limited to time, location, SMS
Ø Industry solutions
Ø Signature based
Ø manual analysis§ Our approach
Ø Lightweight program analysis
Ø Features based on unique observations
Ø Scalability
Ø >330K applications
Ø Semi-supervised learning
Ø First step towards a more general approach
Ø Not limited to certain types of triggers or sensitive
operations§
Observations
Ø Data and semantic dependency between
conditions and paths in HSO are weak,
Ø Conditions only serve as guard of
malicious behaviors
AntiEmulator am = new AntiEmulator();
if (am.isEmu()){
...
deceptionCode2(…);
return false;
}
...//begin to root the phone if necessary
...//begin to monitor user behaviorsObservations
Ø Normal case§
Observations(2)
Ø Behavior difference between two paths
Ø
AntiEmulator am = new AntiEmulator();
if (am.isEmu()){
...
no sensitive behaviors
deceptionCode2(…);
return false;
}
root exploit & monitor
...//begin to root the phone if necessary§
Observations (3)
Ø Source of trigger conditions
Build.FINGERPRINT
Build.TAGS
Build.PRODUCT
Build.DEVICE
com.android.dvci.core:
Build.BRAND
am.isEmu() Build.MANUFACTURE
getDeviceId()
getLine1Number()
getSubscriberId()
. . .§ Architecture§ Features
Ø Data and semantic dependency between
Condition and Paths
Ø Data Dependency (DF1 DF2) : k/n
Ø Semantic relevance: Implicit Relation (IR1 IR2)
Ø Based on semantic relevance
Ø And Frequency Analysis§
Features
Ø Behavior Differences
Ø Data distance (DD)
Ø We also want to know data relations between two
paths§ Features
Ø Behavior differences
Ø Activity distance (AD)
Ø Group APIs or system keys based upon similarity of their
functionalities
Ø Android official documentation
Ø Pscout
Ø DroidSIFT
Ø other system properties & settings.
Ø Jaccard distanceFeatures
Ø Source of trigger conditions
Ø SI (System input)
Ø System properties (OS or hardware traces of a mobile
device) or environment parameters (time, locations, user
inputs, etc.)
Ø SUSI§ Dataset
Ø Ground Truth:
Ø One HSO branch in each of 213 malwares
Ø Found by known HSO trigger signatures
Ø Non-HSO branches in 213 benign apps
Ø Manual confirm and VirusTotal scan
Ø Unknown Apps from the wild
Ø 124,207 Google Play Apps
Ø 214,147 VirusTotal Apps§ Evaluation
Ø Ground Truth
Ø Cross-validation
Ø Apps in the wild
Ø Random Sampling
Ø Precision: 98.4%
Ø Recall not available§ Performance
Ø Random 3000 apps from Google-play average
size of 8.43MB
Ø 765.3 s per app
Ø Dell desktop with 3.3GHz i5 processor
and 16GB RAM
Ø Timeout: 60 mins
Ø 8.4% timeout
Ø Compared with TriggerScope
Ø 5.2 times faster, on their dataset
Ø 35 apps which is publicly available
Ø 42.0 s VS 219.2 s§
Understanding HSO
Ø Landscape
Ø Overall, 63,372 (18.7%) of 338,354 contain HSO
Ø 3,491 unique HSO instances§ HSO and PHA§ Triggers§ EvolutionVideo trigger§
Click intervalTakeaways
Ø Promising to combine machine learning and
lightweight program analysis
Ø Towards scalability
Ø First step towards generic evasion detection
techniques
Ø Verify the feasibility
Ø By >330k apps, prevalence of HSO in the wild
Ø Urgency of countermeasuresThank you!
Questions ?§ Trapdoor on viewLimitations
Ø Further Evasion
Ø Intrinsic limitation of static analysis
Ø Coverage
Ø Native code
Ø Server sideFuture work
Ø UI Context
Ø User perception, app description context§ Condition Path Graph(CPG)