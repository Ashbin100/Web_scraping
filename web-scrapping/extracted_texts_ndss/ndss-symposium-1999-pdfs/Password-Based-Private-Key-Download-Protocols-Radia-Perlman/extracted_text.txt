P r i v a t e K e y D o w n l o a d P r o t o c o l s
Password-Based Private-Key
Download Protocols
Radia Perlman Charlie Kaufman
radia.perlman@sun.com ckaufman@iris.com
1
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Goals
“The network is the computer”
•
WS has some minimal amount of (trusted)
•
software installed
No user-specific info configured on WS
•
User Alice’s private key and other info stored
•
in central place “Bob” (e.g., the directory)
“Log into the network” means get Alice’s
•
private key, so WS can authenticate as Alice
Download the key knowing only a password
•
no off-line pwd guessing by eavesdropper,
-
Alice-impersonator, or Bob-impersonator
minimal messages
-
minimize computation for Bob, stateless Bob
-
allow for “salt”
-
2
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Unavoidable Vulnerabilities
Someone that knows (or can guess) Alice’s
•
password can impersonate Alice to Bob, get
Alice’s security info from Bob and then
impersonate Alice to the world
Someone that knows (or can guess) Alice’s
•
password can impersonate Bob to Alice and
trick her into using the wrong private key,
trusting the wrong CA’s, etc.
Someone who can read Bob’s database can do
•
off-line, unaudited, password guessing
Alice-impersonator can do on-line guessing.
•
Bob can’t distinguish this from user mistyping
One side, X, discovers first whether the other
•
side is legitimate. X-impersonator can get one
“free” on-line pwd guess by breaking off
communication
3
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Building Blocks
Diffie-Hellman
•
EKE (Bellovin-Merritt)
•
encrypt Diffie-Hellman exchange with W
-
(W=h(pwd))
SPEKE (Jablon)
•
replace base in Diffie-Hellman exchange
-
with W
Both EKE and SPEKE are 4-message
•
protocols designed for mutual authentication
and agreeing on a strong session key S
4
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
EKE
W=h(pwd), g, p
Alice Bob
pick A
A
{g mod p}W
pick B
A
decrypt {g mod p}W
AB
calculate K=g mod p
choose challenge C1
B
{g mod p}W, {C1}K
choose challenge C2
{C1,C2}K
{C2}K
5
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
SPEKE
W, g, p
Alice Bob
pick A
A
W mod p
pick B
AB
calculate K=W mod p
choose challenge C1
B
W mod p, {C1}K
choose challenge C2
{C1,C2}K
{C2}K
6
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Downloading Private Key
Call private key encrypted with password “Y”
•
Bob could send {Y}K in 4th message
•
No salt: Reading Bob’s database, can check W
•
for many users against one database of guessed
passwords
Could add salt by adding two messages to the
•
front
Alice Bob
“Alice”
salt
Alice
Simplifications for our use:
•
no need to authenticate Bob
-
get rid of C1 (just prove knowledge of K)
-
7
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Basic EKE-Based 4-msg
W, g, p Alice: W, Y
Alice Bob
pick A
A
{g mod p}W
pick B
A
decrypt {g mod p}W
AB
calculate K=g mod p
B
{g mod p}W
AB
calculate K=g mod p
h(K)
verify h(K)
{Y}K
8
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Basic SPEKE-based 4-msg
W, g, p Alice: W, Y
Alice Bob
pick A
A
W mod p
pick B
AB
calculate K=W mod p
B
W mod p
AB
calculate K=W mod p
h(K)
verify h(K)
{Y}K
9
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Notes
Ted, impersonating Bob, gets one unaudited
•
guess by breaking off communication after
msg 3
An eavesdropper gains no information
•
Someone impersonating Alice gets one “on-
•
line” guess, i.e., can’t verify guess without
letting Bob know she guessed wrong
Salt would be nice, so computation to produce
•
W must be done per user, per password
A “cookie” would be nice, so Bob does no
•
significant computation if you can’t receive
from the IP address you sent from
Both salt and cookie can be added easily to
•
produce a 6-message protocol
10
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
SPEKE-based, 6-msgs
Alice:
W=f(pwd, salt), g, p
salt , W, Y
Alice
Alice Bob
“Alice”
choose cookie
salt , cookie
Alice
pick A
A
cookie, W mod p
pick B
AB
calculate K=W mod p
B
W mod p
AB
calculate K=W mod p
h(K)
verify h(K)
{Y}K
11
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Notes
No security lost if Bob uses same B every time
•
for a particular user (but different B per user)
If we’re picking B per user in advance, we can
•
B B
precompute {g mod p}W for EKE and W
mod p for SPEKE
A
EKE: if Alice sends g mod p unencrypted
•
A
rather than {g mod p}W, then Bob can store
B
B, {g mod p}W and does not need to store W
B
SPEKE: If Bob stores B, W mod p, then he
•
doesn’t need to store W
This accomplishes the same thing as salt!
•
And it saves computation for Bob!
•
And it avoids the first two messages!
•
12
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Making Bob Stateless
Bob doesn’t have to remember what B he used,
•
since it’s always the same one for Alice
Include Alice’s name in each msg from Alice
•
Make cookie a function of Alice’s IP address
•
and a secret known only to Bob
cookie=h(IP address, Bob’s secret)
-
Bob can change his secret often (like every 5
•
minutes) and always accept one of 2 values
13
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Stateless, precompute,
EKE-based, 4-msgs
B
“Alice”, B, {g mod p}W, Y
Alice Bob
“Alice”
calculate cookie=h(IP add, Bob’s secret)
B
{g mod p}W, cookie
choose A
AB
calculate K=g mod p
A
“Alice”, cookie, g mod p, h(K)
verify cookie
AB
calculate K=g mod p
verify h(K)
{Y}K
14
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Stateless, precompute,
SPEKE-based, 4-msgs
B
“Alice”, B, W mod p, Y
Alice Bob
“Alice”
calculate cookie=h(IP add, secret)
B
W mod p, cookie
choose A
AB
calculate K=W mod p
A
“Alice”, cookie, W mod p, h(K)
verify cookie
AB
calculate K=W mod p
verify h(K)
{Y}K
15
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Two Messages, EKE-based
Bob stores, for Alice:
•
“Alice”
-
W=h(pwd)
-
Y=private key encrypted with password
-
B ;to save computation
-
B
{g mod p}W ;to save computation
-
Alice Bob
A
“Alice”, {g mod p}W
B
{g mod p}W, {Y}K
16
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Notes
No salt. Bob needs to store W
•
A
If Alice sent g mod p, someone
-
impersonating Alice could do off-line
password guessing
A
So Bob needs W do decrypt {g mod p}W
-
Conceivably the user’s name can act as salt
-
W=h(name,pwd), but problematic if user has
aliases, or name changes
No cookie. Every message requires Bob to
•
compute K
Someone impersonating Bob gets no info
•
about W
Someone impersonating Alice gets one
•
unaudited on-line password guess
17
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Two Msgs, SPEKE-based
Bob stores, for Alice:
•
“Alice”
-
B
-
B
W mod p
-
Y=private key encrypted with password
-
Alice Bob
A
“Alice”, W mod p
B
W mod p, {Y}K
18
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Notes
Better than 2-msg EKE-based because it gets
•
the advantage of salt!
Same other disadvantages (relative to 4-msg
•
protocols) as 2-msg EKE-based
Alice gets a single unaudited on-line guess
-
no cookie
-
19
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Retrieving User’s Security
Context
WS needs other info, like keys of CAs she
•
trusts, her certificate, etc.
Store it signed (and encrypted if necessary)
•
with Alice’s key
If info changes, include a timestamp or version
•
number and display to the user (to prevent
tricking WS into using old security context
info)
Or Alice can sign certificate trusting some
•
administrator’s signature on her security
context. Store info signed by admin’s key and
encrypted (if necessary) with Alice’s key
20
Copyright © 1999 by Radia Perlman and Charlie KaufmanP r i v a t e K e y D o w n l o a d P r o t o c o l s
Summary
We present 4-msg protocols for downloading
•
private key and user’s security context:
no off-line guessing
-
minimize server computation
-
denial of service protection of cookie
-
equivalent advantage of salt
-
stateless server (Bob can act in request-
-
response mode)
Bob gets one unaudited on-line guess
-
We present 2-msg protocols:
•
lose cookie protection
-
Alice gets one unaudited on-line guess
-
in EKE-based, lose salt. SPEKE-based we
-
keep salt advantage
21
Copyright © 1999 by Radia Perlman and Charlie Kaufman