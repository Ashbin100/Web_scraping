Secure Password-Based Protocol for Downloading a Private Key
Radia Perlman Charlie Kaufman
Sun Microsystems Laboratories Iris Associates
2 Elizabeth Drive 5 Technology Park Drive
Chelmsford, MA 01824 Westford, MA 01886
radia.perlman@sun.com charlie_kaufman@iris.com
Abstract Inparticular,we assumethat Alice comes totheworksta-
tion with only her user name and password (and possibly
WepresentprotocolsthatallowauserAlice,knowingonly
thenameofaserverholdingmoreinformationabouther).
her name and password, and not carrying a smart card, to
Weassumethattheworkstationisinstalledwithtrustwor-
“logintothenetwork”froma“generic”workstation,i.e.,
thysoftwareandwithouttrojanhorsesthatmightstealher
onethathasallthenecessarysoftwareinstalled,butnoneof
password or otherwise misbehave (a challenge not
theconfigurationinformationusuallyassumedtobeknown
addressed by this paper), but that the workstation has no
aprioriinasecurityscheme,suchasAlice’spublicandpri-
configurationinformationspecifictoAlice.Wealsoassume
vatekeys,hercertificate,andthepublickeysofoneormore
thenetworktowhichtheworkstationisconnectediscom-
CAs. By “logging in”, we mean the workstation retrieves
pletelyuntrustworthy,andAlice’spasswordwaschosenby
this information on behalf of the user. This would be
herandcouldprobablybeguessedifanattackercouldtrya
straightforward if Alice had a cryptographically strong
large number of values.
password. We propose protocols that are secure even if
Alice’spasswordisguessable.Weconcentrateontheinitial Weassumethatthereisaserverwe’llcallBoboutonthe
retrievalofAlice’sprivatekeyfromsomeserverBobonthe networksomewherewithconfigurationinformationabout
network. We discuss various protocols for doing this that Aliceincludingstrong(unguessable)cryptographiccreden-
avoidoff-linepasswordguessingattacksbysomeoneeaves- tials.Welookatprotocolswherebytheworkstationknow-
droppingorimpersonatingAliceorBob.Wediscussaudit- ing Alice’s password can download that configuration
ablevs.unauditableon-lineattacks,andpresentprotocols information.Wewouldliketoattainthefollowingsecurity
that allow Bob to be stateless, avoid denial-of-service properties:
attacks,allowforsalt,andareminimalincomputationand •An eavesdropper on the conversation between Alice and
number of messages. Bob can’t learn Alice’s password, Alice’s configuration
information, or be able to verify a guess of Alice’s pass-
word from the eavesdropped information.
1. Introduction
•Someone we’ll call Trudy impersonating Alice to Bob
will not get any useful information from Bob unless she
Thispaperaddressesaveryspecificbutcommonproblem.
successfully guesses Alice’s password, and Bob will
Ifagroupofusersshareapoolofworkstationsandwantto
know if she makes a wrong guess and how many wrong
be able to walk up to any one of them and “log in”, there
guesses she made.
must be a way for the workstation to retrieve the user’s
•Someone we’ll call Ted impersonating Bob to Alice will
environment from some repository on the network. In the
not get any useful information from Alice unless he suc-
timesharing world, this was easy because all of the user’s
cessfully guesses Alice’s password, and Alice will know
state was held on the central system and the workstations
ifhemakesawrongguessandhowmanywrongguesses
werealleffectivelyidentical.Reproducingthissimplicityin
he made.
today’senvironmentinvolvesanumberofchallenges:mak-
ingtheworkstationsappeareffectivelyidenticalbyhaving •Even if Ted can read Bob’s database and impersonate
enoughcommonalityininstalledsoftwaretomaketheenvi- Bob to Alice, he can’t learn Alice’s password or trick
ronmentatleastfamiliartotheuser;downloadingthecus- Alice into accepting false configuration information.
tom aspects of the user’s environment from the network; •Someone who gets in the middle of a conversation
finding the user’s environment on the network; and doing betweenAliceandBobcannotaccomplishanymorethan
all of this securely. This paper addresses only the last of Trudy and Ted.
these problems.
•If Bob serves lots of users, someone who reads Bob’sdatabase can’t test a guessed password against multiple of this paper, we will talk only about protocols for down-
user accounts with less computational effort than testing loading her private key. These protocols could be used,
it individually against each one. however,todownloadanysortofsecuritycontext,includ-
ing one using secret key based credentials.
Therearesomeothersecurityvulnerabilitiesthatwouldbe
nicetoavoid,butgiventheconstraintsareunavoidable.In
2. Related Protocols
particular:
•Someonewhoknows(orcanguess)Alice’spasswordcan Theprotocoldescribedin[LGSN89],avariantofwhichis
impersonate Alice to Bob and get Alice’s configuration implementedaspartofNetWareVersion4[LI94]satisfies
information, and can also impersonate Bob to Alice and somebutnotallofoursecuritygoals.Ourprotocolisbased
trickAliceintoacceptingfalseconfigurationinformation. directlyonEKE[BM92]andSPEKE[Jab96],withmodifi-
•SomeonewhocanreadBob’sdatabasecanverifyguesses cations to fit the needs of this specific problem and to
of Alice’s password in an unaudited fashion. improve performance.
•Trudy can guess one password at a time, know whether
2.1 NetWare Private Key Download Protocol
she got it right, and Bob can’t distinguish any one guess
from the case where Alice mistyped.
NetWare version 4 [LI94] has implemented a scheme for
•In each protocol, one side or the other discovers whether downloading an encrypted private key from a directory
the other end is legitimate (i.e., agrees on the password) which is similar to a scheme published in [LGSN89]. We
first. That end can be impersonated, and if the imperson- will describe a simplified version of those protocols that
atordiscoversthepasswordguesstheymadeisincorrect, illustratestheirstrengthsandweaknesses.Westartwitha
cut off the connection so that the other party can’t distin- clientmachinethathasthenecessarysoftwareinstalled,but
guishbetweenanunsuccessfulpasswordguessandanet- no configured information for individual users, and a
work disconnect. human that knows her name and password. We’ll call the
combinationofthehumanandworkstation“Alice”andthe
IfAlice’spasswordwerecryptographicallystrong(i.e.we
directory “Bob”. Bob starts out with a database of users,
were not concerned about the possibility of an attacker
and for each user it knows:
doing a dictionary or exhaustive search attack), we could
post Alice’s security context in some public location •user name
encryptedusingherpasswordandallowittobeworldread- •X = h(pwd, salt); h is a cryptographic hash, “pwd” is the
able.IfAlicechoosesareallyeasytoguesspassword,like user’s password
her birthdate, then these protocols will not be secure
•salt; a user-specific value
because they cannot withstand on-line guessing. We are
•Z = user’s private key encrypted with her password
assuming moderately unguessable passwords. Some sys-
temsenforcepoliciessuchaspasswordlength.Thesepoli-
ciescontinuetobeagoodidea,asannoyingastheyareto
Figure1 SimplifiedNetWare4privatekeydownload
users, even with these protocols.
scheme
It is useful for Alice’s security context, when decrypted
Alice Bob
withherpassword,tohavesomesortofchecksumsothat
Alicecandetectwhethertheinformationiscorrect.Insome “Alice”
msg1
of our protocols if she were to mistype her password the
onlysymptomwouldbe thatthedecrypted“securitycon-
salt, R (a random challenge),
text”wouldbegarbage.BystoringAlice’ssecuritycontext
Bob’s Public Key
in such a fashion, she is immune from attacks even from msg2
someonewhohascompromisedBob,solongasherpass-
compute X=h(pwd,salt) and Y=h(X,R)
word is unguessable.
choose random R2
Insection2(“RelatedProtocols”)wediscussexistingpro-
tocols thatprovidesimilarfunctionality,comparethem to {Y,R2}encrypted with Bob’s public key
ours, and we review protocols that we need as a basis for msg3
our protocols.
verifies Y=h(X,R)
As we will discuss in section 3.6 (Getting the Rest of the
{Z XOR R2} encrypted with Y
User’sSecurityContext),ifAlicecansecurelyretrieveher
msg4
publicandprivatekeys,itisstraightforwardforhertouse
thistodownloadtherestofhersecuritycontext.FormostAt this point Alice can do the following: 2.2 Review of EKE and SPEKE
•use Y to decrypt the returned value,
Our protocols will use EKE or SPEKE, so we briefly
•XOR the result with R2 to obtain Z,
describe them here.
•use her password to decrypt Z, yielding her private key.
EKE[BM92] and SPEKE[Jab96] are protocols in which
The main disadvantage of this protocol relative to the AliceandBob,whoonlyshareaweak,guessablesecret(a
EKE/SPEKEfamilyofprotocols(seesection2.2),andthe user’s password), can do mutual authentication and con-
protocolswewillpresentinthispaper,is thatit requires vertthatweaksecretintoastrongsecretthatcanbeused
configurationoftheworkstationwithBob’spublickey.It fortheremainderofthesessionwithoutdivulginginfor-
isn’tsecuretojusthaveBobsendittoAlice,andwe’dlike mation that would enable an eavesdropper to verify
Alicetobeabletologinfromacompletelygenericwork- guesses of the weak secret.
stationwithnopreviousknowledgeoftheuseroranyspe-
cific server public keys. [BM92] describes a family of protocols collectively
knownasEKE.Inthevariantwe’lluse,aweaksecretis
IfAlicejustacceptsthepublickeypresentedbyBob,the used to encrypt elements of a Diffie-Hellman exchange
protocolisusablebutlesssecure,becausesomeoneimper- [DH76],windingupwiththestrongsecretagreeduponby
sonating Bob could send their own public key to Alice, the Diffie-Hellman exchange. In detail, Alice and Bob
decryptmsg3,andthentestanynumberofpasswordsby shareaweaksecretW.InsteadoftransmittinggAmodp,
checkingwhetherY=h(h(pwd,salt),R).Thisthreatmaybe Alice transmits {gA mod p} encrypted with W. In some
acceptable in some situations. variantsofEKE,BobtransmitsgBmodpunencrypted.In
IntheprotocolinFigure1,aneavesdropperdoesnotlearn others he encrypts it with W (and similarly with Alice).
enough information to verify a guess of a password. The secret that Alice and Bob derive is gAB mod p.
AlthoughYisderivedfromAlice’spasswordusinginfor-
mationaneavesdroppercanlearn,andthereforeaneaves-
Figure 2 EKE Protocol
droppercanguessapasswordandderivetheresultingY,
the only thing the eavesdropper can do with Y is trial
decryptionsofthevaluetransmittedinmsg4(ZXORR2 both know W=h(pwd)
Alice Bob
encryptedwithY).ButbecauseR2wasrandomlychosen
andneverexposedintheclear,theeavesdroppercan’tcon- {gA mod p} encrypted with W
msg1
firm or deny the guessed password because every value
choose B, calculate
triedwillproducerandomlookingbytes.Itisvitaltothe K=gAB mod p,
security of this protocol that when Z XOR R2 is choose challenge C1
encrypted, there is no recognizable padding or redun-
dancy. {gBmod p} encrypted with W,
{C1} encrypted with K
Since Bob sends no information based on Alice’s pass- msg2
word until Alice has proven knowledge of it in the third
message,someoneimpersonatingAlicemustguessasin-
choose random C2
glepasswordforeachexecutionoftheprotocolandBob
willdetectfailedattempts.Alloftheseprotocolsassume
{C1, C2} encrypted with K
Bobdoessomethingtolimitguessingattempts,likealert-
msg3
inganadministratoriftherearelargenumbersoffailures,
lockingout anaccount after some numberoffailures,or {C2} encrypted with K
simply giving slow response time.
msg4
SomeoneimpersonatingBob,sayTed,willlearnnoinfor-
mationthatcanbeusedtoverifyaguessofAlice’spass- These protocols are designed for mutual authentication,
wordbecausemsg3isencryptedunderBob’spublickey. andaredescribedas4-messageprotocolsthatagreeona
(Butasnotedabove,ifTedcantrickAliceintousingthe strong session key K and do mutual authentication.
wrongpublickeyforBob,andtrickAliceintotalkingto
ThereareanumberofwaysforEKEtofailifnotimple-
Ted,thenTedwillbeableusewhatAlicesendsinmsg3to
mentedcarefully[Pat97].Whatisparticularlyimportantis
do off-line, unauditable password guessing.)
that when the Diffie-Hellman public numbers are
encrypted,thatsomeonecan’tusethattonarrowdownthe
passwordchoicesinanoff-lineattack.Forinstance,Dif-fie-Hellmanpublicnumbersarealways<p,soanypass- arerelatedbutmorecomplexthanEKEandSPEKE.They
wordanattackertriedthatdecryptedtoavalue>pcould havethesecurityadvantageofnotrequiringstorageatthe
beidentifiedaswrong.Therefore,thequantity{gAmodp} server of a quantity that, if stolen, can be used to imper-
encryptedwithWcouldbeusedtorejectalargenumber sonatetheusertothatserver.Thequantitycanbeusedfor
of candidate passwords, and the quantity {gB mod p} off-linepasswordguessing,butitcannotdirectlybeused
encrypted with W could be used to reject even more. to impersonate the user.
Avoidingtheseattacksrequirescarefultransformationof
Wewillnotusetheseprotocols,becauseforourpurposes
the Diffie-Hellman public numbers before encryption.
there is no security advantage. The only thing someone
Successful techniques are described in [Pat97] and
gains by successfully impersonating Alice to Bob is the
[BM92].
abilitytoreadAlice’sencryptedprivatekey.Sincesome-
SPEKE[Jab96]issimilartoEKE,butinsteadofencrypt- onewhohasreadBob’sdatabasealreadyhasthat,thereis
ingtheDiffie-HellmanpublicnumbersusingW,itusesa nopointinmakingitdifficultforsomeonewhohasread
secret generator derived as a function of W instead of a Bob’s database to impersonate Alice to Bob.
fixedg.Thegeneratorisstillafunctionoftheuser’spass-
word, so we will call it W. 2.4 Choosing p and g
AlloftheseprotocolsdependonAliceandBobagreeing
Figure 3 SPEKE Protocol on a large prime p, and in the EKE derived protocols a
generator g. We have assumed that workstations are not
configuredwithanyper-userorper-organizationinforma-
both know W=h(pwd)
Alice Bob tion,sohowdowemakethiswork?[BM92]suggeststhat
WA mod p theworkstationcouldreadthevaluesofpandgfromBob
msg1
andthenevaluatetheirreasonableness.Ifsomeoneimper-
choose B, calculate sonatingBobcouldtrickAliceintousingbadvaluesofp
K=WAB mod p,
andg,theycouldpotentiallygetenoughinformationtodo
choose challenge C1
off-line guesses of Alice’s password. We believe this
WB mod p, {C1} encrypted with K approach is a bad idea. First, it is computationally very
msg2 expensivefortheworkstationtovalidatethatpandgare
"good".Further,ifanyone-saythroughenormouscompu-
tationaleffortormathematicalclevernessorboth-could
choose random C2
findapandgoverwhichtheycouldefficientlycompute
discrete logarithms, they could impersonate any Bob to
{C1, C2} encrypted with K
any workstation and gain the ability to guess passwords
msg3
unaudited.
{C2} encrypted with K
Webelievethatabetterapproachistospecifypandgas
msg4 part of the protocol specification. Because this would be
anattractivetargetforbruteforceattack,pshouldbecho-
Either of these protocols could be enhanced to serve the
sen conservatively - at least 1024 bits and more likely
function of downloading Alice’s security context by
2048.Ifovertimethisvaluebecameweak,newvaluesfor
including Alice’s context encrypted under K in the last
pandgcouldbephasedinbyhavingmultiplevaluescon-
message.Theresultingprotocolswouldmeetalloursecu-
figuredinclientsandservers,andbyhavingtheserverbe
ritygoalsexceptone.Anyonereadingtheserverdatabase
abletorejectaconnectionbasedonanobsoletepandsug-
could compute h(pwd) and then check it for a match
gestnewvaluesthatwouldbeacceptable.Theworkstation
againstalluseraccounts.Thiscouldbeavoidedby“salt-
would only accept new values that have been configured
ing”thepasswords,butthiswouldaddtwomoremessages
into the software.
to the protocol. By salting, we mean having a different
non-secretquantityassociatedwitheachuser,havingthe 3. Simple Password-Based Private Key
user retrieve the salt from Bob, and using a secret key
Download Protocols
based on h(salt,pwd) instead of just h(pwd).
In this section we describe several new protocols for
2.3 Augmented EKE, SPEKE, and Wu
downloadingtheuser’sprivatekey.Thesearevariantson
EKE and SPEKE trimmed down for better performance.
Theprotocolsdescribedin[BM94],[Jab97],and[WU98]
Wewillgiveaseriesofprotocolstoshowtheevolutionofthedesign,andtoexaminethesecurityandperformance
implicationsofeachstepintheevolution.Thefirstproto-
col, in figure 4, is the most straightforward extension of Figure 5 Basic 4-msg SPEKE-based
EKE, but then in subsequent protocols we add perfor-
manceenhancements,securityagainstadditionalthreats,
Alice Bob
and finally shorten it to two messages.
“Alice”, WA mod p
msg1
3.1 Four messages, no salt
choose B, calculate
K=WAB mod p
The first protocol we present is closest in spirit to the
WBmod p
EKE/SPEKEclassofprotocols.Theworkstationinitially
msg2
knows nothing. Alice types her password, and then the
h(K)
workstationcancomputeW=h(pwd).Bobhasadatabase msg3
and knows, for each user:
•user name {Y} encrypted with K
msg4
•W=h(pwd)
•Y=user’s private key encrypted with her password
Notethatonemodificationwehavemadeisthatwedonot
haveAliceauthenticateBob.Forourpurposes(download
Figure 4 Basic 4-msg EKE-based ofuser’sprivatekey)itisunnecessaryforAlicetoauthen-
ticateBob.Allshecaresaboutisthatshereceivesaquan-
tity that when decrypted with her password, yields her
Alice Bob private key. It is true that someone who has stolen her
“Alice”, {gA mod p} encrypted with W password can trick her into using the wrong private key,
msg1 butgiventhatherpasswordisheronlymeansofauthenti-
choose B, calculate cating Bob or her public key pair, this threat is unavoid-
K=gAB mod p
able. So there is no security advantage to having Alice
authenticate Bob. Therefore we can skip the fourth mes-
{gBmod p} encrypted with W
sage of the EKE/SPEKE handshake and use the fourth
msg2
message to download Y, encrypted with a strong session
h(K)
msg3 secret.
Another modification we’ve made is to dispense with
{Y} encrypted with K
Bob’schallengefromtheEKEandSPEKEprotocols.Itis
msg4
sufficienttohaveAliceproveknowledgeofKbysending
h(K).
The protocol using SPEKE looks as follows. As before,
Bob knows, for each user: Notethatintheprotocolsinthissection,someoneimper-
•user name sonatingBobcandoasingleunauditedon-linepassword
•W=h(pwd) guess. What that means is that if someone, say Ted, is
impersonatingBobandguessesasinglepasswordforthe
•Y=user’s private key encrypted with her password
user, he can verify his guess after msg3, by checking
whetherAlicereturnstheexpectedh(K).AtthispointTed
canstoprespondingandAlicecannottellthatshewasn’t
talking to the legitimate Bob. Ted has given no incorrect
responses; he’s just simply broken off communication, a
situationunfortunatelysufficientlycommonintheworld
ofnetworksandserversthatitmightnotraisesuspicion.
ButAliceprobablywouldbecomesuspicious(orwouldat
leastgiveuponusingthesystem)ifithappenedthousands
of times.
Alice,ontheotherhand,cannottestevenasingleincor-
rectpasswordwithouthavingBobknowshedidnotknow
thepassword,becauseinmsg3shewillnothavethecor-rectresponseunlessshechosethecorrectpassword.And 3.3 Four messages, Saving Computation for
shecannotbreakoffcommunicationearlierbecauseuntil Bob, Stateless Bob
msg4 she has not obtained any useful information with
which to verify even a single password guess. Wenowmakeseveralimprovements.Wenotethatthereis
nosecuritylostbyhavingBobalwaysusethesameBfora
Notethattheseprotocolsdonothavetheabilitytousesalt,
particular user, and precompute and store {gB mod p}
because unless there is a message from Bob first to let
encrypted with W for that user (in the case of EKE), or
Alice know what the salt is, she can’t compute W (since
WBmodp(inthecaseofSPEKE).Andithasthesignifi-
theideaofsaltistorequireWtobeafunctionofsaltas
cant advantage of reducing computation for Bob.
wellasthepassword).Thereforeshecan’tcomputewhat
sheneedstosendinmsg1({gAmodp}encryptedwithW
Ofcourse,itwouldbeadisaster,inEKE,tousethesame
fortheEKE-basedprotocolinFigure4andWAmodpfor
Bwithdifferentusers,becausethensomeoneknowingW1
the SPEKE-based protocol in Figure5). for user 1 can decrypt {gB mod p} encrypted with W1
(senttouser1)withW1toobtaingBmodp,andthentest
3.2 Adding Salt and a Cookie, 6 msgs passwordsagainstthequantity{gBmodp}encryptedwith
W2, (which will be transmitted on the wire when user 2
Itisstraightforwardtoaddsaltwithanextra2messages
downloads his password).
priortomsg1inwhichAlicerequests,andBobtransmits,
the salt.
If,inthecaseofEKE,wehaveAlicesendgAmodpunen-
crypted,thenBobdoesnotneedtostoreWifhe’sstoring
Anotherfeaturewe’dliketoaddisdenial-of-servicepro- {gBmodp}encryptedwithW.SimilarlyinSPEKE,ifwe
tection.Intheprotocolsinfigures4and5,anyrequester store WBmod p we no longer need to store W.
canforceBobtoperformanexponentiation.SinceBobis
aserverthatcangetarbitrarynumbersofrequests,thereis Note that in EKE, if Alice sent instead {gA mod p}
apotentialdenialofserviceattackifanyonecanforcehim encrypted with W, then Bob would need W in order to
to do something CPU-intensive. A cookie is a random decryptwhatAlicesendssothathecanraiseittoB.Inthe
number Bob sends and Alice returns, which proves that protocol in Figure4, we had Alice send {gA mod p}
she can receive at the address she is claiming to come
encryptedwithW,butinfactshecouldhavesentgAmod
from.Thisishelpfulagainstanattackerwhosendslotsof punencrypted.Thegeneralruleofthumbfortheseproto-
requests with forged source addresses to avoid capture. colsisthepersonwhoprovesknowledgeofthepassword
first does not need to encrypt the Diffie-Hellman value.
The resulting protocol is:
NowwenotethatsinceBobisnotstoringW,butisrather
storing a quantity dependent on B, which is unique for
eachuser,wedispensewiththeneedforsalt!Withwhat
Figure 6 Salt, cookie, SPEKE-based, 6 msgs
we’re storing, someone that steals Bob’s database and
wantstocheckwhetheraparticularpasswordmatchesany
Alice Bob user’saccountmustdoanexponentiationwitheachuser’s
uniqueBinordertocheckthatpasswordforthatuser.So
“Alice”
msg1
themodificationwemadeforsavingcomputationforBob
has the very nice side-effect of eliminating the need for
salt, cookie
salt.
msg2
cookie, WA mod p ThenextmodificationistomakeBobstateless.Inthepro-
msg3
tocolinfigure6,Bobhadtorememberwhatcookie/chal-
choose B, calculate lengehesentinmsg2inordertoverifymsg3.Healsohad
K=WAB mod p
to remember Alice’s name. We can easily add Alice’s
WBmod p nametomsg3ineachcase.Wecanalsomakeitpossible
msg4
for Bob not to need to remember R.
h(K)
msg5 ThewaywedothatistohaveRbeafunctionofAlice’sIP
address and a secret known only to Bob, e.g., R=h(IP
{Y} encrypted with K
address, Bob’s server secret). Bob can change the secret
msg6
fairlyfrequently(likeevery5minutes),andacceptoneof
Obviously, to make it work for EKE, replace Wx mod p twovaluesasacookiefromIPaddressx:theonebasedon
with {gx mod p} encrypted with W. Bob’s current secret and the one from Bob’s previous
secret.ThatwayBobcanbestateless,i.e.,actinrequest/response mode even though the protocols are 4 messages.
In the EKE-based protocol, Bob needs to store, for each
3.4 Two Messages, No Salt, EKE-based
user:
•user name Now we shrink the protocol down to two messages!
•Y=user’s private key encrypted with her password
In the EKE-based protocol, Bob needs to store:
•B (the Alice-specific random number chosen by Bob •user name
when setting up Alice’s account)
•W=h(pwd)
•{gB mod p} encrypted with W
•Y=user’s private key encrypted with her password
IfwewanttosavecomputationforBob,wecanaddition-
Figure 7 4-msgs, stateless Bob, precomputation,
ally have him store:
EKE-based
•B
Alice Bob •{gBmod p} encrypted with W
“Alice”
msg1
R=h(IP address, Bob’s secret) Figure 9 Two msgs, EKE-based
{gBmod p} encrypted with W, R
msg2 Alice Bob
R, gA mod p, “Alice”, h(K), where K=gAB mod p {gA mod p} encrypted with W
msg1
msg3
Verify R=h(IP address., Bob’s secret) K=gAB mod p
Bob now computes K, verifies h(K)
{Y} encrypted with K
msg4 {gBmod p} encrypted with W,
{Y} encrypted with K
msg2
IntheSPEKE-basedprotocol,Bobneedstostore,foreach
user:
In this protocol, Bob simply makes a single response to
•user name Alice’srequest.We’veeliminatedalloftheauthentication
•Y=user’s private key encrypted with her password fromtheEKEprotocolinfigure2,butwedon’tneedit.As
before, Alice does not need to authenticate Bob. And in
•B (the Alice-specific random number chosen by Bob
this case (as opposed to our 4-message protocols in the
when setting up Alice’s account)
previous section), someone impersonating Bob does not
•WB mod p
even get a single password guess.
However,Alicedoesgetasinglechancetoverifyapass-
Figure 8 4-msgs, stateless Bob, precomputation, wordguessinanunauditedway.Ifsheguessesthewrong
SPEKE-based password, she will have no information about K, and
thereforenoinformationaboutY.However,shedoesget
Alice Bob
one piece of information on an incorrect guess: that the
“Alice” guess she chose was indeed incorrect. Bob cannot tell if
msg1
someonerequestingaprivatekeydownloadislegitimate
R=h(IP address, Bob’s secret)
or not. But, we stress, this is only a single on-line pass-
WB mod p, R wordguess.AlthoughBobcannotdistinguishalegitimate
msg2 download from a password guess, he ought to get suspi-
“Alice”, R, WA mod p, h(K),
cious if the same user requests thousands of password
(where K=WAB mod p)
downloads within a short time.
msg3
Verify R and h(K) valid Another disadvantage of this two-message EKE-based
protocol in comparison to theprotocol infigure 7 isthat
{Y} encrypted with K
wenolongersolvetheproblemgenerallysolvedbysalt,
msg4
whichistopreventasingleguessedpasswordfrombeingeasily tested against many user accounts. Bob needs to 3.6 Getting the Rest of the User’s Security
store W so that he can decrypt ({gA mod p} encrypted Context
with W) sent by Alice in order to raise it to B. In some
cases,itmightbepossibletousetheuser’snameassalt, IftheworkstationistocompetentlyactonbehalfofAlice,
butthiscanbeproblematicifusers’namescanchange,or itwillneedotherinformationthatmakesuphersecurity
if a user has aliases. context.Thisislikelytoincludehercertificate,thepublic
keys of one or more CAs she trusts, and possibly some
ButbyusingSPEKEinsteadofEKEwecangetthebene-
encoding of a trust policy - asserting, for example, the
fit of salt, as we’ll see in the next section.
locationofhermailboxandthecertifierstrustedtoauthen-
Andonemoredisadvantageofthetwo-messageprotocol ticate it.
is that we can no longer use a cookie. Any request will
Whatever form this information takes, it can be down-
force Bob to do an exponentiation.
loadedsecurelybyhaving itstoredsignedand(ifneces-
Noprotocolcanguardagainstanadversaryguessingand sary) encrypted with Alice’s key. If the information
verifyingacorrectpassword,ortestinganincorrectpass- changesfromtimetotime,theusercansignandencrypt
word. It would admittedly be better if each wrong guess successiveversionswithatimestamptheworkstationcan
could be audited. But as we said, the form factor of a 2- display to prevent undetected reversions. Alternatively,
messageprotocolissonicethatinpracticetheverysmall Alicecouldtrustsomeadministratortomanagehersecu-
security downsides might well be worth the price. ritystate,inwhichcaseherkeywouldsignastatementof
trust in the administrator’s key, and other state would be
3.5 Two Messages, SPEKE-based
storedsignedwiththeadministrator’skeyandencrypted
(if necessary) with Alice’s public key. In any event, any
IntheSPEKE-basedtwo-messageprotocol,Bobneedsto
form of state can be securely loaded by the workstation
store:
andcouldnotbeforgedbyanyonewithoutAlice’spass-
•user name word or private key.
•Y=user’s private key encrypted with her password
4. Summary
•B (the Alice-specific random number chosen by Bob
when setting up Alice’s account)
Weprovideseveralprotocolsfordownloadingauser’spri-
•WB mod p vate key and other security context such as a CA public
keyfromadirectory.DeployedprotocolssuchasNetWare
4 require foreknowledge (or insecure download) of the
Figure 10 Two msgs, SPEKE-based
directory’spublickey.Thereareotherprotocolssimilarin
spirit to our protocols, but they were designed only for
Alice Bob mutual authentication and are unnecessarily strong in
some cases for our purposes, and therefore require more
WA mod p
msg1 messages or more computation.
Wepresentprotocolsthatrequirenopreknowledge(such
K=WAB mod p
as server public keys), with the following new advantages:
WB mod p, {Y} encrypted with K •denial of service resistance
msg2
•minimizing server computation
•allowing the server to be stateless even in a four-mes-
Inthisprotocol,wegetthebenefitofsaltsincewedon’t
sage protocol
storeW,andWBmodpisdifferentforeachuser(sinceB
•salt
is unique for each user). We save computation for Bob,
sincehedoesnothavetochooseBeachtimeandraiseW •two-message protocols with most of the benefits
toB.(HestillhastocomputeK,ofcourse).Althoughthis
5. Acknowledgements
protocol, unlike the EKE-based protocol in figure 9, has
theadvantageofsalt,ithasthesameotherdisadvantages
WewishtothankMaryEllenZurko,JonathanTrostle,
of the EKE-based protocol:
andfouranonymousreviewersfortheirhelpfulcomments
•Alice gets a single unaudited on-line password guess.
on this paper.
•We cannot use a cookie.6. Bibliography
1. [BM92] S. Bellovin and M. Merritt, “Encrypted Key
Exchange: Password-based protocols secure against
dictionaryattacks”,ProceedingsoftheIEEESympo-
sium on Research in Security and Privacy, May 1992.
2. [BM94] S. Bellovin and M. Merritt, “Augmented
EncryptedKeyExchange:aPassword-BasedProtocol
SecureAgainstDictionaryAttacksandPasswordFile
Compromise, ATT Labs Technical Report, 1994.
3. [DH76] W. Diffie and M. Hellman, “New Directions
inCryptography”,IEEETransactionsonInformation
Theory, November 1976.
4. [Jab96] D. Jablon, “Strong password-only authenti-
cated key exchange”, ACM Computer Communica-
tions Review, October 1996.
5. [Jab97] D. Jablon, “Extended Password Protocols
Immune to Dictionary Attack”, Proceedings of the
WETICE ‘97 Enterprise Security Workshop, June
1997.
6. [KPS95] C. Kaufman, R. Perlman, and M. Speciner,
“NetworkSecurity:PrivateCommunicationinaPub-
lic World”, Prentice Hall, 1995.
7. [LGSN89] T. Lomas, L. Gong, J. Saltzer, and R.
Needham, “Reducing Risks from Poorly Chosen
Keys”.Proceedingsofthe12thACMSymposiumon
Operating System Principles, December, 1989.
8. [LI94] R. Lee and J. Israel, “Understanding the Role
of Identification and Authentication in NetWare 4”,
Novell Application Notes, October 1994.
9. [Pat97] S. Patel, “Number Theoretic Attacks On
SecurePasswordSchemes”,ProceedingsoftheIEEE
Symposium on Security and Privacy, May 1997.
10. [SS88] G. Steiner and J. Schiller, “Kerberos: An
authentication service for open network systems”,
ProceedingsoftheUSENIXWinterConference,Feb-
ruary 1988.
11. [WU98] T. WU, “The Secure Remote Password Pro-
tocol”, ISOC NDSS Symposium, 1998.