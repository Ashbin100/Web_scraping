Address-Oblivious Code Reuse: On the
Effectiveness of Leakage-Resilient Diversity
Robert Rudd1, Richard Skowyra1, David Bigelow1, Veer Dedhia1, Thomas Hobson1,
Stephen Crane2, Christopher Liebchen4, Per Larsen3, Lucas Davi5, Michael Franz3,
Ahmad-Reza Sadeghi4, Hamed Okhravi1
1: MIT Lincoln Laboratory 2: Immunant, Inc. 3: UC Irvine 4: TU Darmstadt 5: University of Duisburg-Essen
This material is based upon work supported by the Assistant Secretary of Defense for Research and Engineering under Air Force Contract No. © 2016 Massachusetts Institute of Technology.
FA8721-05-C-0002 and/or FA8702-15-D-0001. Any opinions, findings, conclusions or recommendations expressed in this material are those of the Delivered to the US Government with Unlimited Rights, as defined in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any
author(s) and do not necessarily reflect the views of the Assistant Secretary of Defense for Research and Engineering. copyright notice, U.S. Government rights in this work are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this
work other than as specifically authorized by the U.S. Government may violate any copyrights that exist in this work.Bottom-Line Upfront
• Code diversity techniques are vulnerable to information leakage
• Recent leakage-resilient techniques employ “execute-only” memory
permissions to prevent information leakage
• We present a generic type of attack called Address-Oblivious Code
Reuse (AOCR) that can bypass recent leakage-resilient techniques
• We provide 3 real-world exploits
2Memory Corruption Attacks
Buffer
Function
Object
Function Attacker Pointer
Poi nter
Attacker
Heap Heap
Spatial Memory Violation Temporal Memory Violation
3Code Diversification Techniques
Binary
Source
Stack
Stack
Code
Stack
Libraries
Libraries Compiler
Heap Diversifier
Libraries
PrHogearapm
Heap
Image
Program
Program
Image
Image
Diverse binaries
Diverse binaries
Address Space Layout † ‡
Compile-Time Diversity Binary Rewriting
Randomization (ASLR)
4 † T. Jackson, et al. "Compiler-generated software ‡ J. Hiser, et al. "ILR: Where'd My
diversity." Moving Target Defense. Springer, 2011 Gadgets Go?.” IEEE S&P, 2012Information Leakage (Direct Memory Disclosure)
Buffer
Diversified
Attacker
Code
5Information Leakage (Indirect Memory Disclosure)
*fptr 1
ret
Stack
Code
Code Attacker
Code
Code
6Memory Permissions
Readable
Data
Writable
(RW)
Readable
Diversified
Executable
Code
(RX)
7Leakage Resilient Diversity
Readable
Data
Writable
(RW)
Executable Only Diversified Direct Leakage
Attacker
Code
(X)
8Indirect Leakage Prevention
Readable Readable Indirec t code
*fp tr 1
poi nter
Writable Writable
(RW) (RW)
Stack Stack
Trampoline
Diversified
Code
Executable Only
Executable Only Diversified (X) Diversified
(X) Code Code
Trampoline
9Research Questions
• Indirect code pointers create a surrogate for code
• Can attackers reuse code at the granularity of indirect code pointers?
• Can they accurately identify the corresponding functions?
• Can they chain indirect code pointers together?
10Profiling Indirect Code Pointers
• Goal: identify the function corresponding to each indirect code pointer
Readable
**oopp eenn(()) iiccpp ttrr
Writable
L e a k a g e
Stack (RW) Stack
Trampoline
≡
Attacker
Executable Only
(X)
Diversified Diversified
Code Code
Attacker’s Local Copy of Remote Target
Target Application Application
11Address-Oblivious Code Reuse
Readable
ic ptr
Writable Address-Oblivious Code Reuse (AOCR)
(RW) Gadget
Stack
Trampoline
Diversified
Code
Executable Only
Diversified
(X)
Code
Trampoline
Remote Target Application
12Accurate Profiling
icp tr 3 Is it too volatile?
icptr 1
Readable
icptr 5
icp tr 2
Writable
(RW)
icptr 4
Stack
Remote Target Application
13Accurate Profiling using
Malicious Thread Blocking (MTB)
• A thread can force another threat to halt by maliciously setting a mutex
• Mutexes are readily accessible is memory
Maliciously
blocked with
stable stack!
Thread
A
time
Thread
B
14Chaining Gadgets Together using
Malicious Loop Redirection (MLR)
fptr fptr
arg arg
next next
RW
RW fp tr fp tr
arg arg
next next
while (task) {! … …
Data Data
task->fptr(task->arg);!
task = task->next;!
}!
Write tramp
Open tramp
X X
Func tramp 2
Func tramp 2
Func tramp 1
Func tramp 1
Normal Loop Maliciously Redirected Loop
15Nginx Proof-of-Concept Exploit
1. Locate a mutex for MTB
2. Profile an indirect code pointer for open (1st AOCR gadget)
3. Profile an indirect code pointer for _IO_new_file_overflow (2nd AOCR gadget)
4. Corrupt Nginx’s task queue to call our profiled trampolines using MLR
16Implementation Challenges of
Execute-Only Permissions
• Forged Direct Memory Access (FDMA)
– A malicious application forges a software-based DMA call to kernel
– Uses O_DIRECT flag in Linux
– DMA request bypasses memory permissions
• Procfs
– Ubiquitous facility in Linux
– Provides memory maps and addresses
– Blocking it breaks many benign applications
– Protections such as GRSecurity’s permissions will not block it
17Impact on Leakage-Resilient Diversity Techniques
Direct Leak Indirect Leak
TLB-mediated Non-TLB-mediated Code Pointer Leak Indirect Code Pointer Leak
(Buffer Overread) (Forged DMA) (Ret address leak) (AOCR)
PointGuard
Oxymoron
Isomeron
XnR
HideM
Readactor
Heisenbyte
NEAR
ASLR-Guard
TASR
18Possible Countermeasures
• Complete memory safety
• Data randomization
• Authentication of indirect calls and returns
– Use HMAC tokens to disallow redirection of indirect code pointers
– Similar to cryptographically-enforced CFI (CCFI)
19Conclusion
• Code pointers pose a major challenge to leakage-resilient diversity
• AOCR attacks bypass code pointer obfuscation by profiling indirect code pointers
• Malicious threat blocking (MTB) allows accurate profiling
• Malicious loop redirection (MLR) allows chaining AOCR gadgets
• Effective defenses should incorporate aspects of diversification and enforcement
20Questions?
21