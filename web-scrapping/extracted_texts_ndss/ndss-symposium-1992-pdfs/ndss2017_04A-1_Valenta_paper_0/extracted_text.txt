Measuring small subgroup attacks against
Diffie-Hellman
Luke Valenta∗, David Adrian†, Antonio Sanso‡, Shaanan Cohney∗,
Joshua Fried∗, Marcella Hastings∗, J. Alex Halderman†, Nadia Heninger∗
∗University of Pennsylvania
†University of Michigan
‡Adobe
Abstract—Several recent standards, including NIST SP 800- be large enough to thwart known attacks, which for prime q
√
56A and RFC 5114, advocate the use of “DSA” parameters run in time O( q). A common parameter choice is to use a
for Diffie-Hellman key exchange. While it is possible to use 160-bit q with a 1024-bit p or a 224-bit q with a 2048-bit p, to
such parameters securely, additional validation checks are match the security level under different cryptanalytic attacks.
necessary to prevent well-known and potentially devastating
Diffie-Hellman parameters with p and q of these sizes were
attacks. In this paper, we observe that many Diffie-Hellman
suggested for use and standardized in DSA signatures [50]. For
implementations do not properly validate key exchange inputs.
brevity, we will refer to these non-safe primes as DSA primes,
Combined with other protocol properties and implementation
and to groups using DSA primes with smaller values of q as
choices, this can radically decrease security. We measure the
prevalence of these parameter choices in the wild for HTTPS, DSA groups.
POP3S, SMTP with STARTTLS, SSH, IKEv1, and IKEv2, AdownsideofusingDSAprimesinsteadofsafeprimesfor
finding millions of hosts using DSA and other non-“safe” Diffie-Hellmanisthatimplementationsmustperformadditional
primes for Diffie-Hellman key exchange, many of them in validationcheckstoensurethekeyexchangevaluestheyreceive
combination with potentially vulnerable behaviors. We examine from the other party are contained in the correct subgroup
over 20 open-source cryptographic libraries and applications
modulo p. The validation consists of performing an extra
and observe that until January 2016, not a single one validated
exponentiation step. If implementations fail to validate, a 1997
subgroup orders by default. We found feasible full or partial
attack of Lim and Lee [54] can allow an attacker to recover
key recovery vulnerabilities in OpenSSL, the Exim mail server,
a static exponent by repeatedly sending key exchange values
the Unbound DNS client, and Amazon’s load balancer, as well
as susceptibility to weaker attacks in many other applications. that are in very small subgroups. We describe several variants
of small subgroup confinement attacks that allow an attacker
I. INTRODUCTION with access to authentication secrets to mount a much more
efficient man-in-the-middle attack against clients and servers
Diffie-Hellman key exchange is one of the most common
that do not validate group orders. Despite the risks posed by
public-key cryptographic methods in use in the Internet. It is
these well-known attacks on DSA groups, NIST SP 800-56A,
a fundamental building block for IPsec, SSH, and TLS. In
“Recommendations for Pair-Wise Key Establishment Schemes
the textbook presentation of finite field Diffie-Hellman, Alice
Using Discrete Logarithm Cryptography” [23] specifically
and Bob agree on a large prime p and an integer g modulo p.
recommends DSA group parameters for Diffie-Hellman, rather
Alice chooses a secret integer x and transmits a public value
a
gxa modp; Bob chooses a secret integer x
b
and transmits his than recommending usingsafe primes. RFC 5114 [53] includes
public value gxb modp. Both Alice and Bob can reconstruct several DSA groups for use in IETF standards.
a shared secret gxaxb modp, but the best known way for a We observe that few Diffie-Hellman implementations ac-
passiveeavesdroppertoreconstructthissecretistocomputethe tually validate subgroup orders, in spite of the fact that
discrete log of either Alice or Bob’s public value. Specifically, small subgroup attacks and countermeasures are well-known
given g, p, and gx modp, an attacker must calculate x. and specified in every standard suggesting the use of DSA
groups for Diffie-Hellman, and DSA groups are commonly
In order for the discrete log problem to be hard, Diffie-
implemented and supported in popular protocols. For some
Hellman parameters must be chosen carefully. A typical
protocols, including TLS and SSH, that enable the server to
recommendationisthatpshouldbea“safe”prime,thatis,that
unilaterally specify the group used for key exchange, this
p=2q+1 for some prime q, and that g should generate the
validation step is not possible for clients to perform with DSA
group of order q modulo p. For p that are not safe, the group
primes—there is no way for the server to communicate to the
order q can be much smaller than p. For security, q must still
clienttheintendedorderofthegroup.Manystandardsinvolving
DSA groups further suggest that the order of the subgroup
Permission to freely reproduce all or part of this paper for noncommercial
should be matched to the length of the private exponent. Using
purposes is granted provided that copies bear this notice and the full citation
shorter private exponents yields faster exponentiation times,
on the first page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the first-named author and is a commonly implemented optimization. However, these
(for reproduction of an entire paper only), and the author’s employer if the standards provide no security justification for decreasing the
paper was prepared within the scope of employment. size of the subgroup to match the size of the exponents, rather
NDSS’17, 26 February–1 March, 2017, San Diego, CA, USA
than using as large a subgroup as possible. We discuss possible
Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23171 motivations for these recommendations later in the paper.WeconcludethatadoptingtheDiffie-Hellmangrouprecom- II. BACKGROUND
mendations from RFC 5114 and NIST SP 800-56A may create A. Groups, orders, and generators
vulnerabilities for organizations using existing cryptographic The two types of groups used for Diffie-Hellman key
implementations, as many libraries allow user-configurable exchange in practice are multiplicative groups over finite
groups but have unsafe default behaviors. This highlights fields (“mod p”) and elliptic curve groups. We focus on the
the need to consider developer usability and implementation “mod p” case, so a group is typically specified by a prime p
fragility when designing or updating cryptographic standards. and a generator g, which generates a multiplicative subgroup
modulo p. Optionally, the group order q can be specified; this
Our Contributions. We study the implementation landscape
is the smallest positive integer q satisfying gq ≡ 1modp.
of Diffie-Hellman from several perspectives and measure the
Equivalently, it is the number of distinct elements of the
security impact of the widespread failure of implementations
subgroup {g,g2,g3,...modp}.
to follow best security practices:
By Lagrange’s theorem, the order q of the subgroup
• We summarize the concrete impact of small-subgroup
generated by g modulo p must be a divisor of p−1. Since p is
confinementattacksandsmallsubgroupkeyrecoveryattacks
prime, p−1 will be even, and there will always be a subgroup
on TLS, IKE, and SSH handshakes.
oforder2generatedbytheelement−1.Fortheotherfactorsq
i
• We examined the code of a wide variety of cryptographic
of p−1, there are subgroups of order q modp. One can find
i
libraries to understand their implementation choices. We
a generator g of a subgroup of order q using a randomized
i i
find feasible full private exponent recovery vulnerabilities algorithm: try random integers h until h(p−1)/qi (cid:54)= 1modp;
in OpenSSL and the Unbound DNS resolver, and a partial g
i
=h(p−1)/qi modpisageneratorofthesubgroup.Arandom
private exponent recovery vulnerability for the parameters
h will satisfy this property with probability 1−1/q .
i
usedbytheAmazonElasticLoadBalancer.Weobservethat
In theory, neither p nor q is required to be prime. Diffie-
no implementation that we examined validated group order
Hellman key exchange is possible with a composite modulus
for subgroups of order larger than two by default prior to
and with a composite group order. In such cases, the order
January 2016, leaving users potentially vulnerable to small
of the full multiplicative group modulo p is φ(p) where φ is
subgroup confinement attacks.
Euler’stotientfunction,andtheorderofthesubgroupgenerated
• WeperformedInternet-widescansofHTTPS,POP3S,SMTP
by g must divide φ(p). Outside of implementation mistakes,
with STARTTLS, SSH, IKEv1, and IKEv2, to provide a
Diffie-Hellman in practice is done modulo prime p.
snapshot of the deployment of DSA groups and other non-
“safe” primes for Diffie-Hellman, quantify the incidence of
B. Diffie-Hellman Key Exchange
repeated public exponents in the wild, and quantify the lack
Diffie-Hellman key exchange allows two parties to agree
of validation checks even for safe primes.
on a shared secret in the presence of an eavesdropper [29].
• We performed a best-effort attempt to factor p−1 for all
Alice and Bob begin by agreeing on shared parameters (prime
non-safe primes that we found in the wild, using ~100,000
p, generator g, and optionally group order q) for an algebraic
core-hours of computation. Group 23 from RFC 5114, a
group. Depending on the protocol, the group may be requested
2048-bit prime, is particularly vulnerable to small subgroup
bytheinitiator(asinIKE),unilaterallychosenbytheresponder
key recovery attacks; for TLS a full key recovery requires
(asinTLS),orfixedbytheprotocolitself(SSHoriginallybuilt
233 online work and 247 offline work to recover a 224-bit
in support for a single group).
exponent.
Having agreed on a group, Alice chooses a secret x <q
a
Disclosure and Mitigations. We reported the small subgroup
and sends Bob y
a
= gxa modp. Likewise, Bob chooses
key recovery vulnerability to OpenSSL in January 2016 [66].
a secret x
b
< q and sends Alice y
b
= gxb modp. Each
OpenSSL issued a patch to add additional validation checks
participant then computes the shared secret key gxaxb modp.
and generate single-use private exponents by default [11]. We Depending on the implementation, the public values y a
reported the Amazon load balancer vulnerability in November and y b might be ephemeral—freshly generated for each
2015. Amazon responded to our report informing us that they connection—or static and reused for many connections.
have removed Diffie-Hellman from their recommmended ELB
C. Discrete log algorithms
security policy, and have reached out to their customers to
recommend that they use these latest policies. Based on scans The best known attack against Diffie-Hellman is for the
performedinFebruaryandMay2016,88%oftheaffectedhosts eavesdropper to compute the the private exponent x by
appear to have corrected their exponent generation behavior. calculating the discrete log of one of Alice or Bob’s public
We found several libraries that had vulnerable combinations of value y. With knowledge of the exponent, the attacker can
behaviours, including Unbound DNS, GnuTLS, LibTomCrypt, trivially compute the shared secret. It is not known in general
and Exim. We disclosed to the developers of these libraries. whether the hardness of computing the shared secret from the
Unbound issued a patch, GnuTLS acknowledged the report public values is equivalent to the hardness of discrete log.
but did not patch, and LibTomCrypt did not respond. Exim The computational Diffie-Hellman assumption states that
responded to our bug report stating that they would use their computingthesharedsecretgxaxb fromgxa andgxb ishardfor
own generated Diffie-Hellman groups by default, without some choice of groups. A stronger assumption, the decisional
specifying subgroup order for validation [10], [12]. We found Diffie-Hellman problem, states that given gxa and gxb, the
productsfromCisco,Microsoft,andVMWarelackingvalidation shared secret gxaxb is computationally indistinguishable from
that key exchange values were in the range (1,p−1). We random for some groups. This assumption is often not true
informed these companies, and discuss their responses in for groups used in practice; even with safe primes as defined
Section III-D. below, many implementations use a generator that generates
2the full group of order p−1, rather than the subgroup of order bits, and was later expanded to include six more groups in
(p−1)/2. This means that a passive attacker can always learn 2003 [51]. The Oakley groups have been built into numerous
the value of the secret exponent modulo 2. To avoid leaking other standards, including IKE [43] and SSH [71].
this bit of information about the exponent, both sides could
DSA groups. The DSA signature algorithm [50] is also based
agree to compute the shared secret as y2x modp. We have not
on the hardness of discrete log. DSA parameters have a
seen implementations with this behavior.
subgroup order q of much smaller size than p. In this case
Thereareseveralfamiliesofdiscretelogalgorithms,eachof
p−1=qr where q is prime and r is a large composite, and g
which apply to special types of groups and parameter choices.
generates a group of order q. FIPS 186-4 [50] specifies 160-bit
Implementations must take care to avoid choices vulnerable to
q for 1024-bit p and 224- or 256-bit q for 2048-bit p. The
any particular algorithm. These include:
small size of the subgroup allows the signature to be much
Small-order groups. The Pollard rho [63] and Shanks’ baby shorter than the size of p.
step-giant step algorithms [67] each can be used to compute
√
discrete logs in groups of order q in time O( q). To avoid E. DSA Group Standardization
being vulnerable, implementations must choose a group order DSA-style parameters have also been recommended for use
with bit length at least twice the desired bit security of the key for Diffie-Hellman key exchange. NIST Special Publication
exchange. In practice, this means that group orders q should 800-56A, “Recommendation for Pair-Wise Key Establishment
be at least 160 bits for an 80-bit security level. Schemes Using Discrete Logarithm Cryptography” [23], first
published in 2007, specifies that finite field Diffie-Hellman
Composite-order groups. If the group order q is a composite
with prime factorization q =(cid:81) qei, then the attacker can use should be done over a prime-order subgroup q of size 160 bits
i i for a 1024-bit prime p, and a 224- or 256-bit subgroup for a
the Pohlig-Hellman algorithm [61] to compute a discrete log in
(cid:80) √ 2048-bitprime.Whiletheorderofthemultiplicativesubgroups
time O( e q ). The Pohlig-Hellman algorithm computes
the discreti e i logi in each subgroup of order qei and then is in line with the hardness of computing discrete logs in
i these subgroups, no explanation is given for recommending a
uses the Chinese remainder theorem to reconstruct the log
subgroup of precisely this size rather than setting a minimum
modulo q. Adrian et al. [18] found several thousand TLS
subgroup size or using a safe prime. Using a shorter exponent
hosts using primes with composite-order groups, and were able
will make modular exponentiation more efficient, but the order
to compute discrete logs for several hundred Diffie-Hellman
ofthesubgroupqdoesnotincreaseefficiency—onthecontrary,
key exchanges using this algorithm. To avoid being vulnerable,
the additional modular exponentiation required to validate that
implementationsshouldchoosegsothatitgeneratesasubgroup
a received key exchange message is contained in the correct
of large prime order modulo p.
subgroup will render key exchange with DSA primes less
Short exponents. If the secret exponent x a is relatively small efficientthanusinga“safe”primeforthesameexponentlength.
or lies within a known range of values of a relatively small Choosing a small subgroup order is not known to have much
size, m, then the Pollard lambda “ √kangaroo” algorithm [64] impact on other cryptanalytic attacks, although the number
can be used to find x a in time O( m). To avoid this attack, field sieve is somewhat (not asymptotically) easier as the linear
implementations should choose secret exponents to have bit algebra step is performed modulo the subgroup order q. [18]
length at least twice the desired security level. For example,
RFC 5114, “Additional Diffie-Hellman Groups for Use
using a 256-bit exponent for for a 128-bit security level.
with IETF Standards” [53], specifies three DSA groups with
Small prime moduli. When the subgroup order is not small the above orders “for use in IKE, TLS, SSH, etc.” These
or composite, and the prime modulus p is relatively large, groups were taken from test data published by NIST [1]. They
the fastest known algorithm is the number field sieve [40], have been widely implemented in IPsec and TLS, as we will
which runs in subexponential time in the bit length of p, show below. We refer to these groups as Group 22 (1024-
exp(cid:0) (1.923+o(1))(logp)1/3(loglogp)2/3(cid:1)
. Adrian et al. re- bit group with 160-bit subgroup), Group 23 (2048-bit group
cently applied the number field sieve to attack 512-bit primes with 224-bit subgroup), and Group 24 (2048-bit group with
in about 90,000 core-hours [18], and they argue that attacking 256-bit subgroup) throughout the remainder of the paper to be
1024-bitprimes—whicharewidelyusedinpractice—iswithin consistent with the group numbers assigned for IKE.
theresourcesoflargegovernments.Toavoidthisattack,current RFC6989,“AdditionalDiffie-HellmanTestsfortheInternet
recommendations call for p to be at least 2048 bits [21]. When Key Exchange Protocol Version 2 (IKEv2)” [68], notes that
selecting parameters, implementers should ensure all attacks “mod p” groups with small subgroups can be vulnerable to
takeatleastaslongasthenumberfieldsievefortheirparameter smallsubgroupattacks,andmandatesthatIKEimplementations
set. shouldvalidatethatthereceivedvalueisinthecorrectsubgroup
or never repeat exponents.
D. Diffie-Hellman group characteristics
“Safe” primes. In order to maximize the size of the subgroup F. Small subgroup attacks
usedforDiffie-Hellman,onecanchooseapsuchthatp=2q+1 Since the security of Diffie-Hellman relies crucially on the
for some prime q. Such a p is called a “safe” prime, and q is a group parameters, implementations can be vulnerable to an
Sophie Germain prime. For sufficiently large safe primes, the attacker who provides maliciously generated parameters that
best attack will be solving the discrete log using the number change the properties of the group. With the right parameters
field sieve. Many standards explicitly specify the use of safe and implementation decisions, an attaker may be able to
primesforDiffie-Hellmaninpractice.TheOakleyprotocol[59] efficiently determine the Diffie-Hellman shared secret. In some
specified five “well-known” groups for Diffie-Hellman in 1998. cases, a passive attacker may be able to break a transcript
These included three safe primes of size 768, 1024, and 1536 offline.
3Small subgroup confinement attacks. In a small subgroup Application Crypto Short Exponent
confinement attack, an attacker (either a man-in-the-middle or Library Exponent Reuse
a malicious client or server) provides a key-exchange value y
OpenSSH OpenSSL No No
that lies in a subgroup of small order. This forces the other Cerberus OpenSSL No Yes
party’s view of the shared secret, yx, to lie in the subgroup GNU lsh GnuTLS No No
generated by the attacker. This type of attack was described Dropbear LibTomCrypt No No
by van Oorschot and Wiener [69] and ascribed to Vanstone Lighttpd OpenSSL Yes No
and Anderson and Vaudenay [20]. Small subgroup confinement Unbound OpenSSL Yes Yes
attacks are possible even when the server does not repeat Exim OpenSSL Library Yes
dependent
exponents—the only requirement is that an implementation
Postfix OpenSSL No No
does not validate that received Diffie-Hellman key exchange
values are in the correct subgroup.
TABLE I: Common application behavior—Applications
When working modp, there is always a subgroup of order makeadiversesetofdecisionsonhowtohandleDiffie-Hellman
2, since p−1 is even. A malicious client Mallory could initiate exponents, likely due to the plethora of conflicting, confusing,
a Diffie-Hellman key exchange value with Alice and send her and incorrect recommendations available.
the value y =p−1≡−1modp, which is is a generator of
M
the group of order 2modp. When Alice attempts to compute
her view of the shared secret as k = ya modp, there are
a M
only two possible values, 1 and −1modp. A randomly chosen prime p is likely to have subgroups
The same type of attack works if p−1 has other small of large enough order that this attack is infeasible to carry
factors q . Mallory can send a generator g of a group of order out for all subgroups. However, if in addition Alice’s secret
i i
q i as her Diffie-Hellman key exchange value. Alice’s view of exponent x a is small, then Mallory only needs to carry out this
the shared secret will be an element of the subgroup of order attack for a subset of subgroups of orders q 1,...,q k satisfying
q . Mallory then has a 1/q chance of blindly guessing Alice’s
(cid:81)k
q > x , since the Chinese remainder theorem ensures
i i i=0 i a
sharedsecretinthisinvalidgroup.GivenamessagefromAlice that x will be uniquely defined. Mallory can also improve
a
encrypted using Alice’s view of the shared secret, Mallory can on the running time of the attack by taking advantage of
brute force Alice’s shared secret in q guesses. the Pollard lambda algorithm. That is, she could use a small
i
More recently, Bhargavan and Delignat-Lavaud [25] de- subgroup attack to learn the value of x
mod(cid:81)k
q for a
a i=1 i
scribe “key synchronization” attacks against IKEv2 where a subset of subgroups (cid:81)k q < x , and then use the Pollard
i=1 i a
man-in-the-middle connects to both the initiator and responder lambda algorithm to reconstruct the full value of a, as it has
in different connections, uses a small subgroup confinement now been confined to a smaller interval.
attackagainstboth,andobservesthatthereisa1/q probability
i In summary, an implementation is vulnerable to small
of the shared secrets being the same in both connections.
subgroupkeyrecoveryattacksifitdoesnotverifythatreceived
Bhargavan and Leurent [26] describe several attacks that use
Diffie-Hellmankeyexchangevaluesareinthecorrectsubgroup;
subgroup confinement attacks to obtain a transcript collision uses a prime p such that p−1 has small factors; and reuses
and break protocol authentication.
Diffie-Hellmansecretexponentvalues.Theattackismadeeven
To protect against subgroup confinement attacks, implemen- more practical if the implementation uses small exponents.
tationsshoulduseprime-ordersubgroupswithknownsubgroup
A related attack exists for elliptic curve groups: an invalid
order. Both parties must validate that the key exchange values
curve attack. Similarly to the case we describe above, the
they receive are in the proper subgroup. That is, for a known
attacker generates a series of elliptic curve points of small
subgrouporderq,areceivedDiffie-Hellmankeyexchangevalue
order and sends these points as key exchange messages to the
y should satisfy yq ≡1modp. For a safe prime, it suffices to
victim. If the victim does not validate that the received point
check that y is strictly between 1 and p−1.
is on the intended curve, they return a response that reveals
Small subgroup key recovery attacks. Lim and Lee [54] information about the secret key modulo different group orders.
discovered a further attack that arises when an implementation After enough queries, the attacker can learn the victim’s entire
fails to validate subgroup order and resues a static secret secret. Jager, Schwenk, and Somorovsky [45] examined eight
exponent for multiple key exchanges. A malicious party may elliptic curve implementations and discovered two that failed
be able to perform multiple subgroup confinement attacks for to validate the received curve point. For elliptic curve groups,
different prime factors q of p−1 and then use the Chinese this attack can be much more devastating because the attacker
i
remainder theorem to reconstruct the static secret exponent. has much more freedom in generating different curves, and can
The attack works as follows. Let p−1 have many small thus find many different small prime order subgroups. For the
factorsp−1=q q ...q .Mallory,amaliciousclient,usesthe finite field Diffie-Hellman attack, the attacker is limited only
1 2 n
procedure described in Section II-A to find a generator of the to those subgroups whose orders are factors of p−1.
subgroup g of order q modp. Then Mallory transmits g as
i i i
herDiffie-Hellmankeyexchangevalue,andreceivesamessage III. TLS
encrypted with Alice’s view of the shared secret gxa, which TLS (Transport Layer Security) is a transport layer pro-
i
Mallory can brute force to learn the value of x modq . Once tocol designed to provide confidentiality, integrity and (most
a i
Mallory has repeated this process several times, she can use commonly) one-side authentication for application sessions. It
the Chinese remainder theorem to reconstruct x mod(cid:81) q . is widely used to protect HTTP and mail protocols.
Therunningtimeofthisattackis(cid:80) q ,assuminga thatMalli oryi A TLS client initiates a TLS handshake with the Client-
i i
performs an offline brute-force search for each subgroup. Hello message. This message includes a list of supported
4cipher suites, and a client random nonce r . The server so this connection will succeed with probability 1/q . For
c i
responds with a ServerHello message containing the small enough q , this enables a man in the middle to use
i
chosen cipher suite and server random nonce r , and a a compromised server signing key to decrypt traffic from
s
Certificate message that includes the server’s X.509 forward-secret ciphersuites with a reasonable probability of
certificate. If the server selects a cipher suite using ephemeral success,whileonlyrequiringtamperingwithasinglehandshake
Diffie-Hellman key exchange, the server additionally sends message, rather than having to actively rewrite the entire
a ServerKeyExchange message containing the server’s connection for the duration of the session.
choice of Diffie-Hellman parameters p and g, the server’s Furthermore, if the server uses a static Diffie-Hellman key
Diffie-Hellman public value y s = gxs modp, a signature by exchangevalue,thentheattackercanperformasmallsubgroup
the server’s private key over both the client and server nonces key-recovery attack as the client in order to learn the server’s
(r c and r s), and the server’s Diffie-Hellman parameters (p, staticexponentx s modq i forthesmallsubgroup.Thisenables
g, and y s). The client then verifies the signature using the the attacker to calculate a custom generator such that the client
public key from the server’s certificate, and responds with a and server views of the shared secret are always identical,
ClientKeyExchangemessagecontainingtheclient’sDiffie- raising the above attack to a 100% probability of success.
Hellman public value y
c
= gxc modp. The Diffie-Hellman
Smallsubgroupkeyrecoveryattacks.InTLS,theclientmust
shared secret Y = gxsxc modp is used to derive encryption
authenticate the handshake before the server, by providing a
and MAC keys. The client then sends ChangeCipherSpec
valid Finished message. This forces a small subgroup key
and Finished messages. The Finished message contains
recovery attack against TLS to be primarily online. To perform
a hash of the handshake transcript, and is encrypted and
a Lim-Lee small subgroup key recovery attack against a server
authenticated using the derived encryption and MAC keys.
static exponent, a malicious client initiates a TLS handshake
Upon decrypting and authenticating this message, the server
and sends a generator g of a small subgroup of order q as
verifies that the hash of the transcript matches the expected i i
its client key exchange message y . The server will calculate
hash. Provided the hash matches, the server then sends its own c
Y =gxs modp as the shared secret. The server’s view of the
ChangeCipherSpec and Finished messages, which the s i
shared secret is confined to the subgroup of order q . However,
clientthenverifies.Ifeithersidefailstodecryptorauthenticate i
since g and g generate separate subgroups, the server’s public
the Finished messages, or if the transcript hashes do not i
valuey =gx givestheattackernoinformationaboutthevalue
match, the connection fails immediately [28]. s s
ofthesharedsecretY .Instead,theattackermustguessavalue
TLS also specifies a mode of using Diffie-Hellman with s
for x modq , and send the corresponding client Finished
fixed parameters from the server’s certificate [62]. This mode s i
message. If the server continues the handshake, the attacker
is not forward secret, was never widely adopted, and has been
learns that the guess is correct. Therefore, assuming the server
removed from all modern browsers due to dangerous protocol
is reusing a static value for x , the attacker needs to perform
flaws [44]. The only widely used form of Diffie-Hellman in s
at most q queries to learn the server’s secret x modq [54].
TLS today is ephemeral Diffie-Hellman, described above. i s i
This attack is feasible if q is small enough and the server
i
reuses Diffie-Hellman exponents for sufficiently many requests.
A. Small Subgroup Attacks in TLS
The attacker repeats this process for many different primes
Small subgroup confinement attacks. A malicious TLS q i, and uses the Chinese remainder theorem to combine them
server can perform a variant of the small subgroup attack modulo the product of the primes q i. The attacker can also use
against a client by selecting group parameters g and p such the Pollard lambda algorithm to reconstruct any remaining bits
that g generates an insecure group order. TLS versions prior of the exponent [54].
to 1.3 give the server complete liberty to choose the group, We note that the TLS False Start extension allows the
and they do not include any method for the server to specify server to send application data before receiving the client’s
the desired group order q to the client. This means a client authentication [52]. The specification only allows this behavior
has no feasible way to validate that the group sent by the for abbreviated handshakes, which do not include a full key
server has the desired level of security or that a server’s key exchange. If a full key exchange were allowed, the fact that
exchange value is in the correct group for a non-safe prime. the server authenticates first would allow a malicious client to
Similarly, a man in the middle with knowledge of the mount a mostly offline key recovery attack.
server’s long-term private signing key can use a small sub-
group confinement attack to more easily compromise perfect B. OpenSSL
forward secrecy, without having to rewrite an entire connection. Prior to early 2015, OpenSSL defaulted to using static-
The attack is similar to the those described by Bhargavan ephemeral Diffie-Hellman values. Server applications generate
and Delignat-Lavaud [25]. The attacker modifies the server afreshDiffie-Hellmansecretexponentonstartup,andreusethis
key exchange message, leaving the prime unchanged, but exponent until they are restarted. A server would be vulnerable
substituting a generator g of a subgroup of small order q to small subgroup attacks if it chose a DSA prime, explicitly
i i
for the group generator and g for the server’s key exchange configured the dh->length parameter to generate a short
i
value y . The attacker then forges a correct signature for the exponent, and failed to set SSL_OP_SINGLE_DH_USE to
s
modified server key exchange message and passes it to the prevent repeated exponents. OpenSSL provides some test code
client. The client then responds with a client key exchange for key generation which configures DSA group parameters,
message y =gxc modp, which the man-in-the-middle leaves sets an exponent length to the group order, and correctly sets
c i
unchanged. The server’s view of the shared secret is then the SSL_OP_SINGLE_DH_USE to generate new exponents
gxcxs modp, and the client’s view of the shared secret is on every connection. We found this test code widely used
i
gxc modp. These views are identical when x ≡ 1modq , across many applications. We discovered that Unbound, a DNS
i s i
5ImplementationRFC 5114 Support Allows Short Exponents Reuses Exponents Validates Subgroup
Mozilla NSS No Yes, hardcoded No g≤2
OpenJDK No Yes, uses max of p_size / 2 and 384 No g≤2
OpenSSL1.0.2 Yes Yes, if q set or if user sets a shorter length Default until Jan ’16 Yes, as of Jan ’16
BouncyCastle Yes No Application dependent g≤2
Cryptlib No Yes, uses quadratic curve calculation Application dependent g≤2
libTomCrypt No Yes, hardcoded Application dependent No
CryptoPP No Yes, uses work factor calculation Application dependent No
Botan Yes Yes, uses work factor calculation No No
GnuTLS Application dependent Yes, restricts to q_size (max 256) Application dependent No
TABLE II: TLS Library Behavior—We examined popular TLS libraries to determine which weaknesses from Section II-F were
present. Reuse of exponents often depends on the use of the library; the burden is on the application developer to appropriately
regenerate exponents. Botan and libTomCrypt both hardcode their own custom groups, while GnuTLS allows users to specify
their own parameters.
resolver, used the same parameters as the tests, but without that we examined validated group order, even for the well-
setting SSL_OP_SINGLE_DH_USE, rendering them vulnera- known DSA primes from RFC 5114, leaving them vulnerable
ble to a key recovery attack. A number of other applications to small subgroup confinement attacks.
including Lighttpdused the same or similarcode with non-safe Most of the implementations we examined attempt to
primes, but correctly set SSL_OP_SINGLE_DH_USE. match exponent length to the perceived strength of the prime.
In spring 2015, OpenSSL added explicit support for For example, Mozilla Network Security Services (NSS), the
RFC5114groups[6],includingtheabilityforserverstospecify TLS library used in the Firefox browser and some versions
a subgroup order in a set of Diffie-Hellman group parameters. of Chrome [7], [36], uses NIST’s “comparable key strength”
When the subgroup order is specified, the exponent length is recommendations on key management [21], [22] to determine
automatically adjusted to match the subgroup size. However, secret exponent lengths from the length of the prime. [2]
the update did not contain code to validate subgroup order Thus NSS uses 160-bit exponents with a 1024-bit prime, and
for key exchange values, leaving OpenSSL users vulnerable to 224-bit exponents with a 2048-bit prime. In fall 2015, NSS
precisely the key recovery attack outlined in Section III-A. added an additional check to ensure that the shared secret
WedisclosedthisvulnerabilitytoOpenSSLinJanuary2016. gxaxb (cid:54)≡1modp [5].
The vulnerability was patched by including code to validate Several implementations go to elaborate lengths to match
subgrouporderwhenasubgroupwasspecifiedinasetofDiffie- exponent length to perceived prime strength. The Cryptlib
Hellman parameters and setting SSL_OP_SINGLE_DH_USE library fits a quadratic curve to the small exponent attack cost
by default [15]. Prior to this patch, any code using OpenSSL table in the original van Oorschot paper [69] and uses the
for DSA-style Diffie-Hellman parameters was vulnerable to fitted curve to determine safe key lengths [41]. The Crypto++
small subgroup attacks by default. libraryusesanexplicit“workfactor”calculation,evaluatingthe
Exim[4],apopularmailserverthatusesOpenSSL,provides function 2.4n1/3(logn)2/3 [46]. Subgroup order and exponent
a clear example of the fragile situation created by this update. lengths are set to twice the calculated work factor. The work
By default, Exim uses the RFC 5114 Group 23 parameters factor calculation is taken from a 1995 paper by Odlyzko on
with OpenSSL, does not set an exponent length, and does integer factorization [58]. Botan, a C++ cryptography and TLS
not set SSL_OP_SINGLE_DH_USE. In a blog post, an Exim library, uses a similar work factor calculation, derived from
developer explains that because of “numerous issues with RFC 3766 [42], which describes best practices as of 2004 for
automatic generation of DH parameters”, they added support selectingpublickeystrengthswhenexchangingsymmetrickeys.
for fixed groups specified in RFCs and picked Group 23 as the RFC 3766 uses a similar work factor algorithm to Odlyzko,
default [12]. Exim narrowly avoided being fully vulnerable to intended to model the running time of the number-field sieve.
a key recovery attack by not including the size of the subgroup Botan then doubles the length of the work factor to obtain
generated by q in the Diffie-Hellman parameters that it passes subgroup and exponent lengths [9].
to OpenSSL. Had this been included, OpenSSL would have
automatically shortened the exponent length, leaving the server D. Measurements
fully vulnerable to a key recovery attack. For this group, an We used ZMap [32] to probe the public IPv4 address
attacker can recover 130 bits of information about the secret space for hosts serving three TLS-based protocols: HTTPS,
exponent using 233 online queries, but this does not allow the SMTP+STARTTLS, and POP3S. To determine which primes
attacker to recover the server’s 2048-bit exponent modulo the serverswereusing,wesentaClientHellomessagecontain-
correct 224-bit group order q as the small subgroup orders q ing only ephemeral Diffie-Hellman cipher suites. We combined
i
are all relatively prime to q. this data with scans from Censys [30] to determine the overall
We looked at several other applications as well, but did not population. The results are summarized in Table III.
find them to be vulnerable to key recovery attacks (Table I). InAugust2016,weconductedadditionalscansofarandom
1% sample of HTTPS hosts on the Internet. First, we checked
C. Other Implementations for nontrivial small subgroup attack vulnerability. For servers
We examined the source code of multiple TLS implementa- that sent us a prime p such that p−1 was divisible by 7, we
tions(TableII).PriortoJanuary2016,noTLSimplementations attempted a handshake using a client key exchange value of
6Number of hosts that use...
Non-Safe Static Static Exponents and
Protocol Scan Date Total Hosts Diffie-Hellman
Primes Exponents Non-Safe Primes
HTTPS 2/2016 40,578,754 10,827,565 1,661,856 964,356 309,891
POP3S 10/2015 4,368,656 3,371,616 26,285 32,215 25
STARTTLS 10/2015 3,426,360 3,036,408 1,186,322 30,017 932
SSH 10/2015 15,226,362 10,730,527 281 1,147 0
IKEv1 2/2016 2,571,900 2,571,900 340,300 109 0
IKEv2 2/2016 1,265,800 1,265,800 177,000 52 0
TABLE III: IPv4 non-safe prime and static exponent usage—Although non-safe primes see widespread use across most
protocols, only a small number of hosts reuse exponents and use non-safe primes; these hosts are prime candidates for a small
subgroup key recovery attack.
g modp, where g is a generator of a subgroup of order 7. (7 unusual key exchange values; and Cisco informed us that they
7 7
is the smallest prime factor of p−1 for Group 22.) When we would investigate the issue.
sendg 7,weexpecttocorrectlyguessthePreMasterSecret Of 40.6M total HTTPS hosts found in our scans,
and complete the handshake with one seventh of hosts that 10.8M (27%) supported ephemeral Diffie-Hellman, of which
do not validate subgroup order. In our scan, we were able to 1.6M(4%)usedanon-safeprime,and309K(0.8%)usedanon-
successfully complete a handshake with 1477 of 10714 hosts safe prime and reused exponents across multiple connections,
thatofferedaprimesuchthatp−1wasdivisibleby7,implying making them likely candidates for a small subgroup key
that approximately 96% of these hosts fail to validate subgroup recovery attack. We note that the numbers for hosts reusing
order six months after OpenSSL pushed a patch adding group exponents are an underestimate, since we only mark hosts as
order validation for correctly configured groups. such if we found them using the same public Diffie-Hellman
Second, we measured how many hosts performed even the value across multiple connections, and some load balancers
most basic validation of key exchange values. We attempted to that cycle among multiple values might have evaded detection.
connect to HTTPS hosts with the client key exchange values While77%ofPOP3Shostsand39%ofSMTPserversused
of y c =0modp,1modp,−1modp. As Table IV shows, we anon-safeprime,amuchsmallernumberusedanon-safeprime
found that over 5% of hosts that accepted DHE ciphersuites and reused exponents (<0.01% in both protocols), suggesting
accepted the key exchange value of −1modp and derived that the popular implementations (Postfix and Dovecot [31])
the PreMasterSecret from it. These implementations are thatusetheseprimesfollowrecommendationstouseephemeral
vulnerabletoatrivialversionofthesmallsubgroupconfinement Diffie-Hellman values with DSA primes.
attacks described in Section III-A, for any prime modulus Table V shows nine groups that accounted for the majority
p. By examining the default web pages of many of these of non-safe primes used by hosts in the wild. Over 1.17M
hosts, we identified products from several notable companies hosts across all of our HTTPS scans negotiated Group 22 in a
including Microsoft, Cisco, and VMWare. When we disclosed keyexchange.Togetabetterpictureofwhichimplementations
these findings, VMWare notified us that they had already provide support for this group, we examined the default web
applied the fix in the latest version of their products; Microsoft pages of these hosts to identify companies and products, which
acknowledged the missing checks but chose not to include we show in Table VI.
them since they only use safe primes, and adding the checks
Of the the 307K HTTPS hosts that both use non-safe
may break functionality for some clients that were sending
primes and reuse exponents, 277K (90%) belong to hosts
behind Amazon’s Elastic Load Balancer [8]. These hosts use
a 1024-bit prime with a 160-bit subgroup. We set up our
own load balancer instance and found that the implementation
Key Exchange Value Support DHE Accepted
failed to validate subgroup order. We were able to use a
0modp 143.5K 87 small-subgroup key recovery attack to compute 17 bits of
1modp 142.2K 4.9K our load balancer’s private Diffie-Hellman exponent x in only
s
−1modp 143.5K 7.6K
3813 queries. We responsibly disclosed this vulnerability to
g modp 10.7K 1.5K
7 Amazon. Amazon informed us that they have removed Diffie-
Hellman from their recommended ELB security policy, and
TABLE IV: TLS key exchange validation—We performed a
are encouraging customers to use the latest policy. In May
1% HTTPS scan in August 2016 to check if servers validated
2016, we performed additional scans and found that 88% of
received client key exchange values, offering generators of
hosts using this prime no longer repeated exponents. We give
subgroups of order 1, 2 and 7. Our baseline DHE support
a partial factorization for p−1 in Table XII; the next largest
number counts hosts willing to negotiate a DHE key exchange,
subgroups have 61 and 89 bits and an offline attack against
and in the case of g , if p−1 is divisible by 7. We count hosts
7 the remaining bits of a 160-bit exponent would take 271 time.
as “Accepted” if they reply to the ClientKeyExchange
For more details on the computation, see Section VI.
message with a Finished message. For g , we expect this
7
to happen with probability 1/7, suggesting that nearly all of SSLeay [33], a predecessor for OpenSSL, includes several
the hosts in our scan did not validate subgroup order. default Diffie-Hellman primes, including a 512-bit prime.
We found that 717 SMTP servers used a version of the
7Group Host Counts
Source Prime Size Subgroup Size HTTPS SMTP POP3S SSH
RFC 5114 Group 22 1024 160 1,173,147 145 86 0
Amazon Load Balancer 1024 160 277,858 0 1 0
JDK 768 160 146,491 671 16,515 0
JDK 1024 160 52,726 2,445 9,510 0
RFC 5114 Group 24 2048 256 3,543 5 0 6
JDK 2048 224 982 12 20 0
Epson Device 1024 <948 372 0 0 0
RFC 5114 Group 23 2048 224 371 1,140,363 2 0
Mistyped OpenSSL 512 512 497 0 717 0 0
Other Non-Safe Primes — — 6,366 41,964 151 275
Safe Primes — — 9,165,709 1,850,086 3,345,331 10,730,246
Total 10,827,565 3,036,408 3,371,616 10,730,527
TABLE V: IPv4 top non-safe primes—Nine non-safe primes account for the majority of hosts using non-safe primes.
OpenSSL 512-bit prime with a single character difference IKEv1. IKEv1 [43], [55], [60] has two basic methods for
in the hexadecimal representation. The resulting modulus that authenticated key exchange: Main Mode and Aggressive Mode.
these servers use for their Diffie-Hellman key exchange is no Main Mode requires six messages to establish the requisite
longer prime. We include the factorization of this modulus state. The initiator sends a Security Association (SA) payload,
along with the factors of the resulting group order in Table XII. containing a selection of cipher suites and Diffie-Hellman
The use of a composite modulus further decreases the work groups they are willing to negotiate. The responder selects
required to perform a small subgroup attack. a cipher and responds with its own SA payload. After the
Although TLS also includes static Diffie-Hellman cipher cipher suite is selected, the initiator and responder both
suites that require a DSS certificate, we did not include them transmit Key Exchange (KE) payloads containing public Diffie-
in our study; no browser supports static Diffie-Hellman [44], Hellman values for the chosen group. At this point, both
and Censys shows no hosts with DSS certificates, with only parties compute shared key materials, denoted SKEYID. When
652 total hosts with non-RSA or ECDSA certificates. using signatures for authentication, SKEYID is computed
SKEYID=prf(N i|N r,gxixr).Fortheothertwoauthentication
IV. IPSEC modes, pre-shared key and public-key encryption, SKEYID
IPsecisasetofLayer-3protocolswhichaddconfidentiality, is derived from the pre-shared key and session cookies,
data protection, sender authentication, and access control to respectively, and does not depend on the negotiated Diffie-
IP traffic. IPsec is commonly used to implement VPNs. IPsec Hellman shared secret.
uses the Internet Key Exchange (IKE) protocol to determine Each party then in turn sends an authentication message
the keys used to secure a session. IPsec may use IKEv1 [43] (AUTH) derived from a hash over SKEYID and the handshake.
or IKEv2 [49]. While IKEv2 is not backwards-compatible The authentication messages are encrypted and authenticated
with IKEv1, the two protocols are similar in message structure using keys derived from the Diffie-Hellman secret gxixr. The
and purpose. Both versions use Diffie-Hellman to negotiate responder only sends her AUTH message after receiving and
shared secrets. The groups used are limited to a fixed set of validating the initiator’s AUTH message.
pre-determined choices, which include the DSA groups from Aggressive Mode operates identically to Main Mode, but in
RFC 5114, each assigned a number by IANA [49], [51], [53]. ordertoreducelatency,theinitiatorsendsSAandKEmessages
together, and the responder replies with its SA, KE, and AUTH
messages together. In aggressive mode, the responder sends an
Company Product(s) Count
authentication message first, and the authentication messages
Ubiquiti Networks airOS/EdgeOS 272,690 are not encrypted.
Cisco DPC3848VM Gateway 65,026
WatchGuard Fireware XTM 62,682
Supermicro IPMI 42,973
ASUS AiCloud 39,749
IKEv2. IKEv2 [48], [49] combines the SA and KE messages
Electric Sheep Fencing pfSense 14,218
Bouygues Telecom Bbox 13,387 into a single message. The initiator provides a best guess
Other — 135,432 ciphersuite for the KE message. If the responder accepts that
proposal and chooses not to renegotiate, the responder replies
TABLE VI: HTTPS support for RFC5114 Group 22—In a with a single message containing both SA and KE payloads.
100%HTTPSscanperformedinOctober2016,wefoundthatof Both parties then send and verify AUTH messages, starting
the12,835,911hoststhatacceptedDiffie-Hellmankeyexchange, with the initiator. The authentication messages are encrypted
901,656 used Group 22. We were able to download default using session keys derived from the SKEYSEED value which
web pages for 646,157 of these hosts, which we examined to is derived from the negotiated Diffie-Hellman shared secret.
identify companies and products. The standard authentication modes use public-key signatures
over the handshake values.
8A. Small Subgroup Attacks in IPsec communicating parties will have a q chance of agreeing on
i
There are several variants of small subgroup attacks against the same value for the shared secret to allow the attack to
IKEv1 and IKEv2. We describe the attacks against these succeed. For IKEv1 Aggressive Mode, the attack can be made
protocols together in this section. to succeed every time. The responder’s key exchange message
is sent together with their signature which depends on the
negotiated shared secret, so the man-in-the-middle attacker can
Small subgroup confinement attacks. First, consider attacks
brute force the q possible values of the responders private key
thatcanbecarriedoutbyanattackinginitiatororresponder.In i
x andreplacetheresponder’skeyexchangemessagewithqxr,
IKEv1 Main Mode and in IKEv2, either peer can carry out a r i
forging an appropriate signature with their knowledge of the
smallsubgroupconfinementattackagainsttheotherbysending
signing key.
a generator of a small subgroup as its key exchange value. The
For public key authentication in IKEv1 Main Mode, IKEv1
attacking peer must then guess the other peer’s view of the
Aggressive Mode, and IKEv2, the attacker must know the
Diffie-Hellman shared secret to compute the session keys to
private keys corresponding to the public keys used to encrypt
encrypt its authentication message, leading to a mostly online
the ID and nonce values on both sides in order to forge a valid
attack. However, in IKEv1 Aggressive Mode, the responder
sends its AUTH message before the initiator, and this value is authentication hash. Since the authentication does not depend
on the shared Diffie-Hellman negotiated value, a man-in-the-
not encrypted with a session key. If signature authentication is
being used, the SKEYID and resulting hashes are derived from middle attacker must then brute force the negotiated shared
key once they receives a message encrypted with the derived
theDiffie-Hellmansharedsecret,sotheinitiatorcanperforman
key. The two parties will agree on their view of the shared key
offline brute-force attack against the responder’s authentication
with probability 1/q , allowing the attack to succeed.
message to learn their exponent in the small subgroup. i
Now, consider a man-in-the-middle attacker. Bhargavan, Small subgroup key recovery attacks. Similar to TLS, an
Delignat-Lavaud,andPironti[25]describeatranscriptsynchro- IKE responder that reuses private exponents and does not
nization attack against IKEv2 that relies on a small subgroup verify that the initiator key exchange values are in the correct
confinement attack. A man-in-the-middle attacker initiates subgroupisvulnerabletoasmallsubgroupkeyrecoveryattack.
simultaneous connections with an initiator and a responder The most recent version of the IKEv2 specification has a
using identical nonces, and sends a generator g for a subgroup section discussing reuse of Diffie-Hellman exponents, and
i
of small order q to each as its KE message. The two sides states that “because computing Diffie-Hellman exponentials
i
have a 1/q chance of negotiating an identical shared secret, is computationally expensive, an endpoint may find it advan-
i
so an authentication method depending only on nonces and tageous to reuse those exponentials for multiple connection
shared secrets could be forwarded, and the session keys would setups”[49].Followingthisrecommendationcouldleaveahost
be identical. open to a key recovery attack, depending on how exponent
If the attacker also has knowledge of the secrets used for reuse is implemented. A small subgroup key recovery attack
authentication, more attacks are possible. Similar to the attack on IKE would be primarily offline for IKEv1 with signature
described for TLS, such an attacker can use a small subgroup authentication and for IKEv2 against the initiator.
confinementattacktoforceaconnectiontouseweakencryption. For each subgroup of order q , the attacker’s goal is to
i
Theattackeronlyneedstorewriteasmallnumberofhandshake obtainaresponderAUTHmessage,whichdependsonthesecret
messages; any further encrypted communications can then be chosen by the responder. If an AUTH message can be obtained,
decrypted at leisure without requiring the man-in-the-middle the attacker can brute-force the responder’s secret within the
attacker to continuously rewrite the connection. We consider subgroup offline. This is possible if the server supports IKEv1
a man-in-the-middle attacker who modifies the key exchange Aggressive Mode, since the server authenticates before the
messagefromboththeinitiatorandtherespondertosubstitutea client, and signature authentication produces a value dependent
generator g of a subgroup of small order q . The attacker must on the negotiated secret. In all other IKE modes, the client
i i
then replace the handshake authentication messages, which authenticates first, leading to an online attack. The flow of the
wouldrequireknowledgeofthelong-termauthenticationsecret. attack is identical to TLS; for more details see Section III.
We describe this attack for each of pre-shared key, signatures, Ferguson and Schneier [34] describe a hypothetical small-
and public-key authentication. subgroupattackagainsttheinitiatorwhereaman-in-the-middle
For pre-shared key authentication in IKEv1 Main Mode, attacker abuses undefined behavior with respect to UDP packet
IKEv1 Aggressive Mode, and IKEv2, the man-in-the-middle retransmissions. A malicious party could “retransmit” many
attacker must only know the pre-shared key to construct the key exchange messages to an initiator and potentially receive a
authenticationhash;theauthenticationmessagedoesnotdepend different authentication message in response to each, allowing
onthenegotiatedDiffie-Hellmansharedsecret.Withprobability a mostly offline key recovery attack.
1/q , the two parties will agree on the Diffie-Hellman shared
i
secret.Theattackercanthenbruteforcethisvalueafterviewing B. Implementations
messages encrypted with keys derived from it. We examined several open-source IKE implementations
For signature authentication in IKEv1 Main Mode and in to understand server behavior. In particular, we looked for
IKEv2, the signed hash transmitted from each side is derived implementations that generate small Diffie-Hellman exponents,
from the nonces and the negotiated shared secret, which is repeat exponents across multiple connections, or do not cor-
confined to one of q possible values. The attacker must know rectlyvalidatesubgrouporder.DespitethesuggestioninIKEv2
i
the private signing keys for both initiator and responder and RFC7296toreuseexponents[49],noneoftheimplementations
brute force SKEYID from the received signature in order to that we examined reused secret exponents.
forge the modified authentication signatures on each side. The All implementations we reviewed are based on
9FreeS/WAN [13], a reference implementation of IPSec. to measure support for the non-safe RFC 5114 groups and for
The final release of FreeS/Wan, version 2.06, was released key exchange parameter validation. Table VII shows the results
in 2004. Version 2.04 was forked into Openswan [16] and of the October IKE scans. For each RFC 5114 DSA group, we
strongSwan [17], with a further fork of Openswan into performed four handshakes with each host; the first tested for
Libreswan [14] in 2012. The final release of FreeS/WAN support by sending a valid client key exchange value, and the
used constant length 256-bit exponents but did not support three others tested values that should be rejected by a properly-
RFC 5114 DSA groups, offering only the Oakley 1024-bit and validating host. We did not scan using the key exchange value
1536-bit groups that use safe primes. 0 because of a vulnerability present in unpatched Libreswan
Openswan does not generate keys with short exponents. By and Openswan implementations that causes the IKE daemon
default,RFC5114groupsarenotsupported,althoughthereisa to restart when it receives such a value [3].
compile-time option that can be explicitly set to enable support We considered a host to accept our key exchange value if
for DSA groups. strongSwan both supports RFC 5114 groups after receiving the value, it continued the handshake without
and has explicit hard-coded exponent sizes for each group. The any indication of an error. We found that 33.2% of IKEv1
exponent size for each of the RFC 5114 DSA groups matches hosts and 17.7% of IKEv2 hosts that responded to our baseline
the subgroup size. However, these exponent sizes are only used scans supported using one of the RFC 5114 groups, and that
if the dh_exponent_ansi_x9_42 configuration option is a surprising number of hosts failed to validate key exchange
set. It also includes a routine inside an #ifdef that validates values. 24.8% of IKEv1 hosts that accepted Group 23 with a
subgroup order by checking that gq ≡1modp, but validation valid key exchange value also accepted 1modp or −1modp
is not enabled by default. Libreswan uses Mozilla Network as a key exchange value, even though this is explicitly warned
SecurityServices(NSS)[7]togenerateDiffie-Hellmankeys.As against in the RFC [59]. This behavior leaves these hosts open
discussed in Section III-C, NSS generates short exponents for to a small subgroup confinement attack even for safe primes,
Diffie-Hellman groups. Libreswan was forked from Openswan as described in Section II-F.
after support for RFC 5114 was added, and retains support for For safe groups, a check that the key exchange value is
those groups if it is configured to use them. strictly between 1 and p−1 is sufficient validation. However,
Although none of the implementations we examined were when using non-safe DSA primes, it is also necessary to verify
configured to reuse Diffie-Hellman exponents across connec- thatthekeyexchangevaluelieswithinthecorrectsubgroup(i.e.,
tions, the failure to validate subgroup orders even for the pre- yq ≡1modp).Totestthiscase,weconstructedageneratorof
specifiedgroupsrenderstheseimplementationsfragiletofuture asubgroupthatwasnottheintendedDSAsubgroup,andoffered
changes and vulnerable to subgroup confinement attacks. that as our key exchange value. We did not find any IKEv1
Several closed source implementations also provide support hosts that rejected this key exchange value after previously
for RFC 5114 Group 24. These include Cisco’s IOS [27], Ju- accepting a valid key exchange value for the given group. For
niper’sJunos[47],andWindowsServer2012R2[56].Wewere IKEv2,theresultsweresimilarwiththeexceptionofGroup24,
unable to examine the source code for these implementations where still over 93% of hosts accepted this key exchange value.
to determine whether or not they validate subgroup order. This suggests that almost no hosts supporting DSA groups are
correctly validating subgroup order.
C. Measurements We observed that across all of the IKE scans, 109 IKEv1
hosts and 52 IKEv2 hosts repeated a key exchange value. This
We performed a series of Internet scans using ZMap to
may be due to entropy issues in key generation rather than
identifyIKEresponders.Inouranalysis,weonlyconsiderhosts
staticDiffie-Hellmanexponents;wealsofound15,891repeated
that respond to our ZMap scan probes. Many IKE hosts that
keyexchangevaluesacrossdifferentIPaddresses.Wefoundno
filtertheirconnectionsbasedonIPareexcludedfromourresults.
hoststhatusedbothrepeatedkeyexchangevaluesandnon-safe
We further note that, depending on VPN server configurations,
groups. We summarize these results in Table III.
some responders may continue with a negotiation that uses
weak parameters until they are able to identify a configuration
for the connecting initiator. At that point, they might reject the V. SSH
connection. As an unauthenticated initiator, we have no way SSH contains three key agreement methods that make use
of distinguishing this behavior from the behaviour of a VPN of Diffie-Hellman. The “Group 1” and “Group 14” methods
server that legitimately accepts weak parameters. For a more denoteOakleyGroup2andOakleyGroup14,respectively[71].
detailed explanation of possible IKE responder behaviors in Bothofthesegroupsusesafeprimes.Thethirdmethod,“Group
response to scanning probes, see Wouters [70]. Exchange”, allows server to select a custom group [35]. The
In October 2016, we performed a series of scans offering groupexchangeRFCspecifiesthatallcustomgroupsshoulduse
themostcommonciphersuitesandgroupparameterswefound safe primes. Despite this, RFC 5114 notes that group exchange
inimplementationstoestablishabaselinepopulationforIKEv1 method allows for its DSA groups in SSH, and advocates for
and IKEv2 responses. For IKEv1, the baseline scan offered their immediate inclusion [53].
Oakleygroups2and14andRFC5114groups22,23,and24for In all Diffie-Hellman key agreement methods, after nego-
the group parameters; SHA1 or SHA256 for the hash function; tiating cipher selection and group parameters, the SSH client
pre-sharedkeyorRSAsignaturesfortheauthenticationmethod; generates a public key exchange value y
c
= gxc modp and
and AES-CBC, 3DES, and DES for the encryption algorithm. sends it to the server. The server computes its own Diffie-
Our IKEv2 baseline scan was similar, but also offered the 256- Hellman public value y
s
= gxs modp and sends it to the
bit and 384-bit ECP groups and AES-GCM for authenticated client,alongwithasignaturefromitshostkeyovertheresulting
encryption. shared secret Y =gxsxc modp and the hash of the handshake
Ontopofthebaselinescans,weperformedadditionalscans so far. The client verifies the signature before continuing.
10Client key exchange public values offered...
Protocol Groups Offered Support 1modp −1modp g modp
s
IKEv1 Group 22 332.4K 82.6K 78.5K 332.4K
Group 23 333.4K 82.5K 82.5K 333.4K
Group 24 379.8K 93.9K 95.2K 379.8K
Baseline (Groups 2, 14, 22, 23, 24) 1139.3K – – –
IKEv2 Group 22 182.1K 553 553 181.9K
Group 23 181.9K 542 550 180.1K
Group 24 213.0K 2245 2173 200.0K
Baseline (Groups 2, 14, 19, 20, 22, 23, 24) 1203.7K – – –
TABLE VII: IKE group support and validation.—We measured support for RFC5114 DSA groups in IKEv1 and IKEv2 and
test for key exchange validation by performing a series of 100% IPv4 scans in October 2016. For Group 23, g is a generator of
s
a subgroup with order 3, and for Groups 22 and 24, g is a generator of a subgroup of order 7.
s
A. Small Subgroup Attacks in SSH B. Implementations
Censys [30] SSH banner scans show that the two most
Small subgroup confinement attacks. An SSH client could common SSH server implementations are Dropbear and
execute a small subgroup confinement attack against an SSH OpenSSH. Dropbear group exchange uses hard-coded safe
serverbysendingageneratorg forasubgroupofsmallorderq prime parameters from the Oakley groups and validates that
i i
as its client key exchange, and immediately receive the server’s client key exchange values are greater than 1 and less than
keyexchangegxs modptogetherwithasignaturethatdepends p−1. While OpenSSH only includes safe primes by default, it
on the server’s view of the shared secret Y = gxs modp. does provide the ability to add additional primes and does not
s i
For small q , this allows the client to brute force the value of provide the ability to specify subgroup orders. Both OpenSSH
i
x modq offlineandcomparetotheserver’ssignedhandshake and Dropbear generate fresh exponents per connection.
s i
to learn the correct value of x modq . To avoid this, the SSH We find one SSH implementation, Cerberus SFTP server
s i
RFC specifically recommends using safe primes, and to use (FTPoverSSH),repeatingserverexponentsacrossconnections.
exponentsatleasttwicethelengthofkeymaterialderivedfrom Cerberus uses OpenSSL, but fails to set SSL_OP_SINGLE-
the shared secret [35]. _DH_USE, which was required to avoid exponent reuse prior
If client and server support Diffie-Hellman group exchange to OpenSSL 1.0.2f.
and the server uses a non-safe prime, a man in the middle with
knowledgeoftheserver’slong-termprivatesigningkeycanuse C. Measurements
a small subgroup confinement attack to man-in-the-middle the Of the 15.2M SSH servers on Censys, of which 10.7M
connectionwithouthavingtorewriteeverymessage.Theattack support Diffie-Hellman group exchange, we found that 281
is similar to the case of TLS: the man in the middle modifies used a non-safe prime, and that 1.1K reused Diffie-Hellman
theservergroupandkeyexchangemessages,leavingtheprime exponents. All but 26 of the hosts that reused exponents had
unchanged, but substituting a generator g of a subgroup of banners identifying the Cerberus SFTP server. We encountered
i
small order q for the group generator and g for the server’s noserversthatbothreusedexponentsandusednon-safeprimes.
i i
key exchange value y s. The client then responds with a client Weperformeda scanof1%ofSSHhostsinFebruary2016
key exchange message y c =g ixc modp, which the man in the offering the key exchange values of y c = 0modp,1modp
middle leaves unchanged. The attacker then forges a correct andp−1modp.AsTableVIIIshows,33%ofSSHhostsfailed
signature for the modified server group and key exchange to validate group order when we sent the key exchange value
messages and passes it to the client. The server’s view of the p−1modp. Even when safe groups are used, this behaviour
sharedsecretisgxcxs modp,andtheclient’sviewoftheshared allows an attacker to learn a single bit of the private exponent,
i
secret is gxc modp. As in the attack described for TLS, these violating the decisional Diffie-Hellman assumption and leaving
i
views are identical when x s ≡ 1modq i, so this connection the implementation open to a small subgroup confinement
will succeed with probability 1/q . For a small enough q , this
i i
enables a man in the middle to use a compromised server
signing key to decrypt traffic with a reasonable probability Key Exchange Value Handshake Initiated Accepted
of success, while only requiring tampering with the initial
0modp 175.6K 5.7K
handshake messages, rather than having to actively rewrite the
1modp 175.0K 43.9K
entire connection for the duration of the session.
−1modp 176.0K 59.0K
Small subgroup key recovery attacks. Since the server TABLE VIII: SSH validation—In a 1% SSH scan performed
immediately sends a signature over the public values and the in February 2016, we sent the key exchange values y =0,1
c
Diffie-Hellman shared secret, an implementation using static and p−1. We count hosts as having initiated a handshake if
exponents and non-safe primes that is vulnerable to a small they send a SSH_MSG_KEX_DH_GEX_GROUP, and we count
subgroup confinement attack would also be vulnerable to a hosts as “Accepted” if they reply to the client key exchange
mostly offline key recovery attack, as a malicious client would message with a SSH_MSG_KEX_DH_GEX_REPLY.
onlyneed tosend asinglekeyexchangemessage persubgroup.
11Prime Exact Order Known Exact Order Unknown
lg(p) 160 bits 224 bits 256 bits 300 bits lg(p)−8 lg(p)−32 lg(p)−64 Unlikely DSA Likely DSA
512 3 0 0 0 5 0 0 760 43
768 4 0 0 4 2,685 0 0 220 1,402
1024 29 0 0 0 323 944 176 1,559 26,881
2048 0 1 1 0 0 0 0 1,128 4,890
3072 0 0 0 0 0 5 0 9 152
4096 4 0 0 0 0 0 0 20 183
8192 0 0 0 0 0 0 0 0 1
Other 0 0 0 0 0 0 0 400 15
TABLE IX: Distribution of orders for groups with non-safe primes—For groups for which we were able to determine the
subgroup order exactly, 160-bits subgroup orders are common. We classify other groups to be likely DSA groups if we know that
the subgroup order is at least 8 bits smaller than the prime.
attack (Section III-A). particular interest. We were ableto completelyfactor (p−1)/2
for both Group 22 and Group 24, and found several factors
for Group 23. We give these factorizations in Table XII. In
VI. FACTORINGGROUPORDERSOFNON-SAFEPRIMES
Table XI, we show the amount of online and offline work
Across all scans, we collected 41,847 unique groups with
requiredtorecoverasecretexponentforeachoftheRFC5114
non-safe primes. To measure the extent to which each group
groups. In particular, an exponent of the recommended size
would facilitate a small subgroup attack in a vulnerable
used with Group 23 is fully recoverable via a small subgroup
implementation, we attempted to factor (p−1)/2. We used the
attack with 33 bits of online work and 47 bits of offline work.
GMP-ECM [39] implementation of the elliptic curve method
for integer factorization on a local cluster with 288 cores over
VII. DISCUSSION
a several-week period to opportunistically find small factors of
The small subgroup attacks require a number of special
the group order for each of the primes.
conditions to go wrong in order to be feasible. For the case
Givenagroupwithprimepandageneratorg,wecancheck
of small subgroup confinement attacks, a server must both
whether the generator generates the entire group or generates
use a non-safe group and fail to validate subgroup order; the
a subgroup by testing whether gqi ≡1modp for each factor
widespread failure of implementations to implement or enable
q
i
of (p−1)/2. When gqi ≡1modp, then if q
i
is prime, we
group order validation means that large numbers of hosts using
know that q is the exact order of the subgroup generated by
i non-“safe” primes are vulnerable to this type of attack.
g; otherwise q is a multiple of the order of the subgroup. We
i
Forafullkeyrecoveryattacktobepossibletheservermust
show the distribution of group order for groups using non-safe
additionally reuse a small static exponent. In one sense, it is
primes in Table IX. We were able to completely factor p−1
surprising that any implementations might satisfy all of the
for 4,701 primes. For the remaining primes, we did not obtain
requirements for a full key recovery attack at once. However,
enough factors of (p−1)/2 to determine the group order.
when considering all of the choices that cryptographic libraries
Of the groups where we were able to deduce the exact
leave to application developers when using Diffie-Hellman, it
subgroup orders, several thousand had a generator for a
is surprising that any protocol implementations manage to use
subgroup that was either 8, 32, or 64 bits shorter than the
Diffie-Hellman securely at all.
prime itself. Most of these were generated by the Xlight FTP
We now use our results to draw lessons for the security
server, a closed-source implementation supporting SFTP. It is
and cryptographic communities, provide recommendations for
not clear whether this behavior is intentional or a bug in an
future cryptographic protocols, and suggest further research.
implementation intending to generate safe primes. Primes of
this form would lead to a more limited subgroup confinement RFC 5114 Design Rationale. Neither NIST SP 800-56A nor
or key recovery attack. RFC 5114 give a technical justification for fixing a much
Given the factorization of (p−1)/2, and a limit for the smaller subgroup order than the prime size. Using a shorter
amount of online and offline work an attacker is willing to private exponent comes with performance benefits. However,
invest, we can estimate the vulnerability of a given group to there are no known attacks that would render a short exponent
a hypothetical small subgroup key recovery attack. For each used with a safe prime less secure than an equivalently-sized
subgroup of order q , where q is less than the online work exponent used with in a subgroup with order matched to the
i i
limit, we can learn q bits of the secret key via an online exponent length. The cryptanalyses of both short exponents
i
brute-forceattackoverallelementsofthesubgroup.Torecover and small subgroups are decades old.
the remaining bits of the secret key, an attacker could use the If anything, the need to perform an additional modular
Pollard lambda algorithm, which runs in time proportional to exponentiationtovalidatesubgroupordermakesDiffie-Hellman
the square root of the remaining search space. If this runtime over DSA groups more expensive than the safe prime case, for
is less than the offline work limit, we can recover the entire identical exponent lengths. As a more minor effect, a number
secret key. We give work estimates for the primes we were field sieve-based cryptanalytic attack against a DSA prime is
able to factor and the number of hosts that would be affected computationally slightly easier than against a safe prime. The
by such a hypothetical attack in Table X. design rationale may have its roots in preferring to implicitly
The DSA groups introduced in RFC 5114 [53] are of use the assumption that Diffie-Hellman is secure for a small
12Work (bits) HTTPS MAIL SSH
Exponent Online Offline Groups Hosts Groups Hosts Groups Hosts
160 20 30 3 2 3 7 0 0
160 30 45 517 1,996 1963 1,143,524 11 10
160 40 60 3,701 8,495 13,547 1,159,853 109 68
224 20 30 0 0 0 0 0 0
224 30 45 2 2 14 16 0 0
224 40 60 307 691 1039 1,141,840 3 1
256 20 30 0 0 0 0 0 0
256 30 45 0 0 1 1 0 0
256 40 60 42 478 180 1,140,668 0 0
TABLE X: Full key recovery attack complexity—We estimate the amount of work required to carry out a small subgroup key
recovery attack, and show the prevalence of those groups in the wild. Hosts are vulnerable if they reuse exponents and fail to
check subgroup order.
prime-order subgroup without conditions on exponent length, Cryptographic standards. Cryptographic recommendations
rather than assuming Diffie-Hellman with short exponents is from standards committees are often too weak or vague,
secure inside a group of much larger order. Alternatively, this and, if strayed from, provide little recourse. The purpose of
insistence may stem from the fact that the security of DSA standardized groups and standardized validation procedures
digital signatures requires the secret exponent to be uniformly is to help remove the onus from application developers to
random, although no such analogous attacks are known for know and understand the details of the cryptographic attacks.
Diffie-Hellmankeyexchange.[57]Unfortunately,ourempirical A developer should not have to understand the inner workings
resultsshowthatthenecessityto specifyandvalidate subgroup of Pollard lambda and the number field sieve in order to size
order for Diffie-Hellman key exchange makes implementations an exponent; this should be clearly and unambiguously defined
more fragile in practice. in a standard. However, the tangle of RFCs and standards
attempting to define current best practices in key generation
Cryptographic API design. Most cryptographic libraries are
and parameter sizing do not paint a clear picture, and instead
designed with a large number of potential options and knobs to
describe complex combinations of approaches and parameters,
be tuned, leaving too many security-critical choices to the
exposing the fragility of the cryptographic ecosystem. As a
developers, who may struggle to remain current with the
result, developers often forget or ignore edge cases, leaving
diverse and ever-increasing array of cryptographic attacks.
manyimplementationsofDiffie-Hellmantooclosetovulnerable
These exposed knobs are likely due to a prioritization of
forcomfort.Ratherthanprovidethebareminimumsforsecurity,
performance over security. These confusing options in crypto-
the cryptographic recommendations from standards bodies
graphic implementations are not confined to primitive design:
should be designed for defense-in-depth such that a single
Georgiev et al. [37] discovered that SSL certificate validation
mistake on the part of a developer does not have disastrous
was broken in a large number of non-browser TLS applications
consequencesforsecurity.Theprincipleofdefense-in-depthhas
due to developers misunderstanding and misusing library calls.
beenastapleofthesystemssecuritycommunity;cryptographic
In the case of the small subgroup attacks, activating most
standards should similarly be designed to avoid fragility.
of the conditions required for the attack will provide slight
performance gains for an application: using a small exponent
Protocol design. The interactions between cryptographic prim-
decreases the work required for exponentiation, reusing Diffie-
itives and the needs of protocol designs can be complex. The
Hellman exponents saves time in key generation, and failing
after-the-fact introduction of RFC 5114 primes illustrates some
to validate subgroup order saves another exponentiation. It is
of the unexpected difficulties: both IKE and SSH specified
not reasonable to assume that applications developers have
group validation only for safe primes, and a further RFC
enough understanding of algebraic groups to be able to make
specifying extra group validation checks needed to be defined
the appropriate choices to optimize performance while still
for IKE. Designing protocols to encompass many unnecessary
providing sufficient security for their implementation.
functions, options, and extensions leaves room for implemen-
tation errors and makes security analysis burdensome. IKE is
a notorious example of a difficult-to-implement protocol with
Group Exponent Size Online Work Offline Work many edge cases. Just Fast Keying (JFK), a protocol created as
asuccessortoIKEv1,wasdesignedtobeanexceedinglysimple
Group 22 160 8 72
key exchange protocol without the unnecessarily complicated
Group 23 224 33 47
negotiations present in IKE [19]. However, the IETF instead
Group 24 256 32 94
standardized IKEv2, which is nearly as complicated as IKEv1.
TABLE XI: Attacking RFC 5114 groups—We show the log Protocols and cryptosystems should be designed with the
of the amount of work in bits required to perform a small developerinmind—easytoimplementandverify,withlimited
subgroup key recovery attack against a server that both uses a edgecases.Theworstpossibleoutcomeisasystemthatappears
staticDiffie-Hellmanexponentofthesamesizeasthesubgroup to work, but provides less security than expected.
order and fails to check group order. To construct such cryptosystems, secure-by-default prim-
itives are key. As we show in this paper, finite-field based
13Factored
Source Completely? OrderFactorization
RFC5114Group22 Yes 2ˆ3 * 7 * df * 183a872bdc5f7a7e88170937189 * 228c5a311384c02e1f287c6b7b2d * 5a85
7d66c65a60728c353e32ece8be1 * f518aa8781a8df278aba4e7d64b7cb9d49462353 * 1a3adf8
d6a69682661ca6e590b447e66ebd1bbdeab5e6f3744f06f46cf2a8300622ed50011479f18143d471
a53d30113995663a447dcb8e81bc24d988edc41f21
RFC5114Group23 No 3ˆ2 * 5 * 2b * 49 * 9d * 5e9a5 * 93ee1 * 2c3f0539 * 136c58359 * 1a30b7358d * 335
a378eb0d * 801c0d34c58d93fe997177101f80535a4738cebcbf389a99b36371eb * 22bbe4b573
f6fc6dc24fef3f56e1c216523b3210d27b6c078b32b842aa48d35f230324e48f6dc2a10dd23d28d3
82843a78f264495542be4a95cb05e41f80b013f8b0e3ea26b84cd497b43cc932638530a068ecc44a
f8ea3cc84139f0667100d426b60b9ab82b8de865b0cbd633f41366622011006632e0832e827febb7
066efe4ab4f1b2e99d96adfaf1721447b167cb49c372efcb82923b3731433cecb7ec3ebbc8d67ef4
41b5d11fb3328851084f74de823b5402f6b038172348a147b1ceac47722e31a72fe68b44ef4b
RFC5114Group24 Yes 7 * d * 9f5 * 22acf * bd9f34b1 * 8cf83642a709a097b447997640129da299b1a47d1eb3750
ba308b0fe64f5fbd3 * 15adfe949ebb242e5cd0978fac1b43fdbd2e5b0c5f48924fbbd370195c0e
b20596d98ad0a9e3fd98876413d926f41a8b918d2ec4b018a30efe5e336bf3c7ce60d515cf46af5f
acf3bb389f68ad0c4ed2f0b1dbb970293741eb6509c64e731802259a639a7f57d4a9c0d9445241f5
bcdbdc50555b76d9c335c1fa4e11a8351f1bf4730dd67ffed877cc13e8ea40c7d51441c1f4e59155
ef1159eca75a2359f5e0284cd7f3b982c32e5c51dbf51b45f4603ef46bae528739315ca679703c1f
fcf3b44fe3da5999daadf5606eb828fc57e46561be8c6a866361
AmazonLoad No 2 * 3 * 5 * edb * 181ac5dbfe5ce13b * 18aa349859e9e9de09b7d65 * 9414a18a7b575e8f4
Balancer 2f6cb2dbc22eb1fc21d4929 * 2de9f1171a2493d46a31d508b63532cdf86d21db6f50f717736fc4
b0b722856a504ed4916e0484fe4ba5f5f4a9fff28a1233b728b3d043aec37c4f138ffd58fe7a8c3c
1e93cb52be527395e45db487b61daadded9c8ec35
MistypedOpenSSL Yes 5 * b * a9b461e1636f4b51ef * 1851583cf5f9f731364e4aa6cdc2cac4f01* 3f0b39cacfc086
512“Prime”Factors df4baf46c7fa7d1f4dfe184f9d22848325a91c519f79023a4526d8369e86b
MistypedOpenSSL Yes 2ˆ13 * 3ˆ3 * 5ˆ2 * 11ˆ2 * 269 * 295 * 4d5 * 97c3 * 9acfe7 * 8cdd0e128f * 385
512OrderFactors b564eecd613536818f949 * 146d410923e999f8c291048dc6feffcebf8b9e99eec9a4d585f87422
e49b393256c23c9
TABLE XII: Group order factorization for common non-safe primes—We used the elliptic curve method to factor (p−1)/2
for each of the non-safe primes we found while scanning, as well as the mistyped OpenSSL “prime”.
Diffie-Hellman has many edge cases that make its correct use [2] NSSdh.c. https://hg.mozilla.org/projects/nss/file/tip/lib/freebl/dh.c.
difficult, and which occasionally arise as bugs at the protocol [3] CVE-2015-3240. AvailablefromMITRE,CVE-IDCVE-2015-3240.,
level. For example, SSH and TLS allow the server to generate Aug.2015. http://cve.mitre.org/cgi-bin/cvename.cgi?name=2015-3240.
arbitrary group parameters and send them to the client, but [4] EximInternetmailer,July2015. http://www.exim.org/.
provide no mechanism for the server to specify the group order [5] Mozillabugtracker,Nov.2015. https://bugzilla.mozilla.org/show_bug.
so that the client can validate the parameters. Diffie-Hellman cgi?id=1160139.
key exchange over groups with different properties cannot be [6] OpenSSLchanges,Jan.2015. https://www.openssl.org/news/cl102.txt.
treated as a black-box primitive at the protocol level. [7] OverviewofNSS,Sept.2015. https://developer.mozilla.org/en-US/docs/
Mozilla/Projects/NSS/Overview.
Recommendations. As a concrete recommendation, modern
[8] Amazon Elastic Load Balancer, 2016. https://aws.amazon.com/
Diffie-Hellman implementations should prefer elliptic curve
elasticloadbalancing/.
groupsoversafecurveswithproperpointvalidation[24].These
[9] Botan,2016. https://github.com/randombit/botan.
groups are much more efficient and have shorter key sizes than
[10] Bug1837-smallsubgroupattack,May2016. https://bugs.exim.org/
finite-fieldDiffie-Hellmanatequivalentsecuritylevels.TheTLS
show_bug.cgi?id=1837.
1.3 draft includes a list of named curves designed to modern
[11] CVE-2016-0701. AvailablefromMITRE,CVE-IDCVE-2016-0701.,
security standards [65]. If elliptic curve Diffie-Hellman is not Jan.2016. http://cve.mitre.org/cgi-bin/cvename.cgi?name=2016-0701.
an option, then implementations should follow the guidelines [12] EximTLSSecurity,DHandstandardparameters,Oct.2016. https://
outlined in RFC 7919 for selecting finite field Diffie-Hellman lists.exim.org/lurker/message/20161008.231103.c70b2da8.en.html.
primes [38]. Specifically, implementations should prefer “safe” [13] FreeS/WAN,2016. http://www.freeswan.org/.
primesofdocumentedprovenanceofatleast2048bits,validate [14] Libreswan,2016. https://libreswan.org/.
that key exchange values are strictly between 1 and p−1, use [15] OpenSSLsecurityadvisory[28thJan2016],Jan.2016. https://www.
ephemeral key exchange values for every connection, and use openssl.org/news/secadv/20160128.txt.
exponents of at least 224 bits. [16] Openswan,2016. https://www.openswan.org/.
[17] strongSwan,2016. https://www.strongswan.org/.
ACKNOWLEDGMENTS
[18] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A.
We would like to thank the exceptional sysadmin Jose Halderman,N.Heninger,D.Springall,E.Thomé,L.Valenta,B.Vander-
AntonioInsuaFernandezforhissupport.Thismaterialisbased Sloot,E.Wustrow,S.Zanella-Béguelin,andP.Zimmermann. Imperfect
upon work supported by the U.S. National Science Foundation forwardsecrecy:HowDiffie-Hellmanfailsinpractice. In22ndACM
ConferenceonComputerandCommunicationsSecurity,Oct.2015.
underGrantsNo.CNS-1345254,CNS-1408734,CNS-1409505,
CNS-1505799, CNS-1513671, and CNS-1518888, an Alfred P. [19] W. Aiello, S. M. Bellovin, M. Blaze, R. Canetti, J. Ioannidis, A. D.
Keromytis, and O. Reingold. Just fast keying: Key agreement in a
Sloan Foundation Research Fellowship, and a gift from Cisco.
hostileinternet. ACMTransactionsonInformationandSystemSecurity
REFERENCES (TISSEC),7(2):242–273,2004.
[1] Finitefieldcryptographybasedsamples. http://csrc.nist.gov/groups/ST/
toolkit/documents/Examples/KS_FFC_All.pdf.
14[20] R.AndersonandS.Vaudenay.Mindingyourp’sandq’s.InASIACRYPT, [45] T.Jager,J.Schwenk,andJ.Somorovsky. Practicalinvalidcurveattacks
1996. onTLS-ECDH. In20thEuropeanSymposiumonResearchinComputer
[21] E. Barker. NIST special publication 800-57 part 1 revision 4, Jan. Security,2015.
2014. http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800- [46] W. Jeffrey. Crypto++, Nov. 2015. https://github.com/weidai11/
57pt1r4.pdf. cryptopp/blob/48809d4e85c125814425c621d8d0d89f95405924/
[22] E.Barker,W.Barker,W.Burr,W.Polk,andM.Smid.NISTspecialpubli- nbtheory.cpp#L1029.
cation800-57part1(revised),Jan.2007.http://csrc.nist.gov/publications/ [47] Juniper TechLibrary. VPN feature guide for security devices,
nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf. 2016. http://www.juniper.net/documentation/en_US/junos15.1x49/topics/
[23] E.B.Barker,D.Johnson,andM.E.Smid.Sp800-56a.recommendation reference/configuration-statement/security-edit-dh-group.html.
for pair-wise key establishment schemes using discrete logarithm [48] C.Kaufmanetal. InternetKeyExchange(IKEv2)protocol. IETFRFC
cryptography(revised). 2007. 4306,Dec.2005.
[24] D. J. Bernstein and T. Lange. SafeCurves: choosing safe curves for [49] C.Kaufman,P.Hoffman,Y.Nir,P.Eronen,andT.Kivinen. Internet
elliptic-curvecryptography,Jan.2014. https://safecurves.cr.yp.to/. KeyExchangeprotocolversion2(IKEv2). IETFRFC7296,Oct.2014.
[25] K.Bhargavan,A.Delignat-Lavaud,andA.Pironti. Verifiedcontributive [50] C.F.Kerry. DigitalSignatureStandard(DSS). FIPSPUB186-4,July
channel bindings for compound authentication. In Network and 2013.
DistributedSystemSecuritySymposium,2015. [51] T.KivinenandM.Kojo. Moremodularexponential(MODP)Diffie-
[26] K. Bhargavan and G. Leurent. Transcript collision attacks: Breaking Hellman groups for Internet Key Exchange (IKE). IETF RFC 3526,
authentication in TLS, IKE, and SSH. In Network and Distributed May2003.
SystemSecuritySymposium,2016. [52] A.Langley,N.Modaduga,andB.Moeller. TransportLayerSecurity
[27] Cisco. Security for VPNs with IPsec configuration guide, (TLS)FalseStart. IETFRFCDraft,June2014.
2016. http://www.cisco.com/c/en/us/td/docs/ios-xml/ios/sec_conn_ [53] M. Lepinski and S. Kent. Additional Diffie-Hellman groups for use
vpnips/configuration/xe-3s/sec-sec-for-vpns-w-ipsec-xe-3s-book.html. withietfstandards. IETFRFC5114,2008.
[28] T.DierksandE.Rescorla.TheTransportLayerSecurity(TLS)protocol. [54] C.H.LimandP.J.Lee. Akeyrecoveryattackondiscretelog-based
IETFRFCRFC5246,2008. schemesusingaprimeordersubgroup.In17thInternationalCryptology
[29] W.DiffieandM.E.Hellman. Newdirectionsincryptography. IEEE Conference,1997.
TransactionsonInformationTheory,22(6):644–654,1976. [55] D.Maughan,M.Schertler,M.Schneider,andJ.Turner.Internetsecurity
[30] Z.Durumeric,D.Adrian,A.Mirian,M.Bailey,andJ.A.Halderman. associationandkeymanagementprotocolISAKMP. Nov.1998.
A search engine backed by Internet-wide scanning. In 22nd ACM [56] MicrosoftWindowsNetworkingTeam. VPNinteroperabilityguidefor
ConferenceonComputerandCommunicationsSecurity,Oct.2015. Windows Server 2012 R2, 2014. https://blogs.technet.microsoft.com/
[31] Z.Durumeric,D.Adrian,A.Mirian,J.Kasten,K.Thomas,V.Eranti, networking/2014/12/26/vpn-interoperability-guide-for-windows-server-
N.Lidzborski,E.Bursztein,M.Bailey,andJ.A.Halderman.TheMatter 2012-r2/.
of Heartbleed. In 15th ACM Internet Measurement Conference, Oct. [57] NguyenandShparlinski.Theinsecurityofthedigitalsignaturealgorithm
2015. with partially known nonces. Journal of Cryptology, 15(3):151–176,
[32] Z.Durumeric,E.Wustrow,andJ.A.Halderman. ZMap:FastInternet- 2002.
widescanninganditssecurityapplications. In22ndUSENIXSecurity [58] A.M.Odlyzko. Thefutureofintegerfactorization,July1995. http://
Symposium,Aug.2013. www.dtc.umn.edu/~odlyzko/doc/future.of.factoring.pdf.
[33] Y.Eric. SSLeay,1995. ftp://ftp.pl.vim.org/vol/rzm1/replay.old/libraries/ [59] H.Orman. TheOakleykeydeterminationprotocol. IETFRFC2412,
SSL.eay/SSLeay-0.5.1a.tar.gz. Nov.1998.
[34] N. Ferguson and B. Schneier. A cryptographic evaluation of IPsec. [60] D.Piper. TheInternetIPsecuritydomainofinterpretationforISAKMP.
CounterpaneInternetSecurity,Inc,3031,2000. IETFRFC2407,Nov.1998.
[35] M.Friedl,N.Provos,andW.Simpson. Diffie-Hellmangroupexchange [61] S.C.PohligandM.E.Hellman. Animprovedalgorithmforcomputing
fortheSecureShell(SSH)transportlayerprotocol. IETFRFC4419, logarithms over GF(p) and its cryptographic significance. IEEE
2006. TransactionsonInformationTheory,24(1),1978.
[36] S.Gallagher. GoogledumpsplansforOpenSSLinChrome,takesown [62] W.Polk,R.Housley,andL.Bassham. Algorithmsandidentifiersfor
Boringroad,July2014. http://arstechnica.com/information-technology/ the internet X.509 public key infrastructure certificate and certificate
2014/07/google-dumps-plans-for-openssl-in-chrome-takes-own- revocationlist(CRL)profile. IETFRFC3279,Apr.2002.
boring-road/.
[63] J.M.Pollard. AMonteCarlomethodforfactorization. BITNumerical
[37] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and Mathematics,15(3):331–334,1975.
V.Shmatikov. Themostdangerouscodeintheworld:ValidatingSSL
[64] M.J.Pollard. Kangaroos,Monopolyanddiscretelogarithms. Journal
certificates in non-browser software. In 2012 ACM Conference on
ofCryptology,2000.
ComputerandCommunicationsSecurity,2012.
[65] E.Rescorla. TheTransportLayerSecurity(TLS)protocolversion1.3
[38] D.Gillmor. NegotiatedFiniteFieldDiffie-HellmanEphemeralParame-
draft16. IETFRFCDraft,Sept.2016.
tersforTransportLayerSecurity(TLS). IETFRFC7919,Aug.2016.
[66] A.Sanso. OpenSSLKeyRecoveryAttackonDHsmallsubgroups,Jan.
[39] GMP-ECMDevelopmentTeam. GMP-ECM,animplementationofthe
2016. http://blog.intothesymmetry.com/2016/01/openssl-key-recovery-
ellipticcurvemethodforintegerfactorization,2016. http://ecm.gforge.
attack-on-dh-small.html.
inria.fr/.
[67] D. Shanks. Class number, a theory of factorization, and genera. In
[40] D.M.Gordon. DiscretelogarithmsinGF(p)usingthenumberfield
SymposiainPureMath,volume20.1969.
sieve. SIAMJournalofDiscreteMath,1993.
[68] Y.ShefferandS.Fluhrer.AdditionalDiffie-HellmantestsfortheInternet
[41] P.Gutmann.Cryptlib,kg_dlp.c,2010.http://www.cypherpunks.to/~peter/
KeyExchangeprotocolversion2(IKEv2). IETFRFC6989,2013.
cl343_beta.zip.
[69] P.C.VanOorschotandM.J.Wiener. OnDiffie-Hellmankeyagreement
[42] O.H.,P.S.Dev.,H.P.,andV.Consortium. Determiningstrengthsfor
withshortexponents. InEUROCRYPT,1996.
publickeysusedforexchangingsymmetrickeys. IETFRFC3766,Apr.
2004. [70] P. Wouters. 66% of VPN’s are not in fact broken, Oct.
2015. https://nohats.ca/wordpress/blog/2015/10/17/66-of-vpns-are-not-
[43] D. Harkins and D. Carrel. The Internet Key Exchange (IKE). Nov.
in-fact-broken/.
1998.
[71] T. Ylonen and C. Lonvick. The Secure Shell (SSH) transport layer
[44] C.Hlauschek,M.Gruber,F.Fankhauser,andC.Schanes. Pryingopen
protocol. IETFRFC4253,2006.
Pandora’sbox:KCIattacksagainstTLS. In9thUSENIXWorkshopon
OffensiveTechnologies(WOOT’15),Aug.2015.
15