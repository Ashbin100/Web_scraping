Fast-Track Session Establishment for TLS
HovavShacham DanBoneh
hovav@cs.stanford.edu dabo@cs.stanford.edu
Abstract sessioncanonlyberesumediftheoldsessionispresentin
theserver’ssessioncache. Unfortunately,heavilyloaded
serverscanonlystoreasessionforarelativelyshorttime
We proposeanew,“fast-track”handshakemechanism beforethesessionisevictedfromthecache.Asaresult,a
for TLS. A fast-track client caches a server’s public pa- fullhandshakeisoftenneededeventhoughtheclientmay
rameters and negotiated parameters in the course of an bewillingtoresumeanoldsession.
initial, enabling handshake. These parameters need not In contrast, clients rarely connect to numerous TLS
be resent on subsequent handshakes. The new mecha- servers, and could cache informationabout servers for a
nismreducesbothnetworktrafficandthenumberofround longer time. We propose a new, “fast-track” handshake
trips,andrequiresnoadditionalserverstate. Thesesav- mechanismforTLSthatexploitsthissituation. Thefast-
ingsaremostusefulinhighlatencyenvironmentssuchas track mechanism improves the full TLS handshake pro-
wirelessnetworks.Weincludearollbackmechanismtoal- tocol. Fast-track clients maintain a cache of long-lived
lowaservertogracefullyreverttoanordinaryTLShand- serverinformation,suchastheservercertificate,andlong-
shakewhenneeded. Ourdesignis fullybackwardscom- livednegotiatedinformation,suchasthepreferredcipher
patible: fast-track clients can interoperate with servers suite. Thelong-livedcachedinformationallowsareduc-
unaware of fast-track and vise versa. We have imple- tioninhandshakebandwidth:thehandshakemessagesby
mented our proposal to demonstrate the savings in net- whichaservercommunicatesthisinformationtotheclient
worktrafficandroundtrips. areobviatedbythecache,andomittedfromthefast-track
handshake. Moreover, the remaining messages are re-
ordered, so a fast-track handshakehas three flows rather
thanfour. Hence,ourfast-trackmechanismreducesboth
1.Introduction
networktrafficandroundtripsintheTLShandshakepro-
tocol.
TLSisawidelydeployedprotocolforsecuringnetwork
Byaflowwemeananuninterruptedsequenceofmes-
traffic. Itiscommonlyusedforprotectingwebtrafficand
sages from one participant in a connection to the other.
some e-mail protocols such as IMAP and POP. Variants
AnordinaryTLShandshakehasfourflows;ourfast-track
of TLS, such as WTLS [6], are used for securing wire-
handshake has three. Because of the design of the TLS
less communication. In this paper we consider a modi-
protocol, multiple consecutive handshake messages can
ficationtotheTLS(andWTLS)handshakeprotocolthat
be coalesced into a single TLS transport-layer message.
makes the protocolmoreefficient in terms of bandwidth
Thus, when network latency is high, a savings in flows
andnumberofroundtrips.Improvingthehandshakepro-
cantranslateintoasavingsintime.
tocol is especially relevant in bandwidth-constraineden-
Theuseoffast-track,alongwiththeparticularfast-track
vironments, such as wireless communications,where la-
parameters, is negotiatedbetween clients and servers by
tencyishighandsmallpayloadtransfersarecommon.We
meansofTLSextensions[1].Careistakentoensureinter-
hopethattheseextensionswillpromotetheuseofTLSin
operabilitywithnon-fast-trackclientsandservers,andto
highlatencynetworksanddiscouragethedevelopmentof
allowgracefulfallbacktoordinaryTLShandshakeswhen
ad-hocsecurityprotocolsforsuchnetworks.
required.
RecallthattheTLSprotocol[3]incorporatestwotypes
The use of fast-track session establishment gives sav-
ofhandshakemechanisms:afullhandshake,andaresume
ingsinhandshakebandwidthandflows,butdoesnotpro-
handshake protocol. The resume handshake protocol is
videasignificantcomputationalspeeduprelativetoordi-
usedtoreinstateapreviouslynegotiatedTLSsessionbe-
nary TLS handshakes. It is most useful for bandwidth-
tweenaclientandaserver.Comparedtoafullhandshake,
constrained, high-latency situations, and those in which
the resume mechanism significantly reduces handshake
applicationmessagepayloadsaresmall. Thusfast-track,
networktrafficandcomputationonbothends.However,aClientHello ClientHello
ServerHello ServerHello
Certificate [ChangeCipherSpec]
ServerKeyExchange Finished
CertificateRequest [ChangeCipherSpec]
ServerHelloDone Finished
Certificate
ClientKeyExchange Figure 2. Message Diagram for a TLS Ses-
CertificateVerify sionResume
[ChangeCipherSpec]
Finished
[ChangeCipherSpec]
Finished selects a protocolversion, ciphersuite, and compression
method, and includes the server random, and extension-
Figure1.TLSHandshakeMessageDiagram specific parameters. The server then sends its certificate
chainintheCertificatemessage. Incertaincases,itsends
a ServerKeyExchange message with additional informa-
tion requiredfor establishing the shared secret. (For ex-
via a relatively simple, and fully backwards-compatible
ample,the512-bitexport-gradeRSAkeyforRSAexport
change to the TLS protocol, improves performance and
key-exchange.)Iftheserverwishesthattheclientauthen-
makesTLSmoreusableinwirelessenvironments.Client-
sidecachingcouldbeappliedtoothermainstreamsecurity
ticateitself,itsendsaCertificateRequestmessagelisting
acceptablecertificatetypesandCAnamesfortheclient’s
protocolstoyieldsimilarresults.
We enumeratethe long-lived,cacheable items and de-
certificatechain.Finally,itsendsaServerHelloDonemes-
sagetosignaltheendoftheflow.
scribethemannerinwhichtheyareusedinSection3.We
Iftheserverrequestsclientauthentication,theclientbe-
discusssomedesigncriteriainSection4.Wedescribethe
fast-trackhandshakeprotocolinSection5. We thendis-
ginsitsresponsewithaCertificatemessagethatincludes
cussperformance,implementation,andsecurityconsider-
itscertificatechain,andaftertheClientKeyExchangemes-
ationinSections6,7,and8. Finally,webrieflyconsider sage, a CertificateVerify message that includes its signa-
tureonadigestofthehandshakemessagestothatpoint.
otherclient-sidecachingstrategiesforTLSinSection9.
TheClientKeyExchangemessageincludestheinformation
necessarytodeterminethesharedsecret.(Forexample,in
2.TLS handshake overview
RSA key exchange,it includesthe encryptionof a “pre-
ATLShandshakehasthreeobjectives: (1)tonegotiate mastersecret”thatisusedtocalculatethesecret.)
certain session parameters; (2) to authenticate the server Finally,theclientsendsaChangeCipherSpecmessage
to the client, and optionally the client to the server; and (whichis notahandshakemessage),signalingits switch
(3) to establish a shared cryptographic secret. The ses- to the newly-negotiated parameters and secret key, and
sion parameters include the protocol version, the cipher sendsanencryptedandcompressedFinishedmessagethat
suite,andthecompressionmethod.Authenticationmakes includesadigestofthehandshakemessages.
useofacertificate-basedpublickeyinfrastructure(PKI): Theserver,initsturn,alsosendsaChangeCipherSpec
serversandclientsidentifythemselvesthroughcertificate messageandaFinishedmessagethatincludesadigestof
chainsterminatinginwell-knownCertificationAuthority thehandshakemessages(uptotheclient’sFinishedmes-
(CA)certificates. sage).Afterthis,theclientandservercanexchangeappli-
The standard TLS handshake is summarized in Fig- cationdataovertheencrypted,authenticated,andpossibly
ure 1. Messages sent by the client are on the left; by compressedlinkthathasbeenestablished.
theserver,theright. Messagesappearingin slantedtype Aservercanidentifyaparticularconnectionbya“ses-
areonlysentincertainconfigurations;messagesinbrack- sion ID,” a field in the ServerHello message. By mutual
etsaresentout-of-band.Thehandshakeproceeds,infour consent,aclientandservercanresumeaconnection.The
flows,asfollows. client includes the ID of the session it wishes to resume
A clientinitiatesa handshakebysendingaClientHello in its hellomessage, andthe serveraccepts byincluding
message.Thismessageincludesasuggestedprotocolver- the same ID in its hello. The client and server proceed
sion, a list of acceptable cipher suites and compression directlytotheChangeCipherSpecandFinishedmessages
methods, a client random value used in establishing the (withthepreviously-agreed-uponparametersandsecrets).
shared secret, and (when TLS extensions [1] are used) ThisexchangeissummarizedinFigure2.
otherextension-specificparameters. Relative to establishing a new session, resuming a
The server replies with a ServerHello message, which previously-negotiatedsessionsavesbandwidth,flows,andcomputation (since the handshake’s expensive crypto- areafunctionofboththeserverandclientconfigurations,
graphicoperationsareavoided).However,heavilyloaded and are negotiated in a TLS handshake: the client pro-
servers typically keep session IDs in their session cache posesalistforeach,andtheserverchooses.
foronlyarelativelyshortwhile. A clientinpossessionoftheaboveinformationknows
Wenotethatourfast-trackoptimizationonlyappliesto enough to be able to compute a key-exchange message,
thefullhandshakeprotocol(notthesessionresumehand- withoutanyadditionalinputfromtheserver(withoneex-
shake). Hence, fast-track is most effective in environ- ception discussed below). It is this fact that allows the
mentswhereshortlivedTLSsessionsarecommonsothat reorderingofthehandshakemessages.
frequenthandshakesarenotresumes. ToparticipateinephemeralDiffie-Hellman(EDH)key
exchange,aclientneedstoknowthegroupmodulusand
3.Cacheablehandshake parameters generator relative to which the Diffie-Hellman exchange
will operate. Thedescriptionof this groupis partof the
Thesavingsweachievethroughfast-trackdependona ServerKeyExchangemessagewhenEDHisused. Itisas-
client’scachingcertainlong-livedhandshakeparameters. sumedthattheserverwillnotoftenchangeitsEDHgroup,
“Long-lived,” in this context, means, first, that they do soafast-trackclientcancachethegroupparametersand
notchangebetweenhandshakes(asdoes,e.g.,theserver- use them to send a ClientKeyExchange message during
random),and,second,thattheyareexpectednottochange a fast-track handshake. By contrast, a server employing
exceptwheneithertheserverorclientisreconfigured. A temporaryRSA keys for keyexchange, in the RSA “ex-
client collects these parameters in the course of an ordi- port” cipher suites, will typically changeits exportRSA
naryTLS handshake. Inthe courseofa fast-trackhand- keyquiteoften. ThetemporaryRSA key,whichaclient
shake,itusestheseparameterstocraftitsmessages. wouldneedforitsfast-trackkeyexchange,canbecached
Theparticularvalueswhichaclientusesinafast-track only briefly. Accordingly, fast-track explicitly does not
handshakearecalledthedeterminingparametersforthat supportRSAexportauthentication.SincetheRSAexport
connection. Aserverusesinformationintheclienthello mechanismisbeingphasedout,thisdoesnotseemlikea
message and its own configuration to come up with its seriousconstraint.
own version of the determining parameters for the con-
nection. Thetwoversionsmustmatchforthehandshake 4.Designconsiderations
to be successful. Therefore, a fast-track-initiating hello
messageincludesahashofthedeterminingparametersto WithsignificantdeploymentoflegacyTLSclients, in-
allowtheservertocheckthis,asdescribedinSection5.2. compatible changes to the protocol are unlikely to be
The long-lived parameters fall into two general cate- accepted. Accordingly, fast-track’s design emphasizes
gories: (1) those that are features of the server’s config- interoperability and backwards-compatibility. Fast-track
uration alone, and (2) those that properly depend on the clientsandserversmustbeabletointeroperatewithTLS
interactionoftheserver’sconfigurationwiththeclient’s. servers and clients not capable of using fast-track; they
Inthefirstcategory,weinclude: mustbeabletodiscoverwhichpeersarecapableoffast-
track; and they must recover gracefully when configu-
Theserver’scertificatechain; rations have changed, falling back on the ordinary TLS
handshakeprotocol.
Theserver’sDiffie-Hellmangroup,ifany;and
Through the use of TLS extensions [1], a client and
Whetherclientauthenticationisrequired;ifso, server can, in an ordinary TLS handshake, negotiate the
future use of fast-track. A subsequent fast-track con-
– Acceptableclientcertificatetypes;and nection uses another extension to allow the client and
– Acceptablecertificateauthorities. servertoascertaintheirbothusingthesameunsent,client-
cached parameters. Since a client must suggest, and a
These features of a TLS server’s configuration are as- servermustassent totheuseoffast-track,thelikelihood
sumed to change infrequently and thus to be capable of ofaclient’sattemptingtoinitiateafast-trackconnection
beingcachedontheclient. withanon-fast-trackserverisminimal.
Inthesecondcategory,weincludeparameterssuchas: If a client does attempt to initiate a fast-track connec-
tionwithanon-fast-trackserver,itisimportantthatitbe
Thepreferredclient-serverciphersuite;and
alerted of its mistake quickly. A fast-track handshakeis
initiated through a message that TLS servers not imple-
Thepreferredclient-servercompressionmethod.
mentingfast-trackwouldrejectasinvalid.Thisminimizes
(Theciphersuite comprisesa key-exchangealgorithm,a confusion resulting from such a mismatch. For servers
bulkencryptionalgorithm,andaMACalgorithm.)These awareoffast-track,butnotwishingtouseit, weincludea rollback mechanism to allow a server to gracefullyre- ClientHelloFT fasttrack-hash
verttoanordinaryTLShandshakeifitsconfigurationhas Certificate
ClientKeyExchange
changed.
ServerHelloFT
ServerKeyExchange
5.The fast-trackhandshake
[ChangeCipherSpec]
Finished
In this section, we describe the actual fast-trackhand-
CertificateVerify
shakeprotocol.Therearetwodistinctphases.First,inthe
[ChangeCipherSpec]
courseofanordinaryTLShandshake,aclientandserver
Finished
negotiateandagreeonthefutureuseoffast-track,andthe
client collects the parameters that will allow it to make Figure3.MessageDiagramforanAccepted
thatfuturehandshake.Next,theclientinitiatesafast-track Fast-TrackHandshake
handshakewiththeserver,usingthedeterminingparame-
tersfromearlier.
Fast-trackalsodefinesamechanismwherebytheserver
candenythefast-track;itwoulddoso,forexample,when ensuresthisasfollows.Aspartofitsfast-trackhellomes-
itsconfigurationhaschanged,renderingtheclient’sdeter- sage,aclientmustinclude,inthefasttrack-hashextension,
miningparametersobsolete.Thismechanismisalsoused theSHA-1hashofthedeterminingparameters.Theserver
forsessionresumes. buildsitsownversionoftheparameters,andensuresthat
thehashesmatch.
5.1.Negotiationoffast-track Supposeaclientinitiatesafast-trackhandshake,andin-
cludesinitshellomessageboththefasttrack-capableex-
A client wishing to engage in a fast-track handshake
tension and the fasttrack-hash extension, accompanying
with a server must first determine whether that server is
thelatterwithahashofwhatitthinksarethedetermining
capable of (and willing to use) fast-track. This is not a
parameters for the handshake. If the server’s configura-
problem,sincetheclientmustalsohavecompletedanor-
tionhaschanged,butitstillwishestoengageinfast-track
dinaryhandshakewiththeservertohaveobtainedthein-
in the future(with the new, correctparameters), it ought
formationitneedsforthenew,fast-trackhandshake.
to deny the fast-track, but include the fasttrack-capable
The TLS Extensions mechanism [1] provides the ma-
extension in its (ordinary) hello message. If, instead,
chinery for the negotiation. A client proposing the pro-
the server’s configuration has changed, and it no longer
spective use of fast-track includes the fasttrack-capable
wishes to engage in fast-track in the future, it ought to
extension in its hello; a server assenting to the prospec-
denythefast-track,andoughtnottoincludethefasttrack-
tive use includesthe same extensionin its hello. Such a
capableextensioninitshello.
handshakeisreferredtoas“enabling.”
The fast-track handshake is summarized in Figure 3.
Serversmightbereconfiguredtodisablefast-track,and
ThenotationisthatemployedinFigures1and2,above.
clients should be alerted of the configuration change as
Note that the ClientHelloFT message must include the
soon as possible; preferably, before they undertake the
fasttrack-hash extension with a hash of the determining
computationally-heavyearlystepsofthefast-trackhand-
parameters; this requirementis indicated in the first line
shake.
ofthefigure.
Accordingly,aclientisexpectedtoincludeineachofits
The exchange omits the server Certificate, Certifi-
handshakesthefasttrack-capableextension,andattempta
cateRequest, and ServerHelloDone messages, and re-
fast-trackhandshakewithaserveronlyiftheirmostrecent
quires three flows rather than four. In an ordinary TLS
successfulhandshakewasanenablingone.(Perthespec-
handshake, the server has the last handshake flow; here,
ification,theextensionsgoverningaresumedsessionare
the client does. If the client sends the first application
thosenegotiatedintheoriginalhandshakeforthatsession;
data—thetypicalsituation—thesavingsinflowsismag-
a successful resume is therefore not considered a hand-
nified,sincetheclient’sfirstapplication-dataflowcanbe
shakeforthispurpose.)
coalescedwithitslasthandshakeflow.
Thefast-trackhandshakecallsforanontrivialreorder-
5.2.Fast-track
ing of the TLS handshake messages. If a client were
To engage in a fast-track handshake, the client and accidentally to attempt it with a server entirely unaware
servermustagreeoncertaindeterminingparameters(see of fast-track, the client and server might entirely befud-
Section3). Theclientobtainsthesefromaprevious,en- dleoneanother. Inkeepingwiththedesigngoalthatthe
abling handshake. But it and the server must make sure clientandservershoulddiscoverasexpeditiouslyaspos-
that they expect to use the same parameters. Fast-track siblewhetherfast-trackisappropriate,thefast-trackclientClientHelloFT fasttrack-hash ClientHelloFT fasttrack-hash
Certificate Certificate
ClientKeyExchange ClientKeyExchange
ServerHello ServerHello
Certificate [ChangeCipherSpec]
ServerKeyExchange Finished
CertificateRequest [ChangeCipherSpec]
ServerHelloDone Finished
Certificate
ClientKeyExchange Figure 5. Message Diagram for a Session
CertificateVerify Resume,withFast-TrackDenied
[ChangeCipherSpec]
Finished
[ChangeCipherSpec]
Finished track is denied. The notation is the same as employed
inFigure3,withtheadditionalconventionthatmessages
Figure 4. Message Diagram for a Denied
printedwithstrike-througharenotincludedinanyhand-
Fast-TrackHandshake
shakedigests.
Finally, a server can deny fast-track but proceed with
a session-resume if it wishes, and if the client sent a
hello is made a different message type—ClientHelloFT nonemptysession-idinitsfast-trackhellomessage. Fig-
ratherthanClientHello—althoughthetwomessagetypes ure 5 gives the message flow in this case, using the
haveanidenticalformat. ATLSserverthatisnotaware samenotationalconventionsasthepreviousfigures. Ses-
offast-trackwillalerttheclientimmediatelytotheunex- sion resumption provides less of a performance gain to
pectedmessagetype. fast-track clients, since they will have already engaged
The client has enough information to create its key- in the time-consuming ClientKeyExchange calculations
exchangemessagewithoutanyadditionalserverinput,so whentheserveracceptstheresume.
thismessagecanbesentinthefirstflow. Oncetheserver
has sent its server-random (in its hello) and potentially
6.Performance considerations
itskey-exchangemessage,bothsideshaveenoughinfor-
mation to calculate the master secret and change cipher
suites. The client must wait until it has seen a message Thefast-trackhandshakemechanismreducestheproto-
from the server before sending its CertificateVerify mes- col’scommunicationrequirementsandroundtripsbuthas
sage,toavoidreplayattacks. little effecton CPU load. We briefly discuss fast-track’s
effect on CPU load for both servers and clients A more
5.3.Denyingfast-track extensiveanalysisoftheperformanceofstandardTLSin
theWebenvironmentisavailable[2].
Aserverneednotagreetoengageinafast-trackhand- The performance of servers employing fast-track is
shake,evenifithadpreviouslyassentedtoonethroughthe comparable to that of ordinary servers. Servers avoid
fasttrack-capableextension. Fast-trackincludesamecha- sending as many as three messages (Certificate, Certifi-
nism wherebythe serverdenies an in-progressfast-track cateRequest,andServerHelloDone),butnoneofthesein-
handshake,andtheclientandserverreverttoanordinary volvesanycomputationally-intensiveoperation;contrari-
handshakenegotiation. wise,fast-trackserversmustverifytheSHA-1hashofthe
Aserverdeniesfast-trackbyrespondingtotheclient’s determiningparameters.
firstflowwithaServerHellomessageratherthanaServer- Performance of fast-track clients is slightly improved,
HelloFT.Its response should be as though the client had withaproperimplementation.Forexample,onceaclient
initiated the connection through a ClientHello message hasvalidatedaserver’scertificatechain,itneednotreval-
withthesamebodyasthatoftheClientHelloFTmessageit idate it in the course of a fast-track handshake. Indeed,
actuallyhadsent(exceptwithoutthefasttrack-hashexten- once it has computed the determining parameters hash
sion).Fromthatpointon,thepartiescarryonanordinary whichwilllaterbesenttotheserver,theclientmaychoose
TLShandshake,conformingtotherulesgivenintheTLS todiscardthechain,maintainingonlytheserver’spublic
specification. The other messages sent by the client as key. Thus, in a fast-track handshake, a client avoids the
part of its first flow are ignored by both parties, and are signature verifications of an ordinary handshake, with a
notincludedinanyhandshakemessagedigests. long-termspaceoverheadofonlyafewhundredbytesfor
Figure 4 presents the messages exchanged when fast- theserverkey.RFC2246 Fast-Track Savings RFC2246 Fast-Track Savings
TLS RSA WITH 3DES EDE CBC SHA TLS RSA WITH 3DES EDE CBC SHA,clientauth
Client 322 291 10% Client 2519 2488 1%
Server 1187 130 89% Server 1196 130 89%
Total 1509 421 72% Total 3715 2618 30%
TLS DHE RSA WITH 3DES EDE CBC SHA TLS DHE RSA WITH 3DES SHA,clientauth
Client 285 245 14% Client 2482 2442 2%
Server 1461 404 72% Server 1472 404 73%
Total 1746 649 63% Total 3954 2846 28%
Table1.HandshakeBytesSentforTLSKey Table2.HandshakeBytesSentforTLSKey
Exchange Methods; No Client Authentica- Exchange Methods; Client Authentication
tion Required
7.Implementation
tials, theCA certificateneednotbetransmitted. (Thisis
We have modified OpenSSL 0.9.6a to negotiate and permittedbytheTLSspecification[3,7.4.2].)
performfast-trackhandshakes. SinceOpenSSLdoesnot Although the savings in bandwidth generated by the
currentlysupportTLSextensions,ourimplementationin- server is substantial, the savings in client bandwidth is
stead used TLS’ version negotiation scheme: fast-track- quite modest. In fact, our implemented client does not
capableclientsandserversspeakthefictitiousTLS“Ver- (yet)sendthedetermining-parametershashtotheserver.
sion1.1.” Theseadditional22bytesofextensiontotheclienthello
We summarizeourobservedsavings in bandwidthbe- (required in a fully-conforming fast-track implementa-
low. Aside from the bytes-sent measurements, our im- tion)wouldlargelynegatethesavingsinclientbytes-sent
plementationalsomaintainsthesavingsinflowsthatfast- evidentinTables1and2.Thesavingsinserverbytes-sent
trackprovidesoverordinaryTLShandshakes:threeflows, isunaffected. Thisunderscoresthat,sincefast-trackdoes
ratherthanfour. not assume a server-sidecache, it can do little to reduce
Table 1 presents the number of bytes written across the informationthat a client must supply duringa hand-
the wire by the client and by the server in both shake. (The client bytes-sent savings are largely at the
a standard (RFC 2246) TLS handshake [3], and a TLS transport layer, where the reducednumberof flows
fast-track handshake. The first cipher suite, called allowsgreaterconsolidationofmessages.)
“TLS RSA WITH 3DES EDE CBC SHA” in RFC 2246 Table2presentsdatainthesameformatasinTable1,
(andcalled“DES-CBC3-SHA”in OpenSSL),uses RSA but in which the server requires that the client authenti-
for key exchange. It does not require a ServerKeyEx- cate itself. Here, the dominantcomponentis the client’s
change message to be sent. The second cipher suite, certificate chain. Unlike the server, the client does send
“TLS DHE RSA WITH 3DES EDE CBC SHA” (called theCAcertificatealongwithitsown.
“EDH-RSA-DES-CBC3-SHA” in OpenSSL), employs Thelimitedgainsinbytes-sentseeninTable2againre-
Ephemeral Diffie-Hellman (EDH) for key exchange, flect fast-track’sinabilitytodoawaywiththesendingof
withRSA authentication. A handshakeusingthis cipher client informationto theserver. Thespecific problemof
suite requires the server to send a ServerKeyExchange client certificates can be alleviated via a different mech-
message. At present, EDH-based key exchange is not anism, complementarytofast-track: theTLSExtensions
widelydeployedinTLSenvironments,thoughsupportfor documentdefinesaclient-certificate-urlextension[1,3.3].
it has been added in some recent browsers; accordingly, Withthisextension,aclientsendstheURLwhereitscer-
the first ofthe two settings in Table 1 is by far the more tificatemaybefound,alongwithahashofthecertificate,
common. ratherthanthecertificateitself.
The data in Table 1 show quite clearly that, in typical Thenumberofbyteswhichaserverwritesdependson
situations,thebandwidthcostofaTLShandshakeisdom- itscertificatechain;similarlyforaclientwhenclientau-
inated by the server certificate chain. The server’s key thenticationisrequired. Sincecertificatesvaryinlength,
exchangemessage, when sent, is also a significant com- a limit is placed on the accuracy of bytes-sent measure-
ponent. Notethattheserverheresendsonlyitsowncer- ments. This limit is made more severe by the presence
tificate. Sincetheclientmustalreadyhaveacopyofthe atseveralpointsintheTLShandshakeofarbitrary-length
self-signed CA certificate to assess the server’s creden- lists: theclient’ssupportedciphersuites;theclient’ssup-portedcompressionmethods;andtheserver’sacceptable hash,sotheservershouldbeabletodetectitshavingbeen
certificatetypesandacceptableCAnames(forclientau- modifiedandaborttheconnection.
thentication). In any case, the client certificate itself is included in
bothfinished-messagehashes,andispresumablynomore
8.Security analysis open to tampering than in an ordinary TLS handshake.
The client CertificateVerify message contains only a sig-
Inthissectionwearguethatfast-trackisnolesssecure
naturewiththecertificate’skey,soopportunitiesformis-
thantheordinaryTLShandshakeprotocol.Unfortunately,
chiefthroughitsmodificationarelimited.
a formal argument about the security of fast-track as a
handshakeprotocolisextremelydifficult,especiallyinthe
9.Otherclient cache strategies
absence of a comprehensiveformal analysis of TLS [4].
Nor is a rigorousreductionof fast-track security to TLS It was notedearlier that fast-trackis a strategyfor ex-
securityfeasible–themessageorderischangedbetween ploiting client-side caching to reduce handshake over-
the two protocols, so an attacker on one would not nec- head.Thereareotherpossiblestrategies.
essarily be able to create messages for the other without One can keep actual session informationon the client
breakingthehashfunctionsusedinthefinished-message side,encrypted—perhapswithasecretserversymmetric
digests. Inlightoftheselimitations,wepresentcommon key—to defeat tampering. A client couldlater send the
argumentsaboutthesecurityoffast-track. encryptedinformationtotheserver,initiatingwhatmight
Fast-trackisnegotiatedinthecourseofanordinaryTLS betermedaclient-sidesessionresume.
handshake, using the fasttrack-capable extension (Sec- There are limitations to this approach. TLS servers
tion5.1). Theextensionitselfcontainsnosensitivedata, usuallyagreetoresumeonlysessions thatsatisfycertain
andthenegotiationisprotectedbythesamemechanisms properties.Forexample,OpenSSLrefusestoresumeses-
thatprotectothernegotiatedextensions. sionsthatwerenotproperlyshutdown. Aclient-sidere-
A client should store determining parameters for use sumeschemewouldhavetobedesignedsotheclientdoes
in a future fast-track handshake only after verifyingthat not obtain a session ticket until the server is convinced
theserverhasavalidcertificate,andtheparameterscome thatitiswillingforthatsessiontoberesumed. (TheTLS
from an ordinaryhandshake, so these parametersshould specificationalsorecommendsthatsessionspersistforno
notbe opentotampering. Furthermore,if the client and longerthantwenty-fourhours,tolimitthedamagefroma
serverdeterminingparametersdiffer,themismatchwillbe compromiseofthesession’smastersecret.)
detectedinthecourseofthehandshake,sincesomemes- It should be possible, however, for a TLS server to
sages will be incomprehensible. Thus, determining pa- maintain a cache of resumable session IDs, while obli-
rametermismatchisnotasecurityproblem,andtheSHA- gatingtheclient toholdonto anopaqueticket thatcon-
1hashshouldbesufficienttoprovidecollision-resistance tainstheremainderoftheinformationtheservermaintains
forrobustness.(Theexceptionisiftheclienthasobtained aboutsessions.
an adversary’s certificate for the server’s distinguished If the initial handshakewere unsatisfactory, the server
name,asituationthatcouldallowforaman-in-the-middle could drop the session ID from its cache, and refuse a
attack.Butthiswouldrequireacompromiseofthepublic subsequentclient-sideresumeeventhoughtheclienthad
keyinfrastructure.) asupposedlyvalidticket.
Allthesameinformationexchangedinastandardhand- This approach essentially uses the client as secondary
shake is exchangedin a fast-track handshake, except for storage for the server’s session cache, which is made to
the determining parameters, for which a cryptographic takelessstorage.
hash is exchanged. The handshake digest hashes in the
Finishedmessagesshouldthusprovidethesamesecurity
10.Conclusions
asinordinaryTLS.
TheorderingoftheserverandclientFinishedmessages We proposed an improvement to the TLS handshake
is oppositeofthatin ordinaryTLShandshakes,but TLS protocol that makes TLS easier to use in bandwidth-
sessionresumesalsousethisreversedordering. constrainedenvironments. Ourimprovementis basedon
The server response message (ServerHello or Server- a fast-track handshake mechanism that exploits a small
HelloFT) is included in the final hashes regardless of session-cache on the client. In a fast-track handshake
whetherfast-trackisdenied,sorollbackattacksshouldbe there is no need to transmit server parameters such as
impossible. theservercertificateandpreferredciphersuite. This en-
The only message not verified by both the client and ablesustoreorderthemessagesinafast-trackhandshake
server finished-message hashes is the client CertificateV- andeffectivelysavetworoundtrips.Hence,thefast-track
erifymessage.Itisincludedintheclientfinished-message handshakesavesbothnetworktrafficandroundtripsoverthestandardfullTLShandshakeprotocol. Thereduction
in number of round trips speeds up TLS session estab-
lishmentinhighlatencynetworks. Overall,fast-trackisa
simpleadditiontoTLSthatmakesitmorefriendlytouse
inconstrainedenvironments.
Weimplementedourproposalinabackwardscompati-
bledesign. Ifeithertheclientortheserverdoesnotsup-
portfast-trackordonotwishtousefast-tracktheycanre-
verttothestandardfullTLShandshake.Ourexperiments
showthatfast-trackcansaveupto72%ofthehandshake
traffic.Ourprototypeimplementationoffast-trackandIn-
ternetdraftareavailablefordownload[5].
Acknowledgments
WethanksDanSimonandDanWallachforhelpfulcon-
versationsaboutthispaper. Thisworkwaspartiallysup-
portedbyanNSFCAREERgrant.
References
[1] S. Blake-Wilson, M. Nystrom, D. H. J. Mikkelsen, and
T. Wright. TLS Extensions. Internet-Draft: draft-
ietf-tls-extensions-01.txt,Sept. 2001. Work
inprogress.
[2] C.Coarfa,P.Druschel,andD.Wallach. PerformanceAnal-
ysis of TLS Web Servers. In ProceedingsofNDSS’02,
2002.
[3] T.DierksandC.Allen. RFC2246:TheTLSProtocol,Ver-
sion1,Jan.1999.
[4] J.Mitchell,V.Shmatikov,andU.Stern. Finite-StateAnal-
ysisofSSL3.0. InSeventhUSENIXSecuritySymposium,
pages201–216,1998.
[5] H. Shacham and D. Boneh. TLS Fast-Track Session
Establishment. Internet Draft: draft-shacham-tls-
fasttrack-00.txt,Aug.2001. Workinprogress.
[6] Wireless Application Forum. Wireless Transport Layer
SecuritySpecification. http://www.wapforum.org,
2000.