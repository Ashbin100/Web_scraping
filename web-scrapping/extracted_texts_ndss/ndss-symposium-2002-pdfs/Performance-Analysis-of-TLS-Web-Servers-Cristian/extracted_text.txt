Performance Analysis of TLS Web Servers
Cristian Coarfa, PeterDruschelandDanS. Wallach
DepartmentofComputerScience
RiceUniversity
Abstract ciphers,andmessageintegrityfunctions. Initsmostcom-
mon web usage, TLS uses 1024-bit RSA encryption to
transmit a secret that serves to initialize a 128-bit RC4
TLS is the protocol of choice for securing today’s e- stream cipher and uses MD5 as a keyed hash function.
commerce and online transactions, but adding TLS to a (DetailsofthesealgorithmscanbefoundinSchneier[25]
web server imposes a significant overhead relative to an andmostotherintroductorycryptographytexts.)
insecure web server on the same platform. We perform TLS web servers incur a significant performance
a comprehensive study of the performance costs of TLS. penalty relative to a regular web server running on the
OurmethodologyistoprofileTLSwebserverswithtrace- same platform (as little as a factor of 3.4 to as much as
drivenworkloads,replacingindividualcomponentsinside a factor of 9, in our own experiments). As a result of
TLSwithno-ops,andmeasuringtheobservedincreasein this cost, a number of hardware accelerators are offered
serverthroughput. We estimatetherelativecostsofeach byvendorssuchasnCipher,Broadcom,AlteonandCom-
componentwithinTLS,predictingtheareasforwhichfu- paq’sAtalladivision.Theseacceleratorstakethemodular
ture optimizations would be worthwhile. Our results we exponentiation operations of RSA and perform them in
show thatRSAacceleratorsare effectivefore-commerce customhardware,thusfreeingtheCPUforothertasks.
site workloads , because they experience low TLS ses- Researchers have also studied algorithms and systems
sion reuse. Accelerators appear to be less effective for to accelerate RSA operations. Boneh and Shacham [8]
sites where all the requests are handled by a TLS server, have designed a softwaresystem to perform RSA opera-
thushavinghighersessionreuserate;investinginafaster tions together in batches, at a lower cost than doing the
CPUmightprovemoreeffective. operations individually. Dean et al. [9] have designed a
network service, offloading the RSA computations from
webserverstodedicatedserverswithRSAhardware.
1. Introduction AmoreglobalapproachwastodistributetheTLSpro-
cessing stages among multiple machines. Mraz [16] has
Secure communication is an intrinsic demand of to-
designed an architecture for high volume TLS Internet
day’s world of online transactions. The most widely
serversthatoffloadstheRSAprocessingandbulkcipher-
used method is SSL/TLS [10]. Original designed at
ingtodedicatedservers.
Netscapeforitswebbrowsersandservers,Netscape’sSe-
The TLS designers knewthat RSA was expensiveand
cure Socket Layer (SSL) has been standardized by the
that web browsers tend to reconnect many times to the
IETF and is nowcalled Transport Layer Security (TLS).
samewebserver. Toaddressthis,theyaddedacache,al-
TLS runs at the transport layer above existing protocols
lowingsubsequentconnectionsto resumean earlierTLS
likeTCP.TLSisusedinavarietyofapplication,including
session and thus reuse the result of an earlier RSA com-
secure webservers, secureshell andsecure mail servers.
putation. Research has suggested that, indeed, session
As TLS is most commonly used for secure web applica-
cachinghelpswebserverperformance[11].
tions,suchasonlinebankingande-commerce,ourgoalis
Likewise,therehasbeenconsiderablepriorworkinper-
toprovideacomprehensiveperformanceanalysisofTLS
formanceanalysisandbenchmarkingofconventionalweb
webservers. WhilepreviousattemptstounderstandTLS
servers [15, 12, 17, 5, 18], performanceoptimizations of
performance have focused on specific processing stages,
webservers,performanceorientedwebserverdesign,and
suchastheRSAoperationsorthesessioncache,weana-
operatingsystemsupportforwebservers[13,22,6,7,21].
lyzeTLSwebserversassystems,measuringpage-serving
Apostolopuolos et al. [3] studied the cost of TLS con-
throughputundertrace-drivenworkloads.
nectionsetup,RC4andMD5,andproposedTLSconnec-
TLS provides a flexible architecture that supports a
tionsetupprotocolchanges.
number of different public key ciphers, bulk encryptionOur methodology is to replace each individual opera-
tion within TLS with a “no-op” and measure the incre-
mental improvementin serverthroughput. This method-
ologymeasurestheupper-boundthatmaybeachievedby
optimizing each operation within TLS, whether through
hardware or software acceleration techniques. We can
measure the upper-bound on a wide variety of possible
optimizations,includingradicalchangeslikereducingthe
numberofTLSprotocolmessages. Creatingsuchanop-
timized protocol and proving it to be secure would be a
significant effort, whereas our simulations let us rapidly
measure an upper bound on the achievable performance
benefit. If the benefit were minimal, we would then see
noneedfordesigningsuchaprotocol.
Section 2 presents an overview of the TLS protocol.
Section3explainshowweperformedourexperimentsand
whatwemeasured. Section4analyzesourmeasurements
in detail. Ourpaper wrapsup withfuture work andcon-
clusions.
2. TLSprotocol overview
TheTLSprotocol,whichencompasseseverythingfrom
authenticationandkeymanagementtoencryptionandin-
tegritychecking,fundamentallyhastwophasesofopera-
tion: connectionsetupandsteady-statecommunication.
Connection setup in quite complex. Readers looking
forcompletedetailsareencouragedtoreadtheRFC[10].
The setup protocol must, among other things, be strong
againstactiveattackerstryingtocorrupttheinitialnegoti-
ationwherethetwosidesagreeonkeymaterial.Likewise,
it mustprevent“replay attacks” wherean adversarywho
recordedapreviouscommunication(perhapsoneindicat-
ing some money is to be transferred) could play it back
withouttheserver’srealizingthetransactionisnolonger
fresh(andthus,allowingtheattackertoemptyoutthevic-
tim’sbankaccount).
TLSconnectionsetuphas thefollowingsteps(quoting
fromtheRFC):
(cid:0) Exchange hello messages to agree on algorithms,
exchange random values, and check for session re-
sumption.
(cid:0)
Exchangecertificatesandcryptographicinformation
to allow the client and server to authenticate them-
selves.[Inourexperiments,wedonotuseclientcer-
tificates.]
(cid:0)
Exchangethenecessarycryptographicparametersto
allowthe client andserverto agreeon a “premaster
secret”.
(cid:0)
Generatea“mastersecret”fromthepremastersecret
chosenbytheclientandexchangedrandomvalues.
(cid:0)
Allow the client and server to verify that their peer
hascalculatedthesamesecurityparametersandthat
thehandshakeoccurredwithouttamperingbyanat-
tacker.
Thereareseveralimportantpointshere. First,theTLS
protocol designers were aware that performing the full
setup protocol is quite expensive, requiring two network
round-trips (four messages) as well as expensive cryp-
tographic operations, such as the 1024-bit modular ex-
ponentiation required of RSA. For this reason, the pre-
master secret can be stored by both sides in a session
cache. When a client subsequently reconnects, it need
only presenta sessionidentifier. Then, thepremaster se-
cret (known to client and server but not to any eaves-
dropper) can be used to create a new master secret, a
connection-specificvaluefromwhichtheconnection’sen-
cryptionkeys,messageauthenticationkeys,andinitializa-
tionvectorsarederived.
Afterthesetupprotocoliscompleted,thedataexchange
phasebegins.Priortotransmission,thedataisbrokeninto
packets. For each packet, the packet is optionally com-
pressed,akeyedmessageauthenticationcodeiscomputed
and added to the message with its sequence number. Fi-
nally the packet is encrypted and transmitted. TLS also
allows for a number of control messages to be transmit-
ted.
Analyzing the above information, we see a number of
operations that may form potential performance bottle-
necks. Performancecanbe affectedbythe CPUcosts of
the RSA operations and the effectiveness of the session
cache. It can also be affected by the network latency of
transmittingtheextraconnectionsetupmessages,aswell
astheCPUlatencyofmarshaling,encrypting,decrypting,
unmarshaling, andverifyingpackets. This paper aimsto
quantifythesecosts.
3. Methodology
We chose not to perform “micro-benchmarks” such as
measuringthenecessaryCPUtimetoperformspecificop-
erations. Inasystemascomplexasawebserver,I/Oand
computation are happening simultaneously and the sys-
tem’sbottleneckisneverintuitivelyobvious. Instead,we
chose to measure the throughput of the web server un-
der various conditions. To measure the costs of individ-
ual operations, we replaced them with no-ops. Replac-
ing cryptographically significant operations with no-ops
isobviouslyinsecure,butitallowsustomeasureanupper
boundontheperformancethatwouldresultfromoptimiz-
ingthesystem. Ineffect,wesimulateidealhardwareac-
celerators. Basedonthese numbers, we canestimate the
relative cost of each operation using Amdahl’s Law (see
Section4).3.1.Platform TheAmazonworkloadhasasmallaveragefilesize,7KB,
while the CS trace has a large average file size, 46KB.
Ourexperimentsusedtwodifferenthardwareplatforms
Likewise, the working size of the CS trace is 530MB
for the TLSweb servers: a generic500MHzPentiumIII
while the Amazon trace’s working size is only 279KB.
cloneandaCompaqDL360serverwithasingle933MHz
Even with the data stored in RAM buffers, these two
Pentium III. Both machines had 1GB of RAM and a gi-
configurations provide quite different stresses upon the
gabitEthernetinterface. Someexperimentsalsoincluded
system. For example, the Amazon trace will likely be
a CompaqAXL300[4] cryptographyaccelerationboard.
storedintheCPU’scachewhereastheCStracewillgen-
Threegeneric800MHzAthlonPCswithgigabitEthernet
eratemorememorytraffic. TheAmazontracethusplaces
cardsservedasTLSwebclients,andallexperimentswere
similar pressure on the memory system as we might ex-
performedusingaprivategigabitEthernetswitch.
pectfromdynamicallygeneratedHTML(minusthecosts
All computers ran RedHat Linux 6.2. The stan-
of actually fetching the data from an external database
dard web servers used were Apache 1.3.14 [2], and
server). Likewise, the CS trace may put more stress on
the TLS web server was Apache with mod SSL 2.7.1-
thebulkciphers,withitslargerfiles,whereastheAmazon
1.3.14 [14]. We have chosen the Apache mod SSL so-
trace would put more pressure on the connection setup
lution due to its wide availability and use, as shown by
costs, as these connections will be, on average, much
a March 2001 survey [26]. The TLS implementation
shorterlived.
used in our experiments by mod SSL is the open source
Inadditiontoreplacingcryptographicoperations,such
OpenSSL 0.9.5a [19]. The HTTPS traffic load was gen-
as RSA, RC4, MD5/SHA-1, and secure pseudo-random
erated using the methodology of Banga et al. [5], with
number generation with no-ops1, we also investigated
additionalsupportforOpenSSL.Asweareinterestedpri-
replacing the session cache with an idealized “perfect
marilyinstudyingtheCPUperformancebottlenecksaris-
cache” that returns the same session every time (thus
ing from the use of cryptographic protocols, we needed
avoiding contention costs in the shared memory cache).
toguaranteethatotherpotentialbottlenecks,suchasdisk
Simplifying further, we created a “skeleton TLS” proto-
ornetworkthroughput,didnotcloudourthroughputmea-
col where all TLS operations have been completely re-
surements. To address this, we used significantly more
moved but the messages of the same length as the TLS
RAM in each computer than it’s working set, and thus
handshake are transmitted. This simulates an “infinitely
minimizingdiskI/Owhenthediskcachesarewarm.Like-
fast”CPUthatstillneedstoperformallthesamenetwork
wise,toavoidnetworkcontention,weusedgigabitEther-
operations. Finally, we hypothesizea faster TLS session
net,whichprovidemorebandwidththanthecomputersin
resumptionprotocolthatremovestwomessages(onenet-
ourstudycanreasonablygenerate.
workround-trip),andmeasureitsperformance.
3.2.Experimentsperformed Through each of these changes, we can progressively
simulatetheeffectsof“perfect”optimizations,identifying
We performedfour setsof experiments,using two dif-
anupperboundonthebenefitsavailablefromoptimizing
ferentworkloadtracesagainsttwodifferentmachinecon-
eachcomponentoftheTLSsystem.
figurations.
One workload simulated the secure servers at Ama-
3.2.1.Amazon-likeworkloadexperiments
zon.com. Normally, an Amazon customer selects goods
to be purchasedvia a normal web server,and only inter- We were interested in closely simulating the load that
actswithasecurewebserverwhensubmittingcreditcard mightbeexperiencedbyapopulare-commercesite,such
informationandverifyingpurchasedetails. Wepurchased as Amazon. While our experiments do not include the
two books at Amazon, one as a new user and one as a database back-endprocessing thatoccurs ine-commerce
returning user. By replicating the corresponding HTTPS sites, we can still accurately model the front-end web
requests in the proportions that they are experienced by serverload.
Amazon,wecansimulatetheloadthatagenuineAmazon Tocaptureanappropriatetrace,weconfiguredaSquid
secureservermightexperience.Ourotherworkloadwasa proxy server and logged the data as we purchased two
100,000-hittracetakenfromourdepartmentalwebserver, books from Amazon.com, one as a new customer and
usinga 530MBsetoffiles. Whileour departmentalweb one as a returning customer. The web traffic to browse
serversupportsonlynormal,unencryptedwebservice,we Amazon’sinventoryandselectthebooksforpurchaseoc-
measuredthethroughputforrunningthistraceunderTLS cursoveraregularwebserver,andonlythefinalpayment
todeterminethecoststhatwouldbeincurredifournormal
webserverwasreplacedwithaTLSwebserver.
1WhileTLSalsosupportsoperatingmodeswhichusenoencryption
(e.g., TLS_NULL_WITH_NULL_NULL),ourno-op replacementsstill
These twoworkloads representendpointsofthe work-
usetheoriginaldatastructures,even iftheirvaluesarenowallzeros.
loadspectrumTLS-securedwebseversmightexperience. Thisresultsinamoreaccuratesimulationof“perfect”acceleration.andshippingportionoccurswithasecurewebserver. Of peartooriginatefromasmallnumberofproxies.Toavoid
course, the traces we recorded do not contain any plain- an incorrect estimation of the session reuse, we hand-
text from the secure web traffic, but they do indicate the deleted all known proxy servers from our traces. The
numberofrequestsmadeandthesizeoftheobjectstrans- remaining requestscould then be assumed to correspond
mitted by Amazon to the browser. This is sufficient in- to individual users’ web browsers. The final trace con-
formation to synthesize a workload comparable to what tainedapproximately11,000sessionsspreadover100,000
Amazon’ssecurewebserversmightexperience.Theonly requests.
value we could not directly measure is the ratio of new Inourtraceplaybacksystem,threeclientmachinesran
to returning Amazon customers. Luckily, Amazon pro- 20 processes each, generating 60simultaneous connects,
vided this ratio (78% returning customers to 22% new proving sufficient to saturate the server. The complexity
customers)inarecentquarterlyreport[1]. Forourexper- of the playbacksystem lies in its attempt to preservethe
iments,weassumethatreturningcustomersdonotretain originalorderingofthewebrequestsseenintheoriginal
TLS session state, and will thus complete the full TLS trace. Apache’s logging mechanism actually records the
handshake every time they wish to make a purchase. In order in whichrequestscomplete, notthe orderin which
this scenario, based on our traces, the server must per- they were received. As such, we have insufficient infor-
form a full TLS handshake approximately once out of mation to faithfully replay the original trace in its origi-
everytwelvewebrequests. Thisone-full-handshake-per- nal order. Instead, we derivea partialorderingfrom the
purchaseassumptionmaycauseustooverstatetherelative trace. AllrequestsfromagivenIPaddressaretotallyor-
costsofperformingfullTLShandshakes,butitdoesrep- dered, but requests from unrelated IP addresses have no
resenta“worstcase”thatcouldwelloccurine-commerce ordering. This allows the system to dispatch requests in
workloads. avarietyofdifferentorders,butpreservesthebehaviorof
Wecreatedfilesondisktomatchthesizescollectedin individualtraces.
ourtraceandrequestthosefilesintheordertheyappearin Asasecondconstraint,wewishedtoenforceanupper
the trace. Whenreplayingthe traces, each clientprocess bound onhowfarthe finalrequestsobservedbytheweb
uses at most four simultaneous web connections, just as server maydifferfrom the order of requests in the origi-
commonwebbrowsersdo.Wealsogrouptogetherthehits naltrace.Ifthisboundweretoosmall,itwouldartificially
corresponding to each complete web page (HTML files limittheconcurrencythatthetraceplaybacksystemcould
and inline images) and do not begin issuing requests for exploit. If the bound were too large, therewould be less
the subsequent page until the current page is completely assurancethattherequestorderingobservedbytheexper-
loaded.Allthreeclientmachinerun24oftheseprocesses, imental server accurately reflected the original behavior
each,causingtheservertoexperiencealoadcomparable captured in the trace. In practice, we needed to set this
to72webclientsmakingsimultaneousconnections. boundaryatapproximately10%ofthelengthoftheorigi-
naltrace. Tighterboundariescreatedsituationswherethe
3.2.2.CSworkloadexperiments serverwasnolongersaturated,andtheclientscouldbegin
nonewrequestsuntilsomeolderlargerequest,perhapsfor
We also wished to measurethe performanceimpactof
averylargefile,couldcomplete.
replacing our departmental web server with a TLS web
While this technique does not model the four simulta-
server. To do this, we needed to designa system to read
neous connections performed by modern web browsers,
a trace taken from the original server and adapt it to our
itdoessaturatetheserversufficientlythatwe believethe
trace-driven TLS web client. Because we are interested
serverthroughputnumberswouldnotchangeappreciably.
in measuring maximum server throughput, we discarded
thetimestampsintheserverandinsteadreplayedrequests
4. Analysisofexperimentalresults
fromthetraceasfastaspossible. However,weneededto
determinewhichrequestsintheoriginaltracewouldhave Figures 1 and 2 show the main results of our exper-
requiredafullTLShandshakeandwhichrequestswould iments with the Amazon trace and the CS trace, respec-
have reusedthe sessions establishedby those TLS hand- tively. The achieved throughput is shown on the y axis.
shakes. To do this, we assumed that all requests in the For each system configuration labeled along the x-axis,
tracethatoriginatedatthesameIPaddresscorresponded we show two bars, corresponding to the result obtained
to one web browser. The first request from a given IP withthe500MHzsystemandthe933MHzsystem,respec-
addressmustperformafullTLShandshake. Subsequent tively.
requestsfromthataddresscouldreusethepreviouslyac- Threeclustersofbargraphsareshownalongthex-axis.
quired TLS session. This assumption is clearly false for Theleftclustershowsthreeconfigurationsofacomplete,
largeproxy servers that aggregatetrafficfor manyusers. functional web server: the Apache HTTP web server
Forexample,allrequestsfromAmericaOnlineusersap- (Apache), the Apache TLS web server (Apache+TLS),Label Descriptionofserverconfiguration
Apache Apacheserver
Apache+TLS ApacheserverwithTLS
Apache+TLSAXL300 ApacheserverwithTLSandAXL300
RSA RSAprotectedkeyexchange
PKX plainkeyexchange
NULL nobulkcipher(plaintext)
RC4 RC4bulkcipher
noMAC noMACintegritycheck
MD5 MD5MACintegritycheck
nocache nosessioncache
shmcache shared-memorybasedsessioncache
perfectcache idealizedsessioncache(alwayshits)
norandomness nopseudo-randomnumbergeneration(also: NULL,noMAC)
plain nobulkdatamarshaling(plaintextwrittendirectlytothenetwork)
fastresume simplifiedTLSsessionresume(eliminatesoneround-trip)
SkeletonTLS allmessagesofcorrectsize,butzerodata
2500
2200
2000 1876
PIII-500Mhz
PIII-900Mhz
1370 1480
1500
1118
1000 901 967 976 937
735 750 783
600 585 615 622
525 467 474 490
500 350
261 305 285 280
147 112 166 160
63
0
Apach Ae pa Ac ph ae c+ hT eL +S TLS AXL3 R0 S0 A, RC4, PKM XD , 5, Rn Co 4
R
,c Sa AMc , Dh R5e , Cs 4,h nm oc Ra M Sc A Ah , Ce , Ns Uh L PLm ,c Ka XMc , Dh N5e , Us L Ph L,
K
m n Xc ,o ac NMh A Ue L PC, L K, n Xn ,o oc NMa Uc A Lh C PL,e , Ks n Xh ,o m M nc A
o
a rC,c a h npe der ofe mc n Pt e XKc ,s Xa s ,,c
n
h op
n
e e ror af
r
ne
a
dc nt odc
o
ma nmc enh see ss
,
s,
p
ep rfer ef ce t ct c ac ca hc eh , e, p lp al ia ni , n fast resu Sm kSe ek le el te ot no n T LT SL , S fast resume
K
P
Figure1.ThroughputforAmazontraceanddifferentserverconfigurations,on500MHzand933MHzservers.Label Descriptionofserverconfiguration
Apache Apacheserver
Apache+TLS ApacheserverwithTLS
Apache+TLSAXL300 ApacheserverwithTLSandAXL300
RSA RSAprotectedkeyexchange
PKX plainkeyexchange
NULL nobulkcipher(plaintext)
RC4 RC4bulkcipher
noMAC noMACintegritycheck
MD5 MD5MACintegritycheck
nocache nosessioncache
shmcache shared-memorybasedsessioncache
perfectcache idealizedsessioncache(alwayshits)
norandomness nopseudo-randomnumbergeneration(also: NULL,noMAC)
plain nobulkdatamarshaling(plaintextwrittendirectlytothenetwork)
fastresume simplifiedTLSsessionresume(eliminatesoneround-trip)
SkeletonTLS allmessagesofcorrectsize,butzerodata
1000
885
900
PIII-500(cid:0)Mhz 824
800 PIII-900(cid:0)Mhz 755
700
610
600 566 579
544
494 509
500 447 456 464
400 380 387
317 326 295 301 285 301 309 334
300 259
200 149 178 194 172 175
95
100 48
0
Apach Ae p Aa pch ace h+ eT +L T(cid:0)S L(cid:0)S AXL R3 S0 A0 ,(cid:0)RC4,(cid:0) PKM XD (cid:0),5(cid:0), Rn C Ro(cid:0) 4,(cid:0) Sc Aa ,(cid:0)Mc Dh R5e ,(cid:0) C4s ,(cid:0)h nm o Rc SMa Ac A ,(cid:0)h Ce (cid:0), Ns Uh L PLm ,(cid:0) Kc Xa (cid:0)M ,c Dh N5e ,(cid:0) ULs PLh ,(cid:0) Km Xn (cid:0),c oa Nc M Uh A PLe C KL,(cid:0)
,(cid:0)
X(cid:0)n ,no(cid:0) o Nc M Ua A Lc PLh C
,(cid:0)
K,(cid:0)e Xns (cid:0),(cid:0)oh nM(cid:0)m o(cid:0)Ac rCa a,(cid:0)c nh p de e orf me Pnc K(cid:0)t e Xsc (cid:0),(cid:0)sa ,(cid:0)c nph o(cid:0)ee rr nf
a
de
n
oc d(cid:0)t moc na
m
ec
n
sh
e
s,(cid:0)e
ss p,(cid:0)
erp fe erf c(cid:0)tec c(cid:0)t ac ca hc e,(cid:0)he p,(cid:0) lap il na ,(cid:0)i fn ast(cid:0)resu Skm S ee lk ee tl oet n(cid:0)o Tn(cid:0) LT SL ,(cid:0)fS ast(cid:0)resume
a
r
o(cid:0)
n
X(cid:0),(cid:0)
K
P
Figure2.ThroughputforCStraceanddifferentserverconfigurations,on500MHzand933MHzservers.and the Apache TLS server using an AXL300 RSA ac-
celerator(Apache+TLSAXL300).
Thecenterclusterofbargraphsshowsresultsobtained
withvariousexperimentalTLSconfigurations,whereba-
sicprimitiveswithintheTLSprotocolwerereplacedwith
no-ops. Eachconfigurationis labeledto indicatethe key
exchangemethod,bulkencryptionalgorithm,messageau-
thenticationcode,andcachingstrategyused. Ratherthan
measuringallpossiblevariations,wemeasuredtheconfig-
uration where all attributes were replaced by their no-op
alternatives,followedbyconfigurationswhereeachoper-
ation was enabled individually. We also measured a few
additional configurations discussed below. For instance,
we measured “PKX, RC4, MD5, shm cache,” a configu-
rationwhereallRSAoperationshavebeenreplacedwith
no-ops, but other operations ran normally, to expose the
performancelimitsofRSAaccelerationtechniques.
Therightclusterofbargraphsshowsmeasurementsof
TLS configurations where non crypto-related TLS func-
tionswereremovedandthesessionresumeprotocolswas
simplified. These measurements allow us to understand
thecostsoftheremainingoperationsinTLSsessionsetup
anddataexchange.
Additionally, we wish to estimate the relative costs of
each operationperformedby the TLS web server. To do
this,wetakeadvantageofAmdahl’sLaw:
Speedup
(cid:0)
1
(cid:1) 1
(cid:2)
fraction
enhanced (cid:3)(cid:5) (cid:4)
fractionenhanced
speedupenhanced
For each TLS processing component, we have simu-
latedinfiniteoralmostinfinitespeedup,eitherbyremov-
ing the component (e.g., for the key exchange method,
streamcipherandmessageauthenticationcode),orbyre-
placing the component with a much cheaper alternative
(e.g., the “perfect”cacheandthe predictedrandomness).
Thus,Amdahl’sLawcanbesimplifiedasfollows:
Speedup
(cid:0)
1
1
(cid:2)
4.1.ImpactofTLSonserverperformance
TheApacheserver,withoutTLSenabled,achievesbe-
tween610hits/secand885hits/secwiththeCStrace,and
between1370hits/secand2200hits/secwiththeAmazon
trace. Thedifferenceinthroughputforthetwoworkloads
is due to the increased average file size: 46KB for the
CS trace and only 7KB for the Amazon trace as well as
theincreasedworkingsetsize. IncreasingtheCPUspeed
from500MHzto 933MHzleadstoa substantialincrease
inthroughputineachcase.
ApacheTLSwithouttheAXL300servedbetween149
hits/sec and 259 hits/sec for the CS trace, and between
147 hits/secand261 hits/secforthe Amazontrace. This
confirms that TLS incurs a substantial cost and reduces
the throughput by 70 to 89% relative to the insecure
Apache. Apache TLS with the AXL300 served between
178 hits/sec and 317 hits/sec for the CS trace, and be-
tween300hits/secand525hits/secfortheAmazontrace.
This shows that, with the use of the AXL300 board, the
throughputlossis nowonly 64to 77%relativetothe in-
secureApache.
4.2.ImpactofincreasedCPUspeed
ConsidertheimpactoftheavailableserverCPUcycles
on the relative cost of TLS. In the configurations with a
complete, functional TLS implementation, the 933MHz
Pentium III achieves a sizeable increase in throughput
(45-60%) relative to the 500MHz Pentium III. We con-
cludethattheperformanceofthevariousTLSprocessing
steps scales well with increased availability of CPU cy-
cles. In the long run, this implies that the performance
loss associated with the use of TLS should diminish as
CPUsgetfaster. Ofcourse,fasterCPUscanpotentiallybe
usedtoattackcryptosystemsmoreeffectively.Asaresult,
stronger,andpotentially more CPUintensive, cryptogra-
phymaybecomenecessaryinthefutureaswell.
fraction 4.3.Effectivenessofacceleratorhardware
enhanced
Sincewemeasuredspeedupsexperimentally,wecanes- TheuseoftheAXL300acceleratoryieldsanoticeable
timate the cost of individual operations by solving this throughput improvement with the CS trace (19 to 22%)
equation for fraction . The results of these calcu- relativetothenormalTLSApache,andasubstantialgain
enhanced
lationsareshowninFigure3. withtheAmazontrace(101to107%)relativetothenor-
InordertodirectlydeterminetherelativecostsofRSA, malTLSApache. ThereasonthattheAmazonworkload
RC4,andMD5,wereplacedeachstageindividuallywith benefitsmorefromtheacceleratoristhattheaverageses-
a no-opand measured the corresponding serverthrough- sion is shorter. As a result, more requests in the Ama-
put. Other TLS components, such as the TLS session zon trace require the full TLS handshake with its corre-
cache, the randomness processing and TLS packet mar- sponding RSA operations. The CS trace, with its longer
shaling cannot be replaced without also effecting other sessions,benefitsfromthesessioncache,limitingtheef-
TLScomponents. Forthesecases,wewereforcedtorun fectivenessofacceleratedRSAoperations. Anothercon-
some experiments with multiple TLS stages simultane- tributingfactorintheperformancedifferenceistheaver-
ouslydisabled. Westillestimatetherelativecostofeach agefilesize. IntheCStrace, withfilesaveraging46KB,
componentusingAmdahl’sLaw. the server spends proportionally more time transmittingother TLS
TLS packet 8% non-TLS
marshaling 10%
1%
RSA
non-TLS 23%
29%
random numbers
5%
TLS session other TLS
cache 10%
1%
RSA
58% RC4
15%
MD5 TLS packet
9% marshaling
5%
MD5
13%
RC4 random numbers
8% 4% TLS session
cache
1%
a)AmazontraceforPIII500MHz b)CStraceforPIII500MHz
other TLS
9%
non-TLS
TLS packet 12% RSA
marshaling 20%
2% non-TLS
32%
random numbers
4%
RC4
TLS session RSA 14%
cache 57%
1% other TLS
11%
MD5
12%
MD5
8% TLS packet
RC4 marshaling
7% 7% TLS session
cache
1%
random numbers
3%
c)AmazontraceforPIII933MHz d)CStraceforPIII933MHz
Figure 3. Relative costs of TLS processing stages for Amazon trace, CS trace, and for 500MHz and
933MHz server configurations. The sections labeled “Other TLS” refer to the remaining portions of the
TLS implementation we did not specifically single out for no-op tests, and “Non-TLS” refers to other
performancecosts,suchastheApacheserverandtheLinuxkernel.CStrace Amazontrace
Experiment 500MHz 900MHz 500MHz 900MHz
Apache+TLS 149(24%) 261(29%) 147(11%) 261(12%)
Regularsetup,plaincommunication 219(36%) 353(40%) 162(12%) 282(13%)
Minimalsetup,regularcommunication 384(63%) 559(63%) 844(65%) 1136(52%)
Figure 4. Throughput in hits/sec for Apache+TLS, regular setup with plain communication, and mini-
mal setup with regular communication, for the CS trace and the Amazon trace, and both 500 MHz and
933MHzservers. Percentagesshowthethroughputrelativetonon-TLSApacheonthesameplatform.
filesversusperformingconnectionsetupwhencompared material.Inourexperiments,“noMAC”replacesallMD5
totheAmazontrace,withanaveragefilesizeof7KB. andSHA-1computationswithno-ops,throughouttheen-
tireTLSprotocol,withtheexceptionoftheSHA-1oper-
4.4.Comparativeimpactofacceleratorhardware ation used in the pseudo-random number generator. The
versusfasterCPU cost of the pseudo-random number generator is consid-
eredbelow.
Thenextquestionwewishtoposeiswhetheritismore
advantageous to invest in acceleration hardware, or in a
4.7.MiscellaneousTLSoperations
faster CPU. The answer depends strongly on the work-
load.WiththeCStrace,usingafasterCPUismoreeffec- StartingwithaserverinwhichwereplacedRSA,RC4,
tive than using an accelerator board. However, with the pseudo-randomness computations(which use the SHA-1
Amazontrace,theoppositeistrue.Weconcludethatsites hashfunction),andthesessioncachewithno-ops(labeled
thatonlyuseTLSserversforasmallpartoftheiruserin- “PKX,norandomness,perfectcache”onthebarcharts),
teraction,asAmazononlyusesTLSforitsfinalpurchase we still observed a significant performance deficit rela-
validationandpayment,willbenefitfromhardwareRSA tivetotheoriginalApacheperformance. RemovingTLS
acceleration. Whereas,websitesthatdoalltheiruserin- packet marshaling costs and doing raw network writes
teraction through TLS, or otherwise have a high session of the plaintext (labeled “PKX, no randomness, perfect
reuse rate, may be better advised to invest in faster gen- cache, plain”) resulted in only modest gains, so we de-
eralpurposeCPUs. cidedtotrysomethingmoreradical.Wecreateda“Skele-
ton TLS” system that transmitted network messages of
4.5.Impactofsessioncaching
the same length as genuine TLS, but otherwise performs
Ourresultsconfirmthefindingsofpriorwork[11]that no TLS processing whatsoever. The difference between
sessioncachingsubstantiallyimprovesserverthroughput. “PKX, NULL, no MAC, no randomness, perfect cache”
Themainreasonforthisgainisareductioninthenumber and plain text communication and skeleton TLS covers
ofRSAoperationsasaresultofsessionreuse. However, between8%and11%ofthetotalperformancecost.Since
even in configurations where the RSA operations are as- we have already replaced the data exchanging TLS op-
sumedtobeinfinitelyfast,sessioncachingisstillbenefi- erations with plain text, the above difference indicates a
cial, avoiding the extra network trafficandother compu- “catch all” of every other connection setup related TLS
tationsrequiredbythefullTLShandshake. cost.
Once the “other TLS” costs have been measured, the
4.6.Relativecostandimpactofcryptooperations remainder must be from sources outside TLS, including
theApachewebserverandtheLinuxkernel.
Figures 1, 2, and 3 quantify the costs of various TLS
processingsteps. TheRSAoperationshavethedominant
4.8. Overall costs of TLS connection setup and
cost, as expected. Among the remaining operations, the
dataexchange
“other TLS” operations stand out, as do the MD5 MAC
computationandtheRC4streamcipherinthecaseofthe To determine the relative cost of connection setup we
CS traceworkload. However,these costsare sufficiently havemodifiedtheTLSprotocoltoperformaminimalcon-
balancedthatthereisnoobvioussinglecandidateforop- nection setup and regularencrypted data exchange. This
timization. Wenotethat,evenwhenMD5isthemessage involves establishing a generic TCP connection between
integrityfunction,bothMD5andSHA-1areusedincon- the client and server, then initializing the data structures
junction in several portions of the TLS protocol, such as used by TLS with the session keys set to zero. We can
the“pseudo-randomfunction,”usedwhengeneratingkey then compare this with the the plain data exchange de-scribedearlier.Theresultsarepresentedinfigure4. 4.11.Summaryofresults
Again using Amdahl’s Law, we show the cost of the
Wecansummarizetheresultofourexperimentsasfol-
TLSconnectionsetuprangesfrom53%to61%ofthetotal
lows:
costfortheCStraceandrangesfrom77%to82%ofthe
totalcostfortheAmazontrace.Replacingtheconnection
setup with a minimal initialization of the data structures
yieldsa throughputimprovementof115to 157%for the
CStraceand335to471%fortheAmazontrace.
Likewise, we show the cost of the TLS data exchange
rangesfrom26to31%fromthetotalcostfortheCStrace
andrangesfrom7to9%fromthetotalcostfortheAma-
zon trace. Replacing the TLS data exchange with plain
communicationyieldsathroughputimprovementof36to
46% for the CS trace and of 8 to 10% for the Amazon
trace. Wenotethat,inthisexperiment,replacingtheTLS
dataexchangewithplaindataexchangeonlyeliminatesa
portionofthecostsassociatedwithRC4andMD5,which
arealsousedaspartoftheconnectionsetupprotocol.
Thesemeasurementsimplythatoptimizationsaimedat
the connectionsetupphase ofTLS willhavea more sig-
nificantimpactonsystemperformancethanoptimizations
aimedatthedataexchangephase.
4.9.Potentialimpactofprotocolchanges
When considering optimizations for the TLS connec-
tionsetupphase,wewishtoexplorepotentialchangesto
the TLS protocolaimedreducing the amount ofnetwork
traffic. Thedothis,weusedastraw-manimplementation
ofa“fastresume”TLSvariantthatoptimizesthesession
resume protocol phase in such a way that two messages
andoneround-tripnetworkdelayareeliminated. There-
sults indicate that the potential throughput improvement
of such a hypothetical protocol change is minimal (1 to
2%). Therefore,optimizationsaimedatreducingthevol-
umeofnetworktrafficwillhavelittleeffectonTLSserver
throughput(althoughsuchoptimizationscouldhaveother
benefits,particularlyforbandwidth-limitedclients).
4.10.Dynamiccontentgeneration
Acommonquestionishowtoapplyperformancemea-
surements,suchasperformedinthispaperwithstaticcon-
tentgeneration,totherelativelycommoncaseofdynamic
page generation, which often involves running custom
server plug-in code that makes database queries and as-
semblesHTMLonthefly.OurexperimentsfocusonTLS
web servers that serve static content, discerning among
theTLSandnon-TLScosts.IftheTLSwebserverisgen-
eratingdynamicHTML,thenthenewloadwillobviously
impact server throughput. In the pie charts of Figure 3,
this additional overhead should be reflected in the non-
TLS sections ofthe piecharts, whichcouldbe increased
appropriately, scaling down the TLS sections of the pie
chartsuchthattheirrelativecostsremainthesame.
(cid:0)
TLS imposes a factor of 3.4 to 9 overhead over an
insecurewebserver.
(cid:0)
ThelargestperformancecostintheTLSwebserver
isthepublickeycryptography(20%to58%).
(cid:0)
Non-TLS performance costs(including Apache and
the Linuxkernel)range from10to 32%ofthetotal
cost.
(cid:0) The costs of marshaling TLS data structures, com-
putingconnectionkeysfromthepremastersecretand
executingothermiscellaneousoperationswithinTLS
consumes between 8% and 11% of the total perfor-
mancecost. Reducingthesessionresumptionproto-
colbytwomessagesandoneround-tripdelayhada
negligibleimpactonperformance.
(cid:0)
Adding an RSA accelerator, a common commercial
approach to addressing TLS server performance is-
sues, haswidelydifferenteffectsonserverthrough-
put depending on the session reuse rate of the re-
questsseenbytheTLSserver.Forlowsessionreuse
rates, theRSAacceleratorcanresultina101-107%
performanceimprovement(afactoroftwoimprove-
mentinhitrate). Forhighsessionreuserates, how-
ever,theRSAacceleratoronlyresultedina19-22%
performanceimprovement.
(cid:0)
This improvementis bounded at 130-138% (for the
Amazontrace)or25-30%(fortheCStrace),regard-
lessofhowfasttheRSAacceleratorcanrun.
(cid:0)
The TLS session cache is effective; it improved
throughputbyafactorof2.7-3.1fortheCStraceand
2.3-2.4fortheAmazontrace,relativetoaserverwith
nocache.
(cid:0)
The costs of the non-RSA cryptographic opera-
tions, such as RC4, MD5, pseudo-random number
generation, performed by TLS are relatively bal-
anced. Hardwareaccelerationforanyindividualop-
eration would yield only modest performance im-
provements.
(cid:0)
TLS appears to be purely CPU bound, as optimiza-
tionsintendedtoreducenetworktraffichavelittleef-
fectonserverthroughput.
(cid:0) The CPU costs associated with TLS connection
setup have a more significant impact on TLS server
throughput thantheCPUcostsassociated withTLS
dataexchange.5. Future work dedicatedsecureserversfore-commercesites; suchsites
minimize the number of requests to secure servers and
ThispaperhasstudiedtheperformanceofTLSwebser-
therefore experience relatively lower session reuse rates.
vicefromasingleserver. Ithasnotconsideredthelarger
Accelerationappearstobelesseffectiveforsiteswhereall
environmentthatoftenoccursinane-commercesite,such
requestsarehandledbyaTLSserver,thushavinghigher
asload-balancingfrontendswitches,withreplicatedclus-
session reuse rates. For such sites, investing in a faster
tersofwebserversanda databaseback-end. There have
CPUmayprovemoreeffective.
already been some efforts to study these environments.
FutureeffortstooptimizeTLSserverthroughputwould
For example, the Zeus web server performance tuning
beadvisedtofocusonreducingtheCPUcostsoftheTLS
guide [27] mentions the importance of sharing TLS ses-
connection setup phase, rather than working on the TLS
sions across web servers in a cluster. We plan to study
dataexchangephase. Likewise,effortstoredesignorex-
the interaction of different cluster load-balancing strate-
tend the TLS protocol would be advised to consider the
gies(suchasusedinLARD[20])withTLSwebservers.
CPUcostsofalloperationsperformedduringconnection
This paper also presents data that predicts what might
setup,notjusttheRSAoperations.
happen to TLS performance as CPUs become faster in
thecomingyears. Ratherthanourno-opapproachtoper-
7. Acknowledgements
formancemeasurement,amoreaccuratetechniquewould
betomeasureTLSperformanceusingaprecisemachine We gratefullyacknowledgeCompaqforloaningusthe
simulatorsuchasSimOS[24]orRSIM[23]. Suchsimu- hardware used in performing our experiments. Vincent
latorswouldallowustopredicttheeffectsoffuturearchi- VanackereandAlgisRudyscontributedtoearlyversions
tecturaltrendsonTLSperformance. Likewise,manyweb ofthiswork. EricNahum,MohitAron,andAdamStub-
serverssuchasZeusandFlash[21]areknowntoradically blefieldalsosharedmanyusefulideasandopinions.
outperformApache. As theavailableCPU increases and
cryptographic operations are no longer the primary per- References
formancebottleneck,theseotherserverarchitecturesmay
[1] Amazon.Com releases 2001 first quarter re-
alsoprovetobefasteratTLSwebservicethanApache.
sults. Press Release, Apr. 2001. http:
//www.sec.gov/Archives/edgar/data/
6. Conclusions 1018724/000095010901500823/dex991.htm.
[2] Apache. http://www.apache.org/.
We havepresented a systematic analysis of the perfor- [3] G.Apostolopoulos,V.Peris,andD.Saha.TransportLayer
manceoftheApachewebserverwiththemod SSLexten- Security,howmuchdoesitreallycost? InProceedings
sionforsecureTLSdeliveryofwebpages. Ourmethod- ofEighteenthConferenceonComputerCommunications,
NewYorkCity,NewYork,Mar.1999.
ology was to exercise the web server with a trace-based
[4] The AXL300 RSA accelerator. http://www.
workloadwhileselectivelyreplacingTLSoperationswith
compaq.com/products/servers/security/
no-ops. By measuring the differences in the resulting
axl300/.
server throughput, our measurements are more accurate [5] G. Banga and P. Druschel. Measuring the capacity of a
thanresultsthatcouldotherwisebeobtainedthroughtra- Webserverunderrealisticloads.WorldWideWebJournal
ditionalCPUprofilersormicrobenchmarks. (Special Issue on World Wide Web Characterization and
OurmeasurementsshowthatRSAcomputationsarethe PerformanceEvaluation),1999.
[6] G.BangaandJ.C.Mogul. Scalablekernelperformance
single most expensive operation in TLS, consuming 20-
forInternetserversunderrealisticloads. InProceedings
58%ofthetimespentinthewebserver. OtherTLScosts
ofthe1998UsenixTechnicalConference,June1998.
are balanced across other the various cryptographic and
[7] G.Banga,J.C.Mogul,andP.Druschel.Ascalableandex-
protocol processing steps. Optimizations aimed at im-
pliciteventdeliverymechanismforUNIX. InProceeding
proving RSA operation throughput, whether through al- of the Usenix 1999 Annual Technical Conference, Mon-
gorithmicenhancements,cryptographicco-processors,or terey,California,June1999.
simply increasing raw CPU speed, will continue to be [8] D. Boneh and H. Shacham. Improving SSL handshake
profitable.However,evenidealRSAoptimizationleavesa performanceviabatching.InProceedingsoftheRSACon-
largegulf betweenTLS serverperformanceandinsecure ference,SanFrancisco,California,Apr.2001.
[9] D. Dean, T. Berson, M. Franklin, D. Smetters, and
server performance. No simple optimization is likely to
M. Spreitzer. Cryptology as a network service. In Pro-
closethatgap,butfasterCPUscanbeexpectedtonarrow
ceedingsofthe7thNetworkandDistributedSystemSecu-
itovertime.
ritySymposium,SanDiego,California,Feb.2001.
Hardware acceleration is fairly effective in absorbing [10] T. Dierks and C. Allen. The TLS Protocol, Version 1.0.
the cost ofthe RSA operations. Our resultsindicate that Internet Engineering Task Force, Jan. 1999. RFC-2246,
acceleratorshaveasignificantimpactonthethroughputof ftp://ftp.isi.edu/in-notes/rfc2246.txt.[11] A.Goldberg,R.Buff,andA.Schmitt. Securewebserver
performancedramaticallyimprovedbycachingSSLses-
sion keys. In Proceedings of the Workshop on Internet
ServerPerformance,Madison,Wisconsin,June1998.
[12] J.C.Hu,I.Pyrali,andD.C.Schmidt. Measuringtheim-
pactofeventdispatchingandconcurrencymodelsonweb
server performance over high-speed networks. In Proc.
2ndGlobalInternetConf.,Nov.1997.
[13] M. F. Kaashoek, D. R. Engler, G. R. Ganger, and D. A.
Wallach. Serveroperatingsystems. InProceedingsofthe
1996ACMSIGOPSEuropeanWorkshop,pages141–148,
Connemara,Ireland,Sept.1996.
[14] modSSL. http://www.modSSL.org/.
[15] J.C.Mogul. NetworkbehaviorofabusyWebserverand
itsclients.TechnicalReportWRL95/5,DECWesternRe-
searchLaboratory,PaloAlto,California,1995.
[16] R. Mraz. Secure Blue: An architecture for a high vol-
ume SSL Internet server. InProceedingsof Seventeenth
AnnualComputerSecurityApplicationsConference,New
Orleans,Louisiana,Dec.2001.
[17] E.M.Nahum, T.Barzilai,andD.Kandlur. Performance
issuesinWWWservers.IEEE/ACMTransactionsonNet-
working,2001. toappear.
[18] E.M.Nahum,M.Rosu,S.Seshan,andJ.Almeida. The
effects of wide-area conditions on WWW server perfor-
mance.InProceedingsoftheACMSIGMETRICSConfer-
enceonMeasurementandModelingofComputerSystems,
Cambridge,Massachusetts,June2001.
[19] OpenSSL. http://www.OpenSSL.org/.
[20] V.S.Pai,M.Aron,G.Banga,M.Svendsen,P.Druschel,
W. Zwaenepoel, and E. Nahum. Locality-aware request
distribution in cluster-based network servers. In Pro-
ceedings of the 8th Conference on Architectural Support
forProgrammingLanguagesandOperatingSystems,San
Jose,California,Oct.1998.ACM.
[21] V.S.Pai,P.Druschel,andW.Zwaenepoel.Flash:Aneffi-
cientandportableWebserver.InProceedingoftheUsenix
1999AnnualTechnicalConference,pages199–212,Mon-
terey,California,June1999.
[22] V. S. Pai, P. Druschel, and W. Zwaenepoel. I/O-Lite: A
unified I/O buffering and caching system. In Proc. 3rd
USENIXSymp.onOperatingSystemsDesignandImple-
mentation,NewOrleans,Louisiana,Feb.1999.
[23] V. S. Pai, P. Ranganathan, and S. V. Adve. RSIM: An
execution-drivensimulatorforILP-basedshared-memory
multiprocessors and uniprocessors. In Proceedings of
theThirdWorkshoponComputerArchitectureEducation,
Feb.1997. AlsoappearsinIEEETCCANewsletter,Oc-
tober1997.
[24] M.Rosenblum,E.Bugnion,S.Devine,andS.Herrod.Us-
ingtheSimOSmachinesimulatortostudycomplexcom-
putersystems. ACMTOMACSSpecialIssueonComputer
Simulation,1997.
[25] B.Schneier.AppliedCryptography. JohnWileyandSons,
NewYork,NewYork,2ndedition,1996.
[26] The Netcraft Secure Server Survey. http://www.
netcraft.com/ssl/.
[27] Zeus performance tuning guide. http://support.
zeus.com/faq/entries/ssl_tuning.html.