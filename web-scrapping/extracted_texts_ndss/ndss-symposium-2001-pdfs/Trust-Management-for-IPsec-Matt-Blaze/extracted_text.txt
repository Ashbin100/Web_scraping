Trust Management for IPsec (cid:0)
MattBlaze
AT&TLabs -Research
mab@research.att.com
JohnIoannidis
AT&TLabs -Research
ji@research.att.com
AngelosD. Keromytis
Universityof Pennsylvania
angelos@cis.upenn.edu
Abstract
IPsec is the standard suite of protocols for network-
layer confidentiality and authentication of Internet traf-
fic. The IPsec protocols, however, do not address the
policiesforhowprotectedtrafficshouldbehandledatse-
curity endpoints. This paper introduces an efficient pol-
icy management scheme for IPsec, based on the princi-
ples of trust management. A compliance check is added
totheIPsecarchitecturethattestspacketfiltersproposed
when new security associations are created for confor-
mancewiththelocalsecuritypolicy,basedoncredentials
presentedbythepeerhost. Securitypoliciesandcreden-
tialscanbequitesophisticated(andspecifiedinthetrust-
managementlanguage),whilestillallowingveryefficient
packet-filtering for the actual IPsec traffic. We present a
practical,portableimplementationofthisdesign,basedon
theKeyNotetrust-managementlanguage,thatworkswith
avarietyofUnix-basedIPsecimplementations.
1. Introduction
TheIPsecprotocolsuite,whichprovidesnetwork-layer
securityfortheInternet,hasrecentlybeenstandardizedin
theIETFand isbeginningtomakeitswayintocommer-
cial implementations of desktop, server, and router op-
erating systems. For many applications, security at the
network layer has a number of advantages over security
provided elsewhere in the protocol stack. The details of
network semantics are usually hidden from applications,
(cid:1)
which therefore automatically and transparently take ad-
vantageofwhatevernetwork-layersecurityservicestheir
environment provides. More importantly, IPsec offers a
remarkable flexibility not possible at higher- or lower-
layer abstractions: security canbeconfiguredend-to-end
(protectingtrafficbetweentwohosts),route-to-route(pro-
tectingtrafficpassingoveraparticularsetoflinks),edge-
to-edge (protecting traffic as it passes between “trusted”
networksviaan“untrusted”one,subsumingmanyofthe
current functions performed by network firewalls), or in
any other configuration in which network nodes can be
identifiedasappropriatesecurityendpoints.
Despitethisflexibility,IPsecdoesnotitselfaddressthe
problemofmanagingthepoliciesgoverningthehandling
of trafficentering or leaving a host running the protocol.
Byitself,theIPsecprotocolcanprotectpacketsfromex-
ternal tampering and eavesdropping, but does nothing to
control which hosts are authorized for particular kinds
of sessions or to exchange particular kinds of traffic. In
manyconfigurations,especiallywhennetwork-layersecu-
rityisusedtobuildfirewallsandvirtualprivatenetworks,
suchpoliciesmaybenecessarilybequitecomplex.There
is no standard interface or protocol for controlling IPsec
tunnel creation, and mostIPsec implementationsprovide
onlyrudimentary,packet-filter-basedandACL-basedpol-
icymechanisms.
The crudeness of IPsec policy control, in turn, means
that in spite of the availability of network-layer security,
many applications are forced to duplicate at the appli-
cation or transport layer cryptographic functions already
providedatthenetworklayer.
ThisworkwassupportedbyDARPAunderContractF39502-99-1-
0512-MODP0001. Therearethreemaincontributionsinthispaper: wein-troducea newpolicymanagementarchitecture forIPsec,
based on the principles of trust management; we present
adesignthatintegratesthisarchitecturewiththeKeyNote
Trust Management system; finally, we present a practi-
cal,portableimplementationofthisdesign,currentlydis-
tributedinopen-sourceforminOpenBSD.
1.1.IPsecPacketFiltersandSecurityAssociations
IPsec is based on the concept of datagram encapsu-
lation. Cryptographically protected network-layer pack-
ets are placed inside, as the payload of other network
packets, making the encryption transparent to any inter-
mediatenodesthatmustprocesspacketheadersforrout-
ing, etc. Outgoing packets are encapsulated, encrypted,
and authenticated (as appropriate) just before being sent
to the network, and incoming packets are verified, de-
crypted, and decapsulated immediately uponreceipt[12].
Keymanagementinsuchaprotocolisstraightforwardin
the simplest case. Two hosts canuse anykey-agreement
protocoltonegotiatekeyswithoneanother,andusethose
keysaspartoftheencapsulatinganddecapsulatingpacket
transforms.
Let us examine the security policy decisions an IPsec
processor must make. When we discuss “policy” in this
paper, we refer specifically to the network-layer security
policies that govern the flow of traffic among networks,
hosts, and applications. Observethat policy must be en-
forced wheneverpacketsarriveat or are about to leave a
networksecurityendpoint(whichcouldbeanendhost,a
gateway,arouter,orafirewall).
IPsec “connections” are described in a data structure
called a security association (SA). Encryption and au-
thentication keys are contained in the SA at each end-
point, and each IPsec-protected packet has an SA iden-
tifier that indexesthe SA database of its destination host
(notethatnotallSAsspecifybothencryptionandauthen-
tication;authentication-onlySAsarecommonlyused,and
encryption-only SAs are possible albeit considered inse-
cure).
Whenanincomingpacketarrivesfromthenetwork,the
hostfirstdeterminestheprocessingitrequires:
(cid:2)
Ifthepacketisnotprotected,shoulditbeaccepted?
This is essentially the “traditional” packet filtering
problem,asperformed,e.g.,bynetworkfirewalls.
(cid:2)
successfully decapsulated and still not be ac-
ceptable (e.g., a decapsulated packet with an
invalid source address, or a packet attempting
delivery to some port not permitted by the re-
ceiver’spolicy).
A security endpoint makes similar decisions when an
outgoingpacketisreadytobesent:
Ifthe packetisencapsulated underthesecurity pro-
tocol:
– Is there correct key material (contained in the
specifiedSA)requiredtodecapsulateit?
– Should the resulting packet (after decapsula-
tion) be accepted? A second stage of packet
filtering occurs at this point. A packetmay be
(cid:2) Isthereasecurityassociation(SA)thatshouldbeap-
plied to this packet? If there are several applicable
SAs,whichoneshouldbeselected?
(cid:2)
If there is no SA available, how should the packet
be handled? It may be forwarded to some network
interface, dropped, or queued until an SA is made
available, possibly after triggering some automated
keymanagementmechanismsuchasIKE,theInter-
netKeyExchangeprotocol[11].
Observe that because these questions are asked on
packet-by-packetbasis,packet-basedpolicyfilteringmust
beperformed,andanyrelatedsecuritytransformsapplied,
quicklyenoughtokeepupwith networkdatarates. This
implies that in all but the slowest network environments
thereisinsufficienttimetoprocesselaboratesecuritylan-
guages, perform public key operations, traverse large ta-
bles,orresolveruleconflictsinanysophisticatedmanner.
IPsec implementations (and most other network-layer
entities that enforce security policy, such as firewalls),
therefore, employsimple, filter-based languagesfor con-
figuring their packet-handling policies. In general, these
languages specify routing rules for handling packetsthat
match bit patterns in packet headers, based on such pa-
rameters as incoming and outgoing addresses and ports,
services,packetoptions,etc.[17]
IPsecpolicycontrolneednotbelimitedtopacketfilter-
ing,however. Agreatdealofflexibilityisavailableinthe
controlofwhensecurityassociationsarecreatedandwhat
packetfiltersareassociatedwiththem.
Most commonly however, in current implementations,
theIPsecuseroradministratorisforcedtoprovide“allor
nothing”access,inwhichholdersofasetofkeys(orthose
certified by a particular authority) are allowed to create
anykindofsecurityassociationtheywish,andotherscan
donothingatall.
AfurtherissuewithIPsecpolicycontrolistheneedfor
twohoststodiscoverandnegotiatethekindoftrafficthey
are willing to exchange. When two hosts governed by
theirownpolicieswanttocommunicate,theyneedsome
mechanism for determining what, if any, kinds of traffic
thecombinedeffectsofoneanother’spoliciesarepermit-
ted. Again, IPsec itself does not provide such a mecha-
nism;whenahostattemptstocreateanSA,itmustknow
in advancethat the policyonthe remote hostwill acceptit. Theoperationtheneithersucceedsorfails. Whilethis whether a packet falls under the scope of some Security
may be sufficient for small VPNs and other applications Association (SA). SAs contain and manage the key ma-
where both peers are under the same administrativecon- terialrequiredtoperformnetwork-layersecurityprotocol
trol, it does not scale to larger-scaleapplications such as transforms. Howthen,doSAsgetcreated?
publicservers. The obvious approach is to trigger the creation of a
new SA whenevercommunication with a new host is at-
1.2.RelatedWork
tempted, if that attempt would failthe packet-levelsecu-
TheIKEspecification[11]makesuseoftheSubjectAl- ritypolicy. Theprotocolwouldbebasedonapublic-key
ternateNamefieldinX.509[8]certificatestoencodethe orNeedham-Schroeder[18]scheme.
packetselectorthecertificateholdermayuseduringIKE Unfortunately, protocols that merely arrange for pack-
QuickMode. Beyondthis,nostandardwayhasyetbeen ets to be protected under security associations do noth-
defined for negotiating, exchanging, and otherwise han- ing to address the problem of enforcing a policy regard-
dlingIPsecsecuritypolicy. ing the flow of incoming or outgoing traffic. Recall that
[20] defines a protocol for dynamically discovering, policycontrolisacentralmotivatingfactorfortheuseof
accessing, and processing security policy information. network-layersecurityprotocolsinthefirstplace.
Hostsandnetworksbelongtosecuritydomains,andpol- Ingeneral,andrathersurprisingly,securityassociation
icy servers are responsible for servicing these domains. policyislargelyanopenproblem–onewithveryimpor-
The protocol used is similar in some ways to the DNS tantpracticalsecurityimplicationsand withthepotential
protocol. ThisprotocolisservingasthebasisoftheIETF to provide a solid framework for analysis of network se-
IPSecurityPolicyWorkingGroup. curityproperties.
[9]describesalanguageforspecifyingcommunication Fortunately,theproblemofpolicymanagementforse-
securitypolicies,heavilyorientedtowardIPsecandIKE. curityassociationscanbedistinguishedinseveralimpor-
SPSL is based on the Routing Policy Specification Lan- tantwaysfromtheproblemoffilteringindividualpackets:
guage(RPSL)[1]. WhileSPSLoffersconsiderableflexi-
bilityinspecifyingIPsecsecuritypolicies,itdoesnotad-
dressdelegationofauthority,norisiteasilyextensibleto
accommodateothertypesofapplications.
AnumberofotherInternetDraftshavebeenpublished
definingvariousdirectoryschemataforIPsecpolicy.Sim-
ilardirectory-basedworkhasalsostartedinthecontextof
theIETFPolicyFrameworkWorkingGroup. Itisstilltoo
earlytodeterminewhattheresultsofthateffortwillbe.
COPS [5] defines a simple client/server protocol
whereinaPolicyEnforcementPoint(PEP)communicates
withaPolicyDecisionPoint(PDP)inordertodetermine
whetherarequestedactionispermissible.COPSismostly
orientedtowardadmission controlfor RSVP [6]or simi-
larprotocols. ItisnotclearwhatitsapplicabilitytoIPsec
securitypolicywouldbe.
RADIUS[19]anditsproposedsuccessor,DIAMETER
[7],aresimilarinsomewaystoCOPS.Theyrequirecom-
munication with a policy server, which is supplied with
allnecessaryinformationandisdependedupontomakea
policy-baseddecision. Bothprotocolsareorientedtoward
providingAccounting,Authentication,andAuthorization
servicesfordial-upandroamingusers.
We first proposed the notion of using a trust manage-
ment system for network-layer security policy control in
[4].
2. TrustManagement forIPsec
A basic parameter of the packet processing problems
mentioned in the previous section is the question of
(cid:2)
SAs tend to berather long-lived; there islocality of
reference insofar as hosts that have exchanged one
packetareverylikelytoalsoexchangeothersinthe
nearfuture.
(cid:2)
It is acceptable that policy controls on SA creation
should require substantially more resources than
couldbeexpendedonprocessingeverypacket(e.g.,
publickeyoperations,severalpacketexchanges,pol-
icyevaluation,etc.).
(cid:2)
The result of negotiating an SA between two hosts
can provide (among other things) parameters for
more efficient, lower-level packet policy (filtering)
operations.
Thetrust-managementapproach[3]forcheckingcom-
pliancewithsecuritypolicyprovidesexactlytheinterface
andabstractionsrequiredhere.
2.1.TheKeyNoteTrustManagementSystem
Becausewemakeextensiveuseoftheconceptsoftrust
management, and especially the KeyNote language, we
provideabriefreviewofthoseconceptshere.
Thenotionoftrustmanagementwasintroducedin[3].
Atrust-managementsystemprovidesastandardinterface
that applications can use to test whether potentially dan-
gerousactionscomplywithlocalsecuritypolicies.
More formally, trust-management systems are charac-
terizedby:(cid:2)
A method for describing actions, which are opera-
tions with security consequences that areto be con-
trolledbythesystem.
(cid:2)
A mechanism for identifying principals, which are
entitiesthatcanbeauthorizedtoperformactions.
(cid:2)
A language for specifying application policies,
which govern the actions that principals are autho-
rizedtoperform.
(cid:2)
A language for specifying credentials, which allow
principals to delegate authorization to other princi-
pals
(cid:2)
accordingtotherulesgivenintheapplication’slocalpol-
icy.
KeyNoteassertionsarewritteninASCIIandcontaina
collection of structured fields that describe which princi-
pal is being authorized (the Licensee), who is doing the
authorizing(theAuthorizer)andapredicatethatteststhe
actionattributes(theConditions).Forexample:
Authorizer: "POLICY"
Licensees: "Borris Yeltsin"
Conditions:
EmailAddress == "yeltsin@kremvax.ru"
A compliance checker, which providesa service for
means thatthe “POLICY” principalauthorizes the“Bor-
determining how an action requested by principals
ris Yeltsin” principal to do any action in which the
should be handled, given a policy and a set of cre-
attribute called “EmailAddress” is equal to the string
dentials.
“yeltsin@kremvax.ru”. An action is authorized if asser-
tionsthatapprovetheactioncanlinkthe“POLICY”prin-
KeyNoteisasimpleandflexibletrust-managementsys-
cipal with the principal that authorized the action. Prin-
temdesignedtoworkwellforavarietyofapplications.In
cipals can be public keys, which provides a natural way
applications using KeyNote, policies and credentials are
to use KeyNote to control operations over untrustworthy
writteninthesamelanguage. ThebasicunitofKeyNote
networkssuchastheInternet.
programming is the assertion. Assertions contain pro-
AcompletedescriptionoftheKeyNotelanguagecanbe
grammable predicates that operate on the requested at-
foundin[2].
tribute set and limit the actions that principals are al-
lowedto perform. KeyNoteassertions are small, highly-
2.2.KeyNoteControlforIPsec
structuredprograms.Authoritycanbedelegatedtoothers;
a digitally signed assertion canbe sent overanuntrusted
The problem of controlling IPsec SAs is easy to for-
networkandservethesameroleastraditionalcertificates.
mulate as a trust-management problem: the SA creation
Unlike traditional policy systems, policy in KeyNote is
process (usually a daemon running IKE) needs to check
expressedasacombinationofunsignedandsignedpolicy
for compliance whenever an SA is to be created. Here,
assertions (signed assertions are also called credentials).
theactionsrepresentthepacketfilteringrulesrequiredto
Thereisawidespectrumofpossiblecombinations;onthe
allow two hosts to conform to each other’s higher-level
oneextreme,allsystempolicyisexpressedintermsoflo-
policies.
cal(unsigned)assertions. Ontheotherextreme,allpolicy
This leads naturally to a framework for trust manage-
isexpressedassigned assertions, withonly onerule(the
mentforIPsec:
root ofthe policy)being anunsigned assertion thatdele-
gatestooneormoretrustedentities. Theintegrityofeach
signedassertionisguaranteedbyitssignature; therefore,
thereisnoneedforthesetobestoredwithinthesecurity
perimeterofthesystem.
KeyNoteallowsthecreationofarbitrarilysophisticated
security policies, in which entities (which can be identi-
fiedbycryptographicpublickeys)canbegrantedlimited
authorizationtoperformspecifickindsoftrustedactions.
Whena“dangerous”actionisrequestedofaKeyNote-
basedapplication,theapplicationsubmitsadescriptionof
the action along with a copy of its local security policy
totheKeyNoteinterpreter. Applicationsdescribeactions
to KeyNote with a set of attribute/value pairs (called an
actionattributesetinKeyNoteterminology)thatdescribe
the context and consequences of security-critical opera-
tions. KeyNote then “approves” or “rejects” the action
(cid:2)
EachhosthasitsownKeyNote-specifiedpolicygov-
erningSAcreation. Thispolicydescribestheclasses
of packets and under what circumstances the host
will initiate SA creation with other hosts, and also
what types of SAs it is willing to allow other hosts
toestablish(forexample,whetherencryptionwillbe
usedandifsowhatalgorithmsareacceptable).
(cid:2)
When two hosts discover that they require an SA,
they each propose to the other the “least powerful”
packet-filtering rules that would enable them to ac-
complish their communication objective. Each host
sendsproposedpacketfilterrules,alongwithcreden-
tials(certificates)thatsupporttheproposal. Anydel-
egationstructurebetweenthesecredentialsisentirely
implementation dependent, and might include thearbitrary web-of-trust, globally trusted third-parties,
such as CertificationAuthorities (CAs), or anything
inbetween.
(cid:2)
wecallPolicyQueryProtocol(PQP),toacquireorupdate
credentials relevantto a specific intended IKE exchange.
The initiator presents a public key to the responder and
asks for anycredentials where the keyappears in theLi-
Each host queries its KeyNote interpreter to deter-
censeesfield. Bystartingfromtheinitiator’sownkey(or
mine whether the proposed packet filters comply
fromsomekeythatdelegatestotheinitiator),itispossible
withlocalpolicyand,iftheydo,createstheSAcon-
toacquireallcredentialsthattheresponderhasknowledge
tainingthespecifiedfilters.
ofthatmaybeofusetotheinitiator. Therespondermay
Other SA properties can also be subject to KeyNote- also provide pointers to other servers where the initiator
controlledpolicy. Forexample,theSApolicymayspec- may find relevant credentials; in fact, the responder may
ifyacceptablecryptographicalgorithmsandkeysizes,the justprovideapointertosomeotherserverthatholdscre-
lifetimeoftheSA,loggingandaccountingrequirements. dentialsforanadministrativedomain.
Ourarchitecturedividestheproblemofpolicymanage- Sincethecredentialsthemselvesaresigned,thereisno
mentintotwocomponents:packetfiltering,basedonrules needtoprovideadditionalsecurityguaranteesinthepro-
appliedto everypacket, and trustmanagement, basedon tocolitself.However,anylocalpoliciesthattheresponder
negotiatinganddecidingwhichoftheserules(andrelated discloses would have to be signed prior to being sent to
SAproperties,asnotedabove)aretrustworthyenoughto the initiator; the fact that a KeyNote policy“becomes” a
install. credentialsimplybyvirtueofbeingsignedisveryuseful
This distinction makes it possible to perform the per- here. Also,thePQPservermayhaveitsownpolicycon-
packet policy operations at high data rates while effec- cerningwhichhostsareallowedtoqueryforcredentials.
tivelyestablishingmore sophisticatedtrust-management- Thesecondproblemisdeterminingourowncapabilities
based policy controls over the traffic passing through a based on the credentials we hold. This is in some sense
securityendpoint. Havingsuchcontrolsinplacemakesit complementarytocompliancechecking;byanalyzingour
easier to specify security policy for a largenetwork, and credentialsinthecontextofourpeer’spolicy,itispossible
makes it especially natural to integrate automated policy to determine what types of actions are accepted by that
distributionmechanisms. peer. That is, we can discover what kinds of IPsec SA
proposals are accepted by a remote IKE daemon. This
2.3.PolicyDiscovery canassistinavoidingunnecessaryIKEexchanges(ifitis
knowninadvancethatnoSAsacceptablebybothparties
WhiletheIPseccompliance-checkingmodeldescribed
canbeagreedupon),ornarrowdownthesetofproposals
abovecanbeusedbyitselftoprovidesecuritypolicysup-
we send to our peer. Note that if a host reveals all the
portforIPsec,therearetwoadditionalissuesthatneedto
relevant credentials and policies using the Policy Query
beaddressedifsuchanarchitectureistobedeployedand
Protocol, another hostcan determinein advanceandoff-
used.
lineexactlywhatproposalsthathostwillaccept.
The first problem is credential discovery and acquisi-
Credentialcompositionisafairlystraightforward,ifpo-
tion. Althoughusersorhostsmaybeexpectedtomanage
tentially expensive,operation: we start byconstructing a
locallypoliciesandcredentialsthatdirectlyrefertothem,
graph from the peer’s policyto our key. We then reduce
theymaynotknowofintermediatecredentials(e.g.,those
eachclauseintheConditionsfieldofeachcredentialtoits
issuedbyadministrativeentities)thatmayberequiredby
DisjunctiveNormalForm(DNF).Todeterminetheautho-
thehostswithwhichtheywanttocommunicate. Consider
rizationinachainoftwocredentials,weneedtocompute
thecaseofalargeorganization,withtwolevelsofadmin-
the intersection of their authorizations. This is a linear-
istration;localpolicyonthefirewallstrustsonlythe“cor-
cost operation over the number of terms in the DNF ex-
porate security” key. Users obtain their credentials from
pressionsofthetwocredentials. Forlargerchains(or,in-
theirlocaladministrators,whoauthorizethemtoconnect
deed, arbitrary graphs of credentials), we can apply the
tospecificfirewalls. Thus,oneormoreintermediatecre-
same algorithmrecursively. Attheend ofthisoperation,
dentials delegating authority from corporate security to
wehavealistofacceptableproposals,whichtheIKEdae-
the various administrators is also needed if a user is to
moncanthen usetoconstructvalidSAproposalsforthe
be successfully authorized. Naturally, in more complex
remotehost.
networkconfigurations(suchasextranets)multiplelevels
Note that this operation istypically done by theinitia-
ofadministrationmaybepresent.Somemethodfordeter-
tor,andthushasnosignificantperformanceimpactonthe
mining what credentials are relevant and how to acquire
responder,whichmaybeabusysecuritygateway.
themisneeded.
Oursolutionisstraightforward: thehostthatintendsto
initiateanIKEexchangecanuseasimpleprotocol,which3. Implementation 3.2.AddingKeyNotePolicyControl
Because of the structure of the OpenBSD IPsec code,
To demonstrate our policy management scheme, we
we were able to add KeyNote policy control entirely by
implemented the architecture described in the previ-
modifyingtheisakmpddaemon;nomodificationstothe
ous section within the OpenBSD IPsec stack [16, 10].
kernelwererequired.
OpenBSD’sIKEimplementation(calledisakmpd)sup-
WheneveranewIPsecsecurityassociationisproposed
portsbothpassphraseandX.509certificateauthentication.
by a remote host (with the IKE protocol), our KeyNote-
We modified isakmpd to use KeyNote instead of the
basedisakmpdfirstcollectssecurity-relatedinformation
configuration-filebasedmechanismthatwasusedtovali-
about the exchange (from its exchange and sa struc-
datenewSecurityAssociations.
tures) and creates KeyNote attributes that describe the
proposedexchange. TheseattributesdescribewhatIPsec
3.1.TheOpenBSDIPsecArchitecture
protocolsarepresent, theencryption/authenticationalgo-
rithmsandparameters, theSAlifetime,timeofday,spe-
In this section we examine how the (unmodified)
cial SA characteristics such as tunneling, PFS, etc., the
OpenBSDIPsecimplementationinteractswithisakmpd
address of the remote host, and the packet selectors that
andhowpolicydecisionsarehandledandimplemented.
generatethefiltersthatgoverntheSA’straffic. Allthisin-
Outgoing packetsare processed in the ip output()
formationisderivedfromwhattheremotehostproposed
routine. The Security Policy Database (SPD)1 is con-
tous(orwhatweproposedtotheremotehost,depending
sulted, using information retrieved from the packet it-
onwhoinitiatedtheIKEexchange).
self(e.g.,source/destinationaddresses,transportprotocol,
Once passed to KeyNote, these attributes are avail-
ports,etc.) todeterminewhether,andwhatkindof,IPsec
able for use by policies (and credentials) in determining
processing is required. If no IPsec processing is neces-
whether a particular SA is acceptable or not. Recall that
saryorifthenecessarySAsareavailable,theappropriate
theConditionsfieldofaKeyNoteassertioncontainsanex-
courseofactionistaken,ultimatelyresultinginthepacket
pressionthatteststheattributespassedwiththequery.The
being transmitted. If the SPD indicates that the packet
IPsecKeyNoteattributeswerechosentoallowreasonably
shouldbeprotected,butnoSAsareavailable,isakmpd
natural, intuitive expression semantics. For example, to
is notified to establish the relevant SAs with the remote
checkthattheIKEexchangeisbeingperformedwiththe
host (or a security gateway, depending on what the SPD
peeratIPaddress192.168.1.1,apolicywouldincludethe
entryspecifies). Theinformationpassedtoisakmpdin-
test:
cludestheSPDfilterrulethatmatchedthepacket;thisis
usedintheIKEprotocoltoproposethepacketselectors2,
remote_ike_address == "192.168.001.001"
which describe the classes of packetsthat are acceptable
fortransmissionovertheSAtobeestablished. Thesame
while a policy that allows only the 3DES algorithm
type of processing occurs for incoming packets that are
wouldtestthat
notIPsec-protected,todeterminewhethertheyshouldbe
admitted;similartotheoutgoingcase,isakmpdmaybe esp_enc_alg == "3des"
notifiedtoestablishSAswiththeremotehost.
When an IPsec-protected packet is received, the rele- TheKeyNotesyntaxprovidestheexpectedcomposition
vant SA is located using information extracted from the rulesandbooleanoperatorsforcreatingcomplexexpres-
packet and the various protections are peeled off. The sionsthattestmultipleattributes.
packet is then processed as if it had just been received. The particular collection of attributes we chose allows
Note that the resulting, de-IPsec-ed packet may still be awiderangeofpossiblepolicies. Wedesignedtheimple-
subjecttolocalpolicy,asdeterminedbypacketfilterrules; mentation to make it easy to add other attributes, should
that is, just because a packet arrived secured does not that be required by the policies of applications that we
mean that it should be accepted. We discuss this issue failedtoanticipate. ApartiallistofKeyNoteattributesfor
furtherbelow. IPseciscontainedinAppendix4. Forthefulllist,consult
theOpenBSDmanualpages.
1TheSPDispartofallIPsecimplementations[15],andisverysim-
ilarinformtopacketfilters(andistypicallyimplementedasone). The 3.3.PoliciesforPassphraseAuthentication
typicalresultsofanSPDlookupareaccept,drop,and“IPsec-needed”.
Inthelattercase,moreinformationmaybeprovided,suchaswhatre- If passphrases are used as the IKE authentication
motepeertoestablishtheSAwith,andwhatlevelofprotectionisneeded
method, KeyNote policy control may be used to directly
(encryption,authentication).
2Theseareapairofnetworkprefixandnetmasktuplesthatdescribe authorizetheholdersofthepassphrases. Passphrasesare
thetypesofpacketsthatareallowedtousetheSA. encodedasKeyNoteprincipalsbytakingtheASCIIstringcorresponding to the passphrase prefixed with the string This method offers the most flexibility in policy specifi-
“passphrase:” Thus, the following policy would allow cation,asitallowsprincipalstofurtherdelegateauthority
anyone knowing the passphrase “foobar” to establish an toothersthrougharbitrarilycomplexgraphsofauthoriza-
SAwiththeESP[14]protocol. tion. AnysignedKeyNotecredentialsreceivedduringthe
IKE exchange are passed to the KeyNote interpreter di-
Authorizer: "POLICY" rectlyaspartofthequery.
Licensees: "passphrase:foobar" KeyNotecredentialsareespeciallyusefulintheremote
Conditions: administrationcase,wherethepoliciesofmanyIPsecend-
app domain == "IPsec Policy" pointsarecontrolledbyacentraladministrator. Here,the
&& esp present == "yes" ; policy of each host would delegate all authority to the
public key of the central administrator. The administra-
torwouldthenissuecredentialsthatcontainthedetailsof
Using the passphrase: tag requires policies to
thepolicyunderwhichtheywereissued.Thesecredentail
be kept private. To avoid this, a hashed version of
arepresentedaspartofeachIKEexchangebyanyhostre-
the passphrase may be used instead (using for exam-
questingaccess. Thiseliminatestheneedtoupdatelarge
ple the passphrase-sha1-hex: prefix). In the
numbersofmachinesasthedetailsoforganizationalpoli-
previousexample, this would bepassphrase-sha1-
cieschange. Addinganewhostisaccomplishedbyhav-
hex:8843d7f92416211de9ebb963ff4ce2812-
ingtheadministratorissueanewcredentialforthathost;
5932878).
thathostmaythenusethenewly-issuedcredentialtocom-
municatewithanyotherhostthatobeystheabovepolicy.
3.4.PoliciesforX.509-basedAuthentication
No policy changes are necessary to these hosts. Revok-
More interesting is the interaction between KeyNote ing access to a host is implemented through short-lived
policy and X.509 public-key certificates for authentica- credentials. New credentials are made available periodi-
tion. Most IKE implementations (including ours) allow cally through a WWW or FTP server; clients can down-
the use of X.509 certificates for authentication. Further- load them from there, without any security implications
more, there exist a number of commercial tools that let (since the credentials are signed, their integrity is guar-
administrators manage large collections of users using anteed). Ifcredentialconfidentialityisanissue,thesecre-
X.509. Allowing for interoperability with these imple- dentialscouldbeencryptedwiththepublickeyoftheuser
mentationsisagoodtestofourarchitectureandcanmake beforetheyaremadeavailable.
transitiontoaKeyNote-basedinfrastructureconsiderably Regardless of the authentication method in use,
smoother. isakmpdcallsKeyNotetodeterminewhethereachpro-
Implementing this interoperability is straightforward: posedSAshouldbeestablished. Aftertakingintoconsid-
KeyNote policies may be used to delegate directly to eration policies, credentials, and the attributes pertinent
X.509 certificates. The principals specified may be the totheSA,KeyNotereturnsapositiveornegativeanswer.
certificates themselves (in pseudo-MIME format, using In the former case, the protocol exchange is allowed to
the x509-base64: prefix), the subject public key, or proceed asusual. Inthe latter, aninformational message
theSubjectCanonicalName. AnexampleisgiveninFig- is sent to the remote IKE daemon and the exchange is
ure3.4. dropped. Notethat, ifanadministratorweretomanually
ForeachX.509certificatereceivedandverifiedaspart establish SPD rules (by directly manipulating the SPD),
ofanIKEexchange,anadhocKeyNotecredentialisgen- KeyNoteandtheSPDmightdisagree;inthatcase,noSA
erated. This credential maps the Issuer/Subject keys of would ever be established and no packets would be sent
the X.509 certificate (from the respective fields) to Au- outforthatcommunicationflow(sincetheSPDwouldre-
thorizer/Licensees keys in KeyNote. Thus, as chains of quireanSA).
X.509 certificates are formed during regular operation, The basic data flows for KeyNote-controlled IPsec in-
correspondingchainsofKeyNotecredentialsareformed. put and output processing are given in Figures 2 and 3,
ThisallowspoliciestodelegatetoaCAandhavethesame respectively.
restrictionsapplytoalluserscertifiedbythatCA.Specific Inputprocessingbeginswithapacketarrivingatanet-
usersmaybegrantedmoreprivilegesbydirectauthoriza- work interface (#1 in Figure 2). The Security Policy
tioninthehost’spolicy. Databaseisconsulted(#2)andoneofthreeactionsisfol-
lowed. If the packet is an IPsec packet, it is sent (#3a)
3.5.PoliciesforKeyNoteCredentials to the IPsec processing code, which will consult the SA
Database (#11) to process the packet; the decapsulated
KeyNotecredentialsmaybepasseddirectlyduringthe
packet is then fed back to the IP input queue (#12). If
IKEexchange, inthe samemanner as X.509certificates.Authorizer: "POLICY"
Licensees: "DN:/CN=Certification Authority Foo/Email=ca@foo.com"
Conditions: ...
Figure1.SamplecredentialwithX.509DNasLicensee
Kernel User Mode
12: Feed back to input processing
11: consult SA db
IPSec Processing
SA Database
9: update SA database
4: Query SA Database
3a: Process
3b: Send to
t or ra n ds isp co ar rt d, .route,
SA Setup 6: Initiate IKE IKE Daemon
7: Do IKE exchange
3c: Trigger SA setup
8: consult policies/credentials
2. Filters applied
IP Input routine 5: Consult policy KeyNote Interpreter
8a: update policies/credentials
10: update filter rules
1: Packet arrives
(KeyNote Language)
SPD
Policies&credentials
Figure2.KeyNote-ControlledIPsecInputProcessing
theSPDsaysthatthepacketshouldjustbeaccepted,itis essary based on the information negotiated by IKE. The
sent (#3b) to the corresponding higher-layer protocol, or unprotectedpacketthattriggeredtheSAestablishmentis
forwarded,asappropriate. IftheSPDsaysthatthepacket dropped.
shouldbedropped,nofurtherprocessingisdone. Other- A host’s local policy is given in a text file
wise(#3c),theSecurityAssociationsetupprocessistrig- (/etc/isakmpd.policy)thatcontainsKeyNotepol-
gered. The SA Database is consulted (#4); if an SA is icyassertions.
foundthere,thepacketisdroppedbecauseitshouldhave Output processing starts when a packet arrives (#1 in
already been sent as an IPsec packet (and it was not, or Figure2)attheIPoutputcodefromeitherahigher-level
path #3a would have been followed). Next, the Policies protocol or fromthe forwardingcode. TheSecurity Pol-
andCredentialsdatabaseisconsulted(#5);thisisdoneby icy Database is consulted (#2) to determine whether the
calling the KeyNote interpreter, supplying it the relevant packetshouldbeprotectedwithIPsecornot;ifnoprotec-
detailsofthepacket(addresses,protocol,ports,etc.).The tion is needed, the packet is simply sent out (#3a). Oth-
KeyNoteinterpreter,inturn,consultsitsdatabaseofpoli- erwise, it is sent to the IPsec processing code (#3b). A
cies and credentials, and determines whether the packet lookup(#4)intheSAdatabasedetermineswhetheranSA
should be just accepted, dropped, or needs IPsec protec- forthispacketalreadyexists;ifso,theappropriatetrans-
tion. Ifthelatteristhecase,theIKEdaemonistriggered formsareappliedandtheresultingpacketisoutput(#5a).
(#6). It establishes SAs with its peer (#7), during which If an SA did not exist, the SA setup process is invoked
processitwillalsoneedtoconsultthepolicyandcreden- (#5b).Thesystempolicy(ascontainedintheSPD)iscon-
tialsdatabase(#8),andmayalsoupdateitwithadditional sulted(#6), andifpolicyrelevanttothispacketisfound,
credentials acquired during the IKE exchange. The SA theIKEexchangeistriggered(#7),otherwisethepacketis
and SPD Databases are then updated (#9, #10) as nec- simplydropped. DuringtheIKEexchange(#8),thelocalKernel User Mode
1: Packet arrives
IP Output routine
SA Database
3b: IPSec possible
11: update SA database
IPSec Processing
4: consult SA db
8: Do IKE exchange
SA Setup 7: Initiate IKE IKE Daemon
5b: Trigger SA setup
9: consult policies/credentials
6: Consult policy
KeyNote Interpreter
10: update policies/credentials
5a: SA fully set up, 12: update filter rules
process and output
3a: No IPSec processing needed
(KeyNote Language)
2: Consult SPD SPD Policies&credentials
Figure3.KeyNote-ControlledIPsecOutputProcessing
policyandcredentialsareconsulted(#9),andanycreden- negotiated, or when new IPsec SAs are established, the
tialsfetchedfromthepeerduringtheexchangedaresub- newpolicywillautomaticallybetakenintoconsideration.
sequently stored (#10) in the local database. If the IKE If we want to new policy to be applied to existing IPsec
exchange results in SAs being created, these are stored SAs,wecansimplyexaminetheexistingSAsinthecon-
back in the SA database (#11). Finally, the SPD is up- textofthenewpolicy,pretendingwearenowestablishing
dated (#12) if necessary, and subsequent packets can be them. IftheupdatedpolicypermitstheoldSAs,nofurther
processed(theoriginalunprotectedpacketisdropped). actionisrequired;otherwise,theyaredeleted.
It should beobviousfrom theabovethat, in our archi-
tecture, the SPD has become a policy cache; the “real” 3.7.Performance
policy is expressed in terms of KeyNote assertions and
TheoverheadofKeyNoteintheIKEexchangesisneg-
credentials. Therearetwowaysofpopulatingthecache.
ligible compared to the cost of performing public-key
The first, described above, is to populate it on-demand.
operations. Assertion evaluation (without any crypto-
If a filter rule does not exist in the SPD, KeyNote is in-
graphic verification) is approximately 120 microseconds
vokedtodeterminewhatshouldbedonewiththepacket;
on a modern Pentium processor. Because evaluating the
based on the response from KeyNote, a rule is installed
base KeyNote policies themselves does not require the
in the SPD that makes further KeyNote queries unnec-
verificationofdigitalsignatures,theKeyNotecompliance
essary. The second approach is to analyze all policies
checkisgenerallyveryfast: withasmallnumberofpol-
at startup time and populate the SPD accordingly. This
icy assertions, initialization and verification overhead is
avoidsthecostofacross-domaincall(fromthekernelto
approximately130microseconds. Thisnumberincreases
a userland policy daemon) per cache miss, but requires
linearlywiththesizeandthenumberofpolicyassertions
re-initializationoftheSPDeverytimethepolicychanges.
that are actually evaluated, each such assertion adding
approximately 20 microseconds. The generation of the
3.6.PolicyUpdates
shadowdelegationtreeisalsoverylowcost. Whenusing
Changing policy in the simple case is straightfor- KeyNote credentials for both authentication and policy
ward: the new policies are placed in isakmpd.conf. specification,thecostofpublic-keysignatureverification
WhenexistingIPsecSAsexpireandaresubsequentlyre- is incurred. This cost is identical to that of the standardX.509 case (and indeed to that of any other public-key corporatenetworkovertheInternet;suchapolicymay,for
authentication mechanism). Signatures in KeyNote cre- example,allowtheuseofclear-textpasswordsonlyiftraf-
dentialsareverifiedasneededandonlythefirsttimethey ficisprotectedwithIPSECorsometransport-layersecu-
are used — the verification result is cached and reused. rity protocol (e.g., SSH [21]). Multi-application policies
Credential expiration is handled by the general KeyNote would, ofcourse,requireembeddingpolicycontrolsinto
processing, as part of the Conditions field; thus policies eitheranintermediatesecurityenforcementnode(suchas
andcredentialsthathaveexpireddonotcontributeinau- afirewall)orintotheendapplicationsandhosts[13].This
thorizinganSAandnospecialhandlingisneeded. Inall approachisthesubjectofongoingresearch.
cases,thecostofKeyNotepolicyprocessingisseveralor- Finally,iftrust-managementpoliciesandcredentialsare
ders of magnitude lower than the cost of performing the built into the network security infrastructure, it may be
public-keyoperationsthatitiscontrolling. possible to use them as an “intermediate language” be-
KeyNote policy control contributed only a negligible tweenthelower-levelprotocolandapplicationpolicylan-
increase in the code size of the OpenBSD IPsec imple- guages(e.g.,packet-filteringrules)andhigher-levelpolicy
mentation. To add KeyNote support to isakmpd we had specificationlanguagesandtools.Atranslationtoolmight
toaddabout1000linesof“glue”codetoisakmpd. Al- convertahigh-levelspecificationtothetrust-management
most all of this code is related to data structure manage- system’slanguage(andperhapsvice-versaaswell). Such
mentandformattingforcommunicatingwiththeKeyNote atoolcouldmakeuseofformalmethodstoverifyoren-
interpreter. For comparison, the rudimentary configura- forcethatthegeneratedpolicyhascertainproperties.This
tionfile-basedsystemthattheKeyNote-basedschemere- approachiscurrentlyunderinvestigationintheSTRONG-
places took approximately 300 lines of code. The entire MAN DARPA project at the University of Pennsylvania
original isakmpd itself was about 27000 lines of code andAT&TLabs.
(not including the cryptographic libraries). The original The KeyNote trust-management system is available in
isakmpdandtheKeyNoteextensionstoitarewrittenin anopensourcetoolkit;seetheKeyNotewebpageat
theClanguage. http://www.crypto.com/trustmgt/
for details. The KeyNote IPsec trust-management archi-
4. Conclusions,Future Work,Availability tectureisdistributedwithOpenBSD2.6(andlater),which
isavailablefrom
We have demonstrateda practical and useful approach
http://www.openbsd.org/
to managing trust in network-layer security. One of the
Becausethepolicymanagementfunctionalityisimple-
mostvaluablefeaturesoftrustmanagementforIPsecSA
mentedentirelyintheuser-levelisakmpd,thesystemis
policy management is its handling of policy delegation,
readilyportabletootherIPsecplatforms(especiallythose
which essentially unifies remote administrationwith cre-
basedonBSDimplementations).
dentialdistribution.
Perhaps the most important contribution of this work
References
isouruseofatwo levelpolicyspecificationhierarchyto
control IPsec traffic. At the packet level, we use a spe-
[1] C. Alaettinoglu, T. Bates, E. Gerich, D. Karrenberg,
cialized, very efficient, but less expressive filtering lan-
D. Meyer, M. Terpstra, and C. Villamizer. Routing Pol-
guagethatprovidesthebasiccontroloftrafficthroughthe
icy Specification Language (RPSL). Request for Com-
host. The installation of these packet filters, in turn, is
ments (Proposed Standard) 2280, Internet Engineering
controlledbyamoreexpressive,generalpurpose,butless
TaskForce,January1998.
efficient trust-management language. Our performance
[2] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D.
measurementsprovideencouragingevidencethatthisap- Keromytis. TheKeyNoteTrustManagementSystemVer-
proach is quite viable, providing a very high degree of sion2. InternetRFC2704,September1999.
control over traffic without the performance impact nor- [3] M.Blaze,J.Feigenbaum,andJ.Lacy. DecentralizedTrust
mallyassociatedwithhighlyexpressive,general purpose Management. In Proc. of the 17th Symposium on Secu-
mechanisms. Itispossiblethatthisapproachhasmeritin rityandPrivacy,pages164–173.IEEEComputerSociety
applicationsbeyondcontrollingnetwork-layersecurity. Press,LosAlamitos,1996.
[4] M.Blaze,J.Ioannidis,andA.Keromytis. TrustManage-
Because the KeyNote language on which this work is
mentandNetworkLayerSecurityProtocols. InProceed-
basedisapplication-independent,ourschemecanbeused
ings of the 1999 Cambridge Security Protocols Interna-
asthebasisforamorecomprehensivepolicymanagement
tionalWorkshop,1999.
architecturethattiestogetherdifferentaspectsofnetwork
[5] J.Boyle,R.Cohen,D.Durham,S.Herzog,R.Rajan,and
security with policies for IPsec and packet filtering. For A.Sastry.TheCOPS(CommonOpenPolicyService)Pro-
example,ageneralnetworksecuritypolicymightspecify tocol. Requestforcomments(proposedstandard),Internet
theacceptablemechanismsforremoteaccesstoaprivate EngineeringTaskForce,January2000.Authorizer: "POLICY"
[6] R.Braden,L.Zhang,S.Berson,S.Herzog,andS.Jamin.
Licensees: "passphrase:pedomellonamino"
ResourceReSerVationProtocol(RSVP)–Version1Func-
Conditions: app_domain == "IPsec policy"
tionalSpecification. InternetRFC2208,1997.
[7] P.Calhoun,A.Rubens,H.Akhtar,andE.Guttman.DIAM- && doi == "ipsec"
ETERBaseProtocol. InternetDraft,InternetEngineering && pfs == "yes"
TaskForce,Dec.1999. Workinprogress. && esp_present == "yes"
[8] CCITT. X.509:TheDirectoryAuthenticationFramework. && esp_enc_alg != "null"
InternationalTelecommunicationsUnion,Geneva,1989. && remote_filter ==
[9] M.Condell,C.Lynn,andJ.Zao. SecurityPolicySpecifi- "135.207.000.000-135.207.255.255"
cationLanguage. Internetdraft,InternetEngineeringTask && local_filter ==
Force,July1999. "198.001.004.0-198.001.004.255"
[10] N. Hallqvist and A. D. Keromytis. Implementing Inter-
&& remote_ike_address ==
net Key Exchange (IKE). In Proceedings of the Annual
"198.001.004.001" ;
USENIXTechnicalConference,FreenixTrack,pages201–
214,June2000.
Figure 4. Policy for Firewall of 135.207.0.0/16
[11] D. Harkins and D. Carrel. The Internet Key Exchange
Network.
(IKE). RequestforComments(ProposedStandard)2409,
InternetEngineeringTaskForce,Nov.1998.
[12] J. Ioannidis and M. Blaze. The Architecture and Imple-
mentation of Network-Layer Security Under Unix. In OpenBSD 2.6 and later). The most important attributes
FourthUsenixSecuritySymposiumProceedings.USENIX, include:
October1993.
[13] S.Ioannidis,A.Keromytis,S.Bellovin,andJ.Smith. Im- app domain isalwayssettoIPsec policy.
plementingaDistributedFirewall.InProceedingsofCom-
pfs is set to yes if a Diffie-Hellman exchange will be
puterandCommunicationsSecurity(CCS)2000,Novem-
ber2000. performedduringQuickMode,otherwiseitissetto
[14] S.KentandR.Atkinson. IPEncapsulatingSecurityPay- no.
load (ESP). Request for Comments (Proposed Standard)
2406,InternetEngineeringTaskForce,Nov.1998. ah present,esp present,comp present are set to yes
[15] S.KentandR.Atkinson. SecurityArchitecturefortheIn- ifanAH,ESP,orcompressionproposalwasreceived
ternet Protocol. Request for Comments (Proposed Stan- in IKE (or other key management protocol), and to
dard)2401,InternetEngineeringTaskForce,Nov.1998. nootherwise. Notethatmorethanoneofthesemay
[16] A.D.Keromytis,J.Ioannidis,andJ.M.Smith.Implement-
besettoyes,sinceitispossibleforanIKEproposal
ingIPsec. InProceedingsofGlobalInternet(GlobeCom)
to specify “SA bundles” (combinations of ESP and
’97,pages1948–1952,November1997.
[17] S.McCanneandV.Jacobson.ABSDPacketFilter:ANew AHthatmustbeappliedtogether).
ArchitectureforUser-levelPacketCapture.InProceedings
esp enc alg is set to one of des, des-iv64,
ofUSENIXWinterTechnicalConference, pages259–269,
SanDiego,California,Jan.1993.Usenix. 3des, rc4, idea and so on depending on the
[18] R.NeedhamandM.Schroeder. UsingEncryptionforAu- proposedencryptionalgorithmtobeusedinESP.
thenticationinLargeNetworksofComputers. Communi-
cationsoftheACM,21(12):993–998,December1978. local ike address,remote ike address are set to the
[19] C.Rigney, A.Rubens, W.Simpson, andS.Willens. Re- IPv4orIPv6address(expressedasadotted-decimal
moteAuthenticationDialInUserService(RADIUS). Re- notation with three-digit, zero-prefixed octets (e.g.,
quest for Comments (Proposed Standard) 2138, Internet 010.010.003.045))of the local interface used in the
EngineeringTaskForce,Apr.1997.
IKE exchange, and the address of the remote IKE
[20] L.SanchezandM.Condell. SecurityPolicySystem. In-
daemon,respectively.
ternet draft, work in progress, Internet Engineering Task
Force,November1998.
remote filter,local filter are settothe IPv4 orIPv6 ad-
[21] T.Ylonen,T.Kivinen,M.Saarinen,T.Rinne,andS.Lehti-
dressesproposedastheremoteandlocalUserIden-
nen. SSHProtocol Architecture. Internet Draft, Internet
EngineeringTaskForce,Feb.1999. Workinprogress. titiesinQuickMode. Hostaddresses,subnets,orad-
dress ranges may be expressed (and thus controlled
Appendix 1: KeyNote Action Attributes for bypolicy).
IPsec
Appendix2: Configuration Examples
All the data in the fields of IKE packets are passed to
Example1: SettingupaVPN
KeyNote as action attributes; these attributes are avail-
able to the Conditions sections of the KeyNote asser- In this example, two sites are connected over an en-
tions. Thereareanumberofattributesdefined(thecom- crypted tunnel. The authentication is done by a sim-
pletelistappearsintheisakmpd.policymanpagein ple passphrase. The policy in Figure 4 is present at oneof the firewalls. It specifies that packets between the
135.207.0.0/16 range of addresses and the 198.1.4.0/24
rangeofaddresseshavetobeprotectedbyESPusingen-
cryption. Theremotegateway,withwhichIKEwillnego-
tiate,is198.1.4.1.
Example2: RemoteAccess
Authority to allow remote access through the site fire-
walliscontrolledbyseveralsecurityofficers,eachoneof
whom is identified by a public key. A policy entry such
astheoneshowninFigure4existsforeachindividualse-
curityofficer,andisstoredintheisakmpdconfiguration
file of the firewall. Note the last line in the Conditions
field, whichrestrictsremote userstonegotiateonlyhost-
to-firewall SAs, without placing any restrictions to their
actualaddressotherwise.
Eachportablemachinethatistobeallowedinmusthold
acredentialsimilartothatshowninFigure4;thecreden-
tialissignedbyasecurityadministrator. Whenweaken-
cryption is used, theuser can only read and sende-mail;
whenstrongencryptionisused,allkindsoftrafficareal-
lowed. During the IKE exchange, the user’s isakmpd
providesthiscredentialtothefirewall,whichpassesiton
toKeyNote.Thepolicyandthecredential,takentogether,
expresstheoverallaccesspolicyfortheholderofkeyJIK.
Asimilarpolicy(andacorrespondingcredential)isissued
totheuser(andfirewall),toauthorizethereversedirection
(thefirewallneedstoprovetotheuserthatitisauthorized
bytheadministratortohandletraffictothe139.91.0.0/16
network).Authorizer: POLICY
Licensees: RAS_ADMIN_Key
Comment: delegate authority to a Remote Access administrator.
Local-Constants:
RAS_ADMIN_Key_A = "rsa-base64:MDgCMQDMiEBn89VCSR3ajxr0bNRC\
Audlz5724fUaW0uyi4r1oSq8PaSC2v9QGS+phGEahJ8CAwEAAQ=="
Conditions: app_domain == "IPsec policy"
&& doi == "ipsec"
&& pfs == "yes"
&& ah_present == "no"
&& esp_present == "yes"
&& esp_enc_alg == "3des" && esp_auth_alg == "hmac-sha"
&& esp_encapsulation == "tunnel"
&& local_filter == "139.091.000.000-139.91.255.255"
&& remote_ike_address == remote_filter ;
Figure5.Mobilehostlocalpolicy.
Authorizer: RAS_ADMIN_KEY_A
Licensees: JIK
Local-Constants:
RAS_ADMIN_KEY_A = "rsa-base64:MDgCMQDMiEBn89VCSR3ajxr0bNRC\
Audlz5724fUaW0uyi4r1oSq8PaSC2v9QGS+phGEahJ8CAwEAAQ=="
JIK = "x509-base64:MIICGDCCAYGgAwIBAgIBADANBgkqhkiG9w0BAQQ\
FADBSMQswCQYDVQQGEwJHQjEOMAwGA1UEChMFQmVuQ28xETAPBg\
NVBAMTCEJlbkNvIENBMSAwHgYJKoZIhvcNAQkBFhFiZW5AYWxnc\
m91cC5jby51azAeFw05OTEwMTEyMzA2MjJaFw05OTExMTAyMzA2\
MjJaMFIxCzAJBgNVBAYTAkdCMQ4wDAYDVQQKEwVCZW5DbzERMA8\
GA1UEAxMIQmVuQ28gQ0ExIDAeBgkqhkiG9w0BCQEWEWJlbkBhbG\
dyb3VwLmNvLnVrMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBg\
QDaCs+JAB6YRKAVkoi1NkOpE1V3syApjBj0Ahjq5HqYAACo1JhM\
+QsPwuSWCNhBT51HX6G6UzfY3mOUz/vou6MJ/wor8EdeTX4nucx\
NSz/r6XI262aXezAp+GdBviuJZx3Q67ON/IWYrB4QtvihI4bMn5\
E55nF6TKtUMJTdATvs/wIDAQABMA0GCSqGSIb3DQEBBAUAA4GBA\
MaQOSkaiR8id0h6Zo0VSB4HpBnjpWqz1jNG8N4RPN0W8muRA2b9\
85GNP1bkC3fK1ZPpFTB0A76lLn11CfhAf/gV1iz3ELlUHo5J8nx\
Pu6XfsGJm3HsXJOuvOog8Aean4ODo4KInuAsnbLzpGl0d+Jqa5u\
TZUxsyg4QOBwYEU92H"
Conditions: app_domain == "IPsec policy" && doi == "ipsec"
&& pfs == "yes"
&& esp_present == "yes" && ah_present == "no"
&& ( ( esp_enc_alg == "des" && esp_auth_alg == "hmac-md5"
&& remote_filter_proto == "tcp"
&& local_filter_proto == "tcp"
&& ( remote_filter_port == "25"
|| remote_filter_port == "110" ) )
|| ( esp_enc_alg == "3des" && esp_aut_alg == "hmac-sha" ) ) ;
Signature: "sig-rsa-sha1-base64:KhKUeJ6m1zF7kehwHb7W0xAQ8EkPNKbUqNhf/i+f\
ymBqjbzMy13OmH1itijbFLQJ"
Figure6.Mobilehostcredential.