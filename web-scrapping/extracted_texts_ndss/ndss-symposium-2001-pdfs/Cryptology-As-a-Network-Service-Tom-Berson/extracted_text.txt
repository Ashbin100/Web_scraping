Cryptography as a Network Service
TomBerson Drew Dean MattFranklin (cid:0) DianaSmetters MichaelSpreitzer†
Xerox PARC‡ Xerox PARC U.C.Davis Xerox PARC IBMResearch
berson@parc.xerox.com ddean@parc.xerox.com franklin@cs.ucdavis.edu smetters@parc.xerox.com mspreitz@us.ibm.com
Abstract
Cryptographyisapowerfultoolforbuildingsecuredis-
tributedsystems,albeitatsubstantialcomputationalcost.
Thisisespeciallytrue forpublic keycryptography. Con-
ventionalwisdomdictatesthatcryptographymustbedone
locallyinordertobesecure.Weargueforanapproachin
which public key cryptographic operations are provided
as a network service. This service operates over long-
lived associations secured by symmetric cryptography.
This network architecture amortizes the cost of special-
purpose cryptographic hardware across many users. We
describetheimplementationofsuchasystem,andperfor-
manceresultsweobtained.
1. Introduction
The received wisdom about cryptography is that it is
difficult and expensive. This has led to system designs
andengineeringtradeoffsthataimtominimizetheuseof
cryptography,andespeciallyofpublic-keyoperations,be-
causetheyarecomputationallyintensive.
But this received wisdom is no longer true. A great
many influences have already made cryptography easy
andcheap,andwillcontinuetomakeiteasierandcheaper.
Thesediverseinfluencesincludetheprofessionalizationof
cryptographers, thecreation oftextbooks andof courses,
the steady growth of computational power delivered by
the operation of Moore’s law, the algorithmic advances
madebycryptographicresearchersandengineers,therise
ofe-commerceandwirelessinfrastructureswhichhavea
seeminglyendlessappetiteforcryptographicservices,the
entryofmanyyoungpeopleintothefield,andtheeasing
of government export controls. We envisage a near fu-
turewherecryptographicoperationswillbeaspervasive,
(cid:1)
cheap, and unremarkable, as IP protocol operations have
becometoday.
Wearefollowingaparadigmofbuildingfuturegadgets
and services now,nomatterhowuneconomicalthat may
be,inordertostudytheimpactofthosegadgetsandser-
vicesonpeople,onorganizations,andonsystems.Weuse
thisapproachtoidentifyandexplorescientific,technical,
economicandsocialconsequencesofthispossiblefuture.
Webeginourexplorationofthecryptographicfutureby
making a canonical “expensive”cryptographic operation
– modular exponentiation – fast, cheap, and ubiquitous.
Instead of providing everyone with their own expensive
hardware cryptographic accelerator, we have taken the
novelapproachofprovidingcryptographicoperationsasa
networkservice. Wehavedesignedandbuiltafast“cryp-
toserver” for public-key operations. The cryptoserver is
equipped with a number of hardware cryptographic ac-
celerators,whichasaresultmaybesharedamongalarge
numberofclients.Thissharingallowsthecostofsuchac-
celeration hardwareto be amortized overa largenumber
of client machines, and allows evenclients who perform
only a moderate number of cryptographic operations to
benefitfromhardwarespeedupsbeforesuchtimeasaccel-
eratorsarecheapenoughtobepresentineverymachine.
Useofsuchaserverbenefitsclientsintwoways:thecryp-
toservermayhaveaccesstocryptographichardwarecapa-
ble of performing single cryptographic operations faster
than theycan beperformed bythe client, and second of-
floadingcryptographicoperationsfromtheclientCPUto
theseremoteacceleratorscanfreetheclientforotherop-
erations. Suchloadreductioncanbequitesignificant,es-
peciallygiventhatmostcryptographicacceleratorsonthe
market today are highly parallel multiprocessors capable
of processing many requests at once. Such benefits are
availabletoanyindividualmachineequippedwithitsown
local cryptographicaccelerator; poolingsame ina server
allows many client machines to benefit from such accel-
WorkdonewhileemployedatXeroxPARC;Presentaddress:Dept. erators in situationswhere itwould not bepossible to so
ofComputerScience,UCDavis,1ShieldsAve.,Davis,CA,95616. equipeachindividualclientmachine.
†WorkdonewhileemployedatXeroxPARC;Presentaddress:IBM
Wehavebuiltinterfacestothecryptoserverandmadeit
T.J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY
availabletoourcolleaguesviaourin-housenetwork.
10598.
‡Address:3333CoyoteHillRoad,PaloAlto,CA,94304The approach we have taken to allow such a service
to operate securely and efficiently is to trade expensive
cryptographicoperationsforcheapones,andtobootstrap
manyexpensivecryptographic operations performed fre-
quently on the cryptoserver by means of few expensive
operations performed rarely onthe client. Clientssecure
their communications with the cryptoserver using sym-
metric encryption(3DES). Thekeys used to providethis
secure channel are set up as part of a (relatively) long-
livedsecurityassociationbetweenclientandcryptoserver
– for the cost of one possibly expensive key exchange
ontheclientand(inexpensive)symmetricencryption,the
clientgetsbackmanycryptographicoperationsperformed
cheaplyontheserver.
Thiscryptoserverissomethingofatimemachine: ital-
lowsus todonowwhat we expecteveryonewill beable
todointhefuture. Toourdelight,wediscoveredthatthe
cryptoserverisusefulandeconomicaleveninthepresent.
Under reasonable assumptions, the amortized cost (in-
cludingnetworkbandwidth,hardware,development,etc.)
ofa1024bitmodularexponentiationis10 (cid:2) 4cents.
The rest of the paper is organized as follows: in Sec-
tion2wediscussourtrustmodel,inSection3,wepresent
ouroverallapproachtosharingcryptographicservicesand
discusspotentialapplicationsforthecryptoserver,inSec-
tion 4, we discuss our implementation, in Section 5, we
present performance results, in Section 6, we discuss re-
latedwork,inSection7wediscussfuturedirections,and
Section8concludes.
2. TrustModel
Outsourcing cryptography inherently raises questions
about the trustworthiness of the computation. In many
common cases, however, this is a non-issue because the
cryptoserver and its clients are within the same security
perimeter. Examples of this include a cryptoserver de-
ployedinanenterpriseintranetoracryptoserversupport-
ingSSL/TLSforagroupofwebserversalloperatedbya
singlecompany.Therearealargenumberofapplications
suchasthese,whereallofthemachinessharingonecryp-
toserveralready trust one another explicitly or implicitly
(given that they are all controlled by the same individu-
als).Insuchcases,sharingkeymaterialwitha(dedicated)
cryptoserver does not imply any further loss of security.
Fortheseandsimilarcases,usingacryptoserverisjustas
trustworthyasperformingthecomputationlocally,under
the assumption that the communication between the two
issecure. Inadditiontothesecurityprovidedbynetwork
topology (e.g., firewalls) [18], we use symmetric cryp-
tography to secure the link between the client and cryp-
toserver. We presentlyuse twokey3DES,whichcurrent
research[20]suggestshasequivalentsecuritytomodular
exponentiationwith (cid:3)
choicewillbeampleforsometimetocome. Thechoice
ofwireencryptionalgorithmisindependentofthesystem
architecture as a whole; it would be simple to substitute
anotherappropriateciphersuchasAES.
Whenthecryptoserverisunderdifferentadministrative
control,thetrustrelationshipbecomesmorecomplicated.
If the client is unwilling to trust the cryptoserverto per-
formthecomputationcorrectly,thenthere areafewpre-
cautions that could be taken. If the client’s public key
is low-exponent RSA, then verifying the computation is
much less costly than performing it directly. This verifi-
cationcouldbeperformedbytheclientitself, orshipped
off as a request to a second cryptoserver. Alternatively,
the original request could be shipped off to two or more
independent cryptoservers as a way to perform quality
checks on the output. More sophisticated strategies for
qualitychecksondistributedcomputationsappearin[24]
and[25]. Aclientunwillingtotrustasinglecryptoserver
withknowledgeofitsprivatekeymayusestandardsecret-
sharingtechniquestoseparateitskeyintomultipleparts,
and sendeachparttoadifferentcryptoserver. Theclient
then (relatively inexpensively)can recombine the results
returned byall theserversto produce a validdecryption.
Only if all the cryptoservers so used combine their in-
formationwilltheybeabletorecovertheclient’sprivate
key [5, 12]. Even more effectivetechniques can be used
in the case of discrete log-based cryptosystems, where a
fixed base is raised to manydifferentrandom exponents.
A“free”sourceofmodularexponentiationcanbeusedto
generatesuchvaluesefficiently[6]. Lastly,theclientmay
be unwilling to trust the cryptoserverwith knowledge of
thedata,i.e.,themessagetobesignedortheciphertextto
bedecrypted.Thiscanbeaccommodatedbyastraightfor-
ward application of “blinding” [8]. Note that blinding is
particularlyefficientforRSAsigningoperations,suchas
thoseusedintheSSL/TLSkeyexchange.
3. Applications
Wecanidentifythreemaintypesofapplicationsforour
fast cryptoservers: simple decryption/signature, bulk de-
cryption/signature,andsophisticatedcryptographicproto-
cols.
Inthefirstmaintypeofapplication,theclientneedsto
performasinglecryptographicoperation. Insteadofper-
forming it locally, the client sends a request to the cryp-
toserverto haveitdone remotely. The secondmain type
of application is similar to the first, except that manyre-
questsaresenttothecryptoserversimultaneously. These
can certainly be treated as independent simple requests.
However,there area numberofreasonstotreatthis type
ofapplicationseparately.Oneisthatthereareoftenamor-
tized efficiency gains that can be realized by specialized
4000bitmoduli. Wefeelthatthis cryptographichardwarewhenprocessinganumberofre-lated cryptographic operations, i.e., different keys pro- this kind of protocol includes [11, 17, 9]. The group
cessingidenticaldata,oridenticalkeysprocessingdiffer- authentication and group signature schemes can be com-
entdata. See[23]forathoroughsurveyofsomeofthese putedinawaythatisdata-dependentandblindable. That
methods.Second,webelievethatbulkencryptionandsig- is, sensitive information can be concealed from the fast
nature using one or more fast cryptoserverswill turn out cryptoserver, but cannot be performed as a generic pre-
tobequiteeffectiveincertain(bandwidth-unconstrained) computation
multicastscenarios. This third class of applications, those that go beyond
Thethirdmaintypeofapplicationexploitsthesameun- simple signing and decryption, are far and away the
derlying cryptographic operations that are performed for mostinteresting. Thosecryptographicprotocolsthathave
encryptionandsignature,butinordertoachievemoreso- gained current market acceptance (e.g., SSL/TLS) have
phisticatedsecuritygoals. Forexample,thereareanum- been designedspecificallytoreducethenumber ofmod-
ber of security protocolsfor which the degree of privacy ular exponentiations due to their high cost. The applica-
scales nearly linearly with the computational burden. A tions where use of a cryptoserver will provide the most
fastcryptoservercanperformthenecessarycomputations leverage are those few current protocols where comput-
ontheuser’sbehalf. Thecryptoservercouldbeownedby ing largenumbers ofmodular exponentiations isa major
a security service, or it could be an independent service bottleneck (e.g., in clusters of secure web servers). The
that sub-contracted the privacy-preserving computation. cryptoserver also will make it attractive to develop new
The cryptoserver needs to perform only ordinary public protocols unfettered by the need to keep modular expo-
keyoperationscomputationsthatareexactlywhatitcom- nentiations to a bare minimum. Such protocols have the
puteswhenitsignsanddecrypts. addedadvantagethatmanyofthemmayrequirethemod-
One example in this class is “Private Information Re- ular exponentiation of non-secret data; thus limiting the
trieval” [10]. The querier to a database hides his query trustrequirementsforuseofnetworkedcryptoservers.
among a plausible set of m possible queries, where m is
atunableparameter. Thiscanbedoneinana¨ıvewayby 4. Implementation
having the database return all m replies. There are more
The goalof ourimplementationis toefficientlyexport
sophisticated approaches thatgreatly reduce the commu-
thecomputationalresourcesofoneormorecryptographic
nication between the querier and the database. The first
accelerators to the network in a secure fashion. See Fig-
protocolforprivateinformationretrievalwasduetoChor,
ure1.
Goldreich, Kushilevitz,and Sudan. A newersolution [7]
requires the querier and the database to each perform
4.1.HardwareArchitecture
about m modular exponentiations, and reduces the com-
municationtooneroundofmessagesofsizelog m. This We built our cryptoserver out of generally available
example has many practical applications, such as allow- hardware, restricting our development efforts to custom
ingausertogetareal-timestockquotewithoutrevealing software. OurinitialprototypeusesaSunUltra-10work-
whichstockheisinterestedin,orqueryapatentdatabase station runningSolaris7withone Atalla AXL200accel-
withoutleakingthequerytoacompetitor.Itispossibleto erator and one nCipher nFast 300 PCI accelerator. The
combine the approach of [7] with random self-reduction AXL200 is advertised at 236 1024-bit private key RSA
techniquestohideallinformationaboutthequeriesfrom operationspersecondandhasamaximumthroughputof
thefastcryptoserveraswell[15]. Infact,thecallstothe 265 1024-bit private key RSA operations per second ac-
fast cryptoserver can be made independent of the actual cordingtoAtalla. ThenFastisratedat3001024-bitRSA
queries that will be made. When the computations are private key operations per second, assuming the use of
data-independentpre-computations,wesaythatthecom- Chineseremaindering. Ourdesigncleanlyfactorsthein-
putationsare“generic”. terface to the cryptographic accelerators from the rest of
A second example is group authentication. A partic- the software, so that multiple heterogeneous accelerator
ipant proves to be one of a plausible set of m possible boardscanbesupportedconcurrently.Oursoftwarehides,
participants without revealing which, where m is a tun- asmuchaspossible, thedifferencesinthe variousaccel-
able parameter. There is also a non-interactive version erator hardware. We chose the Sun workstation because
of this called a group signature. Existing cryptographic severalcryptographicacceleratorvendorssupportSolaris
solutions require the participant and the verifier to each onSPARChardware.
performaboutmmodularexponentiations, andexchange Aproductioncryptoserverwoulddifferfromthepresent
one round of communication of size m. This example configurationinthreemajoraspects:
hasmanypracticalapplications,includingtoenhancethe
1. It would likely be a multiprocessor, to more effi-
value of recommendation systems [16]. Early work on
cientlyhandleindependentcryptographicrequestsinUntrusted(cid:13) (cid:4)
Client(cid:13)
Network(cid:13)
(cid:5)
Client(cid:13) (cid:5)
Cryptographic Accelerator(cid:13) (cid:5)
Cryptographic Accelerator(cid:13) (cid:5)
Cryptography Server(cid:13) (cid:5)
Cryptographic Accelerator(cid:13) (cid:5)
Cryptographic Accelerator(cid:13) (cid:5)
Figure1.CryptoserverNetworkArchitecture
parallel. 3. It must be easy to incorporate additional crypto-
graphic acceleration capacity, and to take maximal
2. Symmetric cryptographic acceleration hardware
advantage of different types of cryptographic accel-
would be useful to speed encryption of client –
erators.
cryptoservercommunications,particularlyifDESor
triple-DES is desired. Faster block ciphers can be 4. It must be easy to plug in different mechanisms for
effectivelyaccommodatedinsoftware. negotiating security associations and protecting re-
questsonthenetwork.
3. Multiple public key accelerators would be used, for
adramaticthroughputincrease.
There are many possible choices for the software to
meetthegoalsdescribedabove.Weexplainourchoiceof
While these enhancements would undoubtingly increase
a communications substrate for the implementation. We
performance,ourpresentsystem,withverymodesthard-
describetheinterfacethatthecryptoserverpresentstoits
ware,alreadyperformsacceptablywell. Oursoftwarehas
clients. Finally,we explainour choiceofsoftwarearchi-
beenarchitectedwithscalabilityinmind,asdiscussedbe-
tecture.
low.
4.2.SoftwareArchitecture
4.2.1.Middleware
Ourarchitecturewasdesignedtomeetanumberofim-
Ourarchitectureplacesseveralfundamentalrequirements
portantgoals:
onthemessagingmiddlewarewechoose.Inordertobuild
aserverthatwillscaletosupportanumberofhighlyparal-
1. Itmustscaleeffectivelywiththefollowingfactors:
lelcryptographiccoprocessors,themiddlewarelayermust
(a) thenumberofclientrequests copewell witha multi-threadedserver. Ourbasicdesign
(b) theamountofcryptographichardwareavailable restsontheideaofbeingabletoleverageonepotentially
(itshould keepalluseful cryptographiccapac- expensivecryptographicoperationontheclientintomany
itybusyatalltimesgivensufficientrequests) on the server, by using that one expensive client opera-
tiontoestablishalong-termsecurityassociationbetween
(c) thenumberofindividualclients(securityasso-
client and server. The middlewareplatform we use must
ciations)beingmanagedandused
supportthe establishmentand maintenance ofsuchasso-
2. Individual client requests must have very low over- ciations,preferablyviaachoiceofprotocols. Finally,the
head,bothintermsofnetworkoperationsandsecu- middlewareplatform must allow for eithera connection-
rity association management; infrequent operations less transport (e.g.,UDP), or if it relies ona connection-
(security association negotiation) may be more ex- orientedtransportlayer(e.g.,TCP),itmustbeabletoei-
pensivetocompensate. thermaintainlong-termsecurityassociationsacrossmul-tiplesequentialTCPconnectionsfromthesameclientma- 4.2.2.SecurityAssociationNegotiation
chineormanagealargenumberofdormantTCPconnec-
There are a variety of approaches to generating security
tions from clients who may not be constantly active but
associations between client and cryptoserver. The very
wanttomaintaintheirsecurityassociations.
simplest is a pure keyexchange (e.g.,Diffie-Hellman)in
We chose to implement our system on top of Sun’s
ordertoproducea sharedsymmetrickeyusedtoencrypt
Transport Independent Remote Procedure Call (TI-RPC)
further communication between client and server. This
middleware.WechoseTI-RPCbecauseitsupported:
is the approachwe took in ourinitial implementation, as
we are not measuring key exchange performance. In a
1. multithreaded applications, for a simple path to
productionserver,weanticipatethatsessionkeyswillbe
buildingascalableservice;
generated every 1–24 hours per client in actual use. If
one uses a little care to make sure that keys expire uni-
2. through RPCSEC GSS [13] it supports the Generic
formly across an hour, even with 10,000 clients and 1
Security Service (GSS) API [21], so we could use
hour session expirations, this implies 3 key agreements
multiple authentication and encryption technologies
(i.e., modular exponentiations) per second, or 1% of the
andnegotiatelong-termsecurityassociations
capacity of a single AXL200. For a potential client, the
value of using a cryptoserver will be determined by the
3. anditsupporteddatagram(e.g.,UDP)transports. cost of negotiating a security association in combination
withthenumberofmodularexponentiationsacrosswhich
We preferred to use UDP because datagrams are a that association can be amortized (which will be deter-
much more natural match for the RPC paradigm than mined by the lifetime of the association and the rate of
connection-oriented transports (such as TCP), and be- operations performed by the client). Even a client who
causeaUDP-basedsolutionobviatedtheneedforcompli- performsonlyaverysmallnumberofcryptographicoper-
catedconnectionpoolmanagementlogic,aswedesireto ationsmayfinditworthwhiletousesuchaserverinorder
scalethenumberofclientspastthenumberofsocketde- tobeabletochoosewhentoperformthatcostlycryptog-
scriptorsavailableinasingleUNIXprocess(typicallyon raphy–atthetimeofsecurityassociationnegotiation,not
theorderof1024). UDPalsominimizestransport-related atthetimewhenthecryptographicoperationsthemselves
overhead for clients who may make infrequent calls to arerequired(whichmaybeatimewhentheclientissub-
thecryptoserver.Othermiddlewarechoices,mostnotably jecttomanyotherdemands).
CORBA, had one ormore substantial gapsin supporting To produce the performance numbers givenbelow, we
multithreadedapplicationsoverencrypteddatagramtrans- used the 192-bit Diffie-Hellman key agreement mecha-
ports. nism available with the distribution of TI-RPC. While
A major advantageofthis choice of middlewareis the thisprovideswoefullyinadequatesecurityforproduction
availability of RPCSEC GSS, an interface to the GSS- use [19], it is sufficient for the demonstration presented
API.GSSAPIisapluggablesecurityAPI,allowingacon- here.
sistent interface to a variety of different authentication Foroursymmetriccipher,weareusingtriple-DES.The
and encryption technologies. It is one of the few secu- performanceofouroverallsystemdependsonthechoice
rity technologies to explicitly support negotiation of se- of symmetric cipher. Using triple DES is a very conser-
curityassociationsoverconnectionlesstransports(though vative choice as almost all other ciphers will offer better
wecouldnegotiatesecurityassociationsout-of-bandover performance. The choice of symmetric cipher is deter-
a connected transport), and which is capable of securing minedbytheGSSmechanismused. Itwouldthereforebe
communications oversuch transports. Most importantly, simple changetouse ofAESinstead. Separatingoutthe
RPCSEC GSSnaturallysupportsthemostcentralideain wireencryptioninthiswayalsoallowsustoconsideruse
this paper: that of leveraging long-term security associ- of bulksymmetric cryptographicacceleratorhardwareto
ations to secure RPC-based requests with a minimum of handlecommunicationontheserver.
per-requestoverhead. Avarietyofmoreinterestingapproachestonegotiating
Another substantial advantage of TI-RPC is that it is securityassociationsareopentous. Intheminimalcase,
compatible on the wire with Sun’s ONC RPC, a widely aclientwouldliketohaveassurancethatthemachineitis
deployed RPC protocol that is at the heart of NFS. As communicatingwithisindeedatrustworthycryptoserver.
such,ONCRPCimplementationsareavailableonawide Therefore,theservermustbeabletoauthenticateitselfto
variety of platforms. Sun recently made TI-RPC source theclient. Iftheserviceisfreelyavailable,theclientneed
codeavailableunderaliberallicense,andasNFSv4will notauthenticateitselftotheserver(andindeedmaywant
bebuiltonTI-RPC,wehopeitwillbewidelyportedover toremainanonymous). Inordertoprovidethisbaselevel
thenextfewyears. offunctionality,weintendtouseapublic-keybasedGSSprogram QCS_RPC_PROG
(cid:6)
version QCS_RPC_VERS
(cid:6)
QCS_value_res RPCMODEXP(QCS_mod_exp_coef, QCS_bignum) = 1;
QCS_val_array_res RPCMODEXPARRAY(QCS_mod_exp_coef, QCS_bignum_array) = 2;
QCS_value_res RPCRSAPCRTEXP(QCS_rsa_private_key, QCS_bignum) = 3;
QCS_val_array_res RPCRSACRTARRAY(QCS_rsa_private_key,
QCS_bignum_array) = 4;
QCS_val_array_res RPCMULTIMODEXPARRAY(QCS_mod_exp_coef_array,
QCS_bignum_array) = 5;
int RPCGETMAXMODULUSLEN(void) = 7;
(cid:7) = 1;
(cid:7) = 0x20000105;
Figure2.RPCInterfacetothecryptoserver
mechanism (such as SPKM [1]) and use a Certification RAY are the corresponding calls, but using Chinese re-
Authoritytrustedbyallclientstocertifycryptoserversas maindered exponentiation. Finally, RPCMULTIMOD-
such. EXPARRAY provides a more communication efficient
Further variants on authentication mechanisms would mechanism for raising multiple bases to multiple pow-
use client authentication to control access to a cryp- ers (modulo the corresponding moduli). RPCMODEX-
toserver. PKI-based or Kerberos-based authentication PARRAYandRPCRSACRTARRAYareparticularlyuse-
mechanisms could be used to identify clients authorized ful for non-RSA operations where there are no security
to use the cryptoserver. Forms of digital cash could be issueswithdifferentkeysandsharedplaintext.
used to allow clients to pay for cryptographic operations
by both number of operations or quality of service (e.g., 4.2.4.ServerProgram
speed, latency, etc) – clients could set up an account as
part of security association negotiation, or could include WeimplementedthecryptoserverinC++. Fromasecurity
paymenttokensonaper-requestbasis. pointofview,wewouldprefertoimplementtheserverin
a safe language, such as Java. Unfortunately, there are
fourproblemswiththis:
4.2.3.ClientInterfacetotheCryptoserver
1. Lackofsuitablemiddleware;
Theclientinterfacetothecryptoserverisdesignedtoboth
allow sophisticated clients to most effectively use one 2. PoorperformanceofpresentJavacompilers;
or more such servers while minimizing network-related
overhead,andtomakeiteasytoincorporatecryptoserver 3. Difficulty of efficient interfacing to vendor libraries
supportintolegacyclientpackagessuchasOpenSSLand writteninC;
Microsoft’sCryptoAPIwithnochangesrequiredbypro-
4. LackofacompleteUnixsystemcallinterface.
grams which then in turn use those packages. The in-
terface is also designed to allow requests to be passed These restrictions narrowed the choice of language to C
through to the cryptographic hardware with a minimum orC++.
of copying, and to be broken up in a variety of ways to TheserverarchitecturecanbeseeninFigure3. Acon-
most efficiently use any sort of accelerator hardware we figurablenumberofthreadsareresponsiblefordecrypting
may incorporate in the cryptoserver. We have packaged and decoding incoming requests. As each request is de-
this interface as a C API implemented in a shared C++ crypted,itisplacedintoaworkitem,whichismovedonto
library. theworkqueue.Apoolofworkerthreadsarepreallocated
The interface to the cryptoserver is written in Sun’s to take requests from the work queue and hand them to
rpcgen RPC specification language. In Figure 2, we a cryptographic accelerator for processing. Once the ac-
show a slimmed down version of specification; non- celerator hasfinished processingthat request, theworker
essential details aboutdatatypes andbenchmarking sup- threadmovestherequestontothereplyqueue,andwaits
porthavebeenremoved.RPCMODEXPisasimplemod- forthenextrequesttoappearontheworkqueue. Thereis
ular exponentiation. RPCMODEXPARRAY provides a apoolofreplierthreads(again,configurableinsize)that
more efficient way to encrypt multiple values with the takesworkitems offthereplyqueue,encryptsthem, and
same key. RPCRSAPCRTEXP and RPCRSACRTAR- returnstheencryptedresultstotherequester.EmptyworkInternet(cid:13) (cid:8)
Request(cid:13) Request Handler Threads(cid:13)
Idle(cid:13) Work(cid:13) Reply(cid:13)
Cryptographic Accelerator(cid:13) (cid:5)
Reply(cid:13)
Reply Handler Threads(cid:13)
Worker Threads(cid:13) (cid:9)
Figure3.CryptoserverSoftwareArchitecture
itemsarethenplacedinanidlequeuetoallowforobject initializationrequiredbythehardwareitmanages,andcan
reuse. provideinformationtotheserveraboutthecapabilitiesof
Our software includes one additional important opti- that hardware (e.g., supported modulus lengths, whether
mization: the RPCs that take array arguments are bro- the hardware driver supports features like negativenum-
ken into multiple work items as they are placed on the bers directly or the shim is providing that feature, etc.).
work queue. This enables the separate operations to oc- Suchinformationcouldbeusedbytheserverformoreso-
curin parallel givenour currentcryptographic hardware. phisticated scheduling ofwork items onparticular accel-
Of course, the RPC cannot return untilall the results are erators. Theseshimlibrariesnormalizebyteorder,handle
available. Thisisimplementedbymakingoneworkitem support for negative numbers, exponents larger than the
becanonicalperRPCrequest,andnotmovingthecanoni- modulus, etc. Many hardware accelerators (and indeed
calworkitemontothereplyqueueuntilalltheoperations cryptographicsoftwarepackages)haveintermittentorno
arefinished. Theonlytimesuchautomaticparallelization support for such inputs, as they don’t occur when using
might be a disadvantageis if a hardwareaccelerator was standard RSA. However, as technologies like the cryp-
able to take advantage of repeated use of the same key toserverreducethecostofmodularexponentiations,cryp-
in order to speed up a group of operations. None of the tographic algorithms and protocolsconsidered toocostly
acceleratorswehaveworkedwithtodatetakeadvantage and complexfor practical use will be used, and these al-
ofanysuchoptions,butasthelatenciesoftheindividual gorithmsdonotrespectthesenarrowlimits.
cryptographic processors on these accelerator boards go Normalizing theappearanceofdifferenttypesofhard-
down(seebelow),andthefractionoftime spentinhost- ware in this way allows the server to transparently sup-
sidepreprocessingandcopyingofdatagoesup,suchop- port a heterogeneous collection of accelerators. It also
timizationsmaybecomeveryimportant. Ourarchitecture letsusremovefromtheserveranytask-specificlogic,and
isflexibleenoughtotakeadvantageoftheseoptimizations to compensate for any differences between the features
whentheybecomeimportant. supported bythe accelerator driversand the interfacewe
presenttocryptoserverclients.
Although we can normalize the software interface to
4.2.5.HardwareInterface eachboard,wecannotnormalizethehardwareitself.Each
board contains a number of cryptographic coprocessors,
In order to simplify the server, we use “shim” libraries
and has a different degree of intrinsic parallelism. Be-
to normalize the interfacethe serversees to each type of
cause the coprocessors chosen to populate each type of
cryptographichardwareacceleratorpresentinthesystem.
boardaredifferent,eachboardhasacharacteristiclatency
Each individual hardware “shim” is responsible for any(time required for a single operation). This means that a vendor libraries, which is likely to have been optimally
singlethreadmakingsequentialrequeststoasingleboard tuned for that class of device. A more interesting option
willseeanexponentiationratedeterminedbythatboard’s would be to implement such a server using a collection
latency.Thespeednumbersquotedforeachtypeofboard ofboardswithdifferentcharacteristicschosentooptimize
representthroughput;therateeachcoprocessoriscapable performance across a variety of conditions (bursts of re-
of, multipliedby the number ofprocessors on the board. quests, high constant load, occasional single requests).
Onlyaprocesssufficientlyparalleltomakefulluseofall Such a server would benefit from a more sophisticated
the processors on a board will see the board’s rated per- schedulingalgorithm.
formance. To maximize parallelism, we must allocate at least as
Each coprocessor also tackles the problem of modu- manyworkerthreadstoaboardastherearecryptographic
larexponentiationusingadifferentalgorithmandinternal coprocessors onthatboard. It turnsoutthat asyouscale
data format. The data formats will determine how much upthenumberofthreadssimultaneouslymakingrequests
copyingandre-orderingofinputdatamustbedonebefore ofasingleboard,performanceimprovessharplyuntilthe
arequestcanbesenttoacoprocessor.Thealgorithmwill number of threads matches the number of coprocessors.
determinehowmuchpreprocessingmustbedoneinahost Asyouincreasethenumberofthreadsbeyondthispoint,
library to prepare the request for a coprocessor, and also performance continues to improveslowly for a short pe-
how changes in input parameters will affect changes in riod,andthenplateaus. Giventhatatmaximumthrough-
coprocessorlatency(andhencethroughput). Asanexam- put, at anygivenmoment thenumber of threads blocked
ple, the choice of algorithm will control how the perfor- waitingforaresponsetoreturnfromacoprocessorshould
manceofthecoprocessorschangesasafunctionofexpo- beequaltothenumberofcoprocessorsonaboard, there
nentlength,andhencehowoptimizationssuchasChinese is some room for further processing (and plenty of host
remainderingaffectaboard’sperformance. CPUleft)asadditionalthreadscanbepreparingfuturere-
In order to hide the complexityof scheduling multiple questsforprocessingbytheboard(bothcopyingdataand
requestsontotheseparallel devices,cryptographicaccel- doing any mathematical pre-processing), and doing any
eratorvendorsprovideacertainamountofhostsoftware. requiredpost-processingofreturnedrequests(again,both
This usually consists of both libraries that take care of copying of data and mathematical post-processing, such
anynecessary host-based pre- and post-processing of re- as combining Chinese remaindered results). Allocating
quests(fordataformats,Montgomeryreduction,etc),and morethreadsthancanbefullyusedbybothpre-andpost-
programs/driversthatcanmanagerequestsfrommultiple processing and waiting on accelerators incurs little cost
client programs at once and schedule them for execution exceptatstartuptime;anysuchsurplusthreadssimplyre-
bythehardwarecoprocessors. main blocked waiting for work. We therefore allocate a
The cryptoservermust distribute requests across all of number of threads for eachboardslightly largerthan the
these board-specific schedulers. In order to maintain as minimumnecessary,basedontheintrinsicparallelismof
much hardware independence as possible, we currently each board and experimental tests of how board perfor-
implement a very simple algorithm. We independently mancescalesbeyondthisminimumnumber.
configure the number of worker threads the server uses Atstartup,theservertakesanargumentgivingiteither
tomanageeachcryptographicaccelerator(oreachpoolof asingleshimlibrarynameandnumberofthreads(ifitis
accelerators of a single type; frequently accelerator ven- toberunwithasingleboardtypeforbenchmarkingpur-
dorsprovideonelocalinterfacetoalloftheiraccelerators poses),orthenameofaconfigurationfilelistingmultiple
thatarepresentonamachine,andmanagedistributingre- shim libraries and corresponding thread counts. If there
questsacrossboards). Thisdependsbothontheinherent aremultiple boardsofaparticulartype present, theshim
parallelism of each accelerator board, and on the archi- library handles that transparently; the number of threads
tecture of the driver and any vendor libraries we use to allocatedtothatlibrarymustsimplybescaleduptomatch.
interfacewithit. Eachoftheseworkerthreads,whenfree,
pulls a work item off the work queue and presents that 5. Performance
itemtotheacceleratorassociatedwiththatthread. Given
Recall that our initial implementation of the cryp-
ourinterestinexperimentingwithavarietyofaccelerator
toserveris built arounda SunUltra-10 workstation, con-
types,thissimpleandflexibleschedulingalgorithmmakes
taining a 440 MHz UltraSparc IIi processor, with one
sense.Ahigh-volumeproductioncryptoservermightben-
Atalla AXL200 cryptographic accelerator and one nCi-
efitfromamoresophisticatedalgorithm. Ifsuchaserver
phernFast300PCI.TheUltra-10scores18.1onSPECint
isimplementedusingonlyasingletypeofcryptographic
95,theAXL200hasamaximumthroughputof2651024-
accelerator, this simple algorithm will end up relying on
bit RSAoperations persecond (withoutChinese remain-
the scheduling algorithm implemented bythe underlying
dering), and the nCipher has a maximum throughput of300 1024-bit RSA operations per second ( 93 ops/sec Board Threads noCRT w/CRT
without Chinese remaindering). For benchmarking pur- AXL200 1 10.85
poses,werancryptoserverclientsonadualprocessor,250 AXL200 25 265.98
MHz, 512 MB Sun UltraSparc (sans the Atalla board), nFast300 1 11.67 37.00
connectedviaswitched100Mbit/sEthernet. nFast300 10 92.40 288.92
nFast300 30 93.28 297.74
5.1.Microbenchmarks nFast300 32 93.30 299.97
In all our multithreaded benchmarks, all threads per- Table1.LocalAcceleratorThroughput(ops/sec)
form any necessary initialization code, and then line up
waiting for a signal. The last thread to finish its initial-
izationgetsthestarttime,andsignalsallthreadstostart. andanother5toreplies.) Wedonotpresentnumbersfor
Aseachthreadfinishes, itincrementsacounter. Thelast theAtallaboardaloneusingtheChineseRemainderTheo-
threadtofinishgetsthestoptime,andmeasuresoperation rem(CRT).ThetimetakenbytheAtallaboardtoprocess
rate as (operations per thread * thread count)/total time. a modular exponentiation rises linearly with the number
If each thread measures its own elapsed time, the sheer of bits in the exponent. There is therefore nooverallad-
amountoftimespentongettimeofdaysystemcallsstarts vantage to using CRT on a loaded Atalla board. We do
toaffecttheoverallmeasuredvalue.Similarly,itbecomes useCRTsupportontheAtallaboardtoallowrequeststo
difficulttoaccuratelymeasure thetime takenbya single beparallelizedatlowloadlevels,andtosupport2048-bit
operation. We calculate average rates below by measur- moduli. Inordertosimplifypresentationofresults, such
ingthetotaltimetakentohaveeachthreadperform1000 supportwasdisabledforthetestspresentedhere.Thenor-
1024-bitoperations. Eachsuchmeasurementof(number mal Atalla libraries simply ignore CRT coefficients and
ofthreads*1000operationsperthread)operationsiscon- processtheprivateexponentdirectly.
sidered one “block”. Final rate values are generated by We report below the latencies corresponding to the
averaging the times for 1-8 blocks, and dividing by the single-threaded measurements reported above. We then
total number of operations performed (block counts for report results for the same computation performed by a
each group of measurements are noted with those mea- multithreaded client of the cryptoserver. Measurements
surements). Throughputratesaregiveninoperations/sec. onthe cryptoserverclientare averagesof8blocks (3for
Asthevarianceoftheseaveragedblocktimesislow,and nCipher with CRT) of 1000 operations per thread, the
are noisy and difficult to interpret if presented as rates, variances are quite small. The cryptoserver was run in
we do not show variance data directly. All latencies are 3 configurations: with the Atalla board alone, with the
reportedinmilliseconds. nCipher board alone, and with both boards. This allows
Tomeasurethespeedofeachboardindividuallywhen more direct comparison to the local latencies measured
accessed locally, we wrote a multithreaded microbench- on the single boards. In the ideal case, the throughput
markthatrepeatedlyperformsamodularexponentiations for the 2-board configuration should be the sum of the
using our “shim” library for each board, and compares throughputsforeachboardusedalone. Inthepresentation
the result to the correct value. Each “shim” library (see of the single-threaded measurements below, we present
Section 4.2.5) talks directly to a local accelerator via the measurementsforthefirsttwocryptoserverconfigurations
boardvendor’suserlibraries. Thismeasurementprovides alone(asingle-threadedclientaccessingaservercontrol-
anestimateofthebaselinespeedoftheacceleratorboard, ling both boards will simply see the performance of that
and an independent confirmation of the speed rating by boardthatgottoitsrequestsfirst)Wereportnumbersboth
themanufacturer.Eachnumberbelowisin1024-bitoper- withandwithoutsecuringthewirewithtripleDES.
ations/sec, measured by having each thread perform one The table below lists the performance of the cryp-
blockof1000operations(numbersroundedto2decimal toserverusingamultithreadedclientapplication. Results
places). are divided according to whether the server was manag-
Based on measurements like those above, latency in- ing just the nCipher board, just theAtalla board, or both
formationgivenbelow,andinformationfromthevendors, boards.Resultsarealsodividedaccordingtowhetherwire
weknowthattheAtallaboardhas26cryptographiccopro- encryptionwasturnedon, and thetype ofrequest placed
cessors, while the nCipher board is using around 10. As by the client (with or without CRT, a single request per
notedabove,performancecontinuestoimproveslowlyas RPC or a multiple request – a batch of 3 requests per
thethreadcountisincreasedbeyondthenumberofcopro- RPC).Thenumberofclientthreadswaschoseninanat-
cessors. Wethereforeranthetestsbelowwith30threads tempttomaximizethroughput.
devoted to each accelerator board. (In all cases, 5 addi- Without wireencryption, oursoftwaredeliversthefull
tional threads were devoted to processing requests and, throughputoftheaccelerators. Addingtriple-DESincursMachine/Board Threads Latency(ms) Throughput(ops/s) Latencyw/CRT Throughputw/CRT
Localaccelerator:
AXL200 1 92.19 10.85
nFast300 1 85.68 11.67 27.03 37.00
RemoteCryptoserver:
AXL200only(insecure) 1 93.08 10.74
AXL200only(secure) 1 94.12 10.62
nFast300only(insecure) 1 86.78 11.52 28.27 35.37
nFast300only(secure) 1 88.12 11.35 29.86 33.49
Table2.Single-ThreadedPerformance
a 2% reduction in throughput. When the accelerator is CryptoserverConfiguration Threads Throughput
managingasingleboardalone,theSPARCUltra-10used AXL200only(insecure) 26 265.73
asaserverhasnotroublekeepingthatboardfullyloaded. AXL200(secure) 26 265.58
Eventhen,theloadonbothclientandserverisverylow. nFast300only(insecure) 26 93.20
Whenthecryptoservermanagesbothboardstogether,the nFast300(secure) 26 93.21
demands of managing input and output, as well as the nFast300(insecure,CRT) 26 299.41
hostsidepre-andpost-processingrequiredbyeachboard, nFast300(secure,CRT) 26 299.34
beginto outstrip our current server host. While process- Both(insecure) 70 354.01
ing1024-bitRSArequestsusingCRT,wecannotkeepup Both(secure) 70 354.17
with the total throughput of both boards (approximately Both(insecure,multi) 30 355.50
565ops/sec)withouteitherturningoffwireencryptionor Both(secure,multi) 30 355.55
batchingrequestsingroupsof3. Attemptstodososatu- Both(insecure,CRT) 70 560.60
ratedthecryptoserver’sCPU(notethatatthesametime, Both(insecure,CRT,multi) 30 563.94
the load on the client machine was still extremely low). Both(secure,CRT,multi) 30 562.25
Operatingatthesehighhostloadsalsoincreasedthevari-
abilityoftheresultsomewhat,tothedegreethatthediffer- Table3.Multi-ThreadedPerformance
ence between secure and non-secure trials began to blur.
This suggests that to scale beyond these two boards will
DanBoneh,MichaelMalkin,andTomWuthatgenerates
requireafasterormoreparallelserverhost,offloadingof
HTTPHEADrequestsoveraTLSconnection.
the wire encryption to a symmetric cryptographic copro-
Whilethesebenchmarksprogramsaresomewhatartifi-
cessor,orboth.
cial,theyaresmallenoughthatwecaneasilyunderstand
Inspiteofthisdifficulty,ingeneralthepenaltyforusing
theirbehavior.TheclientopensaTLSconnection(specif-
the cryptoserveris less than 3%. The fact that the client
ically not resuming a prior connection), and sends a 19
load remained extremely low, even when that one client
byteHTTPHEADrequest. Theserverreplieswitha107
machinewaspushingbothboardsatfullspeed,reinforces
byteanswer,andclosestheconnection. Thisisnearlythe
thevalueofthe cryptoservermerely inits roletooffload
worstcaseforTLS,asweareexchangingverylittledata
processing, without beginning to consider speed benefits
perRSA operation. However,since RSAperformanceis
offeredbyincreasedparallelismand(possibly)fastersin-
exactlywhatwearetryingtocharacterize, thisisexactly
glecryptographicoperations.
whatwewant.
Theexperimentalsetupisthesameasbefore. Forsim-
5.2.TLSPerformance
plicity of presentation, we only measured the AXL200
board. The results are shown in Table 4. In all cases,
Microbenchmarks help us characterize the details of
cryptoserver performance, but leave many unanswered
questions as to how the cryptoserver performs with real CryptoserverConfiguration Throughput
world tasks. We decided to benchmark the cryptoserver (connections/s)
with a client supporting the TLS protocol to get a better LocalAXL200 187.38
understanding of how a cryptoserver might accelerate a RemoteAXL200(secure) 244.68
secureWebserver.Wewroteasmall,multithreadedserver RemoteAXL200(insecure) 261.64
that uses OpenSSL to respond to HTTP HEAD requests
withafixedstring. Wehadabenchmarkclientwrittenby Table4.TLSPerformancethe TLS benchmark server ran with 30 threads and the
TLS benchmark client ran with 40 threads, i.e., it could
request up to 40 concurrent RSA operations on the TLS
server. With the TLS serverrunning locally, the server’s
CPUsaturated. Byusingaremotecryptoserver,through-
put actually increased, as we are able to take advantage
of the available parallelism. The insecure connection to
the cryptoserver enabled the client to use (cid:3)
modatinginter-andintra-requestparallelism,multiplere-
quest and reply handler threads to spread the symmetric
cryptographic load, etc.), the proof will be actually run-
ningthousandsofmodularexponentiationspersecondon
a suitable machine. This challenge will only increase as
the speed of accelerators increases and their latency for
singleoperationsgoesdown.
98% of an In our implementation, each request includes the
AXL200’s maximum throughput; with a secure connec- client’s private key. Alternatively, if the cryptoserveral-
tion,theclientexceeded92%ofanAXL200’smaximum readyknowstheclient’sprivatekey,thentherequestmay
throughput. include an authentication token that demonstrates who
the request is coming from and that the request is fresh.
6. RelatedWork Whilethiswouldrequireamoretrustworthycryptoserver,
itwouldreducethenetworkbandwidthrequiredbynearly
Network-attached cryptographic acceleration has only half. Thereareseveralcryptographicacceleratorproducts
been used in special cases so far. Rainbow Technolo- on the market that will maintain secure local storage of
gies has sold products in their CryptoSwift EN line for one or more private keys, and control access to them. It
severalyears,butitsnetworkconnectivityisnotsecured. would be a simple matter to provide shared network ac-
Thismakesitonlyappropriateforuseontrustworthynet- cesstosuchanacceleratorinthemannerpresentedabove.
works. In contrast, our approach is suitable for deploy- The cryptoserver offers interesting options for those
ment on any network with suitable availability – 1000 paranoid about their cryptographic operations. As our
1024-bit RSA operations per second requires approxi- server supports a heterogeneous collection of hardware
mately 4 Mbit/s of bandwidth; hardly a problem with acceleratorsrunningconcurrently,itwouldbeafairlysim-
common100Mbit/sEthernetinfrastructure. ple modification to use one accelerator to check the re-
Notethatinourapproachtheclientmusttrustthecryp- sults delivered by another. By using different accelera-
toserver with knowledge of his private key, and thus our tors, a single accelerator could not produce a doctored
approach is quite different from the harder and gener- result along with a doctored “inverse.” The tradeoff be-
ally unsolved problems of “server-aided cryptography,” tween paranoia and throughput could be easily managed
“remotely-keyed encryption” [2, 3, 22] or “computing by checking a user-selectable fraction of results. By se-
with encrypted data” [14]. We do this for practical rea- lectinghardwareacceleratorsdesignedandmanufactured
sons, aswe seekperformancelevelsasclosetoavailable indisjointcountries,nosinglegovernmentwouldbeina
hardwareaspossible. Iftrulypracticalserver-aidedcryp- positiontocompromiseaRSAoperation. Suchasystem
tographic techniques become available, then we are ide- wouldbehighlyresistanttomanyattacks,includingfault
allypositionedtoaccommodatethem. injection[4].
Asimilarlevelofparanoiaisavailabletoclients,asdis-
7. Future Work cussedinSection3: itiseasyfortheclientcodetoissue
RPCs to more than one server. One might, for example,
Viewingcryptographyasanetworkservicechangesour
useserversoperatedbydifferentorganizations,orservers
perspective about the costs of cryptography. Cryptogra-
physically in multiple countries, to cross-verify results.
phy is no longer computationally prohibitive; it is only
This ability to use multiple cryptoservers also makes it
an RPC away. We are building applications using abun-
very easy for clients to protect themselves against mali-
dant public key operations, including secure communi-
cious servers through the use of threshold cryptographic
cation services for dynamic coalitions, private database
techniquesasdiscussedinSection2.
retrieval, and others. We also plan to build cryptoserver
clientsimplementingstandardcryptographicAPIssuchas
8. Conclusion
PKCS#11,Microsoft’sCryptoAPI,andtheJavaCryptog-
raphyEnvironment.Thiswillallowlegacyapplicationsto Wehavedemonstratedthatpublickeycryptographycan
seamlessly take advantage of the cryptoserver. We may be provided as a service over untrusted networks. This
also examine other choices of implementation platform architecture has manyadvantages: it offloads work from
and middleware, increase the flexibility and usability of clients, it allows greater utilization of cryptographic ac-
theserver. celeratorsbysharingthemamongmanyclients,andithas
Aremainingchallengeistoseehowwelloursoftware acceptablysmallperformanceoverhead.Inaddition,iten-
architecturescales. Whilethesoftwarewasdesignedwith ablesnewsecurityapplicationsthatwerepreviouslycon-
scalabilityinmind(e.g.,usingafixedthreadpool,accom- sidered too costly. Our implementation consists of cus-tomizedsoftwareontopofgenerally availablehardware. protocols. In Y. G. Desmedt, editor, Proc. CRYPTO95,
Benchmarkdataindicatethatourapproachisfastandef- pages 174–187. Springer, 1994. Lecture Notes in Com-
fective. Hardware trends and other factors indicate that puterScienceNo.839.
ourapproachwillbeincreasinglyattractiveovertime. [12] Y.DesmedtandY.Frankel. Thresholdcryptosystems. In
G. Brassard, editor, Proc. CRYPTO 89, pages 307–315.
Springer-Verlag, 1990. Lecture Notes in Computer Sci-
Acknowledgments
enceNo.435.
[13] M. Eisler, A. Chiu, and L. Ling. RFC 2203: RPC-
We thank Teresa Lunt for useful discussion about this
SEC GSSprotocolspecification,Sept.1997.
work. WethankLarryHinesatAtallaforprovidingaddi-
[14] J. Feigenbaum. Encrypting problem instances: Or...can
tional information about the AXL200. We thank Jessica
you take advantage of someone without having to trust
NelsonatnCipherfortechnicalassistancewiththenFast
him? InH.C.Williams,editor,Proc.CRYPTO85,pages
300. We thank the anonymousreferees for helpful com- 477–488.Springer,1986.LectureNotesinComputerSci-
mentsonanearlierversionofthispaper. enceNo.218.
[15] Y.Gertner,Y.Ishai,E.Kushilevitz,andT.Malkin.Protect-
References ingdataprivacyinprivateinformationretrievalschemes.
In Proceedings of the 30th Annual ACM Symposium on
[1] C.Adams. RFC2025: Thesimplepublic-key GSS-API Theory of Computing (STOC-98), pages 151–160, New
mechanism(SPKM),Oct.1996. York,May23–261998.ACMPress.
[2] M. Blaze. High-bandwidth encryption with low- [16] B.Huberman,T.Hogg,andM.Franklin. Enhancingpri-
bandwidth smartcards. In Proceedings of the Fast Soft- vacyandtrustinelectroniccommunities. InProceedings
wareEncryptionWorkshop,number1039inLecureNotes oftheACMConferenceonElectronicCommerce,1999.
inComputerScience,pages33–40.Springer-Verlag,1996. [17] M.Jakobsson, K.Sako,andR.Impagliazzo. Designated
[3] M.Blaze, J. Feigenbaum, and M. Naor. A formal treat- verifier proofs and their applications. In U. Maurer, ed-
mentofremotelykeyedencryption. InK.Nyberg,editor, itor, Advances in Cryptology—EUROCRYPT 96, volume
ProceedingsofEUROCRYPT’98,number1403inLecure 1070 ofLecture NotesinComputer Science, pages143–
Notes in Computer Science, pages 251–265. Springer- 154.Springer-Verlag,12–16May1996.
Verlag,1998. [18] P.Kakkar,C.A.Gunter,andM.Abadi. Reasoningabout
[4] D.Boneh,R.DeMillo,andR.Lipton. Ontheimportance security for active networks. In Proceedingsof the 13th
of checking cryptographic protocols for faults. In Pro- IEEE Computer Security Foundations Workshop, pages
ceedingsofEurocrypt’97,volume1233ofLectureNotes 118–129,Cambridge,UK,July2000.
inComputerScience,pages37–51.Springer-Verlag,1997. [19] B. A. LaMacchia and A. M. Odlyzko. Computation of
[5] C.Boyd.Digitalmultisignatures.InH.BekerandF.Piper, discretelogarithmsinprimefields. Designs, Codes, and
editors,CryptographyandCoding,InstituteofMathemat- Cryptography,1:47–62,1991.
icsandItsApplications(IMA),pages241–246.Clarendon [20] A.K.LenstraandE.R.Verheul. Selectingcryptographic
Press,1989. keysizes. InProceedingsofthePublicKeyCryptography
[6] V.Boyko, M.Peinado, and R.Venkatesan. Speedingup Conference 2000, Jan. 2000. Available from http://
discretelogandfactoringbasedschemesviaprecomputa- www.cryptosavvy.com.
tion. InK.Nyberg,editor,AdvancesinCryptology–EU- [21] J.Linn. RFC2743: Genericsecurityserviceapplication
ROCRYPT ’98, number 1403 in LNCS, pages 221–235, programinterface,version2,update1,Jan.2000.
Espoo,Finland,1998.Springer-Verlag. [22] S. Lucks. Accelerated remotely keyed encryption. In
[7] C.Cachin,S.Micali,andM.Stadler.Computationallypri- L.Knudsen,editor,ProceedingsoftheFastSoftwareEn-
vateinformationretrievalwithpolylogarithmiccommuni- cryptionWorkshop,number1636inLecureNotesinCom-
cation. InProceedingsofEUROCRYPT’99, pages402– puterScience,pages112–123.Springer-Verlag,1999.
414,1999. [23] A. J. Menezes, P. C. Van Oorschot, and S. A. Vanstone.
[8] D.Chaum. Blindsignaturesforuntraceablepayments. In Handbookofappliedcryptography. TheCRCPressseries
R. L. Rivest, A. Sherman, and D. Chaum, editors, Proc. ondiscretemathematicsanditsapplications.CRCPress,
CRYPTO 82, pages 199–203, New York, 1983. Plenum 2000N.W.CorporateBlvd.,BocaRaton,FL33431-9868,
Press. USA,1997.
[9] D. Chaum and E. van Heyst. Group signatures. [24] F.Monrose,P.Wyckoff,andA.Rubin. Distributedexecu-
In D. W. Davies, editor, Advances in Cryptology— tionwithremoteaudit.InProceedingsoftheNetworkand
EUROCRYPT91, volume 547of LectureNotes inCom- DistributedSystemsSecuritySymposium.InternetSociety,
puterScience,pages257–265.Springer-Verlag,8–11Apr. 1999.
1991. [25] N.Nisan,S.London,O.Regev,andN.Camiel. Globally
[10] B.Chor,E.Kushilevitz,O.Goldreich,andM.Sudan. Pri- distributed computation over the internet — the popcorn
vateinformationretrieval. JournaloftheAssociationfor project. In Proceedings of the International Conference
ComputingMachinery,45(6):965–981,Nov.1998. onDistributedComputingSystems,pages592–601,1998.
[11] R.Cramer,I.Damga˚rd,andB.Schoenmakers. Proofsof
partialknowledgeandsimplifieddesignofwitnesshiding