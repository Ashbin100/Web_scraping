Authenticating Streamed Data in the Presence of
Random Packet Loss
(ExtendedAbstract)
PhilippeGolle (cid:0) NagendraModadugu
pgolle@cs.stanford.edu nagendra@cs.stanford.edu
Abstract
We propose a new scheme for authenticating streamed
datadeliveredinreal-timeoveraninsecurenetwork. The
difficultyofsigninglivestreamsistwofold. First,authen-
tication must be efficient so the stream can be processed
withoutdelay. Secondly,authentication must bepossible
evenifsomepacketsinthesequencearemissing. Streams
ofaudioor videoprovidea goodexample. Theymust be
processedinreal-timeandarecommonlyexchangedover
UDP, with no guarantee that every packet will be deliv-
ered. Existingsolutionstotheproblemofsigningstreams
have been designed to resist worst-case packet loss. In
practicehowever,networklossisnotmaliciousbutoccurs
inpatternsofconsecutivepacketsknownasbursts.Based
on this realistic model of network loss, we propose an
authentication scheme for streams which achieves better
performanceaswellasmuchlowercommunicationover-
head than existing solutions. We have implemented our
constructionsasplug-instotheRealSystemplatformfrom
RealNetworkstoauthenticateaudioandvideostreams.
Keywords:authentication,non-repudiation,streams.
1. Introduction
Video and audio documents are delivered over a net-
workasacontinuoussequenceofpackets(astream.) We
would like a signature scheme that allows two parties to
exchange a stream with guarantees of integrity and non-
repudiation. Consider a radio station broadcasting over
theInternet. Itisimportanttolistenerstohaveguarantees
that the audio stream they receive was generated by the
station.Itisequallyimportanttothestationthatonlycon-
tentitgeneratedbeattributedtoit.Forexample,malicious
partiesshouldbepreventedfrominjectingcommercialsor
offensivematerialintothestream.
Therearetwoissuestoconsiderwhensigningstreams.
(cid:1)
On the one hand, the signature scheme must be efficient
enough to permit authentication on the fly without intro-
ducing delays. On the other hand, the signature scheme
mustberobustenoughthatauthenticationremainspossi-
bleevenifsomepacketsarelost.
The naive solution to authenticate a stream is to sign
each packet in the stream individually. The receiver
checks the signatures of packets as they arrive and stops
processingthestreamimmediatelyifaninvalidsignature
is discovered. Immediate authentication is possible, but
thecomputationalloadonboththesenderandthereceiver
istoogreattomakethisapproachpractical.
Amoreefficientsolutionisproposedin[4]byGennaro
and Rohatgi. They observe that one-time signatures can
be used in combination with a single digital signature to
authenticateasequenceofpackets. Eachpacketcarriesa
public-key,whichisusedinaone-timesignaturescheme
tosignthefollowingpacket.Onlythefirstpacketneedsto
besignedwitharegulardigitalsignature. Sinceone-time
signatures are anorder ofmagnitude fasterto apply than
digitalsignatures,andcanalsobeverifiedsomewhatmore
efficiently, this solution offers a significant improvement
inexecutionspeed.
However,thereisamajordifficultywiththisapproach.
Recall that audio and video streams are sent using UDP,
which provides only ”best-effort” service and does not
guarantee that all packets will be delivered. If a packet
is missing, the authentication chain is brokenand subse-
quentpacketscannotbeauthenticated. (Anotherproblem
is that one-time signatures incur a substantial communi-
cationoverhead1.)
Let us examinethe issueof packetlossin more detail.
If a sequence is received incomplete, we would still like
to be able to authenticate all the packets that were not
lost. This defines resistance to loss in a strong sense: a
packet is either lost or authenticable. A weaker alterna-
tive would allow a few packets to be received unauthen-
ticatedincase ofpacketloss. We offertwojustifications
SupportedbyStanfordGraduateFellowship 1Wegiveamorecompletesurveyinsection (cid:2) .foradoptingthestrongdefinition. First,itisessentialfor
some applications that only authenticated content be re-
ceived. Consider a stream that delivers stock quotes in
realtime.Whileitmightbeacceptabletoloseaquote,we
must ensure that only authenticated quotes are ever dis-
played. Secondly, our constructions which resist loss in
the strong sense can easily be adapted to the weaker no-
tionofresistance.
Existing authentication schemes that resist packet loss
havebeendesignedtoresistworst-casepacketloss. Any
numberofpacketsmaybelostanywhereinthesequence,
withoutinterferingwiththereceiver’sabilitytoauthenti-
catethepacketsthatarrived.Studiesconductedonpacket
lossin UDPsuggestthatresistingworst-casepacketloss
is an overkill. The focus should be instead on resisting
randompacketloss. Wewillshowhowthatleadstomuch
moreefficientconstructions.
Since packet loss on the network is not malicious,
it is natural to analyze the patterns of loss and design
our authentication schemes accordingly. In [6], Paxson
shows that on the Internet consecutive packets tend to
get lost together in a burst. We adopt this model and
propose authentication schemes designed to resist bursty
loss. Specifically,ourgoalistomaximizethesizeofthe
longestsingleburstoflossthatourauthenticatedstreams
canwithstand. Of course, this isnotto say thatour con-
structionsresistonlyasingleburst. Aswillbeclear,once
afewpacketshavebeenreceivedafteraburst,ourscheme
recovers and is ready to maintain authentication even if
furtherlossoccurs.
In the next section, we will give a brief overview of
related work. In section 3, we present our authentica-
tionscheme,whichisconstructedtotakeadvantageofthe
burstmodelofpacketlosssuggestedbyPaxson. Weshow
thatoursolutionisefficientbothintermsofcomputation
andcommunicationoverhead. Insection4weprovethat
ourschemeisoptimalgivencertainconstraints. Insection
5, we argue that the model used to evaluate our authen-
tication scheme is robust, in the sense that our schemes
remain close to optimal even under slightly different as-
sumptions. Finally,wediscusstheimplementationofour
constructionsinthelastsection.
2. Relatedwork
The computational bottleneck of an authentication
scheme is the signing operation. Digital signatures are
expensive to generate and verify. As a rule of thumb, a
desktop making full use of its CPU can process on the
order of
(cid:3)(cid:5) (cid:4)(cid:6) (cid:4)
turnthesetwoapproaches.
A variety of generic techniques exist for speeding up
signatures. Forexample,asmallpublickeyreduceswork
for the verifier. TheChineseRemainder Theoremmakes
fast “divide and conquer” computations possible. Fi-
nally, time/memory trade-offs are possible with precom-
putation. Usingacombinationofthesetechniques,Wong
andLamproposein[9]anoptimizedversionoftheFeige-
Fiat-Shamir signature scheme [2, 3]. This optimization
achievesverificationratescomparabletoRSAwithsmall
exponent,whilesigningistwiceasfastasDSA.Thesame
paperintroduces“adjustableandincremental”signatures,
i.e. signatures that can be verified at different levels of
confidence depending on the resources available to the
verifier.
One-time (or k-time) signature schemes (OTS) offer a
significantspeed-upoverregularsignatures. In[4],Gen-
naro and Rohatgi propose a hybrid scheme, in which a
singledigitalsignatureisusedtoinitiateachainofOTS.
ThedrawbackofOTSisthat theirsizeisproportionalto
the number of bits of the quantity being signed. A OTS
computedonamessagehashedwithSHA-1isontheor-
derof
DSA signatures [5] per second. There are
two complementary approaches to improving efficiency:
designing faster signature schemes and amortizing each
signing operation by making use of a single digital sig-
nature toauthenticate severalpackets. We will reviewin
(cid:3)(cid:5) (cid:4)(cid:6) (cid:4)(cid:7) (cid:4)
bytes.AnapproachtomakeOTSsmalleristo
reducethesizeofthemessagehash. In[8],Rohatgishows
howthiscanbedonewithoutreducingsecurity. Theidea
is to hash the message with a family of Target Collision
Resistant (TCR) hash functions. A TCR family of
(cid:8)(cid:10) (cid:9)(cid:12) (cid:11)
keyed
(cid:13)
(cid:4)
-bithashfunctionsofferswithonly
(cid:3)
(cid:8)
(cid:4)
bits the
same security as a single
(cid:3)(cid:5) (cid:14)(cid:6) (cid:4)
-bit hash function, because
a birthday attack on the family is
(cid:8)(cid:10) (cid:9)(cid:12) (cid:11)
times harder. The
scheme proposed in [8] achieves300 bytes persignature
for1000signaturespersecond.
Letusnowturntosolutionswhichamortizeeachdigi-
talsignatureoverseveralpackets. In[9],WongandLam
propose buffering packets into groups. A single signa-
ture is computed for each group on some function
(cid:15)
of
allthehashesofthepackets. Inadditiontothiscommon
signature,eachpacketcarriessomeancillaryinformation
from which the value
(cid:15)
can be recovered. This allows
eachpackettobeverifiedindependentlyoftheothers. In
the simplest setting, the hashes of all the packets in the
groupareconcatenatedintoastring,and
(cid:15)
isahashofthis
string. Theancillaryinformationconsistsofthehashesof
alltheotherpackets.Avariantusesabinarytreetoreduce
thesizeoftheancillaryinformation. Thehashesofpack-
etsareplaced attheleavesofthetree, whileinnernodes
containahashoftheconcatenatedvaluesoftheirchildren.
Tobeverifiable,eachpacketneedonlyincludethevalues
ofthesiblingsofthenodesalongthepathtotheroot.
Anothervariationonthesameschemeusestheefficient
k-time signature of [8] which was introduced above. In-
stead of a hash, we sign a public-keyfor a k-time signa-
ture scheme at the root of the tree. An instance of thissignature is used for each packet. The communication
overheadper packet is higher, but unlikethe proposal of
Wong and Lam, this variant does not require to buffer
packets into groups before sending them. The original
scheme and these variants are reasonably fast and resis-
tant topacketlossin the worst-case. There isa trade-off
betweenefficiency(manypacketspergroup)andcommu-
nicationoverhead(moreancillaryinformation).
Finally, Perrig et all propose in [7] two efficient solu-
tions to the problem of authenticating streams in a lossy
environment. In the first scheme (TESLA,) packets are
authenticated with MACs. The MAC keys are disclosed
after a certain time interval, to enable verification. The
delay before disclosure is chosen long enough to ensure
that the keys can no longer be used to corrupt packets.
TESLAishighlyefficientandversatile,butitrequiresthe
abilitytosynchronizetheclocksofthesenderandthere-
ceiverwithinsomemargin. Thesecondscheme(EMSS,)
uses one-way hashes in combination with digital signa-
tures to achieve authentication, following an idea intro-
duced in [4]. To resist loss, the hash of each packet is
stored in multiple locations (we use a similar strategy.)
EMSSproposestochoosetheselocationsatrandom,and
providesprobabilisticguaranteesthatapacketcanbeau-
thenticated given a certain amount of loss in the stream.
Incontrast,ourconstructionsaredeterministic(thuspos-
siblyeasiertoimplement,)andoptimizedtoresistbursty
loss.
3. Ourscheme
Weconsiderastreamexchangedbetweenasenderanda
receiveroveraninsecure,unreliablechannelsuchasUDP.
Lostpacketsarenotretransmitted,andpacketsmayarrive
out of order. We make the assumption that loss occurs
inbursts. A burststartsatalocationrandomlychosenin
the sequence and lasts for a randomly chosen number of
packets.
Ourapproachtosigningthestreamfollowsanideain-
troducedin[4]. Weuseacombinationofone-wayhashes
anddigitalsignaturestoauthenticatepackets. Theideais
asfollows:ifacollision-resistanthashofpacket
(cid:16)(cid:18) (cid:17)
isap-
pendedtopacket
(cid:16)(cid:20) (cid:19)
beforesigning
(cid:16)(cid:20) (cid:19)
,thenthesignature
on
(cid:16)(cid:21) (cid:19)
guaranteestheauthenticityofboth
(cid:16)(cid:22) (cid:17)
and
(cid:16)(cid:20) (cid:19)
.
More generally, a packet
(cid:16)
(cid:11)
can be authenticated as
longasthereexistsasequenceofpackets
(cid:16) (cid:17)(cid:24) (cid:23)(cid:5) (cid:25)(cid:26)(cid:25)(cid:27)(cid:25)(cid:27)(cid:23) (cid:16)(cid:20) (cid:28)
such
that: the hash of
(cid:16)
(cid:11)
is appended to
(cid:16) (cid:17)
, whose hash is in
turnappendedto
(cid:16) (cid:19)
,etc,andthelastpacket
(cid:16)(cid:20) (cid:28)
optimalresistancetoburstyloss.
Throughout the paper, we make use of the following
notations:
issigned.
We divide thestream intosequences ofpackets. A se-
quence may consist of anywherebetween a few hundred
and a few thousand packets. From now on, we restrict
ourselvesto theproblemofauthenticating onesequence,
thelastpacketofwhichissigned. Westudywheretoap-
pendthehashesofpacketswithinthesequencetoprovide
(cid:29)(cid:31) (cid:30) : thenumberofpacketsbufferedonthesenderside
before transmission. For a stream broadcast strictly
in real-time, (cid:30)! (cid:3) . Inmost applicationsweexpect
somebuffering,andthus (cid:30) isusuallyasmallinteger.
(cid:29)# " : the capacity of the buffer that the sender uses to
storepackethashes. "
$
istheaveragenumberofitems
presentinthebuffer.
(cid:29)& % : themaximumnumberofhashesthatmaybeap-
pended to a packet. %
$
is the average number of
hashesappendedtoapacket.
Likewise, we consider that the receiver has a packet
buffer and a hash buffer to process the stream. On the
receiversidehowever,thepacketbufferonlyservestore-
store the order of the packetsas they arrive. A packet is
consideredlostifitisnotreceivedbythetimethebufferis
full. Wethusignorethepacketbufferforthereceiverand
assumethatapacketiseitherconsideredlostorarrivesin
order.
We represent a sequence of
’
packets
(cid:16)(cid:18) (cid:17) (cid:23)( (cid:25)(cid:27)(cid:25)(cid:27)(cid:25)(cid:26)(cid:23) (cid:16) (cid:28)
by a
directed acyclic graph. Only the last node
(cid:16) (cid:28)
is signed.
A directed edge from
(cid:16)(cid:21) )
to
(cid:16)+ *
indicates that the hash of
packet
(cid:16)(cid:20) )
hasbeenappendedtopacket
(cid:16)+ *
.Thegraphmay
notcontainacycle(soinparticular
,.
#
-
/ ),butthereisno
requirement that
,1 0
/ . The sequence is fully authenti-
cable ifthereexistsat leastone directedpath fromevery
nodetothelastsignednode.
We arenotconcernedwiththepossiblelossofthesig-
naturepacket. Foronething,ifthenumberofpacketsper
sequenceislargeenough,itishighlyunlikelythatthesig-
naturepacketwillbelost.Inanycase,itisalwayspossible
totransmitmultiplecopiesofthesignature.
Twopartiesmustagreeonanauthenticationschemeto
exchangesequencesofanylength. Thisschemespecifies
wherehashesshouldbeappendedinasequenceof
’
pack-
ets. Usingourgraphrepresentation,wedefineascheme
2
asafunction:
’(cid:31) 34 26 57 ’9 8
where
26 5: ’9 8
isadirectedacyclic
graph on a set of
’
nodes, or more. (We allow padding
withdummypackets.)
We require that the sequence
2. 5: ’9 8
be generated and
verified in the following way. The sender computes all
the hashesthatneed tobeappendedtothe firstpacketto
be sent. This may trigger recursive hash computations.
Forexample,ifthehashesofpackets
(cid:8)
and
;
mustbeap-
pendedtopacket
(cid:3)
,thesenderhastocomputethesehashes
first. This can not be done until the hashes that must be
appendedtopackets
(cid:8)
and
;
respectivelyhavethemselves
been computed. Since there are no cycles in the graph,
theserecursivecallseventuallycometoanend. Thefirstpacket is then ready to be sent, and the operation is re-
peatedwiththenextpacket. Ofcourse,packethashesare
computed only once, and then buffered in memory until
theyarenolongerneeded.
Thereceiververifiesasequenceinmuchthesameway.
Eachtimeapacketarrives,thehashesfoundappendedto
itarebuffered. Theyarekeptinmemoryuntilthepacket
theyauthenticatehasarrivedorbeenlost. Wedefine:
(cid:29)< "> =?A @C BD B : thebuffercapacityneeededbythereceiverto
validateanysequenceofpackets.
(cid:29). "> =E9 F :thecapacitysufficienttovalidatesequencesfor
whichnopacketwaslost.
Ascheme 2 isperiodicofperiod GI H
(cid:4)
ifthefollowing
twopropertieshold:
(cid:29) The function 2 is piece-wise constant over intervals
oflength
G
.
(cid:29) Thereexists JK H (cid:4) suchthatforall ’M LN J , 26 5: ’P OQ GR 8
isobtainedbyprependingto
26 57 ’9 8
itselfthefirst
G
nodesof
26 57 ’9 8
alongwiththeedgescomingoutofthem(seeFigure
(cid:3) ).
N times
Figure1.Aperiodicschemeofperiod (cid:8)
Finally, we define
ST 5U (cid:16) ) 8
as the largest integer / such
that
V
(cid:3)< WN XY W / aburstoflength X startingatpacket
(cid:16) )(cid:27)Z(cid:21) (cid:17)
leavestherestofthesequence(
[] \< ^R (cid:16) )(cid:26)Z(cid:20) (cid:17)(cid:24) (cid:23)( (cid:25)(cid:27)(cid:25)(cid:27)(cid:25)(cid:26)(cid:23) (cid:16) )(cid:27)Z9 _a ‘
)fully
authenticable.
Weextendthisdefinitiontoaperiodicscheme
2
:
(cid:29)
S< b
c %
,d ’+ )7 SY 57 (cid:16)(cid:20) )e 8
wheretheminimumistakenover
aperiodof
2
.
(cid:29)
S<$ b
(cid:17)
(cid:28)g f ST 57 (cid:16)(cid:20) )h 8
where theaverageistakenovera
periodof
2
.
3.1. Our solution in the case (cid:30)i (cid:3) (no packet
bufferingontheserverside)
This simple case is of practical importance and intro-
duces the basic building block for our generic construc-
tion. We propose a family of schemes
jl k
, parametrized
bytheintegervariable
m
.
jl k
isaperiodicauthentication
schemeofperiod
(cid:3)
definedasfollows: thehashofpacket
(cid:16)(cid:20) )(cid:18) n(cid:31) jl k
isappendedtotwootherpackets:
(cid:16)(cid:20) )(cid:26)Z(cid:21) (cid:17)
and
(cid:16)(cid:20) )(cid:27)Z9 k
.
Thelastnode
(cid:16) (cid:28)
issigned. Wecall
jl k
achainofstrength
m
.
Figure2.Theauthenticationchain
jp o
Characteristics of these schemes: This family of
schemes is well-defined: all the
jl ka 5: ’9 8
are acyclic. The
maximumnumberofhashesappendedtoanypacket(de-
noted % ),andtheaveragenumberofhashesappendedto
apacket( % $ )arebothequalto (cid:8) .
Sender: Chain
j k
can be executed by a sender who
buffers (cid:30)q (cid:3) packet and has a hash buffer of capacity
"Y
m
.
Receiver: Ifnopacketsarelost,thehashofpacket (cid:16)(cid:21) ) can
alwaysbeverifiedwhen
(cid:16)(cid:21) )(cid:27)Z(cid:21) (cid:17)
arrivesandthendiscarded.
Therefore "A =E(cid:21) Fi (cid:3) . Afteraburstofloss, theonlyextra
hash to remember is that of the packet immediately pre-
cedingtheburst,andso "A ?A= @(cid:12) Br B
(cid:8)
.
ResistancetoLoss:
St sv u Sw$ sv u mg \
(cid:3)
Itisnothardtoconvinceoneselfthatburstsoflengthupto
mx \
(cid:3)
donotdisconnectanypacketfromthesignature.We
will prove in the next section that chain
jl k
is optimally
resistanttoburstylossamongalltheschemesthatcanbe
executedbyasenderwhobuffers
(cid:3)
packetandhasahash
bufferofsize "T
m
. Intuitively,
jl k
resistslossbecauseit
storespackethashesinlocationsasfarapartasthesizeof
thesenderhashbufferallows.
3.2.Thegenericconstructionfor (cid:30)
H
(cid:3)
Whenthesenderbuffers (cid:30) H (cid:3) packets,itbecomespos-
sibletoappendthehashofapackettoonethatprecedesit.
Infact,withabufferofsize (cid:30) ,wemayappendtoapacket
anyofthehashesofthenext (cid:30)
\
(cid:3) packets.
Theconstructionsweproposeareextensionsofchains.
Weintroduce (cid:30) \ (cid:3) additionalpacketsbetweenthoseofthe
originalchain
jp k
tocreateaugmentedchain
jp k(cid:24) yz
.Wewill
soon discuss how to link these new packets to integrate
themintheauthenticatedsequence.
We start withasimpleexample(seeFigure
{
)toshow
how to augment chain jp o when (cid:30)c (cid:8) or (cid:30)c { . We
numberthenewlyinsertedpacketswithintegers,anduse
lettersforthepacketsoftheoriginalchain.Thedrawingat
thetopoffigure
{
correspondstothecase (cid:30)|
(cid:8)
(asingle
additional packet between packetsof the original chain.)
We have represented both the newly inserted edges, and
thosebelongingtotheoriginalchain. For (cid:30)Y
{
(twonew
packetsbetweenthoseoftheoriginalchain,)wehaveonlyshownthenewpackets(
(cid:3)
and
(cid:8)
)andthenewedgestobe
insertedbetweenthepacketsoftheoriginalchain.
A 1 B 2 C 3 D
A 1 2 B
Figure3.Augmentedchain j o yz with (cid:30)(cid:31) (cid:8) (on
top)and (cid:30)Y { (below)
Letusnowconsiderthegeneralcase. We proposetwo
waysofinsertingnewpackets,whichareequallyresistant
to bursty packet loss. Our first structure is described in
figure } . The hash of each new packet is appended both
tothepacketprecedingitandtothepacketfromtheorig-
inalchainfollowingit. Thisstructureisveryeasytoim-
plement, but has the drawback that the maximum num-
berofhashesappendedtoapacketgrowslinearlywith (cid:30)
(although observethat the average number of hashes ap-
pendedis %~
$ (cid:8)
). Thissimplestructureiswellsuitedfor
smallvaluesof (cid:30) .
A 1 2 3 4 B
Figure 4. A simple way of inserting additional
packets
Wenowpresentamorecomplexstructureforwhich %
is constant. This is our main scheme. We refer to it as
augmentedchainsandwillanalyzeitindetailbelow.
Wedefinerecursivelyhowtoinsertan(even)numberof
newpacketsintheoriginalchain. Thestartingpointisthe
structure proposed in the bottom part of Figure
{
, which
indicateshowtoinserttwonewpackets(
(cid:3)
and
(cid:8)
)between
thepacketsoftheoriginalchain(
(cid:127)
and
S
.)
Nowtoinsert
}
packetsbetween
(cid:127)
and
S
,weproceed
recursively(seeFigure5.) Wefirstinserttwonewpackets
(cid:3)
and (cid:8) as above, then insert two more packets { and }
between
(cid:3)
and
(cid:8)
inexactlythesamewaythat
(cid:3)
and
(cid:8)
were
insertedbetween
(cid:127)
and
S
. Thisprocessisgeneralizedin
a straightforward way to insert any even number of new
packets.
Characteristics of augmented chains: The family of
augmented chains is well-defined: all the
jl kR yz(cid:128) 5: ’9 8
A 1 3 4 2 B
Figure 5. Recursive insertions for augmented
chains
packet is constant (
are
acyclic.Themaximumnumberofhashesappendedtoany
%(cid:129)
;
), and the average number of
hashesappendedtoapacketis %(cid:130)
$ (cid:8)
.
Sender: Augmented chain j kR yz can be executed by a
senderwhobuffers (cid:30) packetsandhasahashbufferofca-
pacity "T
m(cid:131) O
(cid:30)
\
(cid:3) .Indeed,thehashesofthe (cid:30)
\
(cid:3) inner
packets must now be stored in addition to the
m
hashes
correspondingtopacketsinthemainchain.
Receiver: "> =E9 F(cid:130) z( Z
(cid:19)
o and "A ?A= @(cid:12) Br B (cid:132) "A =E(cid:21) F
O(cid:133) (cid:8)
. Indeed,
letusconsidertheimpactofthe (cid:30)
\
(cid:3) newpacketsforthe
receiver.Thefirst z( Z(cid:21)
(cid:19)
(cid:17) ofthosearelinkedtogetherandcan
be processed at the cost of remembering one extra hash
only. Buttheyalsocarrythehashesofthe z(cid:10) (cid:134)
(cid:19)
o lastinner
packets,bringingthetotalnumberofhashesthatmustbe
storedinthebufferto z( Z
(cid:19)
o .
Resistancetoloss: S & (cid:30) 57 mg \ (cid:3) 8
Thefirststepistoobservethatpacketsnewlyinsertedbe-
tweentwopacketsoftheoriginalchainarereachablefrom
eitherofthesechainpackets. Nowletusconsideraburst
of loss. Let
j
and
(cid:135)
be the packets in the outer chain
immediatelypreceding and succeedingthe burst. Allthe
packets between
j
and the start of the burst are reach-
able from j . Similarly, all the packets between the end
oftheburstand (cid:135) arereachablefrom (cid:135) . Thusthewhole
chain remainsauthenticableaslongas
j
isconnectedin
theouterchaintoapacketbeyond
(cid:135)
. Thisisalwaysthe
case if
S
W (cid:30)
5U m(cid:136) \
(cid:3)
8
. In the nextsection we provethat
thisvalueof
S
isoptimal.
Toparametrizeourconstructionontheresourcesavail-
able to the sender, we can rewrite the equation as
(cid:30)
5
"
\
(cid:30)
8
S
. Recallthat (cid:30) and " arerespectivelythesizesof
the packet and the hash buffer on the sender size. If the
server can distribute available memory between a buffer
forhashesandabufferforpackets,
S
ismaximalwhenthe
memory is equally allocated between these two buffers.
Inpractice,ifahashis
(cid:8)
(cid:4)
bytesandapacket
(cid:3)R (cid:4)(cid:7) (cid:4)(cid:7) (cid:4)
bytes,
one would expect "# (cid:137)
;
(cid:4) (cid:30) . Of course, other considera-
tionsmightcomeintoplaywhendecidingontherespec-
tivesizesofthehashandthepacketbuffer.
3.3.Comparisonwithotherschemes
WecompareourschemewiththoseproposedbyWong
and Lam in [9]. Recall that the schemes of [9] come inthree basic flavors, depending on how packets are orga-
nized into groups. Figure
(cid:14)
summarizes these three op-
tions.
............ ...........
Star Tree (2 levels)
...........................
Tree (full)
Figure6.TheschemesofWongandLam
Forourcomparison,weconsiderastreamdividedinto
groups(calledsequencesinourscheme)of (cid:3)(cid:5) (cid:14) packets.A
singledigitalsignatureisgeneratedbythesenderandver-
ifiedbythereceiverforeachgroup. Weusethefollowing
measurestocompareourschemewithothers:
(cid:29) Hash: the total number of hashes computed by the
sender(Thenumberisthesameforthereceiver.)
(cid:29) Overhead: theoverheadperpacketinbytes.
(cid:29) Loss: thetypeoflossthattheschemeresists.
(cid:29)
openingaspecialcommunicationchannelforauthentica-
tion (a costly solution,) authentication data must be em-
bedded within the stream itself, conforming to protocols
forsendingandreceivingstreamsthatwerenotdesigned
to allowauthentication. A numberoftechniquesfor em-
bedding authentication data in the stream are described
in [4]: water-marking, use of a USER-DATA section in
MPEGaudioorvideo,etc...Thesetechniquesoffereither
verylittlespace,orofferspaceatthecostofdegradingthe
qualityofthedata.
We expect that the low computation and communica-
tionoverheadofourschemeswillmakethemusefulina
varietyofapplications.
4. Proof of optimality
Weshowherethattheconstructionsoftheprevioussec-
tion offeroptimal resistanceto burstypacketlossfor au-
thenticated streams, given the resources available to the
senderandthereceiver.
Letusstartwithasimpleobservation.Ifauthentication
is to be possible when packets may get lost, the hash of
eachpacketmustbestoredinatleasttwodistinctlocations
insidethestream.Thisimpliesthattheaveragenumberof
hashes appended to each packet can not be less than
Delay: the delay on the receiver side (in number of
packets)beforeauthenticationispossible.
Scheme Hash Overhead Loss Delay
WLstar 17 340 any 0
WLtree(2levels) 21 160 any 0
WLtree(full) 31 120 any 0
Augmentedchain 16 43 bursts 16
Applications
The family of augmented chains is a highly efficient
authenticationschemeforstreams,withobviousapplica-
tionsinsettingswherecomputationalandcommunication
resourcesarelimited,andwherethereisnoguaranteethat
allpacketswillbedelivered.
Even where network bandwidth is not scarce, the low
communication overhead possible with our scheme may
be cruciallyimportant for thefollowingreason. Short of
(cid:8)
.
Ourschemeachievesthislowerbound( %(cid:130) $ (cid:8) .)
Wenowturntotheproofthataugmentedchainsareop-
timallyresistanttoburstypacketlossgiventheresources
allocatedtothesender. Wemustfirstintroducesomeno-
tations. We define the scope of a packet
(cid:16)(cid:21) )
with the fol-
lowingtwovariables:
(cid:29) Forwardscope:
(cid:15)(cid:22) 57 (cid:16)(cid:20) )e 8
isthemaximumof /
\I ,
overall
indices / H(cid:138) , forwhichthereexistsadirectededgefrom
(cid:16) )
to
(cid:16) *
. Ifthereisnosuch / ,set
(cid:15)(cid:22) 57 (cid:16) ) 8
(cid:4) .
(cid:29) Backwardscope:
(cid:139)(cid:10) 57 (cid:16) ) 8
isthemaximumof
,(cid:21) \
/ over
all indices / 0(cid:140) , for which there exists a directed path
from
(cid:16)(cid:136) 57 ,h 8
to
(cid:16)(cid:136)
/
5 8
. If there is no such / , set
(cid:4)
(cid:139)(cid:10) 5U (cid:16) ) 8
. Observe that a periodic scheme
2
is executable by
a sender who buffers (cid:30) packets if and only if for all
’
,
(cid:139)(cid:141) 57 (cid:16)(cid:20) )e 8l 0
(cid:30) forall
(cid:16)(cid:21) )(cid:18) n(cid:142) 26 57 ’9 8
.
A periodic scheme
2
is executable by a sender with a
hash buffer of capacity " (resp of average capacity "
$
) if
andonlyifforall
’
andforall
(cid:16)(cid:20) )6 n(cid:143) 26 5: ’9 8
,thereare W "
nodes(resp. onaverage "
$
nodes)
(cid:16)+ *
forwhicheither:
(cid:29)x /
0# ,
and
(cid:15)(cid:22) 57 (cid:16) * 8p L(cid:144) ,9 \
/ .
(cid:29)x /
L# ,
and
(cid:139)(cid:10) 57 (cid:16) * 8p L
/
\M ,
.
Indeed,thehashofpacket
(cid:16) *
mustbepresentinthehash
buffer overthe interval
(cid:145)(cid:16) *(cid:146) (cid:134)v (cid:147)D (cid:148)(cid:26)(cid:149)(cid:7) (cid:150)(cid:12) (cid:151)(cid:153) (cid:152) (cid:16) *C Z(cid:21) (cid:154)(cid:141) (cid:148)(cid:27)(cid:149)(cid:141) (cid:150)C (cid:151)e (cid:155)
. The condi-
tionexpressesthatthebuffermaycontainatmost " hashes
atnode
(cid:16)(cid:20) )
.
Lemma4.1
SY 57 (cid:16) ) 8p 0
(cid:11)(cid:5) (cid:159)
(cid:156)(cid:136)
*
(cid:159)
(cid:157)(cid:10) (cid:158)
(cid:147)D (cid:148)(cid:26)(cid:149)(cid:6) (cid:160)7 (cid:151)
(cid:145)(cid:15)(cid:22) 57 (cid:16) )7 (cid:134)(cid:128) * 8(cid:22) \
/
(cid:155)In particular for a node without back-edges (that is,
(cid:139)(cid:10) 5U (cid:16)(cid:21) )d 8
(cid:4)
),
ST 57 (cid:16)(cid:20) )d 8p 0N (cid:15)(cid:22) 5U (cid:16)(cid:21) )d 8
Proof Let %¡ (cid:156)(cid:136) (cid:157)(cid:10) (cid:158)
(cid:11)( (cid:159)
*
(cid:159)
(cid:147)D (cid:148)(cid:26)(cid:149)(cid:7) (cid:160)U (cid:151) (cid:145)(cid:15)(cid:22) 57 (cid:16)(cid:20) ): (cid:134)A *R 8(cid:18) \ / (cid:155) . Nowcon-
sider the interval ¢ (cid:145)(cid:16) )(cid:27)Z(cid:21) (cid:17) (cid:152) (cid:16) )(cid:27)Z+ £ (cid:155) . We show that any
directed path from (cid:16) ) to the signature (cid:16)(cid:20) (cid:28) goes through
at least one node of ¢ . Thus the disappearance of ¢ in a
burst of length % leaves the signature unreachable from
(cid:16) ) whichprovesthelemma.
Nowlet (cid:127)< (cid:17) (cid:25)( (cid:25)(cid:5) (cid:25) (cid:127)¥ ⁄ beapathfrom (cid:16)(cid:21) ) to (cid:16) (cid:28) . Bydefinition
of (cid:139)(cid:10) 57 (cid:16)(cid:20) )e 8 ,forall / wehave (cid:127)l *1 n(cid:133) (cid:145)(cid:16) ): (cid:134)ƒ (cid:147)D (cid:148)(cid:26)(cid:149) (cid:160) (cid:151)(cid:153) (cid:152) (cid:16) (cid:28) (cid:155) . Let G be
themaximum indexsuchthatfor all
(cid:3)| W¤ §I W
G we have
(cid:127). '< n“ (cid:145)(cid:16) )7 (cid:134)v (cid:147)D (cid:148)(cid:26)(cid:149)(cid:6) (cid:160)7 (cid:151)(cid:153) (cid:152) (cid:16)(cid:21) ) (cid:155)
.
(cid:127)
B
(cid:16)
Bh « with
,(cid:18) \‹ (cid:139)(cid:10) 57 (cid:16)(cid:20) )e 8
W
G
= W
,
.
Then
(cid:127)
B
Z(cid:21) (cid:17)t n! (cid:145)(cid:16)(cid:21) )(cid:27)Z(cid:21) (cid:17) (cid:152) (cid:16)
B «
Z(cid:21) (cid:154)(cid:141) (cid:148)(cid:27)(cid:149)(cid:6) ›
«
(cid:151)e (cid:155)9 fi ¢
.
4.1.Optimal
S
withconstraintson " and (cid:30)
We haveshownthataugmentedchain
jl kR yz
cansustain
aburstoflengthupto (cid:30)
57 mfl \
(cid:3)
8
.Thefollowingproposition
showsthatthisisthemaximumpossibleforaschemethat
canbeexecutedbyasenderwhobuffers (cid:30) packetsandhas
ahashbufferofcapacity
mt O
(cid:30)
\
(cid:3) .
Proposition4.2 Let
2
be an authentication scheme that
can be executed by a sender who buffers (cid:30) packets and
has a hash bufferof capacity " . Then if (cid:30)
H(cid:130) 5
"
O
(cid:3)
8C (cid:176)(cid:7) (cid:8)
we have
S b
W4 –(cid:24) † Z(cid:21)
(cid:19)·
(cid:17)
‡
(cid:19) , and if (cid:30)
0¡ 5
"
O
(cid:3)
8C (cid:176)(cid:7) (cid:8)
we have
S b
W (cid:30)(cid:136) (cid:181)
5
"
O
(cid:3)
\
(cid:30)
8
Proof Let
’
be the period of
2
. Let us con-
sider a sequence of nodes
(cid:16)(cid:22) (cid:17) (cid:23) (cid:16)(cid:20) (cid:19) (cid:23) (cid:16) o (cid:23)( (cid:25)(cid:27)(cid:25)(cid:27)(cid:25)
We consider
the subsequence of nodes which have no back-edges:
(cid:16)(cid:22) k( ¶ (cid:23) (cid:16)(cid:20) k‚ • (cid:23) (cid:16)(cid:22) k‚ „ (cid:23)(cid:5) (cid:25)(cid:26)(cid:25)(cid:27)(cid:25)
Observe that
ma )fl \“ ma )7 (cid:134)ƒ (cid:17)
W (cid:30) since the
sender buffers at most (cid:30) packets. Now let
ma £
be the in-
dex(or one of the indexesif there areseveral)for which
”
£ ma £l Z(cid:21) (cid:17)x \(cid:143) ma £
ismaximal.
We consider the "
O
(cid:3)
\
”
£
nodes without back-edges
preceding
(cid:16) k‚ »
. Bylemma4.1
S b 0 % ,d ’ (cid:17)
(cid:159)
)
(cid:159)
† Z(cid:21) (cid:17)(cid:153) (cid:134)ƒ …(cid:153) » (cid:15)(cid:22) 57 (cid:16) k‚ »(cid:22) ‰(cid:7) (cid:160) 8
At least one of those nodes cannot have any forward
edgeextendingbeyond
(cid:16)(cid:22) k »
,forotherwisethehashbuffer
wouldcontain
H
" hashesatpoint
(cid:16)(cid:20) k »
.
Therefore
S b 0
(cid:17)
(cid:159)
)
(cid:156)]
†
(cid:159)
(cid:157)(cid:141)
Z(cid:21)
(cid:158)
(cid:17)‚ (cid:134)v … »
5U m £ \(cid:143) m £w (cid:134)v ) 8
Sinceforall
,
,
ma £(cid:142) \] ma £¥ (cid:134)v )
W
,
”
(cid:25) £
,
St b
W ”
£(cid:190) 5
"
O
(cid:3)
\
”
£w 8
Ifwe considerthe expressionaboveas afunction of
”
£
,
the maximum is obtained for ”
£ 5
"
O
(cid:3)
8(cid:12) (cid:176)(cid:141) (cid:8)
. But re-
memberthatwealsorequire ”
£
W (cid:30)
So if (cid:30)
L¿ 5
"
O
(cid:3)
8C (cid:176)(cid:141) (cid:8)
we have
S< b
W(cid:192) – † Z(cid:21)
(cid:19)
(cid:17)
‡
(cid:19) , and if
(cid:30) 0(cid:138) 5 " O (cid:3) 8(cid:12) (cid:176)(cid:141) (cid:8) wehave St b W (cid:30)(cid:136) (cid:181) 5 " O (cid:3) \ (cid:30) 8
4.2.Structureofoptimalschemes.
Infact,theproofofProposition4.2revealsthestructure
thataschememusthaveinordertomaximize S . Thefol-
lowingdefinitionwill help exposethis structure. We say
that a directed acyclic graph on (cid:30) nodes (cid:16) (cid:17)(cid:10) (cid:23)( (cid:25)(cid:5) (cid:25)( (cid:25)( (cid:23) (cid:16) z has
theextremity property ifforall (cid:16) ) ( ,g - (cid:3) (cid:23) (cid:30) )thefollow-
ingtwoconditionshold:
(cid:29) Thereexistsadirectedpathfrom (cid:16) ) to (cid:16) (cid:17) includedin
theinterval
(cid:29)
(cid:145)(cid:16)(cid:18) (cid:17) (cid:152) (cid:16)(cid:20) ) (cid:155)
Thereexistsadirectedpathform (cid:16)(cid:21) ) to (cid:16)ƒ z includedin
theinterval (cid:145)(cid:16)(cid:20) ) (cid:152) (cid:16)ƒ z (cid:155)
Proposition4.3 Let
2
beanauthenticationschemewhich
canbeexecutedbyasenderwhobuffers (cid:30) packetsandhas
a hashbufferofsize " . If
S< b
ismaximal, then
26 57 ’9 8
has
thefollowingstructure:
(cid:29) Nodeswithoutback-edgesareregularlyspaced,atin-
tervalsof (cid:30) nodes.
(cid:29) Thesubgraphof
2. 5: ’9 8
betweentwoconsecutivenodes
withoutback-edgeshastheextremityproperty.
Proof Followsdirectlyfromtheproofofproposition
} (cid:8)(cid:25)
.
5. Alternatemodels
In this section we argue that our model for stream au-
thentication is robust, in the sense that our constructions
remain close to optimally resistant to bursty packet loss
underslightlydifferentassumptions.
Westudyfirstwhathappensifweconstraintheaverage
capacity(ratherthanthemaximumcapacity)ofthebuffer
availabletothesendertostorehashes.Forasenderservic-
ingseveralclientsinparallel,theaveragememoryrequire-
mentofeachconnectionovertimemightbeamoremean-
ingful measure than the maximum capacity required by
eachconnection. Weproveinsection5.1thatthelongest
burst a sequence can sustain in this setting is essentially
thesame.
Insection5.2,weconsidertheproblemofmaximizing
S$ , the length of the average longest burst of loss that an
authenticated sequence can sustain (here, the average is
taken over the locations where the burst may start.) As-
sumingthatnetworklossisnotmalicious,itmakessense
tomaximizethelongestburstthatcanbesustainedonav-
erage. Weprovethatthelongestaverageburstasequence
can sustain is close to the longest worst-case burst, and
that ourconstructions remain closeto optimallyresistant
toburstypacketloss.
5.1.Hashbufferofaveragecapacity.
Proposition5.1 Let 2 beaschemethatcan beexecuted
by a sender who buffers (cid:30) packets and has a hash buffer
of average capacity " $ . If (cid:30) W " $ \(cid:133) {` (cid:176)(cid:141) (cid:8) , we have
(cid:30) 5D " $ \ z( Z (cid:19) o 8
St b W
. If (cid:30) H· " $ \Q {a (cid:176)(cid:141) (cid:8) ,wehave S b W (cid:17) (cid:19)ˆ ´ " $ \ o (cid:19)` ˜ (cid:19) .This result should be compared with Proposition 4.2.
Thebounds we getwhen we constrain themaximum ca-
pacityofthehashbuffer( S b W (cid:30) 5 " O (cid:3) \ (cid:30) 8 )andwhen we constrain the average capacity ( S b W (cid:30) 5D " $ \ z( Z (cid:19) o 8 )
areonasimilarorderofmagnitude. Westarttheproofof
Proposition5.1withthefollowinglemma:
Lemma5.2 Let 2 be a scheme of period G , that can
be executed by a sender who buffers (cid:30) packets and has
a hash buffer of average capacity " $ . Let (cid:16)(cid:22) (cid:17) (cid:23)( (cid:25)(cid:27)(cid:25)(cid:27)(cid:25)(cid:26)(cid:23) (cid:16) B be
any sequence of G consecutive nodes of 26 5: ’9 8 . We have
f
B
)(cid:26)¯(cid:21) (cid:17) 5U (cid:15)(cid:22) 5U (cid:16)(cid:21) )d 89 O# (cid:139)(cid:10) 57 (cid:16)(cid:20) )e 8(cid:21) O
(cid:3)
8
W "
$ G
Proof In section 4 we proved that the hash of
(cid:16)(cid:20) )
must be present in the hash buffer over the interval
(cid:145)(cid:16) )7 (cid:134)v (cid:147)D (cid:148)(cid:26)(cid:149)(cid:6) (cid:160)7 (cid:151)‚ (cid:152) (cid:16) )(cid:27)Z9 (cid:154)(cid:7) (cid:148)(cid:26)(cid:149)(cid:7) (cid:160)U (cid:151)e (cid:155)
whichisoflength
(cid:15)(cid:22) 57 (cid:16)(cid:20) )U 8˘ O˙ (cid:139)(cid:141) 57 (cid:16)(cid:20) )e 8˘ O
(cid:3)
.
Takingtheaverageoveraperiodofthescheme,wegetthe
lemma.
Proof (proposition 5.1) Let
’
be the period of
2
. We
consider
’
consecutivenodes
(cid:16) (cid:17)(cid:24) (cid:23)(cid:5) (cid:25)(cid:26)(cid:25)(cid:27)(cid:25)(cid:27)(cid:23) (cid:16)(cid:20) (cid:28)
. Atleast
’(cid:21) (cid:176)
(cid:30) of
thosenodeshavenoback-edges,say
(cid:16) k ¶ (cid:23)( (cid:25)( (cid:25)(cid:5) (cid:25)(cid:146) (cid:23) (cid:16) k(cid:146) ¨
. Now
bylemma4.1:
St b(cid:201) 0 % ,d ’(cid:21) (cid:17)
(cid:159)
)
(cid:159)
_(cid:141) (cid:15)(cid:22) 5U (cid:16)(cid:20) k (cid:160) 8
Sincebylemma5.2
(cid:28)
˚
)(cid:27)¯(cid:21) (cid:17)
5U (cid:15)(cid:22) 5U (cid:16)(cid:21) )d 89 O# (cid:139)(cid:10) 57 (cid:16)(cid:20) )d 8+ O
(cid:3)
8
W "
$ ’
Wehave
_
˚
)(cid:27)¯(cid:21) (cid:17)
(cid:15)(cid:22) 57 (cid:16) k‚ (cid:160) 8
W
5D
"
$ \
(cid:3)
8h ’Y \
(cid:28)
˚
)(cid:27)¯(cid:21) (cid:17)
(cid:139)(cid:10) 57 (cid:16) ) 89 \
(cid:149)x ¸¯+ (cid:149)`
˚
u ¶ y˝(cid:204)˝(cid:204)˝(cid:204)y(cid:149)` u ¨
(cid:15)(cid:22) 57 (cid:16)P 8
Butforall
(cid:16)
,
(cid:15)(cid:22) 57 (cid:16)P 8p L
(cid:3) ,andso
St b(cid:201) 0 (cid:3) X(cid:133) ˛ 5 " $ \ (cid:3) 8h ’| \ (cid:28) ˚
)(cid:26)¯(cid:21) (cid:17)
(cid:139)(cid:10) 5U (cid:16)(cid:21) )d 8(cid:22) \N 5: ’(cid:201) \ X 8h ˇ
We must now give a lower bound for f (cid:28) )(cid:27)¯(cid:21) (cid:17) (cid:139)(cid:10) 5U (cid:16)(cid:21) )d 8 . For
anynode
(cid:16)(cid:21) )
between
(cid:16)(cid:20) k(cid:153) (cid:150)
and
(cid:16)(cid:22) k(cid:153) (cid:150)U —a ¶
,
(cid:139)(cid:10) 5U (cid:16)(cid:21) )e 8l L‹ ,(cid:209) \Y m(cid:141) *
. Tak-
ing the sum overall nodes between
(cid:16)(cid:20) k‚ (cid:150)
and
(cid:16)(cid:22) k(cid:153) (cid:150)U —a ¶
gives
f (cid:139)(cid:10) 5U (cid:16) ) 8l L
(cid:3)
(cid:176)(cid:141) (cid:8)A 57 m *C Z(cid:21) (cid:17) \(cid:201) m * 8(cid:146) 57 m *C Z(cid:21) (cid:17) \| m * \
(cid:3)
8
. Finallysum-
mingoverallintervals,weget
(cid:28)
˚
)(cid:27)¯(cid:21) (cid:17)
(cid:139)(cid:10) 57 (cid:16)(cid:20) )d 8p L
˚
*C
_
¯(cid:21) (cid:17)
(cid:3)
(cid:176)(cid:7) (cid:8)(cid:128) 5U m(cid:141) *C Z(cid:20) (cid:17)x \M m(cid:7) *R 8(cid:146) 5U m(cid:7) *C Z(cid:21) (cid:17)l \(cid:143) m(cid:7) *l \
(cid:3)
8
But
f
_
*C ¯(cid:21) (cid:17) 5U m(cid:7) *C Z(cid:21) (cid:17)l \(cid:143) m(cid:7) *R 8 ’
andtherefore:
(cid:28)
˚
)(cid:26)¯(cid:20) (cid:17)
(cid:139)(cid:141) 57 (cid:16)(cid:20) )e 8p L
X (cid:181)
(cid:3)
(cid:8)
(cid:181)
´
’
X ˜(cid:31) ´
’
X \
(cid:3)
˜
Sofinally
St b(cid:201) 0
(cid:3)
X ´ 5 " $ \ (cid:3) 8 ’(cid:201)(cid:25) \ ’ X (cid:8) 57 ’Y \ X 8(cid:22) \N 5: ’(cid:201) \ X 8 ˜
If we consider the expression above as a function of
X
,
the maximum is obtained for X (cid:210) † (cid:28) (cid:134) „ • . But remember
thatwealsorequire X
L# ’(cid:21) (cid:176)
(cid:30) .
So if (cid:30) H " $ \(cid:133) {` (cid:176)(cid:7) (cid:8) we have S< b W (cid:17) (cid:19)(cid:190) ´ " $ \ o (cid:19)(cid:6) ˜
(cid:19)
, and if
(cid:30) W " $ \(cid:143) {` (cid:176)(cid:7) (cid:8) wehave S< b W (cid:30) 5 " $ \ z( Z (cid:19) o 8
5.2.Optimal S$
Proposition5.3 Let
2
beaschemethatcan beexecuted
byasenderwhobuffers (cid:30) packetsandcanstoreanaver-
ageof "
$
hashesinmemory. Then
St$ b(cid:31) 0(cid:138) 5
"
$ \
(cid:3) (cid:30)
8
This result should be compared with Proposition 4.2
and Proposition 5.1. It turns out that the optimal value
for
S$
isnotfarfromtheoptimalvaluefor
S
.
Proof Let ’ betheperiodof 2 . Weconsider ’ consecu-
tivepackets
(cid:16)(cid:18) (cid:17) (cid:23)(cid:5) (cid:25)(cid:26)(cid:25)(cid:27)(cid:25)(cid:26)(cid:23) (cid:16) (cid:28)
. Necessarily
(cid:139)(cid:10) 5U (cid:16)(cid:21) )d 8I 0
(cid:30) andsoby
lemma4.1,
SY 57 (cid:16)(cid:20) )e 8p 0
(cid:11)(cid:5) (cid:159)
(cid:156)(cid:136) * (cid:157)(cid:10)
(cid:159)
(cid:158) z(cid:10) (cid:134)+ (cid:17) (cid:145)(cid:15)(cid:22) 57 (cid:16)(cid:20) )7 (cid:134)(cid:128) *(cid:24) 8(cid:20) \
/
(cid:155)
So
$S< b
S$
(cid:3)
’
b
(cid:28)
˚
)(cid:26)¯(cid:20)
0
(cid:17)
(cid:3)
’
SY 57
(cid:28)
˚
)(cid:27)¯(cid:21)
(cid:16)(cid:20)
(cid:17)
)d 8
z(cid:24) (cid:134)+
˚
*C ¯
W
(cid:17)
(cid:11)
(cid:15)(cid:22)
(cid:3)
’
5U (cid:16)
(cid:28)
˚
)(cid:27)¯(cid:21)
)7 (cid:134)(cid:128)
(cid:17)P
*
(cid:211)
8
(cid:11)( (cid:159)
(cid:156)(cid:136) (cid:157)(cid:10)
* (cid:159)
(cid:3)
’
(cid:158)
z(cid:10) (cid:134)ƒ
z(cid:10) (cid:134)ƒ
˚
*C ¯
(cid:17)
(cid:17)
(cid:11)
(cid:145)(cid:15)(cid:22)
(cid:28)
˚
)(cid:26)¯(cid:20)
57 (cid:16)(cid:20)
(cid:17)
):
(cid:15)(cid:22)
(cid:134)A
5U
*(cid:24)
(cid:16)
8(cid:22)
)7
\
(cid:134)(cid:128) *
/
8
(cid:155) \
(cid:3)(cid:5) (cid:212)
Since by lemma 5.2 f (cid:28) )(cid:26)¯(cid:20) (cid:17) (cid:15)(cid:22) 57 (cid:16)(cid:20) )e 8 W 5 " $ \ (cid:3) 8r ’ , we have
S<$ b(cid:201) 0
(cid:17)
(cid:28) f
z(cid:10)
*C
(cid:134)+
¯
(cid:17)
(cid:11)
5C
"
$ \
(cid:3)
8h ’ 5C
"
$ \
(cid:3) (cid:30)
8
6. Implementation
We have implemented our constructions as plug-ins to
the RealSystemplatform fromRealNetworks [10]to au-
thenticateaudioandvideostreams.
RealSystem consists of a streaming server and many
client RealAudio players. The server itself consists of a
coreandmanysupportingmoduleswhichareresponsible
forreadingfiles,packetizingdata,addingtransporthead-
ersandsoon.
Our implementation replaces the file-format plug-in.
This plug-in is responsible for providing the server core
withpacketizeddatathatcontainauthenticationinforma-
tion.Thefile-formatplug-incanbecontrolledthroughacon-
figurationfile. Thisfilespecifieshowoftensignaturesare
computed and for testing purposes, how often a burst of
packet loss occurs. In our example configuration we set
(cid:30)~ (cid:214) (cid:213)
client requests “demo.rm.apf”. Appending our own ex-
tension allows our plug-in to dynamically determine the
originalrenderingplug-infortherequestedstream.
It should be noted that without our plug-in a player is
(the number of packets buffered on the sender unable to play streams with embeddedauthentication in-
side,) and computed signatures every49 packets. Figure formation.
7showsthestateofaplayerafterasignaturehasverified. The plug-ins and source code are available for down-
Figure8showsthestateafterasignatureverificationfails. loadfrom[11].
7. Conclusion
We propose a new stream authentication scheme. In
contrast to existingsolutions, our scheme resists random
packet lossrather than worst-case packetloss. We prove
thatourconstructionisoptimallyresistanttoburstypacket
lossgiventheresourcesavailabletothesenderandthere-
ceiver, and has the lowest possible communication over-
head.
Acknowledgments
Since the beginning oftheir workon thispaper, the
authorsare grateful toDanBoneh for discussions and
numeroushelpfulcomments. We wouldliketothankthe
anonymousreviewersfortheirsuggestionstoimprovethe
expositionofthispaper.
Figure7.Verifiedsignature
References
[1] S. Even, O. Goldreich and S. Micali. On-
line/Off-line Digital Signatures. In Journal of
Cryptology,Volume9,Number1,Winter1996.
[2] U. Feige, A. Fiat and A. Shamir. Zero Knowl-
edgeProofsofIdentity.InProc.ofthe19thAn-
nualACMSymposiumonTheoryofComputing,
1987.
[3] A. Fiat and A. Shamir. How to Prove Your-
self: Practical Solutions to Identification and
Signature Problems. InAdvances in Cryptology
-CRYPTO’86,pages186-194.LectureNotesin
ComputerScience263,Springer-Verlag,1986.
[4] R.GennaroandP.Rohatgi.HowtoSignDigital
Streams. In Advances in Cryptology - CRYPTO
’97,pages180-197.LectureNotesinComputer
Science1294,Springer-Verlag,1997.
Figure8.Signatureverificationfailed
[5] National InstituteofStandardsand Technology.
Inordertoensurethatauthenticatedstreamsareappro-
DigitalSignatureStandard.NISTFIPSPUB86,
priately associated with our rendering plug-in, we cre-
U.S.DepartmentofCommerce,May1994.
ated a new mime-type. We append the extension “.apf”
to the original filename and associate our client plug-in [6] V. Paxson. End-to-End Internet Packet Dynam-
withthismime-type. Forexampletheserverdeliversthe ics. IEEE/ACM Transactions on Networking,
file“demo.rm”withauthenticationinformationwhenthe 7(3):277-292,June1999.[7] A. Perrig, R. Canetti, J.D. Tygar and D. Song.
Efficient Authentication and Signing of Multi-
cast Streams over Lossy Channels. In Proc. of
IEEE Security and Privacy Symposium, May
2000.
[8] P. Rohatgi. A Compact and Fast Hybrid Signa-
ture Scheme for Multicast Packet Authentica-
tion. In
(cid:14)
[9] C.K.WongandS.S.Lam.DigitalSignaturesfor
FlowsandMulticasts.InProc.IEEEICNP’98,
October1998.
[10] http://www.realnetworks.com
[11] http://crypto.stanford.edu/nagendra/projects/
StreamAuth/StreamAuth.html
th ACM Conference on Computer and
CommunicationSecurity,November1999.