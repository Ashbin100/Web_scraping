Authentication and Key Agreement via Memorable Password
TaekyoungKwon
ktk@emerald.yonsei.ac.kr
Abstract them, the knowledge-based scheme is aimed for
human memory (
This paper presents a new password authentica-
tion and key agreement protocol called AMP in a
provable manner. The intrinsic problem with pass-
word authentication is a password, associated with
eachuser, haslow entropyso that(1) thepassword
ishardtotransmitsecurelyoveraninsecurechannel
and(2)thepasswordfileishardtoprotect. Ourso-
lutiontothiscomplexproblemistheamplifiedpass-
word proof idea along with the amplified password
file. A party commits the high entropy information
andamplifiesherpasswordwiththatinformationin
the amplifiedpasswordproof. She nevershows any
information except that she knows it for her proof.
Our amplifiedpassword proofidea issimilar to the
zero-knowledgeproofin that sense. A server stores
amplifiedverifiersintheamplifiedpasswordfilethat
issecureagainstaserverfilecompromiseandadic-
tionaryattack. AMPmainlyprovidesthepassword-
verifierbasedauthenticationandtheDiffie-Hellman
basedkeyagreement, securelyand efficiently. AMP
is simple and actually the most efficient protocol
amongtherelatedprotocols.
1. Introduction
Entity authentication is necessary for identifying
theentitieswhoarecommunicatingoveraninsecure
network. This function is usually combined with
a key establishment scheme such as key transport
or key agreement among the parties. For user
authentication, three kinds of approaches exist;
knowledge-based authentication, token-based au-
thentication, and biometric authentication. Among
(cid:0)
mind). Actually it is the most
widely-used method due to such advantages as
simplicity, convenience, adaptability, mobility, and
less hardware requirement. It requires users only
to remember and type in their knowledge called a
password. Therefore,itisallowedforuserstomove
conveniently without carrying hardware tokens.
However, a complex problem with this password-
only authentication is a mnemonic password has
low entropy so that it is vulnerable to guessing
attacks. The problem becomes more critical in an
open distributed environment. A password filepro-
tectionisanotherproblemthatmakesthisapproach
more unreliable, for example, if a password file is
compromised,anadversaryisabletoimpersonatea
serverorlaunchdictionaryattacks.
PASSWORD PROTOCOLS. Since the first scheme
called LGSN[24] was introduced in 1989, many
protocols have been developed. Among them,
EKE[7]wasalandmarkofcertificate-freeprotocols.
OnevariantnamedDH-EKE[7]introducedthepass-
word authentication and key agreement, and was
“augmented”toA-EKE[8]thatwasthefirstverifier-
basedprotocoltoresistapassword-filecompromise
and to accommodate salt[37]. GLNS[15] was
enhanced from LGSN. Due to the inefficiency and
constraints of older schemes, various modifications
and improvements have followed. They include
TH[36], AL[1], M-EKE[35], Gong[16], KS[20],
SPEKE[18, 19], S3P[33], SRP[38], HK[17],
GXY[21],andTLSadaptation[11]. However,some
of them have been broken and some are still being
cryptanalyzed[2, 14, 29, 9]. Most were inadequate
1for security proof due to the ad-hoc methods of
protecting passwords. In the mean time, OKE[25]
introduced a provable approach and was followed
by elegant work such as SNAPI[26], EKE2[5],
AuthA[6], and PAK[10]. They show the provable
approachinthisareaisgettingmatured.
A-EKE,B-SPEKE,SRP,GXY,SNAPI-X,AuthA,
andPAK-Xareclassifiedaspassword-verifierbased
protocols[8, 19, 38, 21, 26, 6, 10]. They allow the
asymmetric model in which a client possesses a
passwordwhileaserverstoresitsverifierratherthan
thepassword. FollowingA-EKE[8],B-SPEKEwas
augmentedfromSPEKE[18,19]. SRPshowedeffi-
cientworkonaverifierandGXYwasderivedfrom
it[38, 21]. SNAPI-X was augmented from SNAPI
while PAK-X was enhanced from PAK[26, 10].
AuthA wasderivedfromseveralpreviousprotocols
but enriched with provable security[6]. Recently a
pseudorandommodulischemewasproposedthough
it may be relatively inefficient[30]. However, even
theverifier-basedprotocolsallowdictionary attacks
and server impersonation attacks if a server file is
compromised. Currentlythestandardizationonthis
fieldisbeingconsideredbyIEEEP1363group.
CONTRIBUTION. Our goal is to design a new
protocol in a provablemanner,which combines the
followingfunctionssecurelyandefficiently.
(cid:1)
Password(-verifier)basedauthentication[8]
(cid:1)
Diffie-Hellmanbasedkeyagreement[13]
(cid:1)
functions, among the existing verifier-based proto-
cols. Security proof of AMP is handled in the full
paperversion[22].
2. AMP ProtocolDesign
2.1.Preliminaries
AMP is typically the two party case so that we
use
Passwordfileprotection
Forachievingthegoal,weproposetwosimpleideas
(1) the amplified password proof that makes a user
amplifyhermnemonicpasswordwithahighentropy
sourceand provethatsheknowsit, and(2) theam-
plified password file that makes a server store the
amplified verifier for resisting a serverfile compro-
mise. Fromthepointofview,wenameourprotocol
AMPthatstandsfor“Authenticationandkeyagree-
ment via Memorable Password”. We also present
severalvariantsofAMPandcomparetheefficiency
of all verifier-based protocols in the end. Actually
AMP is the most efficient protocol with plentiful
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
and
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
for describing a client and a
server, respectively.
(cid:16)(cid:18) (cid:17)
(cid:9)
indicates an adversary
regardless of her passivity and activity.
(cid:19)
and
(cid:20)
denote a password and salt, respectively.
(cid:22)
(cid:21)
means a comparison of two terms, for example,
(cid:23) (cid:22)(cid:25)
(cid:21)
(cid:24)
. Let
(cid:26)(cid:28) (cid:27)(cid:30) (cid:29) (cid:31)" !$ #
denote the set of finite binary
strings and
(cid:26)(cid:28) (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) !(cid:28) &
the set of infinite ones.
’
is
our security parameter long enough to prevent
brute-force attacks. We set
(cid:3)) (
’(cid:30) *, +. -" ’
,
/
(
’(cid:30) *(cid:18) 02 134 ’
,
and
5
(
’(cid:30) *6 0 73 ’
when we assume the length of
’
is around 80 bits.
8
(
*: 9; (cid:26)(cid:28) (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) ! #: <= (cid:26)> (cid:27)? (cid:29) (cid:31)(cid:15) !> @BADCF E
means a collision-free one-way hash function such
as SHA-1 and RIPEMD-160. All hash functions
are assumed to behave like random oracles for
securityproof[3].Notethatweabbreviateamodular
notation“
GI HK J(cid:18) L
”forconveniencehereafter.
RANDOM ORACLE. We assume random oracles
8N M
(
*O 9P (cid:26)> (cid:27)? (cid:29) (cid:31)(cid:15) !(cid:15) # <= (cid:26)> (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) ! @BADCF E
for
(cid:5); QS R
(cid:31)T (cid:29)V U(cid:28) W
. If
(cid:16)(cid:18) (cid:17)
(cid:9)
sends queries
X
7
(cid:29)> X
1
(cid:29)(cid:28) X 3 (cid:29)
(cid:21)D(cid:21)Y(cid:21) to the random oracle
8 M
, she can receive answers
8 M
([ Z] \
*
, all indepen-
dentlyrandomvalues,fromtheoracle. Forpractical
recoveries of random oracles in the real world, we
define;
8
7
((cid:6) ^
*
(cid:22)
8
(
(cid:27)" (cid:27)‘
^
_ _(cid:27)T (cid:27)T *
,
8
1
((cid:6) ^
*
(cid:22)
8
(
(cid:27)(cid:30) (cid:31)4
^
_ _(cid:27)? (cid:31)> *
,
8 3
(a ^
* (cid:22) 8
(
(cid:27)(cid:30) (cid:31)b
^
_ _c(cid:31)% (cid:27)b *
,
8? d
((cid:6) ^
* (cid:22) 8
(
(cid:31)% (cid:27)‘
^
_ _e(cid:31)> (cid:27)T *
and
8N f
(a ^
*
(cid:22)
8
(
(cid:31)" (cid:31)4
^
_ _e(cid:31)T (cid:31)> *
byfollowingtheconstructions
given in the Bellare and Rogaway’s work[3].
_
denotestheconcatenation.
NUMERICAL ASSUMPTION. The security of
AMPreliesontwofamiliarhardproblemswhichare
believedinfeasibletosolveinpolynomialtime. One
istheDiscreteLogarithmProblem;givenaprime
L
,
a generator
g
of a multiplicative group
hi j#
, and an
element
g4 k
Q
hi j#
, find the integer
^l Qm R
(cid:27)? (cid:29)(cid:6) Lo np -$ W
.
The other is the Diffie-Hellman Problem; given a
prime
L
, a generator
g
of a multiplicative grouphi j#
, and elements
g4 k
Q
hi j#
and
gK q
Q
h] j#
, find
g k% q
Q
h j#
. Thesetwoproblemsholdtheirproperties
inaprime-ordersubgroup[28].
We assume that all numerical operations are on
thecyclicgroupwhereitishardtosolvetheseprob-
lems. We consider the multiplicativegroup
hi j#
and
actually use its prime-order subgroup
hs r
. For the
purpose,
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
chooses
g
thatgeneratesaprime-order
subgroup
ht r
where
L
(cid:22)S u(cid:28) v(cid:18) w
(cid:31)
. Note that a prime
u
mustbesufficientlylarge(
x
(cid:3)y (
’(cid:30) *
)toresistPohlig-
Hellman decomposition and various index-calculus
methodsbutcanbemuchsmallerthan
L
[28,31,32].
It iseasyto make
g
by
(cid:23) j$
A
z
7 E(cid:6) {
r
where
(cid:23)
generates
hi j#
.
h r
ispreferredforefficiencyandforpreventing
small subgroup confinement more effectively. By
confiningallexponentiationtothelargeprime-order
subgroupthrough
g
of
h r
,eachpartyoftheprotocol
isabletodetecton-lineattackswheneverareceived
exponentialisconfined toasmallsubgroup, forex-
ample,asquarerootattack[28]. Wecanuseasecure
primemodulus
L
suchthat
(
L| n} (cid:31)> *V ~(cid:15) -
u
isalsoprime
oreachprimefactorof
(
L] n(cid:127) (cid:31)> *) ~" -
u
islargerthan
u
,or
asafeprimemodulus
L
suchthat
L
(cid:22)
-
uN w
(cid:31)
[23].We
stronglyrecommendto usethesecureprimemodu-
lus because it is relativelyeasier to find[23] and al-
lowsmuchsmaller
u
,e.g.,closeto
(cid:3)) (
’(cid:30) *
who knows a low entropy secret called a password
makes a counterpart B convinced that A is who
knowsthepassword.
If A is a user while B is a server, then this defini-
tiondealswitharemoteuseraccessinadistributed
environment. We can consider two kinds of setup
for the password proof. They are (1) a symmetric
setup in which both A and B uses a password for
proof and (2) an asymmetricsetup in which A uses
a password while B uses its verifier for proof. The
asymmetricsetupcouldbenefitfromsaltformaking
itdifficultforadversariestocompileadictionaryof
likelypasswords. Theasymmetricsetupgivesbetter
security than the symmetric setup because a client
impersonation is infeasible even if a server file is
compromised. Asforthesecurityoftransmittingthe
password information, we can define two kinds of
passwordproof.
Definition2 A Secure Password Proof defines: a
party A successfully performs the Password Proof
without revealing the information about the pass-
worditself.
Actually after the
.
2.2.OurIdea
Our idea is simply to “amplify” the low entropy
of passwords with a high entropysource to prevent
dictionary attacks. The so-called amplified pass-
word is a time-variant parameter with high entropy
while the mnemonic password is a time-invariant
parameterwithlowentropy. Therefore,itiseasyto
prove the security of the amplified password based
protocol in the random oracle model[22]. On the
basis of this idea, we secure (1) the registration of
the password, (2) the transmission of the password
information between the communicating parties
and,(3)thepasswordfilemaintainedbyaserver.
DEFINITIONS. We give useful definitions for
describingouridea.
Definition1 A Password Proof defines: a party A
(cid:128)
number of trials with differ-
ent likely passwords, an adversary will be allowed
the
1y (cid:129)(cid:15)
7
(cid:130)e(cid:131)) (cid:132)
z(cid:134) (cid:133)
probabilityofasuccessfulparticipation
because the password is a time-invariant parame-
ter. The probabilityis negligibleto revealthe pass-
wordinformationbecausewrongparticipationswill
becountedanddeniedbythecounterpart. Sowesay
thesecurepasswordproofdoesnotrevealanyinfor-
mationaboutthepassword.
Definition3 AnInsecurePasswordProofdefines:a
party A successfully performs the Password Proof
butfailstheSecurePasswordProof,orapartyAsuc-
cessfully performs the Password Proof by showing
allorpartialinformationaboutthepasswordthatis
notnegligible.
The insecure proof can be classified into the fully
insecure password proof such as PAP(password
only),thepartiallyinsecurepassword proofsuchas
CHAP(challenge and handshake), and the crypto-
graphically insecure password proof such as some
cryptographicprotocols[1,29].
Definition4 An Amplified Password Proof defines:apartyAwhoknowsapasswordamplifiesthepass-
wordwithahighentropysourceandmakesacoun-
terpartB convincedthatAiswhoknowstheampli-
fiedpassword.
THE AMPLIFICATION. Our amplification idea is
very simple, for example,
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
proves her knowl-
edgeofapassword
(cid:19)
bygiving
^
w
(cid:19)O G(cid:135) HK J
u
rather
than
(cid:19)
only, while
^
is the randomly-chosen high
entropyinformation. Forthepurpose,afresh
^
must
becommittedsecurelyby
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
priortoherproofin
eachsession. (
^
w
(cid:19)
isnotguessableatallwhereas
(cid:19)
isguessable,if
^
iskeptsecurely.)
Definition5 The Amplified Password
(cid:136)
defines a
value that only who knows
(cid:19)
and
^
can make from
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
where
^
is chosen randomly at
h r
and
(cid:19)
isamnemonicpasswordchosenat
(cid:26)> (cid:27)? (cid:29) (cid:31)(cid:15) !> (cid:140) ADCF E
foran
arbitraryamplificationfunction
(cid:137); (
*
.
Note
(cid:136)
istime-variantwhile
(cid:19)
istime-invariant.We
configurethisideaasanamplifiedpasswordproof.
THE AMPLIFIED PASSWORD PROOF. Assume
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
knows
(cid:19)
and
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
has
g4 (cid:141)
. The amplified
passwordproofisbasicallycomposedofthreesteps:
(1) the initial commitment step performs a secure
commitmentofthehighentropyinformation,(2)the
challengesteptransmitsarandomchallenge,(3)the
responsestepperformsaknowledgeproofaboutthe
amplified password
(cid:136)
. We define three functions
for each step; theyare
(cid:142)
7
(
*
for initial commitment,
(cid:142)
1
(
*
forachallenge,and
(cid:143)
(
*
foraresponse.
Definition6 The Amplified Password Proof per-
forms:
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
who knows her password
(cid:19)
randomly
chooses a high entropy source
^
and securely com-
mitsitto
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
.
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
whoknows
g4 (cid:141)
picks
(cid:144)
atrandom
and asks
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
if she knows the password and the
committedinformation.
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
respondswiththefact
she knows the amplified password
(cid:136)
that includes
thepasswordandthecommittedinformation.
(cid:5)[ (cid:153)(cid:154) (cid:5)
5
(cid:5)(cid:8) (cid:155)4 (cid:3)K (cid:7)
(cid:12)(cid:28) (cid:156)O (cid:156)
v
(cid:9)$
(cid:5)
£
(cid:145)(cid:147)
5(cid:8) (cid:156)
L‘ (cid:12)
(cid:146)D(cid:148)D(cid:149)
(cid:9)% (cid:153)
(cid:153)⁄ £>
(cid:150)
5(cid:158)
(cid:9)ƒ
kA=(cid:157)(cid:15) (cid:159)n
¡ qA(cid:157)(cid:28) (cid:160) n
¥
AY§¤=n
E
E
E
(cid:151)
(cid:7)
HT
8
(cid:152)
(cid:155)4 (cid:3)¢ (cid:3)(cid:6) (cid:9)> (cid:153) g (cid:9)
For secure commitment,
(cid:142)
7
(
*
should not reveal
^
even to
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
. So we set
(cid:142)
7
(
*
(cid:22)
g k
relying on
theone-waypropertyofthemodularexponentiation
^
<= gK k
. While
(cid:142)
1
(
*
transmits a fresh challenge,
(cid:143)
(
*
must imply the fact that
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
knows
(cid:136)
with-
out revealinganyinformationabout
(cid:136)
,
^
and
(cid:19)
. If
weset
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
(cid:22) (a ^ w
(cid:19)⁄ *
z
7 G(cid:135) HK J
u
,thenonlywho
knows
^
and
(cid:19)
can compute
(cid:136)
where
^
w
(cid:19)
is not
known. Soweset
(cid:142)
1
(
*
(cid:22)
g k%A '“ (cid:141) E q
totransmitaran-
domchallengewithoutrevealingtheinformationre-
lated to
(cid:19)
,
^
, and
(cid:144)
. Then we set
g q
as verification
information.
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
can make it by computing that
(
g k>A '“ (cid:141) E q$ * §
(cid:22)
gK q
.
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
who knows
(cid:142)
7
(
*
as well
as
gK (cid:141)
, can make
(cid:142)
1
(
*
bycomputing
(
gK k$ gK (cid:141)(cid:30) *« q
. As a
result,bothpartiescanget
gK q
,theverificationinfor-
mation, so we set
(cid:143)
(
*
(cid:22)
gK q
or its hash value. Of
course,theycanmake
gK k% q
duetotheDiffie-Hellman
scheme. Wecanderivethefollowingtheoremthatis
easy to proveby assuming
^
is randomlychosen at
ht r
. (hint:
(cid:136)
isnotderivablefrom
gK k
,
g k%A '“ (cid:141) E q
and
gK q
evenif
g4 (cid:141)
iscompromised.
(cid:19)
aswellasafresh
^
arenecessaryforcomputing
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
.)
Theorem1 The Amplified Password Proof is a Se-
curePasswordProof.
This means
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
never shows the password itself
for herproof, rather sheprovesthe fact ofknowing
it. Theamplifiedpasswordproofideaisverysimilar
to the zero-knowledge proof in that sense, but
g4 (cid:141)
must be kept securely because (1) the entropy of
(cid:19)
isextremelylow,and(2)
gK (cid:141)
canbeusedforaclient
impersonationaswellasaserverimpersonation(we
discussitlater).
THE AMPLIFICATION AND KEY EXCHANGE.
It is easy to add key exchange to the amplified
password proof because we already utilized the
Diffie-Hellman scheme. For key exchange,
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
can derive a session key from
gK k% q
and show she
agreesonit.
(cid:11)‹ (cid:12)(cid:15) (cid:14)
isalsoabletorunthesamething.
A strong one-way hash function must be the best
tool for this. For
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
who wishes to agree on
gK k% q , we set
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
(cid:22) ((cid:6) ^ w
(cid:19)⁄ *
z
7
^
GI HK J
u
. For
mutual key confirmation as well as mutual explicit
authentication, however, the protocol must be con-(cid:136) (cid:22)
(cid:143)
(cid:143)
(a ^
7V 7
71
(cid:9)
(cid:17)
w
(cid:22)
(cid:22)
(cid:5)
v
(cid:145)(cid:147) (cid:146)D(cid:148)D(cid:149) (cid:150)T ((cid:6) (cid:5)fi ›
(cid:29)y (cid:19)⁄ *
^(cid:127) Q
(cid:133) h r
(cid:22)
k(cid:142) g
7
z ^
u 7(cid:19)⁄ * GI HK J
((cid:23)
(cid:22)
§(cid:142) *
1
(• (cid:23)(cid:22)
8 *
7 7
((cid:6) (cid:5)(cid:8) › •
8 (cid:29)‚ (cid:142) (cid:29) *
7 71
((cid:6) (cid:5)(cid:8) › •
3‡8 (cid:29)‚ (cid:142) (cid:29) *
71
(cid:22)
(cid:144)i (cid:143) (cid:21) (cid:143)
71 1) 1‰ …
(cid:148)D(cid:190)" ¿? (cid:192)) (cid:150)
(cid:31)
„
„
(cid:21)
MDfl% (cid:176)–(cid:10) †
=n
– †V ·" (cid:181)¡(cid:130)
(cid:132)c¶ n
M”fl% (cid:176) (cid:176)»
A (cid:157)(cid:15) (cid:159) (cid:159)=n
M”fl% (cid:176) (cid:176)»¡A
(cid:157)(cid:28) (cid:160) (cid:160)n
(cid:145)(cid:4) `ˆ ´¤ ˜,
E
E
´t (cid:192)
H(cid:15) ¯V H
(cid:149)
H
(cid:146)
(cid:151)
‡
(cid:144)
(cid:142)
(cid:24)o
•
(cid:143)
(cid:17)
(cid:143)
H" (cid:152)
(cid:9) (cid:7)
5
Q
(cid:133)
(cid:22)
1
(cid:22)
(cid:22)
1
7 1
(cid:9) (cid:5)
v
1V 1
((cid:6) (cid:5)(cid:8) ›
(cid:141)(cid:29)y g *
(a (cid:5)(cid:8) ›
(cid:141)8 (cid:29)y g *
ht r
(
(cid:141) q(cid:142) g *
7
(
q(cid:142) *
7
( (cid:24)
*8
7
((cid:6) (cid:5)(cid:8) ›
(cid:22) ‡ 8 (cid:29)‚
1
(cid:22)
(cid:144)i (cid:143) (cid:21)
7V 7
((cid:6) (cid:5)(cid:8) ›
(cid:22) 38 (cid:29)‚
(cid:142)
(cid:142)
7
(cid:143)
1
•
(cid:29)
7 1
•
(cid:29)
1
1
*
*
figuredbyfourstepstoadd
(cid:11)‹ (cid:12)(cid:15) (cid:14)
’sresponse. Figure
1describesabasicversionofourprotocol.Notethat
thecases,
^˘ Q
(cid:26)> (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) ! 7
,
(cid:144)
Q
(cid:26)> (cid:27)? (cid:29) (cid:31)" ! 7
,
(cid:142)
7
Q
(cid:26)> (cid:27)? (cid:29) (cid:31)" ! 7
,
(cid:142)
1
Q
(cid:26)> (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) ! 7
,andtheirsmallsubgroupconfinement
must be avoided for a security reason. Both parties
compute exponentials as like the Diffie-Hellman
scheme. The difference is that a random exponent
of
(cid:23)
and a base of
(cid:142)
1 are tactfully transformed.
We call this protocol
˙(cid:147) ¨˚ (cid:201)(cid:154) ¸
(AMP-naked) because
it cannot provide the asymmetric setup security,
i.e. it is vulnerable to a client impersonation if
gK (cid:141)
is compromised. For example, if an adversary
(cid:16)(cid:18) (cid:17)
(cid:9)
who knows
g4 (cid:141)
sends
(
g4 (cid:141)(cid:30) *y k
to
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
, then
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
will respond with
(cid:142)
1
(cid:22)
(
g4 (cid:141)(cid:15) k$ g4 (cid:141)(cid:30) *y q
(cid:22)
g4 (cid:141)" q k>A ' 7 E
and compute
(cid:24)(cid:204) (cid:22)
(
gK (cid:141)(cid:15) kb *« q
.
(cid:16)(cid:18) (cid:17)
(cid:9)
who chose
^
can
cheat
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
by removing
^
w
(cid:31)
from
(cid:142)
1 and raising
it to
^
. As a result,
˙(cid:147) ¨| (cid:201)“ ¸
provides the security
of the symmetric setup even if
(cid:11)‹ (cid:12)(cid:15) (cid:14)
stores
g4 (cid:141)
. So
we can allow
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
to store
(cid:19)
rather than
g (cid:141)
in this
protocol. However, it is easy to preclude the client
impersonation attack. Firstly, we propose an e-
protectionmethodforthepurpose.If
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
and
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
compute a time-variant parameter
(cid:9)
, for example,
(cid:9) (cid:22)
8
(
(cid:142)
7
(cid:29)V (cid:142)
1
(cid:29)
(cid:5)(cid:8) ›
(cid:29)
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
(cid:29)V (cid:11)(cid:13) (cid:12)(cid:15) (cid:14)(cid:10) *
, and embed it in
(cid:23)
and
(cid:24)
client impersonationattack(see section3.1). There
ismorepowerfulideanamedanamplifiedpassword
fileforimprovingthesecurityofthepasswordfile.
THE AMPLIFIED PASSWORD FILE. As for the
password file, an asymmetric setup is preferred
because of the weakness of text-equivalence in
a symmetric setup[8, 19, 38], meaning that the
passwordfilecanbeusedforaclientimpersonation
if it is compromised in the symmetric setup. How-
ever, the low entropy of passwords still makes the
password file vulnerable to dictionary attacks and
server impersonation attacks even if each password
ishashedorexponentiatedintheasymmetricsetup,
for example, a verifier such that
,thenthepasswordfileisprotectedagainstthe
˝
(cid:22)
8
(
(cid:19)⁄ *
. For
the password file protection, encryption can be
considered but key management and performance
issues must be overcome. The amplified password
file is a password file of which a record contains
an amplified verifier for precluding all the related
attacks.
Definition7 TheAmplifiedVerifier
˛
definesavalue
that only who knows
ˇ
and
(cid:20)
can use for password
verificationwhere
ˇ
ischosenrandomlyat
ht r
and
(cid:20)
is chosen randomly at
(cid:26)> (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) ! C
. Set
˛ (cid:22) g Ac— '⁄ (cid:209) Efi (cid:210) (cid:159)(cid:8) (cid:211)where
˝
(cid:22)
8
(a (cid:5)(cid:8) ›
(cid:29)y (cid:19)⁄ *
. If
(
ˇ
w (cid:20)
*
z
7
(cid:22)
(cid:31)
,
˛
isnotthe
amplifiedverifier. (Note:
˛
issemi-permanent.)
Arecordoftheamplifiedpasswordfileis
(a (cid:5)(cid:8) ›
(cid:29)
(cid:20)
(cid:29)V ˛? *
.
It is easy to update
ˇ
or
(cid:20)
in the amplified pass-
word file, e.g., by computing
˛ Ac— '“ (cid:209) Efi Ac—« (cid:212) '“ (cid:209) Efi (cid:210) (cid:159)
where
ˇ (cid:212) isanewone. Theamplifiedpasswordfilemaybe
stored ina serverstorage but ˇ mustbe handledse-
curely as a server’s private key. It is recommended
that ˇ should be loaded from a secure storage de-
vice such as a smart card when the system is initi-
ated. Since ˇ resides in the server’srun-time mem-
ory, a memory dump and its analysis are necessary
for running a server impersonation attack or a dic-
tionary attack with the compromised password file.
Itiseasytoprovethattheamplifiedpasswordfileis
secureagainstsuchattacksif
ˇ
iskeptsecurely.
Theorem2 The Amplified Password File is secure
againstpasswordfilecompromiserelatedattacks.
AMP willbe the protocol that enables thoseampli-
fiedpasswordideas.
3. AMPProtocol Family
This section describes AMP (Figure 2) and its
variantsinmoredetail.
3.1.AMPProtocolDescription
We set (cid:137)| ( (cid:19)(cid:139) (cid:138) ^ * (cid:22) ((cid:6) ^ w ˝(cid:154) * z 7 (a ^ w (cid:9) * where ˝ (cid:22) 8
7
(a (cid:5)(cid:8) › (cid:29)y (cid:19)⁄ *
and
(cid:9) (cid:22) 8
1
( (cid:142)
7
(cid:29)‚ (cid:142)
1
(cid:29) (cid:5)(cid:8) › (cid:29) (cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9) (cid:29)) (cid:11)‹ (cid:12)(cid:15) (cid:14)(cid:10) *
.
PROTOCOL SETUP. This step determines and
publishesparametersofAMP.
1. Global Parameters:
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
and
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
share
g
,
L
and u inanauthenticmanner.Forexample, (cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
signsandpublishesthoseparameters. (
(cid:5)(cid:8) ›
indi-
cates a precise user identifier while
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
and
(cid:11)‹ (cid:12)(cid:15) (cid:14)
denote client and server entities respec-
tively.)
2. Secure Registration:
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(or a user) chooses
(cid:19)
Q
(cid:133) (cid:26)(cid:28) (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) !% (cid:140) ADC(cid:10) E andnotifies (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) inanauthen-
ticandconfidentialmanner,forexample,byei-
therwayofthefollowing.
(a) (on-line registration)
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
computes
g (cid:211)
where
˝
(cid:22)
8
7
((cid:6) (cid:5)(cid:8) ›
(cid:29)) (cid:19)⁄ *
with a largerandom pad for precluding a
forwardsearchattackunder
andencryptsitalong
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
’spublic
key. Otherwise,
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
uses a digital en-
velope for encrypting
g (cid:211)
undera random
key.Then
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
submitsitto
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
.
(b) (off-line registration) A user visits (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) ’s
office and registers (cid:19) with a picture id
proof.
3. ServerStorage:
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
chooses
(cid:20) Q (cid:133) (cid:26)(cid:28) (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) !(cid:28) C
and
stores
(a (cid:5)(cid:8) › (cid:29) (cid:20) (cid:29)‚ ˛ (cid:22) g Ac— '⁄ (cid:209) Efi (cid:210) (cid:159)(cid:8) (cid:211) *
after computing ( ˇ w (cid:20) * z 7 GI HK J u
and
( g (cid:211) * AY— '“ (cid:209) E (cid:210) (cid:159)
underhispri-
vatekey
ˇ
.
(cid:11)‹ (cid:12)(cid:15) (cid:14)
shoulddiscard
g (cid:211)
(andtheraw
datasuchas
(cid:19)
or
˝
).
PROTOCOL RUN. Notethatthecases,
^(cid:213) Q
(cid:26)> (cid:27)? (cid:29) (cid:31)" ! 7
,
(cid:144)
Q
(cid:26)(cid:28) (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) ! 7
,
(cid:142)
7
Q
(cid:26)> (cid:27)? (cid:29) (cid:31)" ! 7
,
(cid:142)
1
Q
(cid:26)(cid:28) (cid:27)(cid:30) (cid:29) (cid:31)" ! 7
,
(cid:26)> (cid:27)? (cid:29) (cid:31)" ! 7
˛
Q
,andtheirsmallsubgroupconfinementmust
beavoidedforasecurityreason.Thefollowingsteps
explainhowtheprotocolisexecutedinFigure2.
1.
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
computes
(cid:142)
7
(cid:22) g4 k
bychoosing
^(cid:127) Q
(cid:133) ht r
andsends
((cid:6) (cid:5)(cid:8) ›
(cid:29)‚ (cid:142)
7
*
to
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
.
2. Afterreceivingmessage1,
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
loads
(cid:20)
and
˛
,
and computes
(cid:142)
1
(cid:22)
(
(cid:142)
7
*y q(cid:15) ˛ Ac— '“ (cid:209) E q
by choos-
ing
(cid:144)
Q
(cid:133) hs r
. This can be done efficiently
by the simultaneous multiple exponentiation method[27]. Note that (
g4 k(cid:15) g (cid:211) *« q
(cid:142) 1 (cid:22) ( (cid:142) 7 *y q(cid:15) ˛ Ac— '“ (cid:209) E q (cid:22)
. Hesends
(cid:142)
1 to
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
.
3. While waiting for message 2,
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
computes
˝
(cid:22)
8
7
((cid:6) (cid:5)fi ›
(cid:29)y (cid:19)⁄ *
and
(cid:214)
(cid:22) ((cid:6) ^ w
˝(cid:154) *
z
7 G(cid:135) HK J
u
. Af-
ter receiving message 2,
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
computes
8
1
(
(cid:142)
7
(cid:29)V (cid:142)
1
(cid:29)
(cid:5)(cid:8) ›
(cid:29)
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(cid:29)) (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) *
(cid:9)
(cid:22)
, u
(cid:136)
(cid:22)
(cid:214)
((cid:6) ^
w
(cid:9)
*(cid:215) GI HK J
and
(cid:23) (cid:22) ( (cid:142)
1
* §
.Notethat gK q k>A '⁄ (cid:216) E
(cid:23) (cid:22) ( g k>A ' (cid:211) E q$ * § (cid:22)
.Shecomputes
•
7
(cid:22) 8 3 ( (cid:23) *
and
8? d
((cid:6) (cid:5)fi ›
(cid:29)V (cid:142)
7
(cid:29)
•
7
*
(cid:143)
7) 7
(cid:22)
. Shesends
(cid:11)‹ (cid:12)(cid:15) (cid:14)(cid:215) (cid:143)
7) 7 .
4. While waiting for message 3,
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
com-
putes
(cid:9)
(cid:22)
8
1
(
(cid:142)
7
(cid:29)‚ (cid:142)
1
(cid:29)
(cid:5)(cid:8) ›
(cid:29)
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(cid:29)) (cid:11)‹ (cid:12)(cid:15) (cid:14)(cid:10) *
, (
(cid:142)
7
*« q> g(cid:30) (cid:216)(cid:8) q (cid:22)
(
gK k(cid:28) gK (cid:216)F *y q (cid:22) g k>A '⁄ (cid:216) E q
(cid:24)(cid:158) (cid:22)
,
•
1
(cid:22) 8 3
(
(cid:24) *
and
(cid:143)
7 1
(cid:22)
8 d
((cid:6) (cid:5)(cid:8) ›
(cid:29)‚ (cid:142)
7
(cid:29)
•
1
*
. After receiving
message 3,
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
compares
(cid:143)
7 1 with
(cid:143)
7) 7 . If
theymatch,hecomputes
(cid:143)
1) 1
(cid:22)
8 f
(a (cid:5)(cid:8) ›
(cid:29)V (cid:142)
1
(cid:29)
•
1
*
andsends
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
(cid:143)
1) 1 . Thismeansheauthenti-
cated
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
whoknows
(cid:136)
(actually
˝
andthus(cid:19)
(cid:9)
(cid:22)
8
1
(
(cid:214)
(cid:142)
7
(cid:136)
(cid:143)
(cid:143)
(cid:145)(cid:4) (cid:146)Y(cid:148)”(cid:149)(cid:10) (cid:150)(cid:217) (a (cid:5)(cid:8) ›
(cid:29)y (cid:19)⁄ *
^(cid:127) Q
(cid:133) h r
(cid:22)
k(cid:142) g
7
(a (cid:5)(cid:8) ›
(cid:22) ˝ 8 (cid:29)y (cid:19)⁄ *
7
z((cid:6) ^
(cid:22) w u 7˝(cid:134) * GI HK J
(cid:5)(cid:8) › (cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
(cid:29)V (cid:142) (cid:29) (cid:29) (cid:29)V (cid:11)(cid:13) (cid:12)(cid:15) (cid:14)(cid:10) *
1
(a ^ (cid:9)
w(cid:22) u
(cid:214) *(cid:215) GI HK J
((cid:23)
(cid:22)
§(cid:142) *
1
(• (cid:23)(cid:22) 38 *
7
(a (cid:5)(cid:8) › •
(cid:22) *8? d (cid:29)V (cid:142) (cid:29)
77) 7 7
(a (cid:5)(cid:8) › •
(cid:22) ‡ *8N f (cid:29)V (cid:142) (cid:29)
77 11
(cid:9) (cid:5)
(cid:22)v
(cid:21) (cid:143)(cid:17) (cid:144)i (cid:143)
7 1V 11 …
(cid:148)Y(cid:190)T ¿(cid:30) (cid:192)V (cid:150)
„
„
-
MDfl% (cid:176)–(cid:10) †
=n
– †V ·" (cid:218)¡(cid:130)
(cid:132)c¶ n
M”fl% (cid:176) (cid:176)»
A =(cid:157)(cid:15) (cid:159)n
M”fl% (cid:176) (cid:176)»¡A
(cid:157)(cid:28) (cid:160)n
(cid:145)] `ˆ ´o
(cid:21)
E(cid:159)
E(cid:160)
´s (cid:192)
H" ¯) H
(cid:149)
H
(cid:146)
(cid:151)
‡
(cid:144)
(cid:142)
(cid:9)
(cid:24)(cid:219)
•
(cid:143)
(cid:17)
(cid:143)
HT (cid:152)
(cid:9) (cid:7)
5
Q
(cid:133)
(cid:22)
1
(cid:22)
(cid:22)
(cid:22)
1
7 1
(cid:9) (cid:5)
v
1) 1
((cid:6) (cid:5)fi › (cid:20)
(cid:29) (cid:29)V ˛(cid:30) *
((cid:6) (cid:5)fi › (cid:20)
8 (cid:29) (cid:29)V ˛(cid:30) *
ht r
(
q '“ (cid:209) qAc— E(cid:142) * ˛
7
( (cid:5)(cid:8) › (cid:2)]
8 (cid:142) (cid:29)‚ (cid:142) (cid:29) (cid:29)
71 1
( (
(cid:22)
q (cid:216)(cid:8) q(cid:142) * g (cid:142)
7
( (cid:24)38 *
(a (cid:5)(cid:8) › •
(cid:22) ‡ 8(cid:30) d (cid:29)V (cid:142) (cid:29)
7
(cid:22)
(cid:144)(cid:217) (cid:143) (cid:21) (cid:143)
7) 7 7 1
(a (cid:5)(cid:8) › •
(cid:22) 8? f (cid:29)V (cid:142) (cid:29)
1
(cid:22)
(cid:3)a (cid:5)(cid:8)
g
7
*
1
*
1
(
(cid:142) g
7
(cid:7)(cid:10) (cid:9)
(cid:29)) (cid:11)‹
(cid:216) q*
(cid:211)
(cid:12)(cid:15)
*
(cid:14)(cid:10)
q
*
since
^
is secure from
g k
), and agreed upon
• (
(cid:22)
•
7
(cid:22)
•
1
*
.
5. While waiting for message 4,
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
computes
(cid:143)
1 7
(cid:22)
8 f
((cid:6) (cid:5)(cid:8) ›
(cid:29)‚ (cid:142)
1
(cid:29)
•
7
*
. After receiving mes-
sage 4, she compares
(cid:143)
1 7 with
(cid:143)
1V 1 . If they
match,
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
also agrees on
• ( (cid:22) •
7
(cid:22) •
1
*
withauthenticating
(cid:11)‹ (cid:12)(cid:15) (cid:14)
whoknows
˛
.
DISCUSSIONS.
˙(cid:147) ¨˚ (cid:201)
passesfourmessagesbetween
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
and
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
whoagreeon
g k>A '⁄ (cid:216) E q
andexplicitly
authenticateeachotherwhiletheyagreedon
gK k> q
in
˙(cid:147) ¨˚ (cid:201)(cid:154) ¸
. In the full paper version[22], we give our
security proof of AMP in the random oracle model
derivedfromtheBellareandRogaway’swork[3,4].
Forsecurityproof,wedefineaLong-livedWeak-key
generator (cid:220)
(
* for (cid:19) and a Short-lived Strong-key
generator (cid:221)
(
* for (cid:136) with classifying sessions de-
pendingontheabilityoftheadversaryintherandom
oracle model. We say (cid:220)
(
* <= (cid:221)
(
* due to
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
* .
Thenwecanprovethefollowingtheorem[22].
Theorem3 AMP is a secure authenticated key ex-
changeprotocolwith
(cid:220)
(
*
An adversary
.
(cid:16)(cid:18) (cid:17)
(cid:9)
may need a memory dump and
itsanalysis forgetting
ˇ
evenifshe compromised a
password file. Thee-protectionisnecessary for the
case that both the password file and
ˇ
are compro-
mised. So (cid:16), (cid:17)
(cid:9)
cannotfalselyconvince (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) thatshe
is
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
evenwith ˇ aswellasthepasswordfile. (cid:142) 1
and
(cid:23) ( (cid:22)(cid:222) (cid:24)
* hasasimilarstructureandtheirstatisti-
cal differencerelies onthatof
˝
and
(cid:9)
. However,it
is not a critical point due to the beneficial property
ofrandomoracles.
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
doesnotneedtoshow
(cid:19)
or
˝
evento
(cid:11)‹ (cid:12)(cid:15) (cid:14)
insecureon-lineregistration.
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
is
abletoupdate
ˇ
or
(cid:20)
intheamplifiedpasswordfile,
forexample,bycomputing ˛ Ac— '“ (cid:209) Efi Ac—« (cid:212) '“ (cid:209) E(cid:8) (cid:210) (cid:159) where ˇ (cid:212)
isanewprivatekey.Finaltwostepscanbemodified,
for example,
(cid:143)
7) 7
(cid:22)
8 d
( (cid:23)
(cid:29)V (cid:142)
7
(cid:29)V (cid:142)
1
(cid:29)
(cid:5)(cid:8) ›
(cid:29)
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(cid:29)V (cid:11)(cid:13) (cid:12)(cid:15) (cid:14)(cid:10) *
and
(cid:143)
1V 1
(cid:22)
8 f
( (cid:24)
(cid:29)V (cid:142)
1
(cid:29)‚ (cid:142)
7
(cid:29)) (cid:11)‹ (cid:12)(cid:15) (cid:14)(cid:28) (cid:29)
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(cid:29)
(cid:5)(cid:8) ›
*
. We can
choose salt
(cid:20)
implicitly by computing
‡
((cid:6) (cid:5)fi › (cid:29)) (cid:11)(cid:135) *
where
‡
( *
isanimplicitsaltfunction[6,10],forex-
ample,
˝
(cid:22)
8
7
(a (cid:5)(cid:8) ›
(cid:29)
‡
((cid:6) (cid:5)fi ›
(cid:29)) (cid:11)(cid:135) *F (cid:29)) (cid:19)⁄ *
. For updating the
existingsystemsuchasUnix,wecanmodify
˝
such
that ˝
(cid:22)
8
( (cid:20)
(cid:212) (cid:29)) (cid:19)⁄ * and sends
(cid:20)
(cid:212) inmessage2 where
8 ( (cid:20) (cid:212) (cid:29)y (cid:19)⁄ * isanexistingverifierfor (cid:20) (cid:212) Q (cid:133) (cid:26)(cid:28) (cid:27)(cid:30) (cid:29) (cid:31)" !% (cid:223) ADC(cid:10) E .3.2.AMPProtocolVariants
It is possible to derive variants from
˙(cid:147) ¨| (cid:201)
and
˙(cid:147) ¨˚ (cid:201)
˜
forseveralissues. Herewesummarizethem
brieflyduetothepagerestriction.
AMP (cid:224) . This protocol is a variant that excludes
the e-protection scheme from AMP.
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
and
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
do not need to compute
(cid:9)
for obtaining
(cid:23)
or
(cid:24)
respectively. Rather they agree on
gK k% q
as we did in ˙(cid:147) ¨˚ (cid:201) ˜ . Note ˙(cid:147) ¨| (cid:201) (cid:224) is secure against a
client impersonation even if the password file is
compromised. Thisisduetotheamplifiedpassword
fileonlyif
(cid:11)‹ (cid:12)(cid:15) (cid:14)
’sprivatekeyissecurelymaintained.
Weset
(cid:137)| ( (cid:19)(cid:139) (cid:138) ^ * (cid:22) (a ^ w ˝(cid:154) * z 7 ^ GI HK J u
for
˙(cid:147) ¨˚ (cid:201) (cid:224)
.
AMP
(cid:216)
. This protocol is a variantthat excludes the
amplified password file from AMP. The security
of the password file is only dependent upon the
e-protection scheme so that a client impersonation
is prevented but a server impersonation and a
dictionary attack is possible if the password file is
compromised. The difference in protocol setup is
that (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) stores (a (cid:5)(cid:8) › (cid:29) (cid:20) (cid:29)V ˛ (cid:22) g (cid:211) * where ˝ (cid:22) 8 7 ( (cid:20) (cid:29)) (cid:19)⁄ *
and
(cid:20) Q (cid:133) (cid:26)> (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) !> (cid:223) ADCF E
. Of course, implicit salt can be used. The difference in protocol run is that (cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
should compute the amplified password after
receiving
(cid:142)
1 .
˙(cid:147) ¨˚ (cid:201) (cid:216)
does not need a simultaneous
exponentiationmethodfor
(cid:142)
1 andasecurehandling
of
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
’s private key, but loses the AMP level
securityagainstapasswordfilecompromise. Weset
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
(cid:22) ((cid:6) ^ w
˝(cid:154) *
z
7
((cid:6) ^ w (cid:9)
*(cid:215) GI HK J
u
for
˙(cid:147) ¨˚ (cid:201) (cid:216)
.
AMP M . This protocol is a variant that allows
“implicit authentication” for efficiency. If explicit
authentication is not necessary, we can use
˙(cid:147) ¨| (cid:201)
M
in which the parties are implicitly authenticated
by using only first two steps of
˙(cid:147) ¨| (cid:201)
(of course,
it can be derived from
˙(cid:147) ¨˚ (cid:201) (cid:224)
or
˙(cid:147) ¨| (cid:201) (cid:216)
). Note
that implicit authentication always requires a con-
fidential session to be established.
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
sends
(cid:142)
7 to
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
who will respond with
(cid:142)
1
becausethedishonestpartyisnotabletogetthekey.
AMP
. Then, they
can simply communicate with each other under
the obtained session key. If one of them is not
who is claimed to be, they cannot communicate
' . This protocol is a variant that per-
turbsthestructuralsimilaritybetween
(cid:142)
1
(cid:22) g k%A ' (cid:211) E q
and
(cid:23) (cid:22)p (cid:24)(cid:219) (cid:22)
g k%A 'Æ (cid:216) E q
. However,suchasimilarityis
notanissueatallduetothepropertyofrandomora-
clesso that
˙(cid:147) ¨˚ (cid:201) '
isaredundantprotocol ofAMP
family. We give this protocol as a reference only.
The main difference in protocol run is that both
parties compute
(cid:9)
7
(cid:22)
8 1
(
(cid:142) 7 (cid:29)
(cid:5)(cid:8) ›
(cid:29)
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(cid:29)V (cid:11)(cid:13) (cid:12)(cid:15) (cid:14)(cid:10) *
and
(cid:9)
1
(cid:22) 8 3 ( (cid:142)
7
(cid:29)‚ (cid:142)
1
(cid:29) (cid:5)(cid:8) › (cid:29) (cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9) (cid:29)) (cid:11)‹ (cid:12)(cid:15) (cid:14)(cid:10) *
. We
set
(cid:136)
(cid:22) (a ^‘ (cid:9)
7
w
˝(cid:154) *
z
7
(a ^ w (cid:9)
1
*(cid:215) GI H4 J
u
and
(cid:142) 1 (cid:22)
(
(cid:142) (cid:216) 7 (cid:159) g (cid:211) *y q . Note that (cid:142) 1 (cid:22) g k(cid:28)A (cid:216) (cid:159) ' (cid:211) E q while
(cid:23) (cid:22)
g k%A '⁄ (cid:216) (cid:160) E q .
AMP
'⁄ '
. This protocol is another form of a
redundant protocol. The difference in protocol
setup is that
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
stores
(a (cid:5)(cid:8) › (cid:29)‚ ˛ (cid:22) g z Ac— '“ (cid:209) Efi (cid:210) (cid:159)fi (cid:211) *
.
Protocol run is different that
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
chooses two
ephemeral parameters such as
^
7 and
^
1 .
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
computes (cid:142)? (cid:226)
(cid:22)
^
7
w
˝; GI HK J
u
and (cid:142) 7
(cid:22)
g4 k (cid:160) ,
sends them to
(cid:11)‹ (cid:12)(cid:15) (cid:14)
who will respond with
(cid:142)
1 .
We set
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
(cid:22) ((cid:6) ^
1
nª ˝(cid:134) *
z
7
(a ^
7
w (cid:9)> ^
1
*(cid:215) GI H4 J
u
and (cid:142) 1 (cid:22) ( (cid:142) (cid:216) 7 (cid:159) g z (cid:211) *y q . (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) gets (cid:24) by computing (
g(cid:30) * (cid:157)(cid:28) (cid:228) q
(
˛? * Ac— '“ (cid:209) E q
(
(cid:142) 7 *y (cid:216)« q . Therefore,theagreedkeyis g kA (cid:159) '⁄ (cid:216)(cid:8) k (cid:160) E q while (cid:142) 1 (cid:22) g kA (cid:160) z (cid:211) E q .
AMP
˜
' . ˙(cid:147) ¨˚ (cid:201)
˜
provided the symmetric
setup security even if (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) stored a verifier
gK (cid:141)
. We can extend this protocol for verifier-
based authentication in the asymmetric setup
model. The main difference in protocol setup
is that
˛
(cid:22)
8
1
( (cid:20)
(cid:29)) ˝(cid:134) *
where
˝
(cid:22)
8
7
(a (cid:5)(cid:8) ›
(cid:29)y (cid:19)⁄ *
and (cid:20) Q (cid:133) (cid:26)(cid:28) (cid:27)(cid:30) (cid:29)% (cid:31)(cid:15) !% (cid:223) A”CF E
. Therefore,
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
can save a
storage for
˛
compared to AMP, but loses several
security benefits. We define functions such that
(cid:229) ((cid:6) ^
(cid:29)y (cid:144)(cid:30) *
(cid:22)
^
w
(cid:144)(cid:13) GI HK J
u
and
(cid:230)
(a ^
(cid:29)y (cid:144)(cid:30) *
(cid:22)
^
n‹ (cid:144)‹ G(cid:135) HK J
u
,
and set
(cid:143)
7V 7
(cid:22)
(cid:229) ((cid:6) (cid:9)
(cid:29)y ˝(cid:154) *
and
(cid:143)
1V 1
(cid:22)
8 f
(
(cid:142)
1
(cid:29)
•
1
*
where
(cid:9) (cid:22)
8 d
((cid:6) (cid:5)fi ›
(cid:29)
(cid:2)] (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
(cid:29)) (cid:11)‹ (cid:12)(cid:15) (cid:14)(cid:28) (cid:29)
•
(cid:29)
(cid:23)
*
. We set
(cid:137); (
(cid:19)(cid:139) (cid:138)
^
*
(cid:22) ((cid:6) ^ w
˛(cid:30) *
z
7
^
GI HK J
u
. When
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
receives
(cid:143)
7) 7 , he can verify it by computing
8 1
( (cid:20)
(cid:29)« (cid:230)
(
(cid:143) 7) 7 (cid:29)
(cid:9)
*) * . We can replace the operations
of
(cid:229) (
*
and
(cid:230)
(
*
with a modular multiplication
or a conventional encryption function. However,˙(cid:147) ¨˚ (cid:201)
˜
'
losesthezero-knowledgepropertybecause
(cid:11)(cid:13) (cid:12)(cid:15) (cid:14)
is always able to read
˝
in a protocol run. In
addition, the protocol is vulnerable to dictionary
attacksif
(cid:23)
,
(cid:24)
,orapasswordfileiscompromised.
4. Analysisand Comparison
4.1.SecurityofAMP
Following the security proof of AMP in the ran-
dom oracle model[22], we summarize the security
ofAMP.
AMP provides perfect forward secrecy because
the security of AMP relies on the Diffie-Hellman
problem and the discrete logarithm problem. Even
if
(cid:19)
(or
˝
)iscompromised,
(cid:16), (cid:17)
(cid:9)
cannotfindoldses-
sion keys because she is not able to solve the hard
problemson
(cid:142)
7 ,
(cid:142)
1 ,
(cid:143)
7 and
(cid:143)
1 . Notethattheam-
plified password
(cid:136)
is time-variant due to the dis-
cretelogarithmproblem,i.e.,
(cid:16), (cid:17)
(cid:9)
mustfind
^
from
(cid:142) 7
(
(cid:22)
gK k" * torecompose (cid:136) evenifsheknows (cid:19) .
Denning-Sacco attacks(or stolen key attacks) are
the case that
(cid:16)(cid:18) (cid:17)
(cid:9)
, who compromised an old ses-
sion key, attempts to find
(cid:19)
or to make the oracle
accept her[12]. For the purpose,
(cid:16)(cid:18) (cid:17)
(cid:9)
has to solve
thediscretelogarithmproblemtomakeanewampli-
fiedpasswordevenifanold
g k>A '⁄ (cid:216) E q
( (cid:22) (cid:23) (cid:22). (cid:24)
*
has
beencompromised. Itisalsoinfeasibletocheckthe
difference between
(cid:9)
and
˝
in
g k%A 'Æ (cid:216) E q
and
g k%A ' (cid:211) E q
withoutsolvingthediscretelogarithmof
gK k
. There-
fore,AMPissecureagainstthisattack.
Replay attacks are negligible because
(cid:142)
7 should
include an ephemeral parameter of
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
while the
others such as
(cid:142)
1 ,
(cid:143)
7 and
(cid:143)
1 , should include
ephemeral parameters of both parties in the corre-
spondingsession. Theamplifiedpassword
(cid:136)
isalso
time-variant. Findingthoseparameterscorresponds
to solving the discrete logarithm problem and each
parameter is bounded by
-
z
@BADCF Eª (cid:231) -
z
C
. There-
fore, both active replay and succeeding verification
arenegligible.
Smallsubgroupconfinementsuchasasquareroot
attack is defeated and avoided by confining the ex-
ponentials to the large prime-order subgroup. In-
tentional small subgroup confinement to
h
1
primeorasecureprimemodulus.
On-line guessing attacks are detectable and the
followingoff-lineanalysiscanbefrustrated,evenif
can be
detected easily due to the strong property of a safe
(cid:16)(cid:18) (cid:17)
(cid:9)
attempts to disguise parties. Actually,
(cid:16)(cid:18) (cid:17)
(cid:9)
is
abletoperformtheon-lineattacktoeitherpartybut
itsfailureiscountable.Impersonationofthepartyor
aman-in-the-middleattackisalsoinfeasiblewithout
knowing
˝
or
˛ Ac— '“ (cid:209) E
.
Off-line guessing attacks are also infeasible be-
cause
(cid:16)(cid:18) (cid:17)
(cid:9)
cannot analyze
(cid:142)
1 . Partition attacks
are to reduce the set of likely passwords logarith-
mically by asking the oracle in parallel with off-
line analysis, while chosen exponent attacks are to
analyze it via her chosen exponent. Both attacks
are infeasible because
(cid:16)(cid:18) (cid:17)
(cid:9)
cannot solve or reduce
(cid:144) (cid:212)
(cid:22) ((cid:6) ^ w
˝(cid:134) *« (cid:144)
(a ^ w
˝ (cid:212) *
z
7 GI HK J
u
forguessedpass-
wordswithoutknowingboth
^
and (cid:144) .
Security against password-file compromise is the
basic property of AMP family except
˙(cid:147) ¨| (cid:201)
˜
that
has a naked property. Among them, ˙(cid:147) ¨| (cid:201) , ˙(cid:147) ¨| (cid:201) (cid:224) ,
˙(cid:147) ¨˚ (cid:201)
M
,
˙(cid:147) ¨˚ (cid:201) '
, and
˙(cid:147) ¨˚ (cid:201) '⁄ '
provides the stronger
securitywithoutdegradingperformancethroughthe
amplifiedpasswordfile.
4.2.EfficiencyandConstraints
WeexaminetheefficiencyofAMPandcompareit
withotherrelatedprotocols.
In the aspect of a communication load, AMP has
only four protocol steps while the number of large
message blocks is only two in AMP. They are
(cid:142)
7
and
(cid:142)
1 . For
˙(cid:147) ¨˚ (cid:201) '“ '
,thesizeof
(cid:142) (cid:226)
canbebounded
by
(cid:3)y (
’? *
wØ Ł
withanegligible
Ł
whenweuseasecure
primemodulus.
A total amount of execution time could be ap-
proximated by the number of modular exponentia-
tion by considering the parallel execution of both
parties. Wedescribeitas
(cid:16)
(¢ (cid:2)(cid:4) (cid:3)(cid:6) (cid:5)fi (cid:7) (cid:9)
9" (cid:11)(cid:13) (cid:12)(cid:15) (cid:14) *
. AMPhas
only
Œ" (cid:16)
so that the best performance is expected.
AMP has
(cid:16)
(
g4 kS 9˚ n(cid:4) *
,
(cid:16)
(
nº 9
(
(cid:142)
7
*y q(cid:15) ˛ Ac— '“ (cid:209) E q(cid:15) *
and
(cid:16)
(
(cid:142) §
1
94 (cid:142) q
7
gK (cid:216)(cid:8) q(cid:15) *
whileallvariantshavesimilaroper-
ations.Here’
n
’meansthereisnomodularexponen-
tiationneeding
(cid:236)
(y ((cid:6) (cid:146)
H
(cid:190)¤ (cid:153)
*
3
*
. NotethatAMPopera-
tions shouldbenefit fromthe simultaneousmultiple
exponentiationmethodforefficiency[34,27]. AsforProtocol Large Exponentiations RandomNumbers
Steps Blocks Client Server Parallel Client Server
A-EKE 7(+4) 3(+1) 4(+2) 4(+2) 6(+3) 1(+0) 1(+0)
B-SPEKE 4(+1) 3(+1) 3(+1) 4(+2) 6(+3) 1(+0) 2(+1)
SRP 4(+1) 2(+0) 3(+1) 2(+0) 4(+1) 1(+0) 1(+0)
GXY 4(+1) 2(+0) 4(+2) 3(+1) 5(+2) 1(+0) 1(+0)
SNAPI-X 5(+2) 5(+3) 5(+3) 4(+2) 7(+4) 2(+1) 3(+2)
AuthA 5(+2)/3(+0) 2(+0) 4(+2) 3(+1) 6(+3) 1(+0) 1(+0)
PAK-X 5(+2)/3(+0) 3(+1) 4(+2) 4(+2) 8(+5) 1(+0) 2(+1)
AMP 4(+1) 2(+0) 2(+0) 2(+0) 3(+0) 1(+0) 1(+0)
Table1.ComparisonofVerifier-basedProtocols
g 7 (cid:216) (cid:159) g 1 (cid:216) (cid:160) , we don’t need to compute g 7 (cid:216) (cid:159) and g 1 (cid:216) (cid:160)
separately.Asimpledescriptionofthesimultaneous
methodisasfollows;
t = length(e);
(cid:237)> (cid:238)t (cid:239)Ø (cid:237)(cid:15) (cid:240)[ (cid:237)(cid:28) æ
mod p;
G[0]=1; G[1]=
(cid:237)(cid:15) (cid:240)
; G[2]=
(cid:237)(cid:28) æ
; G[3]=
(cid:237)% (cid:238)
;
A = 1;
for(i=1;i<=t;i++)
(cid:242)F (cid:243)$ (cid:244)
= ExponentArray(i);
ı
for(i=1;i<=t;i++)
(cid:242)
A = A*A mod p; A=A*G[
(cid:243) (cid:244)
] mod p;
ı
return(A);
Thisschemecomputes g 7 (cid:216) (cid:159) g 1 (cid:216) (cid:160) byperforming 5N no (cid:31)
squarings and at most
5
w
(cid:31)
multiplications where
eachexponentisrepresentedby
5
bits[34,27].
Each party of AMP performs only two exponen-
tiationsregardingtheefficiencyofthesimultaneous
multipleexponentiation.
Forruntimeparameters,eachpartygeneratesone
randomnumberin
˙(cid:147) ¨˚ (cid:201)
familyexceptfor
˙(cid:147) ¨| (cid:201) '“ '
.
(cid:2)(cid:4) (cid:3)(cid:6) (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
can reduce her run time exponentiations to
onlyonceandparallelexponentiationstoonlytwice
bypre-computationof
g4 k
.
In step 3,
(cid:2)(cid:4) (cid:3)a (cid:5)(cid:8) (cid:7)(cid:10) (cid:9)
should compute
(a ^ w
˝(cid:154) *
z
7
but
only in the
u
-order subgroup. Modular inversion,
(cid:236)
(y ((cid:6) (cid:146)
H
(cid:190)
u
* 1 *
, is less expensive than modular expo-
nentiation,
(cid:236)
() (a (cid:146)
H
(cid:190)
L‘ *
3
*
. Moreover, the size of
u
can be bounded by
(cid:3)y (
’(cid:30) *
w(cid:204) Ł
with a negligible
Ł
when we use a secure prime modulus. Note that
(cid:236)
(a (cid:146)
H
(cid:190)(cid:246) (cid:3)y (
’(cid:30) *y * (cid:231)(cid:18) (cid:231) (cid:236)
(a (cid:146)
H
(cid:190)
L(cid:134) *
group. A generalization on the elliptic curve group
gives further efficiency, e.g., the size of a message
andapasswordfile.
Efficiency can be compared to the other re-
lated protocols such as A-EKE, B-SPEKE,
SRP, GXY, SNAPI-X, AuthA and PAK-
X[8, 19, 38, 21, 26, 6, 10]. Table 1 compares
them in terms of the number of protocol steps,
large message blocks, and exponentiations. SRP
can benefit from the simultaneous exponentiation
methodonlyforaserverside. NotethatAuthAand
PAK-X have five steps with explicit salt and three
steps with implicit salt. The number of random
numbers is given as a subsidiary reference. The
number of parallel exponentiations could compare
approximately the amount of protocol execution
time. Thevalueinparenthesisimpliesthedifference
from the most efficient one that is denoted by bold
characters. Note that AMP provides the stronger
security against the password file compromise
comparedtoalltheothersinTable1.
CONSTRAINT. We recommend to use a large
(
.
AMP can be implemented on the elliptic curve
x
(cid:3)) (
’(cid:30) *
)prime-ordersubgroup
hs r
fordefeatingand
avoidingthesmallsubgroupconfinementeffectively
byconfiningexponentialsintothelargeprime-order
subgroup[28]. A secure prime modulus is highly
recommendedforfurtherefficiencyoftheprotocols.
Note that the secure prime is easier to get than
the safe prime[23]. AMP needs both parties to
count the other side’s on-line failure to detect theon-lineguessingattack. However,thisistheshared Acknowledgment The authors thank David
requirementofallpasswordprotocols. Wagner,DougTygar,DavidJablon,TomWu,Radia
Perlman, Li Gong and anonymous reviewers for
4.3. WhyAMP
their helpful comments and kind suggestion to this
work. We also thank Jooseok Song and Chitoos
WesummarizevariousadvantagesofAMP.
Ramamoorthyfortheirkindconcern.
1. AMPisasecurepassword(-verifier)basedpro-
tocol equipped with the amplified password References
proof and the amplifiedpassword file. These-
[1] R. Anderson and T. Lomas, “Fortifying key
curity of AMP is proved in the random oracle
negotiation schemes with poorly chosen pass-
model.
words,” Electronics Letters, vol.30, no.13,
2. AMP is the most efficient protocol among the pp.1040-1041,1994
existing verifier-based protocols. AMP pro-
[2] R.Anderson and S. Vaudenay,“Minding your
videsthebestefficiencyevenwiththeamplified
passwordfile.
3. AMP has light constraints and is easy to gen-
eralize,e.g.,inellipticcurvegroupsforfurther
efficiency.
4. AMPhasseveralvariantsforflexibility.
5. AMP allows the Diffie-Hellman based key
agreement.
6. AMPhasasimplestructuresothatitiseasyto
understandandimplementtheprotocol.
7. AMP providesaneasy wayto upgradethe ex-
isting system. AMP accommodates any kinds
ofsaltschemeswithoutdegradingperformance.
5. Conclusion
Inthispaper,weintroducedanewprotocolcalled
AMP and its variants for password authentication
and key agreement. AMP has been designed on
the basis of the amplified password proof and
the amplified password file ideas. A time-variant
parameter called the amplified password makes the
protocol simple and easy to prove in the random
oracle model[22]. Many password-based solutions
such as Telnet, FTP, RADIUS and Kerberos are
vulnerable to dictionary attacks[39]. AMP can be
usedtoimprovetheirsecurityinanopendistributed
environment.
L
’sand
u
’s,”InAsiacrypt96,1996
[3] M. Bellare and P. Rogaway, “Entity authenti-
cation and key distribution,” In CRYPTO 93,
1993
[4] M. Bellare, R. Canetti, and H. Krawczyk, “A
modularapproachtothedesignandanalysisof
authenticationandkeyexchangeprotocols,”In
STOC,pp.419-428,1998
[5] M. Bellare, D. Pointcheval and P. Rogaway,
“Authenticated key exchange secure against
dictionaryattack,”InEurocrypt00,2000
[6] M. Bellare and P. Rogaway, “The Au-
thA protocol for password-based authenti-
cated key exchange,” 2000, available from
http://www.cs.ucdavis.edu/ rog-
away/papers/autha.ps
[7] S. Bellovin and M. Merritt, “Encrypted key
exchange : password-based protocols secure
against dictionary attacks,” In IEEE Sympo-
siumonResearchinSecurityandPrivacy,pp.
72-84,1992
[8] S. Bellovin and M. Merritt, “Augmented en-
crypted key exchange: a password-based pro-
tocol secure against dictionary attacks and
password-file compromise,” In ACM Confer-
enceonComputerandCommunicationsSecu-
rity,pp.244-250,1993[9] M. Boyarsky, “Public-key cryptography and [19] D. Jablon, “Extended password key exchange
password protocols: the multi-user case,” In protocols,” In WETICE Workshop on Enter-
ACMConferenceonComputerandCommuni- priseSecurity,pp.248-255,1997
cationsSecurity,1999
[20] T.KwonandJ.Song, “Efficientkeyexchange
[10] V. Boyko, P. MacKenzie and S. Patel, “Prov- and authentication protocols protecting weak
ably secure password authenticated key ex- secrets,”IEICETransactionsonFundamentals
change using Diffie-Hellman,” In Eurocrypt ofElectronics,CommunicationsandComputer
00,2000 Sciences, vol.E81-A, no.1, pp.156-163, Jan-
uary1998
[11] P. Buhler, T. Eirich, M. Steiner and M. Waid-
ner, “Secure Password-Based Cipher Suite for [21] T. Kwon and J. Song, “Secure agreement
TLS,” In Network and Distributed System Se- scheme for
curitySymposium,February2-4,2000
[12] D.DenningandG.Sacco,“Timestampsinkey
distributionprotocols,”Communicationsofthe
ACM,vol.24,no.8,pp.533-536,1981
[13] W.DiffieandM.Hellman, “Newdirectionsin
cryptography,”IEEETransactionsonInforma-
tionTheory,vol.22,no.6,pp.644-654,Novem-
ber1976
[14] Y. Ding and P. Hoster, “Undetectable on-line
password guessing attacks,” ACM Operating
Systems Review, vol.29, no.4, pp.77-86, Octo-
ber1995
[15] L. Gong, M. Lomas, R. Needham, and
J. Saltzer, “Protecting poorly chosen secrets
from guessing attacks,” IEEE Journal on Se-
lectedAreasinCommunications,vol.11,no.5,
pp.648-656,June1993
[16] L.Gong,“Optimalauthenticationprotocolsre-
sistanttopasswordguessingattacks,”InIEEE
Computer Security Foundation Workshop, pp.
24-29,June1995
[17] S.HaleviandH.Krawczyk,“Public-keycryp-
tography and password protocols,” In ACM
ConferenceonComputerandCommunications
Security,1998
[18] D. Jablon, “Strong password-only authenti-
catedkeyexchange,”ACMComputerCommu-
nicationsReview,vol.26,no.5,pp.5-26,1996
gK k> q
via password authentication,”
ElectronicsLetters, vol.35,no.11,pp.892-893,
27thMay1999
[22] T. Kwon, “Authentication and key agree-
ment via memorable password,” 2000, avail-
able from http://eprint.iacr.org/
2000/026
[23] C. Lim and P. Lee, “A key recoveryattack on
discretelog-basedschemesusingaprimeorder
subgroup,”InCRYPTO,pp.249-263,1997
[24] M. Lomas, L. Gong, J. Saltzer, and R. Need-
ham, “Reducing risks from poorly chosen
keys,” ACM Symposium on Operating System
Principles,pp.14-18,1989
[25] S. Lucks, “Open key exchange: how to de-
featdictionaryattackswithoutencryptingpub-
lickeys,”TheWorkshoponSecurityProtocols,
April7-9,1997
[26] P. MacKenzie and R. Swaminathan, “Se-
cure network authentication with pass-
word identification,” 1999, available from
http://grouper.ieee.org/groups/
1363/StudyGroup/Passwd.html
(cid:247)
MS
[27] A. Menezes, P. van Oorschot and S. Van-
stone, Handbook of applied cryptography,
CRCPress,Inc.,pp.517-518,1997
[28] P. van Oorschot and M. Wiener, “On Diffie-
Hellmankeyagreementwithshortexponents,”
InEurocrypt96,pp.332-343,1996[29] S. Patel, “Number theoretic attacks on secure
password schemes,” In IEEE Symposium on
SecurityandPrivacy,1997
[30] R. Perlman and C. Kaufman, “Strong
Password-Based Authentication Us-
ing Pseudorandom Moduli,” IETF In-
ternet Draft, 2000, available from
http://search.ietf.org/internet-
drafts/draft-perlman-strong-
pass-00.txt
[31] S. Pohlig and M. Hellman, “An improved al-
gorithmforcomputinglogarithmsover
ł(cid:18) ø
(
L(cid:134) *
and its cryptographic significance,” IEEE
Transactions on Information Theory, vol.24,
no.1,pp.106-110,1978
[32] J. Pollard, “Monte Carlo methods for index
computation
GI HK J(cid:13) L
[38] T.Wu, “Secure remotepassword protocol,”In
NetworkandDistributedSystemSecuritySym-
posium,1998
[39] T. Wu, “A Real-World Analysis of Kerberos
Password Security,” In Network and Dis-
tributedSystemSecuritySymposium,February
3-5,1999
,” Mathematics ofCompu-
tation,vol.32,pp.918-924,1978
[33] M. Roe, B. Christianson and D. Wheeler,
“Secure sessions from weak secrets,” Techni-
cal report from University of Cambridge and
University of Hertfordshire, 1998, available
from http://www.ccsr.cam.ac.uk/
techreports/tr4/index.html
[34] C.Schnorr,“Efficientidentificationandsigna-
turesforsmartcards,”InCRYPTO89,pp.239-
251,1989
[35] M. Steiner, G. Tsudik, and M. Waidner, “Re-
finement and extension of encrypted key ex-
change,” ACM Operating Systems Review,
vol.29,no.3,pp.22-30,1995
[36] G. Tsudik and E. van Herreweghen, “Some
remarks on protecting weak keys and poorly-
chosen secrets from guessing attacks,” In
IEEE Computer Security Foundation Work-
shop,pp.136-142,1993
[37] V.VoydockandS.Kent,“Securitymechanisms
in high-level network protocols,” Computing
Surveys,vol.15,no.2,pp.135-171,June1983