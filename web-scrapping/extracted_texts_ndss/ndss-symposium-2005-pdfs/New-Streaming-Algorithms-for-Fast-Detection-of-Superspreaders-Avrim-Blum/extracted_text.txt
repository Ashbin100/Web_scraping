New Streaming Algorithms for Fast Detection of Superspreaders
ShobhaVenkataraman(cid:3),DawnSong(cid:3),PhillipB.Gibbonsy,AvrimBlum(cid:3)
(cid:3)Carnegie MellonUniversity
shobha@cs,dawnsong@ece,avrim@cs .cmu.edu
f g
yIntel ResearchPittsburgh
phillip.b.gibbons@intel.com
Abstract drastic trafficpattern changes that may indicateattacks
or, more actively, to identify misbehavinghosts or vic-
timsbeingattacked,inordertothrottleattacktrafficau-
High-speedmonitoringofInternettrafficisanimpor- tomatically.
tantandchallengingproblem,withapplicationstoreal- Forexample,acompromisedhostdoingfastscanning
time attack detection and mitigation, traffic engineer- for worm propagation often makes an unusually high
ing,etc. However,packet-levelmonitoringrequiresfast number of connections to distinct destinations within a
streamingalgorithmsthatuseverylittlememoryandlit- short time. The Slammer worm, for instance, caused
tlecommunicationamongcollaboratingnetworkmoni- some infected hosts to send up to 26;000 scans a sec-
toringpoints. ond [26]. We call such a host a superspreader. (Note
In this paper, we consider the problem of detect- thatasuperspreadermayalsobeknownasaportscan-
ing superspreaders, which are sources that connect to ner in certain cases.) By identifying in real-time any
a large number of distinct destinations. We propose sourceIPaddressthatmakesanunusuallyhighnumber
new streaming algorithms for detecting superspread- of distinct connections within a short time, a network
ers and prove guarantees on their accuracy and mem- monitoring point can identify hosts that may be super-
ory requirements. We also show experimental results spreadersandtakeappropriateaction. Forexample,the
on real network traces. Our algorithms are substan- identifiedpotentialattackers(andvictims)canbeusedto
tially more efficient (both theoretically and experimen- trigger the networkloggingsystem to logattackertraf-
tally)thanpreviousapproaches. Wealsoextendoural- fic for detailed real-time and post-mortem analysis of
gorithmstoidentifysuperspreadersinadistributedset- attacks, in order to throttle subsequent (similar) attack
ting, with sliding windows, and when deletions are al- trafficinreal-time.
lowedin the stream (whichlets us identifysourcesthat In this paper, we study the problem of identifying
make a large number of failed connections to distinct superspreaders. Asuperspreaderisdefinedtobeahost
destinations). thatcontactsatleastagivennumberofdistinctdestina-
Moregenerally,ouralgorithmsareapplicabletoany tions within a short time period. Superspreaders could
problem that can be formulated as follows: given a be responsible for fast worm propagation, so detecting
stream of (x;y) pairs, find all the x’s that are paired them early is of paramount importance. Thus, given a
with a large number of distinct y’s. We call this the sequence of packets, we would like to design an effi-
heavydistinct-hittersproblem. Therearemanynetwork cientmonitoringalgorithmtoidentifyinreal-timewhich
security applications of this general problem. This pa- sourceIPaddresseshavecontactedahighnumberofdis-
per discusses these applications and, for concreteness, tincthostswithinatimewindow.
focusesonthesuperspreaderproblem. Note that a superspreader is different from the usual
definition of a heavy-hitter ([19, 8, 16, 25, 13, 24]). A
heavy-hittermightbeasourcethatsendsalotofpack-
ets,andthusexceedsacertainthresholdofthetotaltraf-
1 Introduction
fic. Asuperspreader,ontheotherhand,isasourcethat
Internet attacks such as distributed denial-of-service contacts manydistinct destinations. So, for instance, a
(DDoS) attacks and worm attacks are increasing in sourcethatisinvolvedinafewextremelylargefiletrans-
fers may be a heavy-hitter, but is not a superspreader.
severity. Network security monitoring can play an im-
portant role in defending against and mitigating such On the other hand, a source that sends a single packet
large-scale Internet attacks – it can be used to detect to manydestinations might not create enough trafficto(s1;d1);(s2;d2);(s1;d1);(s3;d3);(s1;d1);(s2;d3);(s4;d1);(s2;d4);(s1;d1);(s5;d4);(s6;d6)
Figure1.Examplestreamof(source,destination)pairs,startingwith(s1;d1)andendingwith(s6;d6).
be a heavy-hitter, even if it is a superspreader – some nodes that talk to a lot of other nodes without keeping
ofthesourcesinourtracesthataresuperspreaderscre- per-nodeinformation. Forsimplicity, intherestofthis
atelessthan0:004%ofthetotaltrafficanalyzed;heavy- paper, we will describe our algorithms for identifying
hitterstypicallyinvolveasignificantlyhigherfractionof superspreaders. Thealgorithmscanbeeasilyappliedto
thetraffic. theotherapplicationsmentionedabove.
Itisdesirabletobeabletodothemonitoringonhigh- Tosummarize,thecontributionsofthispaperarethe
speedlinks, for example, ona largeenterprisenetwork following:
oranISPnetworkforalargenumberofhomeusers. A
Weproposenewstreamingalgorithmsforidentify-
majordifficultywithdetectingsuperspreadersonahigh- (cid:15)
ingsuperspreaders. Ouralgorithmsarethefirstto
speedmonitoringpointisthat thetrafficvolumeonhigh
addressthisproblemefficientlyandprovideproven
speed links can be tens of gigabits per second and can
accuracyandperformancebounds. Thebestprevi-
containmillionsofflowsperminute.Inaddition,within
ousapproaches[17,31]requireacertainamountof
suchagreatnumberofflowsandhighvolumeoftraffic,
memorytobeallocatedforeachsource[17]oreach
mostoftheflowsmaybenormalflows. Theattacktraf-
flow[31]withinthetimewindow;wedonotkeep
ficmaybeanextremelysmallportionofthetotaltraffic.
stateforeverysource,andthusouralgorithmsscale
Many traditional approaches require the network mon-
very well. We present two algorithms: the first,
itoring points to maintain per-flow state. Keeping per-
a simpler one, which is already much better than
flowstate,however,oftenrequireshighmemorystorage,
existing approaches, and which we use for base
andhenceisnotpracticalforhighspeedlinks. Weneed,
comparison;andthesecond,amorecomplextwo-
therefore,efficientalgorithmstofindsuperspreadersthat
level filtering scheme, that is more space-efficient
usememorysparingly.
on commonly-seen distributions. In addition, the
The superspreader problem is an instance of a more
two-levelfilteringschememayhaveotherapplica-
general problem that we term heavy distinct-hitters,
tionsandbeofindependentinterest.
whichmaybeformulatedasfollows: givenastreamof
(x;y) pairs, find allthe x’s that are paired with a large Wealsoproposeseveralextensionstoenhanceour
number of distinct y’s. Figure 1, for example, depicts (cid:15) algorithms – we extend our algorithms to scenar-
a stream where source s2 is paired with three distinct ios when deletion is allowed in the stream (Sec-
destinations,whereasallothersourcesinthestreamare tion 4.1), to the sliding window scenario (Sec-
paired with only one distinct destination; thus s2 is a tion4.2), andwe proposeefficientdistributedver-
heavydistinct-hitterforthis(short)stream. sions of our algorithms (Section 4.3). The dele-
An algorithm for the heavy distinct-hitters problem tion scenario is especially well-motivated – it can
has a wide range of applications. Clearly, we can beusedtofindsourcesthathavealargenumberof
solve the dual of the superspreader problem – finding distinctconnectionfailures(thismaybeanindica-
thedestinationswhicharecontactedbya largenumber tionofscanningbehavior),ratherthanjustsources
of sources – and such destinations could be victims of thatcontactalargenumberofdistinctdestinations.
DDoSattacks. Itcanbeusedtoidentifywhichporthas That is, once the network monitoring point sees a
ahighnumberofdistinctdestinationsordistinctsource- responsefrom a destination for a connection from
destination pairs without keeping per-port information a source, that source-destination pair gets deleted
andthusaidindetectionofattackssuchaswormprop- from the count of the number of distinct connec-
agation. Suchaportisaheavydistinct-hitterinourset- tionsasourcemakes.
ting (x is the port and y is the destination or source-
destination pair). Such an algorithm can also be used Our experimental results on traces with up to 10
(cid:15)
toidentifywhichporthashighICMPtraffic,whichof- million flows confirm our theoretical results. Fur-
tenindicateshighscanningactivityandscanningworm ther,theyshowthatthememoryusageofouralgo-
propagation,withoutkeepingper-portinformation. The rithms is substantially smaller than alternative ap-
heavy distinct-hitters problem also has many network- proaches. Finally, we study the effect of different
ingapplications. Forexample,spammersoftensendthe superspreaderthresholdsontheperformanceofthe
sameemailstomanydistinctdestinationswithinashort algorithms,againconfirmingthetheoreticalanaly-
period,andwecouldidentifypotentialspammerswith- sis.
outkeepinginformationforeverysender. Analgorithm
Note that the contributionof this paper is in the pro-
fortheheavydistinct-hitterproblemmayalsobeuseful
posal of new streaming algorithms to enable efficient
inpeer-to-peernetworks,whereitcouldbeusedtofind
network monitoring for attack detection and defense,whengivencertainparameters.Selectingandtestingthe N Totalno. ofpacketsinagiventimeinterval
correct parameters, however, is application-dependent k Asuperspreadersendstomorethank
andoutsideofthescopeofthispaper. distinctdestinations
Note that we cannot detect a malicious host that b Afalsepositiveisasourcethatcontacts
spoofs IP addresses and contacts many destinations, lessthank=bdistinctdestinationsbutis
since the algorithms will only operate on the input reportedasasuperspreader
(src;dst) pairs. It is, however, difficult to engage in (cid:14) Probabilitythatagivensourcebecomesa
TCP-basedattackswithIPspoofing.Also,wemayneed falsenegativeorafalsepositive
special care when identifying the connection direction. W Slidingwindowsize
WecanhandlethisissueinTCPtrafficbycheckingfor s SourceIPaddress
superspreaders only in the SYN packets. In UDP traf- d DestinationIPaddress
fic, though, this may not be possible, because we may Table1.Summaryofnotation
not be able to distinguish which of the two hosts sent
the first packet without extra storage. Thus, in UDP
traffic,wemaynotbeabletodistinguishbetweenasu- Moreformally,givenauser-specifiedb > 1andcon-
perspreaderanda sourcethatsimplyresponds tomany fidence level 0 < (cid:14) < 1, we seek to report source IPs
clients. (In our abstraction, the latter is also a super- suchthatasourceIPwhichcontactsmorethankunique
spreaderincaseofUDP).Inpractice,though,weexpect destinationIPsisreportedwithprobabilityatleast1 (cid:14)
(cid:0)
thatmostsourcesthattypicallyneedtorespondtomany whileasourceIPwithlessthank=bdistinctdestinations
clientswill remain more or less constant overbrief pe- is (falsely)reportedwith probabilityatmost(cid:14). Forex-
riods of time (e.g. web serversovera fewdays’ time), ample,whenk = 500,b = 2and(cid:14) = 0:05,wewantto
and that it will be easy to identify these sources early, reportanysourcethatcontactsatleast500distinctdes-
andkeepthemonaseparatelist,sothattheydonotin- tinationsandreportnosourcethatcontactslessthan250
terfereinnetworkanomalydetection. distinctdestinationswithprobability0:95.
The rest of the paper is organized as follows. Sec- We envision our algorithms to be useful in applica-
tion 2 defines the superspreader problem and discusses tionswhereitisacceptabletoreportsourceswhosedis-
previous approaches. Section 3 presents and compares tinctdestinationcountiswithinafactorof2(orafactor
two novel algorithms for the superspreader problem. of 5, 10, etc.) of a superspreader. For example, if we
Section 4 presents our extensions to handle distributed wishtoidentifysourcesinvolvedinfastwormpropaga-
monitoring, deletions, and sliding windows. Section 5 tionandchoosek = 500,itsufficestosetb = 2,aswe
presentsourexperimentalresults,andSection6presents do not expect to find many sources (in normal traffic)
conclusions. thatcontactover250destinationswithinashortperiod.
Whenamuchfinerdistinctionneedstobemade(whenb
2 Problem Definition and Previous Ap- approaches1),wewillrequireaveryhighsamplingrate,
proaches andtherewillnotbeasubstantialreductioninmemory
usageorcomputationaltime.
In this section, we present a formal definition of the
Also, note that by our problem statement, a source
problem and then discuss the deficiencies of previous
will be identified as a superspreader with high proba-
techniquesinaddressingtheproblem.
bility when it has contacted between k and k destina-
b
tions. Thus, we will expect to report the (potential) k-
2.1 ProblemDefinition
superspreaderbeforeithascontactedkdestinations,and
Wedefineak-superspreaderasahostwhichcontacts so our approach will not delay the identification of the
morethankuniquedestinationswithinagivenwindow superspreader.
ofN source-destinationpairs. InFigure1,forexample, Table1summarizesthenotationusedinthispaper.
withk =2,sources2istheonlyk-superspreader.Note
thattheremaybeasmanyasN=kk-superspreadersina 2.2 RelatedWorkandPreviousApproaches
givensetofN packets,andreportingthemwouldneed
(cid:10)(N=k) space. Thus, this gives us a lower bound on Therehasbeenavolumeofworkdoneintheareaof
thespaceboundsneededtofindsuperspreaders. Italso streamingalgorithms(seethesurveysin[2,28]). How-
followsfromalowerboundin[1]thatanydeterministic ever, none of this work addresses the problem of iden-
algorithm that accurately estimates (e.g., within 10%) tifyingsuperspreadersefficiently. Perhapsmostclosely
the number of unique destinations for a source needs relatedistheproblemofcountingthenumberofdistinct
(cid:10)(k) space. Because we are interested in small space values in a stream. It has been studiedby a number of
algorithms,wemustconsiderinsteadrandomizedalgo- papers(e.g.,[1,3,4,10,12,18,20,21,17]). Thesemi-
rithms. nalalgorithmbyFlajoletandMartin[18]anditsvariantduetoAlon,MatiasandSzegedy[1]estimatethenum- However,itmaynotscalewelltohigh-speedlinks,
berofdistinctvaluesinastreamuptoarelativeerrorof asit needsto keep somestate for everyflowfor a
(cid:15)>1. Cohen[9],GibbonsandTirthapura[20],andBar- periodoftime (and thus, thememoryusage could
Yossef et al. [4] give distinct counting algorithms that be(cid:10)(N)). We presenta concrete examplefor the
work for arbitrary relative error. More recently, Bar- parameters in [31]. The 1 MB connection cache
Yossef et al. [3] improve the space complexity of dis- keeps per-flow details, and after seeing 1 million
tinct values counting on a single stream, and Cormode flows (in one direction), fewer than 37% of new
etal.[10]showhowtocomputethenumberofdistinct flows (in the same direction) are expected to map
valuesinasinglestreaminthepresenceofadditionsand toanunusedentryinthecache.2 Whennewflows
deletions of items in the stream. Gibbons and Tirtha- mapintoanexistingentryintheconnectioncache,
pura [21] give an ((cid:15);(cid:14))-approximation scheme for dis- the counter for the source does not get updated.
tinct values counting over a sliding window of the last Thus, roughly 63% of superspreaders that appear
N items,usingB = O(1 log(1=(cid:14))logNlogR)mem- after these million flows will not be identified (in
(cid:15)2
ory bits. The algorithm extends to handle distributed expectation). Withatime-outof10minutes,arate
streams,whereBbitsareusedforeachstream. of1700flowsasecondwillsaturatethe1MBcon-
nectioncachetothispoint. Ifweassumethatthese
million flows come from distinct sources, and we
Previous Approaches: We now discuss existing ap-
proachesthatmaybeappliedtofindsuperspreadersand needto find 1000-superspreaderswith b = 2, and
theirdeficiencies. error probability (cid:14) = 0:05, our two-level filtering
algorithm needs only an expected 24KB of space.
Approach1: Asafirstapproach,Snort[30]simply Thus, in this scenario, our algorithm is more ac-
(cid:15)
keeps track of each source and the set of distinct curate and requires much less space. However,
destinationsitcontactswithinaspecifiedtimewin- theirdata structure is designed to find smallscans
dow.Thus,thememoryrequiredbySnortwillbeat quickly,and in this case performanceof our algo-
leastthetotalnumberofdistinctsource-destination rithmswilldegrade.
pairswithinthetimewindow,whichisimpractical
Approach 4: Another approach that has not been
forhigh-speednetworks. (cid:15)
previouslyconsideredisusingaheavy-hitteralgo-
Approach 2: Instead of keeping a list of distinct rithminconjunctionwithadistinct-countingalgo-
(cid:15)
destinationsthatasourcecontactsforeachsource, rithm. Weuseamodifiedversionofaheavy-hitter
an improved approach may be to use a (random- algorithmtoidentifysourcesthatsendtomanydes-
ized) distinct counting algorithm to keep an ap- tinations.Specifically,whereasheavy-hitterscount
proximate count of distinct destinations a source the number of destinations, we count (approxi-
contacts for each source [17]. Along these lines, mately) the number of distinct destinations. This
Estan et al. [17] propose using bitmaps to iden- isdoneusingadistinctcountingalgorithm. Inour
tify port-scans. The triggeredbitmap construction experiments we compare with this approach, with
that they propose keeps a small bitmap for each LossyCounting[25] as the heavy-hitteralgorithm,
distinctsource,andoncethesourcecontactsmore and the first algorithm from [3] as the distinct-
than4distinctdestinations,expandsthesizeofthe countingalgorithm.Theresultsshowthatouralgo-
bitmap. Such an approach requires n S space rithms use much less memory than this approach;
(cid:1)
where n is the total number of distinct sources thedetailsarein Section5. Forcompleteness, we
(whichcanbe(cid:10)(N))andSistheamountofspace summarize LossyCounting and the distinct count-
required for the distinct counting algorithm to es- ingalgorithmweuseinAppendixD.
timateitscount. Theseapproachesareparticularly
inefficientwhenthenumberofk-superspreadersis
OtherRelatedWork: Anumberofpapershavepro-
small and many sources contact far fewer than k
posed algorithms for related problems in network traf-
destinations.
fic analysis. Estan and Varghese [16] propose two al-
Approach 3: The recent work by Weaver et gorithms to identify the large flows in network traffic,
(cid:15)
al. [31] proposes an interesting data structure for and give an accurate estimate of their sizes. Estan et
finding scanning worms using Threshold Random al. [15] present an offline algorithm that computes the
Walk [23]. This data structure may be adapted to multidimensional traffic clusters reflecting network us-
findsuperspreadersbytrackingthenumberofdis- age patterns. Duffield et al. [14] show that the num-
tinctdestinationscontactedintheaddresscache. 1
andwhattheissueswithdoingsoare.
1Wereferthereaderto[31]foranunderstandingofthedatastruc- 2Theoremsonoccupancy problemsgivethesenumbers. Forde-
ture.Here,wejustdescribehowtouseitfordetectingsuperspreaders tails,see[27].ber and average length of flows may be inferred even
whensomeflowsarenotsampled,andcomputethedis- ln(1=(cid:14)) 3b+2bp6b+2b2
(cid:1) (b 1)2
tribution of flow lengths. Golab et al. [22] present a (cid:0)
8 (cid:16) ifb 3 (cid:17)
id te et mer sm oin vi es rti sc lis di in ng gle w-p ia ns ds oa wlg s.ori Cth om rmto odi ede an nti dfy Mfr ue tq hu ue kn r-t c 1 = >>>>>< ln(1=(cid:14))max(b; if2 3=((cid:20) <1
(cid:0)
b<e b) 22 e)
2
(1)
ishnan [11] presentsketch-based algorithms to identify
8ln(1=(cid:14))ifb 2e2
largechangesinnetworktraffic. >>>>>:
c1 + 3c1
ln(cid:21)
(1=(cid:14)) ifb 3
b b (cid:20)
3 Algorithms forFinding Superspreaders r = 8 ec1 q if3<b<2e2 (2)
b
>< c1 ifb 2e2
We now propose two efficient algorithms to find su- 2 (cid:21)
perspreaders.Wefirstproposeaone-levelfilteringalgo- >:
rithm,basedonsamplingfromthesetofdistinctsource- Figure 2. The parameters c 1 and r for the
destinationpairs.Wethenpresentamorecomplexalgo- one-levelfilteringscheme.
rithmbasedonanoveltwo-levelfilteringscheme,which
will be more space-efficientthan the one-levelfiltering second parameter r < c and report a source as a k-
1
algorithm for the distributions that (we expect) will be superspreaderaslongasitoccursatleastrtimesinthe
morecommon. sample. Acarefulchoiceofc andrisrequired.
1
Finally, we need an approach for uniform sampling
3.1 One-levelFilteringAlgorithm from the distinct source-destination pairs. To accom-
plish this, we use a random hash function that maps
Theintuitionfor our one-levelfilteringalgorithmfor
source-destinationpairsto[0;1)andincludeinthesam-
identifyingk-superspreadersoveragivenintervalofN
ple all distinct pairs that hash to [0;p). Thus each dis-
source-destinationpairsisasfollows.
tinctpairhasprobabilitypofbeingincludedinthesam-
We observe that if we sample the distinct source-
ple. Using a hash function ensures that the probability
destination pairs in the packets such that each distinct
ofbeingincludedinthesampleisnotinfluencedbyhow
pair is included in the sample with probability p, then
manytimesaparticularpairoccurs. Ontheotherhand,
any source with m distinct destinations is expected to
ifapairisselectedforthesample,thenallitsduplicate
occur pm times in the sample. If p were 1, then any
k occurrences will also be selected. To fix this, our al-
k-superspreader (with its m k distinct destinations)
gorithmchecksforthesesubsequentduplicatesanddis-
(cid:21)
wouldbeexpectedtooccuratleastonceinthesample,
cardsthem.
whereassourcesthatarenotk-superspreaderswouldbe
expectednottooccurinthesample.Inthisway,wemay
hopetousethesampletoidentifyk-superspreaders3. Algorithm Description: Let srcIP and dstIP be the
There are several difficulties with this approach. source and destination IP addresses, respectively, in a
First, the resulting sample would be a mixture of k- packet. Leth 1 beauniformrandomhashfunctionthat
superspreadersandothersourcesthatgot“lucky”tobe maps (srcIP, dstIP) pairs to [0;1), (that is, each input
includedinthesample.Iftherearenok-superspreaders, is equally likely to map to any value in [0;1) indepen-
for example, the sample will consist only of lucky dentlyofotherinputs). Atahighlevel,thealgorithmis
sources. To overcome this, we set p to be a constant asfollows:
factor c larger than 1. Then, any k-superspreader
1 k Retain all distinct (srcIP, dstIP) pairs such that
is expected to occur at least c 1 times in the sample, (cid:15) h (srcIP,dstIP) < c1, where c is given in Fig-
whereas lucky sources may occur a few times in the 1 k 1
ure 2. This is determined by the analysis in Ap-
sample but nowhere near c times. To minimize the
1
pendixB.
space used by the algorithm, we seek to make c as
1
small as possible while being sufficiently large to dis- ReportallsrcIPswithmorethanr retained,where
(cid:15)
tinguish k-superspreaders from lucky sources. A sec- risgivenbytheequationsinFigure2(b).
ond, related difficulty is that there may be “unlucky”
k-superspreaders that fail to appear in the sample as We can implement the algorithm above using two
many times as expected. To overcome this, we have a hash-tables(with c1N bucketseach):thefirstonetode-
k
tectanddiscardduplicatepairsfromthesample,andthe
3Note that we are sampling from the set of distinct source- secondonetocountthenumberofdistinctdestinations
destinationpairs,notthesetofpacketswesee;weperformacomputa- foreachsourceinthesample.
tiononeveryelementinthestream–the“sampling”isataconceptual
Inmoredetail,theabovestepscanbeimplementedas
level. Thelowerboundsofsamplingapproachesoncountingdistinct
values[7]thusdonotapplytoourapproach. follows. Ourimplementationhasthedesirablepropertythateachk-superspreaderisreportedassoonasitisde- less than 500 destinations within that time. Let N be
tected.Weusetwohashtables:onetodetectanddiscard the total number of packets seen in this time period.4
duplicate pairs fromthe sample, andthe other to count For this, we find numerically that c =k = 0:052, and
1
the number of distinct destinations for each source in r =39suffice,when(cid:14) = 0:05. Notethatthissampling
thesample.Thislatterhashtableusesaseconduniform rate implies that in expectation, 94:8% of the packets
randomhashfunctionh thatmapssrcIPsto[0;1). will simply require one computation (hashing to see if
2
thesource-destinationpairfallsbelowc =k),and5:2%
1
Initially:LetT beahashtablewithc N=kentries,
1 1 ofthepacketswillbeselectedformore processing. To
(cid:15)
whereeachentrycontainsaninitiallyemptylinked
store the source-destination pairs with a hash-table of
list of (srcIP, dstIP) pairs. Let T be a hash table
2 0:052N, each ofthese selected packetswill require (in
with c N=k entries, where each entry contains an
1 expectation)nomore thana readanda write oftwo IP
initiallyemptylinkedlistof(srcIP,count)pairs.
addresses,whichisasmallcomputationaloverhead. To
countthenumberofdistinctdestinationsforanysource
OnarrivalofapacketwithsrcIPsanddstIPd: If
(cid:15) in the first hash-table, we could use another hash-table
h (s;d) c =kthenignorethepacket.Otherwise:
1 (cid:21) 1 andhaveanadditionaloverheadof(atmost)2readsand
1. Check entry c1N h (s;d) of T , and insert 2writes(anIPaddressandacounter)perstoredpacket.
(s;d) into thek list(cid:1) fo1 r this entry1 if it is not Notethatthesequantitiesdonotdependonthedistri-
present. Otherwise, it isa duplicatepair and butionofthenumberofdistinctdestinationsbysource.
weignorethepacket. That is, evenif nearly everysourcesent to exactlyone
destination, the basic algorithm would have us store
2. Atthispointweknowthatdisanewdestina-
5:2%ofthesesources,wherethenumber0:052depends
tionfors, i.e., thisisthe firsttime(s;d) has
on k, b, and N. We would like to reduce the memory
appearedintheinterval. We use c1N h (s)
k (cid:1) 2 used in storing these non-superspreader sources. Fur-
to look-up s in T . If s is not found, insert
2 ther, we expect that most traces will have a very large
(s;1)intothelistforthisentry,asthisisthe
number ofsources that contactonly a fewdistinct des-
first destination for s in the sample. On the
tinations, and very few superspreaders. Can we track
other hand, if s is found, then we increment
thesuperspreadersaccuratelywithouttrackingsomany
itscount,i.e.,wereplacethepair(s;m)with
non-superspreaders?
(s;m+ 1). If the new count equals r +1,
Thedifficultyhereisthattheone-levelfilteringalgo-
we report s. In this way, each declared k-
rithm needs a certain minimum sampling rate in order
superspreaderisreportedexactlyonce.
to distinguish between sources that send to k destina-
Note that at the end of the interval, the counts in T 2 tions and k b destinations. Butsources that contactonly
a fewdestinations also get sampled at this rate. In the
canbeusedtoprovideagoodestimateonthenumberof
distinctdstIPsfor eachreportedsrcIP (byscalingthem nextsection,wewilleffectivelyreducethesamplingrate
upbytheinverseofthesamplingrate,i.e.,byafactorof ofthesenon-superspreadersourceswithoutcompromis-
ingontheaccuracyofthealgorithmfordetectingsuper-
k=c ).
1
spreaders.
Analysis: The algorithm presented above will report
3.2 Two-LevelFilteringAlgorithm
any k-superspreader, and will not report a source that
sendstolessthan k distinctdestinationswithprobabil- Wenowpresentanotheralgorithmthatusestwolevels
b
ity at least 1 (cid:14). The total space required in expecta- offiltersandismorememory-efficientthanone-levelfil-
(cid:0)
tionis O(c N=k)words, while the per-packetprocess- teringinmostcases. Atahighlevel,thealgorithmuses
1
ingtimeisconstantwiththehash-tableimplementation twolevelsoffilteringinthefollowingmanner: thefirst-
sketched above. Thus, for the typical case where (cid:14) is level filter effectively decides whether we should keep
a constant and b 2, the algorithm requires space for more information about a particular source, while the
(cid:21)
onlyO(N=k)memorywords. We givetheprecisethe- second-level filter effectively keeps a small digest that
oremstatementandtheoverheadanalysisforthisalgo- can then be used to identify superspreaders. The first
rithm in Appendix B. We now give some examples to level has a lower sampling rate than the second level.
illustratetheone-levelfilteringalgorithm. Thus intuitively, the first level is a coarse filter that fil-
tersoutsourcesthatcontactonlyasmallnumberofdis-
tinctdestinations,sothatwedonotneedtoallocateany
Example: Inthisexample,wesetk = 1000andb =
memoryspaceforthem.Thesecondlevelisamorepre-
2,whichmeansweareinterestedinreportingallsources
cisefilterwhichusesmorememoryspace,andweonly
that contact 1000 or more destinations within a given
time period, without reporting any source that contacts 4Inarealsetting,Ncouldbedeterminedhistorically.0.5
functionTwo-LevelFiltering(s;d)
Level2(s;d);Level1(s;d); 0.4
functionLevel1(s;d) 0.3
if(h (s,d)<r )insertsintoT
1 1 1
0.2
functionLevel2(s;d)
0.1
if(h (s;d)>r )return;
2 2
if(s2= T 1)return; 0
0 5 10 15 20 25 30
elsecomputep= h2(s;d) (cid:1)(cid:13)andinserts
r2
intoT 2;p.
functionOutput
outputallsourcesthatappearinmore
than!ofthehash-tablesT 2;i.
Figure 3. Two-level filtering pseudocode,
where (s;d) represents a source-
destinationpair.
useitforsourcesthatpassthefirstfilter.
Intuitively,thereasonwhythetwo-levelfilteringalgo-
rithmismorespace-efficientthantheone-levelfiltering
algorithmisbecausethesamplingrateforthefirstlevel
of two-level filtering algorithm is lower than the sam-
plingrateoftheone-levelfilteringalgorithm. (Tocom-
pensate,thesamplingrateforthesecondlevelwillneed
tobeabithigher.)Ifasourcecontactssufficientlymany
destinations,itwillbesampled(andthus,stored)inboth
theone-levelfilteringalgorithmandthetwo-levelfilter-
ingalgorithm. Butifasourcecontactsonlyafewdesti-
nations,theprobabilitythatitissampled(andtracked)in
thetwo-levelfilteringalgorithmismuchlowerthanthe
probability that it is sampled (and tracked) in the one-
level filtering algorithm. Thus, the two-level filtering
algorithmwillstorefewersourcesthatcontactveryfew
distinctdestinations. Itisthereforemorespace-efficient
whentherearemanysourcesthatcontactonlyafewdis-
tinctdestinations.
This type ofsampling at multiplelevelsisa newap-
proachthatmaybeofindependentinterest.
Algorithm Description: The algorithm takes
r ;r ;(cid:13);!asparameters,wherer andr representthe
1 2 1 2
sampling rate in the first and second levelrespectively,
and ! is a threshold. Given the required values for k
andb,thevaluesofr ;r ;(cid:13);!maybedeterminedasin
1 2
theanalysisofTheoremC.1.
We keep one hash-table T at the first level, and (cid:13)
1
hash-tablesdenotedT atthesecondlevel. Leth and
2;i 1
h beuniformrandomhashfunctionsthattakeasource-
2
destinationpairandreturnavaluein[0;1)asdescribed
intheprevioussection.
r
etaR
2
Graph showing how
rate r varies with b 2
Parameter b
Figure4.Therater requiredfork =1000,
2
(cid:14) =0:01,withvaryingb.
Foreachpacket(s;d),thenetworkmonitorperforms
thefollowingoperationsasgiveninpseudocodeinFig-
ure3:
Step 1: First, we compute h (s;d). If h (s;d) is
2 2
(cid:15)
greaterthanrater , we skipto step 2. Otherwise,
2
we check to see if the source s is present in the
hash-tableT . IfsisnotpresentinT ,thenagain,
1 1
weskiptostep2. Otherwise,weinsertsintolevel
2asfollows:Ifh (s;d)<r andsispresentinT ,
2 2 1
we insert s into the level-2hash-table T , where
2;p
p= h2(s;d) (cid:13). Thus,weinsertsintolevel2with
r2 (cid:1)
atmostprobabilityr ,andeverysourceappearing
2
inlevel2appearsinlevel1.
Step 2: If h (s;d) is less thanrate r , we insert s 1 1
(cid:15)
intoT . 1
Finally,weoutputallsourcesthatappearinmorethan
!ofthetablesT .
2;i
Optimizations: Notethatintheabovedescription,we
usehash-tablestostorethesampledelementsforeaseof
explanation. We can easily optimize the storage space
inthetwo-levelsamplingfurtherbyusingBloomfilters
insteadofhash-tablestostorethesampledelements. A
discussion of Bloom filters may be found in [5, 6]. In
addition, in the above description, we chose the prob-
ability of inserting a sampled packet into any level-2
hash-table T to be equalto 1=(cid:13), for simpler descrip-
2;i
tionandanalysis. We caneasilygeneralizethistoalter
the probability of inserting a sampled packet into any
level-2hash-tabletobe non-uniform,e.g., anexponen-
tialdistribution.
Analysis: We give a summary of the analysis results
here,anddeferthetheoremstatementanddetailstoAp-
pendix C. When the parameters of the two-level fil-
tering algorithm are chosen appropriately (as shown in
theanalysisofTheoremC.1),itreportssrcIPssuchthat
anyk-superspreaderisreportedwithprobabilityatleast1 (cid:14), while a srcIP with less than k=b distinct desti- be entered into the first level, and require 1 read and 1
(cid:0)
nations is (falsely) reported with probability less than write (of one IP address), and 15% of the packets will
(cid:14). Figure4 showshowthe requiredrate r varies with requireexactly1read.
2
b. (The figure is not meant to illustrate exact values Case 2: For any particular superspreader, at most
of r that would be used in experiments, but just to 15% of the distinct flows (corresponding to that super-
2
give an intuition of how r varies with b for a fixed spreader)willrequire2distinctmemorylocations(1in
2
k and (cid:14).) The threshold ! and the number of hash- level-1, 1 in level-2,of 1 IP address each, with 2 reads
tables(cid:13) varysimilarly. Theexpectedspacerequiredby and1write).
is O(r N +r N). Note that, for a fixed b 2, both Notethatifthetracecontainsonlysourcesthatcontact
1 2
r andr are O(1 ln1), andthus thespacer(cid:21) equiredis onedestinationeach(thefirstcase),thetwo-levelfilter-
1 2 k (cid:14)
O(N ln1).5 ingalgorithmhasmuchlessoverheadthantheone-level
k (cid:14)
WemaymakeasimilarstatementwhenweuseBloom filteringalgorithm,andifthetracecontainsonlysuper-
filtersratherthanhash-tablestostoresampledelements spreaders(thesecondcase),two-levelfilteringalgorithm
as described in the optimization above. Using Bloom hasaboutthreetimesasmuchoverheadasone-levelfil-
filtersdoesnotaffectthefalsenegativerate,butonlythe teringalgorithm. Thisgivesanideaofthetrade-offbe-
false positiverate. We can easily reduce the additional tweenthealgorithms;weexpectthatmostsourcesonly
falsepositiveratecausedbytheBloomfiltercollisionby contact a few distinct destinations, and thus the traces
settingthecorrectparametersoftheBloomfiltersusing will resemble the first case far more than the second
thetheoremsin[5]. case.
We observe also that the accuracy of both algo- Using a Bloom filter in both levels will reduce the
rithmsisindependentoftheinputdistributionofsource- memory storage required, but increase the number of
destinationspairs,aslongastheassumptionofuniform accesses that need to be made. If we use a Bloom fil-
random hash function is obeyed. In addition, note that terwith8independenthashfunctionsateachofthetwo
itisimportanttopicksecrethashfunctionsatrun-time levels,ourmemorystoragewilldropbyaconstantfactor
each time so that the attacker cannot generate an input ofatleast2.5(estimatingconservativelytoaccountfor
sequence that avoid certain hash values. Also, in prac- additionalfalsepositives), andour computationalover-
tice, we optimize our choice of the parameters numer- headwillincreasebyafactorof8–sincewewillneed
ically for both algorithms, since the bounds given by tomake8memoryaccessesforeverymemoryaccessof
the theorems may have larger constant factors than are thehash-tableimplementation.
strictlynecessary. Notethattherecouldexistasmanyas N superspread-
k
ers;thus,forconstantb,allourboundsarewithinalog 1
(cid:14)
factoroftheasymptoticallyoptimalvalues.
Example: In this example, we set k = 1000 and
b = 2, which means we are interested in reporting all 4 Extensions
sourcesthatcontact1000ormoredestinations,without
reporting any source that contacts less than 500 desti- Inthissectionweshowhowtoextendouralgorithms
nations. Forthis, wefindnumericallythatr = 0:006, tohandledeletions,andslidingwindowsanddistributed
1
r = 0:15and(cid:13) = 100suffice, when(cid:14) = 0:05. Note monitoring.
2
thatthissamplingrateimpliesthat85%oftheflowswill
4.1 SuperspreaderswithDeletion
need only to be hashed once and incur no memory ac-
cesses,and15%oftheflowswillhavetobeadditionally Wecanextendouralgorithmstosupportstreamsthat
processed. Theamountofcomputationaloverheadthat include both newly arriving (srcIP, dstIP) pairs and the
theseselectedflowsincurwilldependonthenumberof deletionofearlier(srcIP,dstIP)pairs. RecallfromSec-
distinctdestinationsthattheirrespectivesourcecontacts, tion 1 that a motivating scenario for supporting such
sowewillexaminetwospecificcases: deletions is finding source IP addresses that contact a
Case1: Forthesourcesthatcontactexactlyonedistinct highnumberofdistinctdestinationsanddonotgetlegit-
destinationeach,inexpectation,0:6%ofthepacketswill imaterepliesfromahighnumberofthesedestinations.
Eachin-boundlegitimatereplypacketwithsourceIPx
5Forthetwo-levelfiltering algorithmasstatedhere,thesampling and destination IP y is viewed as a deletion of an ear-
ratesr1 andr2 maynotalways existforagiven k, band(cid:14). (The
lier request packet with source IP y and destination IP
possiblevaluesofkandbareafunctionoftheconfidence level(cid:14);as(cid:14)
isdecreased,sufficiently smallkandk=bmaynotbedistinguishable x from the corresponding flow, so that the source y is
inthisalgorithm.) Toaddressthisissue,onecouldmodifythetwo- chargedforonlydistinctdestinationswithoutlegitimate
level filtering algorithmbyrunningitctimesinparallel. However, replies.
thisissuedoesnotcomeupforreasonablevaluesofk,band(cid:14)(and
For the one-level filtering algorithm (Section 3.1), a
thisisalsoseeninourexperiments),andsoweomitfurtherdiscussion
ofthisissue. deletion of (s;d) is handled by first checking to see if(s;d) is inthe hash-table. Ifit isnot, thendis already (s1;d1),(s1;d2),(s2;d2),(s1;d3)
notbeingaccountedforins’sdistinctdestinationcount, (s1;d2),(s2;d2),(s1;d3),(s2;d3)
so we can ignore the deletion. Otherwise, we delete (s2;d2),(s1;d3),(s2;d3),(s2;d1)
(s;d) from the hash-table. The precision, space, and
Figure 5. Example stream, showing three
time bounds are the same as in the case without dele-
steps of a sliding window of size W = 4.
tions. Similarly, we can extend the hash-table imple-
Thetoprowshowsthepacketsintheslid-
mentationofthetwo-levelfilteringalgorithmtohandle
deletionsaswell.6 ingwindowafterthearrivalof(s1;d3). The
middle row shows that on the arrival of
We can also use this approach to find those sources
(s2;d3), the window includes this pair but
which have more than k failures and fewer than k=b
drops(s1;d1). Thebottomrowshowsthat
successes. We could find these sources by computing
on the arrival of (s2;d1), the window adds
separatelythesourcesthathaveatleastksuccessesand
thispairbutdrops(s1;d2).
thosethathaveatleastk failures,andreturntheappro-
priatedifference.
Note that the definition of a k-superspreader under
deletions is not a stable one. At any point in time, the Intheslidingwindowsetting,asourcemaytransition
monitor may have just processed a packet, and have between being a k-superspreader and not, as the win-
no idea whether this pair will be subsequently deleted. dow slides. In Figure 5, for example, suppose that the
There may be a source right at the k-superspreader threshold for being a k-superspreaderis having atleast
threshold that exceeds the threshold unless the pair is 3distinctdestinations(e.g.,k =3). Thensources1isa
subsequently deleted. Our algorithms can be readily superspreaderinthefirstwindow,butnotthesecondor
adapted to handle a variety of ways of treating this is- thirdwindows.
sue. For example, the one-levelfiltering algorithm can Weshowhowtoadaptone-levelfilteringalgorithmto
report a source as a tentative k-superspreader when its handleslidingwindows. theapproachfortwo-levelfil-
count in T reaches r +1, and then report at the end tering algorithm is similar. We keep a running counter
2
ofthe intervalwhichsources(still)havecountsgreater ofpacketsthat isusedtoassociateeachpacketwith its
thanr. streamsequencenumber(seqNum). Thusifthecounter
iscurrentlyx,theslidingwindowcontainspacketswith
4.2 SuperspreadersoverSlidingWindows sequencenumbersx W+1;::: ;x. Atahighlevel,the
(cid:0)
algorithmworksby(1)maintainingthepairsinoursam-
Inthissection,weshowhowtoextendouralgorithms plesortedbysequencenumber,inordertofindinO(1)
to handle sliding windows. Our goal is to identify k- timesamplepointsthatdropoutoftheslidingwindow,
superspreaderswithrespecttothemostrecentW pack- and(2)keepingtrackofthelargestsequencenumberfor
ets, i.e., hosts which contactmore than k unique desti- each pair in our sample, in order to determine in O(1)
nationsinthelastW packets.Ourgoalistousefarless timewhetherthereisatleastoneoccurrenceofthepair
space than the space needed to hold allthe pairs in the stillinthewindow.
currentwindow. Infurtherdetail,thestepsofthealgorithmareasfol-
Figure5givesanexampleofastreamsubjecttoaslid- lows.
ingwindowofsizeW =4.Thetoprowshowsthepack-
ets in the sliding window after the arrival of (s1;d3). Initially: LetLbe aninitiallyemptylinkedlistof
(cid:15)
Themiddlerowshowsthatonthearrivalof(s2;d3),the (srcIP,dstIP,seqNum)triples,sortedbyincreasing
windowincludesthis pair but drops (s1;d1). The bot- seqNum. Let T 1 andT 2 be asin the originalone-
tom rowshows that on the arrivalof (s2;d1), the win- level filtering algorithm, except that T 1 now con-
dowaddsthispairbutdrops(s1;d2). tains(srcIP,dstIP,seqNum)triples.
Whatmakestheslidingwindowsettingmoredifficult
OnarrivalofapacketwithsrcIPsanddstIPd:Let
thanthestandardsettingisthatapacketisdroppedfrom (cid:15)
xbeitsassignedsequencenumber.
thewindowateachstep,butwedonothavethespaceto
holdontothepacketuntilitistimetodropit. Thisisin 1. Account for a pair dropping out of the win-
contrasttothedeletionssettingdescribedinSection4.1 dow,ifany: IfthetailofLisatriple(s;d;n)
where we are given at the time of deletion the source- suchthatn = x W,thenremovethetriple
(cid:0)
destinationpairtodelete. from L and check to see if the triple exists
inentry c1N h (s;d)ofT . Ifthetripleex-
6Technically, weneedaslightmodification ofthealgorithmde- ists,thenbk eca(cid:1) us1 eT holdsth1 elatestsequence
scribedearlier;weneedtostorethedestinationsaswellateachlevel-2 1
numbers for each source-destination pair in
hash-table;thismayincreasethememoryrequiredbyatmostafactor
of2. thesample,weknowthat(s;d)willnotexistin the window after dropping (s;d;n). Ac-
cordingly,weperformthefollowingsteps: Stream1: (s1;d1);(s2;d2);(s3;d3);(s4;d4)
Stream2: (s2;d3);(s1;d1);(s1;d1);(s3;d2)
(a) RemovethetriplefromT .
1 Stream3: (s4;d2);(s4;d4);(s2;d4);(s4;d3)
(b) Use c1N h (s)tolook-upsinT , and
k (cid:1) 2 2
decrement the count of this entry in T ,
2
i.e.,replacethepair(s;m)with(s;m Figure6.Examplestreamsat3monitoring
(cid:0)
1). points
(c) Ifthenewcountequals0, weknowthat
thesourcenolongerappearsinthesam-
4.3 DistributedSuperspreaders
pleandweremovethepairfromT .
2
On the other hand, if the triple does not ex- In the distributed setting, we would like to iden-
ist, then there is some other triple (s;d;n 0) tify source IP addresses that contact a large number of
correspondingtoamorerecentoccurrenceof uniquehostsintheunionofthestreamsmonitoredbya
(s;d)inthestream(n < n 0). Thusdropping setofdistributedmonitoringpoints.Considerforexam-
(s;d;n) changes neither the sampled pairs ple, the three streams in Figure 6 and k = 3. Sources
nor the source counts, so we simply proceed s1,s2,s3,ands4contact1,3,2,and3distinctdestina-
tothenextstep. tions,respectively.ThusforthetotalofN =12source-
2. Account for the new pair being included in destinationpairs,onlys2ands4arek-superspreaders.
the window: If h (s;d) c =k ignore the NotethatasourceIPaddressmaycontactalargenum-
1 1
packet.Else: (cid:21) ber of hosts overall, but only a small number of hosts
(a) Check entry c1N h (s;d) of T for a in any one stream. Source s2 in Figure 6 is an exam-
k (cid:1) 1 1 pleofthis. Akeychallengeistoenablethisdistributed
triple with sand d. If such an entry ex-
identificationwhilehavingonlylimitedcommunication
ists,replaceitwith(s;d;x),maintaining
betweenthemonitoringpoints.
the invariant that the entry has the lat-
Wedescribehowtomodifyourone-levelfilteringal-
est sequence number, and return to pro-
gorithmtoworkinadistributedsetting. First,eachnet-
cess the next packet. Otherwise, insert
workmonitorrunsthealgorithmasdescribedinSection
(s;d;x)intothelistforthisentry.
3.1(allusingthesamehashfunction,andwithappropri-
(b) Atthispointweknowthatdisanewdes-
atelysizedhash-tables,sayc N=kjifeachofthejmon-
tination for s, i.e., this is the first time 1
itors expectsto see N=j packets). The monitorreports
(s;d) has appeared in the window. We
any locally detected superspreader. Next, at the end of
use c1N h (s) to look-up s in T . If
k (cid:1) 2 2 the stream, each monitor sends its hash-table of (s;d)
s is not found, insert (s;1) into the list
pairstothecentralmonitor. Finally,thecentralmonitor
for this entry, as this is the first destina-
treats these hash-tables as a stream of (s;d) pairs, and
tion for s in the sample. On the other
usingthesamehashfunction,runsthealgorithmonthis
hand, if s is found, then we increment
stream,andreportsanysuperspreaderfound.
itscount,i.e.,wereplacethepair(s;m)
The overall space and time overhead of first step
with(s;m+1). Ifthenewcountequals
abovesummedoverallthemonitorsisthesameasifone
r+1,wereports.
monitormonitorstheunionofthestreams. Thesecond
Theprecision,timeandspaceboundsarethesameas steprequiresatotalamountofcommunicationequalto
in one-level filtering algorithm of Section 3.1 with W thesumofthespaceforthehash-tables,i.e.,anexpected
substitutedforN. O(c N=k)memorywords. Accountingforthelaststep
1
Note that the algorithm is readily modified to han- increases the total space and time by at most a factor
dle sliding windows based on time, e.g., over the last of 2. Note that the algorithm does not require that all
60 minutes, by using timestamps instead of sequence streamsuseanintervalofN=jpackets.Aslongasthere
numbers. Theprecision,timeandspaceboundsareun- areexactlyN packetsinall,thealgorithmachievesthe
changed,exceptthatthetimeisnowanamortizedtime precision bounds given in Theorem B.1. Thus our dis-
boundinsteadofanexpectedone. Thisisbecausemul- tributedone-levelfilteringalgorithmuseslittlememory
tiple pairs can drop out of the windowduring the time and little communication. On the other hand, a similar
betweenconsecutivearrivalsofnewpairs. Ifmorethan extension to the two-level filtering algorithm results in
aconstantnumberofpairsdropout,thenthealgorithm morecommunicationinthedistributedsetting–specif-
requiresmorethanaconstantamountoftimetoprocess ically,ateachstep,themonitorswouldneedtohaveac-
them. However, each arriving pair can drop out only cesstoallthe(individual)first-levelhash-tables,which
once,sotheamortizedper-arrivalcostisconstant. resultsinsignificantincreaseincommunicationbetweenmonitors. k b FalsePositives FalseNegatives
1-Level 2-Level 1-Level 2-Level
5 ExperimentalResults
500 2 8.1e-5 6.3e-5 0 0
500 5 1.13e-4 1.13e-4 0 0
We implemented our algorithms for finding super-
500 10 1.35e-4 8.1e-5 0.01 0
spreaders, and we evaluated them on network traces
takenfromtheNLANRarchive[29],aftertheywerein- 1000 2 4.95e-5 1.13e-4 0.02 0
jected with appropriate superspreaders as needed. All 1000 5 1.62e-4 0 0.02 0.02
of our experiments were run on an Intel Pentium IV, 1000 10 1.13e-4 9.45e-5 0 0.03
1.8GHz. We use the OPENSSL implementation of the 5000 2 8.1e-5 0 0 0
SHA1hashfunction,pickingarandomkeyduringeach 5000 5 4.95e-5 1.62e-5 0 0
run, so thattheattackercannotpredictthehashingval- 5000 10 3.19e-5 1.62e-5 0 0.01
ues. Fora realimplementation,onecanusea moreef- 10000 2 1.62e-4 0 0.02 0
ficienthashfunction. Bothalgorithmsareimplemented 10000 5 3.2e-5 0 0.01 0
so that the superspreaders get output at the end of the 10000 10 1.62e-5 3.2e-5 0.04 0
run, once all the packets have been processed. We ran
our experiments on several traces and obtained similar Figure 7. Evaluation of the precision of
results. Our results show that our algorithms are fast, one-levelfilteringandtwo-levelfilteringal-
have high precision, and use a small amount of mem- gorithmsovervarioussettingsforkandb,
ory. On average, the algorithms take on the order of a with(cid:14) =0:05.
fewsecondsforahundredthousandtoamillionpackets
(withanon-optimizedimplementation).
In this section, we first examine the precision of the
fromsourcesthatsendtok=bdestinationswitherrorrate
algorithms experimentally, then examine the memory
(cid:14). Whenasourcesendstoaverysmallnumberofdes-
used as k, b and N change, and finally compare with
tinations (much smaller than k=b), the probability that
thealternateapproachproposedinSection2.2.
itbecomesafalsepositiveissignificantlylowerthan(cid:14).
Likewise, when a source sends to a very large number
5.1 Experimentalevaluationofprecision
ofdestinations( k),theprobabilitythatitbecomesa
(cid:29)
Toillustratetheprecisionofthealgorithms,weshow falsenegativeismuchlessthan(cid:14).Throughtheconstruc-
asetofexperimentalresultsbelow. Tothebasetrace1 tionofourtraces,thereareonlya100possiblesources
(seeFigure8),weinsertedvariousattackpacketswhere thatmaybefalsenegatives,andallofthemsendtojust
somesourcescontactedahighnumberofdistinctdesti- over k destinations. There are many more sources that
nations.Thatis,forgivenparameterskandb,weadded couldbefalsepositives,andonlya100ofthesesources
100 sources that send to k destinations each, and 100 sendtonearlyk=bdestinations. Thus,thefalsepositive
sources that send to just under k=b destinations each. ratethatisseenismuchlessthantheset(cid:14). Further,all
This was done in order to test if our algorithms do in- of the false positives in our experiments come from the
deeddistinguishbetweensourcesthatsendtomorethan sourcesatthethresholdthatweadded,nottheoriginal
kdestinationsandfewerthank=bdestinations. trace itself. Thefalsepositiverateis typicallyof much
Weset(cid:14) = 0:05. InFigure7,weshowtheresultsof moreimportancethanthefalsenegativerate,sincethere
our experiments, with regards to precision of the algo- are usuallymanymore sourcesthatcould befalsepos-
rithms. Weexaminethecorrectnessofouralgorithmby itives than sources that could be false negatives. Thus,
comparingitagainstanexactcalculationofthenumber it is very useful to verify that the false positive rate is
ofdistinctdestinationseachsourcecontacts. We opti- muchlowerthanthestated(cid:14) inrealtraces,andthatthe
mizeourchoiceoftheotherparametersnumericallyfor falsepositivesobserveddocomeonlyfromtheinserted
bothalgorithms(ina mannersuggestedbytheanalysis trafficatthethreshold.
of the theorems), since the bounds given by the theo-
rems may have larger constant factors than are strictly 5.2 Memoryusageonlongtraces
necessary.
We observe that the accuracy of both algorithms is Wenowexaminememoryusedonverylongtracesby
comparableandboundedby(cid:14),whichconfirmsourtheo- one-levelfilteringalgorithm(Section3.1)andthehash-
reticalresults.Notethatusingasmallervalueof(cid:14)would tableandBloom-filterimplementationsofthetwo-level
produce a smaller false positive rate and false negative filteringalgorithm(Section3.2). Todistinguishthetwo
rate. Wenotethatthefalsepositiverateismuchlower implementationsofthetwo-levelfilteringalgorithm,we
thanthefalsenegativerate. Oursamplingratesarecho- will refer to the hash-table implementation as 2LF-T,
sen to distinguish sources that send to k destinations andtheBloom-filterimplementationas2LF-B.WewillLength No. distinct No. distinct N (no. of ple much less frequently. This in turn decreases the
(insec) sources src-dstpairs packets) number of sources stored that have very few destina-
1 65 59,862 194,060 2:88e6 tions,andthusthetotalmemoryuseddecreases.
2 154 282,484 416,730 3:09e6 Also, for every k, as the number of packets N in-
3 207 1:21e6 1:35e6 4:02e6 creases, the memory used by 1LF eventually exceeds
4 269 2:12e6 2:29e6 4:49e6 thememoryusedby2LF-T&2LF-B.Thisisbecauseof
thetwo-levelsamplingscheme. Sincethefirstsampling
Figure8.Basetracesusedforexperiments rate r is much smaller than c =k in 1LF , the number
1 1
ofnon-superspreadersourcesstoredin2LF-T&2LF-B
use1LFtorefertotheone-levelfilteringalgorithm. We (r N inexpectation)ismuchlessthanin1LF.Theac-
1
examine the memory used as the parameters k, b and tualnumberofsourcesatwhichthisoccursdependson
N are allowed to vary. The memory usage reported is k. As k increases, the number of sources at which the
thenumberofelementsactuallystored,whichisalways memoryusedby1LFexceedsthememoryusedby2LF-
very close to the size of the hash-tables. (The size of T (and 2LF-B) also increases, since the sampling rates
each hash-table set to be the expected number of ele- for both algorithmsdecreaseinthe sameway. We also
mentsthatwillbeinserted,basedonthesamplingrates observethat,onceagain,thememoryusedby2LF-Bis
andN.) Forthebloomfilter implementation,we use8 significantlylowerthan1LFand2LF-T.
independenthashfunctions. The graphs in Figure 11 show the memory used per
Thetracesusedforthissectionareconstructedbytak- source plotted against the number of distinct sources,
ing four base traces of varying lengths, and adding to for various k – as k increases, the total memory used
each of them a hundred sources that send to k destina- drops. Weobservethateachalgorithmhasasimilarde-
tions, and a hundred sources that send to k=b destina- pendence on k, though the absolute memory usage is
tions. The details of the base traces are shown in Fig- different,asdiscussed.
ure8. Weobservethat,withthelargestofthesetraces,a Lastly, we tested both 1LF and 2LF-T on a trace
sourcethatsendsto200distinctdestinationscontributes with10millionsourcesthatcontactedafewdestinations
just about 0:004% to the total traffic analyzed. The each.Atk =1000andb=2,thememoryusageof1LF
memoryused isthe numberof words(or IP addresses) and 2LF-T were about 1.04 million and 60,100 IP ad-
thatneedtobestored. dressesrespectively. Thus, weseethatouralgorithms
The graphs in Figure 9 show the total memory used doindeedscalewellasthenumberofflowsincreases.
byeachalgorithmplottedagainstthenumberofdistinct
sourcesinthetrace,atdifferentvaluesofb. Noticethat 5.3 ComparisonwithanAlternateApproach
through our trace construction procedure, the traces in
Figure9(a),9(b),and 9(c)containthesamenumberof We nowshowresults comparing our approach to the
distinctsources,eventhoughthevalueofbdiffers. Approach4describedinSection2.2:wecountthenum-
We observe that the memory used by the two algo- ber of distinct destinations that a source sends to us-
rithms is strongly correlated with b, as pointed out by ing LossyCounting [25], replacing the regular counter
ourtheoreticalanalysis. Forbothalgorithms,themem- with a distinct-element counter. The details are in Ap-
ory requireddecreases sharply asbincreases from 2to pendix D. We do not show experimental comparisons
5,andthendecreasesmoreslowly.Thiscanalsobeseen withtheotherapproachesastheyallkeepper-flowstate,
(for2LF)fromFigure4,insection3.2. andso,itisclearthattheyneedfarmorespacethanour
Anotherobservationisthat,asexpected,thememory algorithms.
used by 1LF eventually exceeds the memory used by We chose the parameters for LossyCounting and the
2LF-T & 2LF-B, for every value of b. The number of distinct counting algorithm so that (a) the memory us-
sourcesat whichthe memoryused by1LF exceedsthe agewasminimizedforeachband(b)theyproducedthe
memoryusedby2LF-T&2LF-Balsodependsonb.We falsepositiveratessimilartoour algorithmsover10it-
alsonotethat,asexpected,thememoryusedby2LF-B erations. We show experimental results with two vari-
ismuchlessthanthememoryusedby2LF-Tand1LF. ants of the approach: (1) use one distinct counter per
We next examine the memory usage as k changes, source(thisisAltI),and(2)uselog 1 distinctcounters
(cid:14)
which is shown in Figures 10 and 11. We observe persource,andusetheirmedianfortheestimateofthe
thatthetotalmemoryuseddropssharplyaskincreases, numberofdistinctelementsisused(thisisAltII).The
as expected: in 10(a), at k = 500, the memory used memory used is reported as the maximum of the total
rangesfrom 20;000to 200;000IP addresses; in 10(c), number of hash values stored for all the sources atany
at k = 5000, it ranges from 10;000 to 55;000 IP ad- particulartime.
dresses. Eventhoughthenumberofsource-destination Figure12showstheresultofthecomparisonofmem-
pairsincreaseswhenkincreases,wecanaffordtosam- ory usage at k = 1000, for b = 2;5 and 10, on Tracex 105 12
10
8
6
4
2
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni(
desu
yromem
latot
x 105 3.5
3
2.5
2
1LF 1.5 2LF−T
2LF−B 1
0.5
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni(
desu
yromem
latot
x 105 2.5
2
1.5
1LF 2LF−T 1
2LF−B
0.5
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni(
desu
yromem
latot
1LF
2LF−T 2LF−B
(a)b=2 (b)b=5 (c)b=10
Figure 9. Total memory used by the algorithms in words (i.e., IP addresses) vs number of distinct
sources,forb=2,5and10,atk =200.
x 105 5
4
3
2
1
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni(
desu
yromem
latot
x 105
2.5
2
1.5
1LF
2LF−T 1
2LF−B
0.5
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni(
desu
yromem
latot
x 104 6
5
1LF 4
2LF−T 2LF−B
3
2
1
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni(
desu
yromem
latot
1LF
2LF−T
2LF−B
(a)k =500 (b)k=1000 (c)k =5000
Figure 10. Total memory used by the algorithms in words (i.e., IP addresses) vs number of distinct
sources,fork =500;1000and5000,atb=2.
1.4
1.2
1 0.8
0.6
0.4
0.2
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni( ecruos
rep
yromem
0.7
k=200 0.6 k=500
k=1000 k=5000 0.5 k=10000 0.4
0.3
0.2
0.1
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni( ecruos
rep
yromem
0.35
k=200 k=500 0.3
k=1000 k=5000 0.25 k=10000 0.2
0.15
0.1
0.05
0
0 0.5 1 1.5 2 2.5
number of sources (in millions) x 106
)sdrow
ni( ecruos
rep
yromem
k=200 k=500
k=1000 k=5000 k=10000
(a)One-levelfiltering (b)Two-levelfiltering(hashtable) (c)Two-levelfiltering(Bloomfilters)
Figure11.Memoryusedpersourcevsnumberofdistinctsources,forallk,by1LF,2LF-T,&2LF-B
atb=2.b 1LF 2LF-T 2LF-B AltI AltII References
Trace1
[1] N. Alon, Y. Matias, and M. Szegedy. The space com-
2 37610 16234 7223 49063 105589
plexity ofapproximatingthe frequency moments. J. of
5 9563 3241 1377 20746 48424
ComputerandSystemSciences,58:137–147,1999.
10 5685 2698 1136 16839 36823
[2] B. Babcock, S. Babu, M. Datar, R. Motwani, and
Trace2
J. Widom. Models and issue in data stream systems.
2 71852 17536 7711 133988 273101 InProc.21stACMSIGMOD-SIGACT-SIGARTSymp.on
5 19298 4543 1865 76543 168256 Principles of Database Systems (PODS), pages 1–16,
10 12030 4000 1624 67007 135540 June2002.
[3] Z.Bar-Yossef,T.Jayram,R.Kumar,D.Sivakumar,and
Figure 12. Comparisons of total memory L.Trevisan. Countingdistinctelementsinadatastream.
used with traces 1 & 2 for k = 1000 and In Proc.6th InternationalWorkshop on Randomization
varyingb. and Approximation Techniques (RANDOM), pages 1–
10, Sept. 2002. Lecture Notes in Computer Science,
vol.2483,Springer.
1 & Trace 2. Note that all our algorithms show better [4] Z.Bar-Yossef,R.Kumar,andD.Sivakumar. Reductions
performancethanAltIandAltIIonTraces1&2. The instreamingalgorithms,withanapplicationtocounting
resultsforTrace3&Trace4aresimilar,exceptthatAlt trianglesingraphs.InProc.13thACM-SIAMSymposium
onDiscreteAlgorithms(SODA),Jan.2002.
I uses less memorythan 1LFwhen b = 2. We explain
[5] B.H.Bloom. Space/timetrade-offsinhashcodingwith
whyAltIisbetterthanAltIIinAppendixD.
allowableerrors. Commun.ACM,13(7):422–426,1970.
[6] A.BroderandM.Mitzenmacher. Networkapplications
ofbloomfilters: Asurvey. InAllerton,2002.
6 Conclusion
[7] M. Charikar, S. Chaudhuri, R. Motwani, and
V. Narasayya. Towards estimation error guarantees
Inthispaper,wehavedescribednewstreamingalgo- for distinct values. In Proc. 19th ACM Symp. on
rithmsforidentifyingsuperspreadersonhigh-speednet- Principles of Database Systems, pages 268–279, May
works.Ouralgorithmsgiveprovenguaranteesontheac- 2000.
curacyandthememoryrequirements.Comparedtopre- [8] M. Charikar, K. Chen, and M.Farach-Colton. Finding
viousapproaches,ouralgorithmsaresubstantiallymore frequentitemsindatastreams.InProc.29thIntl.Colloq.
onAutomata,Languages,andProgramming,2002.
efficient,boththeoreticallyandexperimentally.Wealso
[9] E.Cohen. Size-estimationframeworkwithapplications
provide several extensions to our algorithms – we can
totransitiveclosureandreachability. J.ofComputerand
identifysuperspreadersinadistributedsetting,overthe
SystemSciences,55(3):441–453,1997.
slidingwindows,andwhendeletionsareallowedinthe [10] G.Cormode,M.Datar,P.Indyk,andS.Muthukrishnan.
stream(whichletsusidentifysourcesthatmakealarge Comparingdatastreamsusing hammingnorms(howto
number of failed connections to distinct destinations). zeroin).InProc.28thInternationalConf.onVeryLarge
Ouralgorithmshavemanyimportantnetworkingandse- DataBases(VLDB),pages335–345,Aug.2002.
curity applications. We also hope that our algorithms [11] G.CormodeandS.Muthukrishnan. What’snew: Find-
will shed new light on developing new fast streaming ing significant differences in network data streams. In
ProceedingsofIEEEInfocom,2004.
algorithmsforhigh-speednetworkmonitoring.
[12] M.Datar, A.Gionis, P.Indyk,andR.Motwani. Main-
taining stream statistics over sliding windows. SIAM
7 Acknowledgements JournalonComputing,31(6):1794–1813,2002.
[13] E. Demaine, A. Lopez-Ortiz, and J. Ian-Munro. Fre-
quencyestimationofinternetpacketstreamswithlimited
This research was supported in part by NSF-ITR
space.InProceedingsofthe10thAnnualEuropeanSym-
CCR-0122581 and the Center for Computer and Com-
posiumonAlgorithms,pages348–360,September2002.
munications Security at Carnegie Mellon under grant [14] N. Duffield, C.Lund, andM.Thorup. Estimatingflow
DAAD19-02-1-0389 from the Army Research Office. distributions from sampled flow statistics. In Proceed-
We also gratefully acknowledge support from the Na- ingsofACMSIGCOMM,2003.
tional ScienceFoundation grant numberCNS-0433540 [15] C.Estan,S.Savage,andG.Varghese. Automaticallyin-
entitled“CyberTrustCenter: SecurityThroughInterac- ferringpatternsofresourceconsumptioninnetworktraf-
fic. InProceedingsofSIGCOMM’03,2003.
tionModeling(STIM)”.Theviewsandconclusionscon-
[16] C. Estan and G. Varghese. New directions in traffic
tained here are those of the authors and should not be
measurement and accounting. In Proceedings of SIG-
interpreted as necessarily representing the officialpoli-
COMM’02,2002.
ciesorendorsements,eitherexpressorimplied,ofNSF, [17] C.Estan,G.Varghese,andM.Fisk. Bitmapalgorithms
ARO,CarnegieMellonUniversity,ortheU.S.Govern- forcounting activeflowson high speedlinks. In ACM
mentoranyofitsagencies. SIGCOMMInternetMeasurementWorkshop,2003.[18] P.FlajoletandG.N.Martin. Probabilisticcountingal- and
gorithms for data base applications. J. Computer and
SystemSciences,31:182–209,1985. Pr[X (1 (cid:15))pn] e
(cid:0)(cid:15)2np=2
(5)
(cid:20) (cid:0) (cid:20)
[19] P. B. Gibbons and Y. Matias. New sampling-based
summarystatisticsforimprovingapproximatequeryan- B ProofforTheorem B.1
swers. In Proc. ACMSIGMOD International Conf. on
ManagementofData,pages331–342,June1998. AccuracyAnalysis: Ouranalysisyieldsthefollowing
[20] P. B. Gibbons and S. Tirthapura. Estimating simple
theoremforprecision:
functions on the union of data streams. In Proc. ACM
TheoremB.1. For any given b > 1, positive (cid:14) < 1,
Symp.onParallelAlgorithmsandArchitectures(SPAA),
andtsuchthatb < k <1,theabovealgorithmreports
pages281–291,June2001.
[21] P.B.GibbonsandS.Tirthapura. Distributedstreamsal- srcIPs such that any k-superspreader is reported with
gorithmsforslidingwindows. InProc.ACMSymp.on probabilityatleast1 (cid:14),whileasrcIPwithatmostk=b
(cid:0)
ParallelAlgorithmsandArchitectures(SPAA),pages63– distinctdestinationsis(falsely)reportedwithprobabil-
72,Aug.2002. ityatmost(cid:14).
[22] L.Golab,D.DeHaan,E.Demaine,A.Lopez-Ortiz,and Aprooffollowsthediscussionoftheoverheadanaly-
J.Ian-Munro. Identifyingfrequentitemsinslidingwin-
sis.
dowsoveronlinepacketstreams.InProceedingsof2003
ACM SIGCOMM conference on Internet measurement,
Overhead Analysis: The total space is an expected
pages173–178.ACMPress,2003.
[23] J.Jung,V.Paxson,A.Berger,andH.Balakrishnan. Fast O(c N=k) memory words. The choice of c de-
1 1
portscandetectionusingsequentialhypothesistesting.In pends on b. By equation 2, we have that c =
1
Proceedings of the 2004 IEEE Symposium on Security O(ln(1=(cid:14))( b )2) = O((1+ 1 )ln(1=(cid:14)))forb
andPrivacy,May2004. 3. For 3 b <(cid:0)1 b < 2e2, b i( sb (cid:0) a1) c2 onstant, so c (cid:20) =
[24] R. Karp, S. Shenker, and C. Papadimitriou. A simple 1
O(ln(1=(cid:14))). For larger b, c = O(ln(1=(cid:14))). Thus
algorithm for finding frequent elements in streams and 1
across the entire range for b, we have c = O((1 +
bags. ACMTrans.DatabaseSyst.,28(1):51–55,2003. 1
[25] G. Manku and R. Motwani. Approximate frequency 1 )ln(1=(cid:14))). Thisimpliesthatthetotalspaceisan
(b 1)2
countsoverdatastreams.InProceedingsofVLDB2002, (cid:0)
expected O N ln1(1+ 1 ) bits. For the typical
2002. k (cid:14) (b 1)2
(cid:0)
[26] D.Moore,V. Paxson,S.Savage, C.Shannon, S.Stani- casewhere(cid:14)(cid:16)isa constantandb(cid:17) 2,thealgorithmre-
(cid:21)
ford,andN.Weaver.Insidetheslammerworm.Security quiresspaceforonlyO(N=k)memorywords.
andPrivacyMagazine,July/August2003. As for the per-packet processing time, note that
[27] R.MotwaniandP.Raghavan. RandomizedAlgorithms.
each hash table is expected to hold O(c N=k) entries
CambridgeUniversityPress,Cambridge,UK,1995. 1
throughoutthecourseofthealgorithm. Thuseachhash
[28] S. Muthukrishnan. Data streams: Algorithms and ap-
table look-up takes constant expected time, and hence
plications. Technicalreport,RutgersUniversity,Piscat-
away,NJ,2003. eachpacketisprocessedinconstantexpectedtime.
[29] NLANR. National laboratory for applied network re-
Proof. Each distinct (srcIP,dstIP) pair occuring during
search. http://pma.nlanr.net/Traces/,2003.
[30] M. Roesch. Snort - lightweight intrusion detection for theintervalisretainedaccordingtoaBernoullitrialwith
networks. InProceedingsofthe13thSystemsAdminis- successprobability c1 . TheprobabilityofasrcIPbeing
tN
trationConference.USENIX,1999. reportedincreasesmonotonicallywithitsnumberofdis-
[31] N.Weaver, S.Staniford,andV.Paxson. Veryfastcon-
tinctdestinations.Thusitsufficestoshowthat
tainmentofscanningworms. InProceedingsofthe13th
UsenixSecurityConference.USENIX,August2004. P1. Falsenegatives:theprobabilitythatasrcIPs with
1
tN distinctdestinationshaslessthanrsuccessesis
A Analysisbackground lessthan(cid:14),and
Intheanalysisofouralgorithms,wewillusethefol- P2. Falsepositives: theprobabilitythatasrcIPs 2 with
lowingChernoffbounds. tN=b distinct destinations has at least r successes
FactA.1. LetX bethesumofnindependentBernoulli islessthan(cid:14).
random variables with success probability p. Then for
We seek to achieve P1 and P2 while keeping c small.
all(cid:12) >1, 1
Let X be the number of successes for s and let X
1 1 2
Pr[X (cid:12)np] e(1 1=(cid:12) ln(cid:12))(cid:12)np (3) be the number of successes for s 2. Let k = tN. We
(cid:0) (cid:0)
(cid:21) (cid:20) considereachofthethreerangesforbinturn.
Moreover,forany(cid:15),0<(cid:15)<1, Considerthecasewhenb 3.Byequation5,wehave
Pr[X
1
(1 (cid:15) 1)(c 1=k)k](cid:20) e (cid:0)(cid:15)2 1k(c1=k)=2 forany(cid:15)
1
Pr[X (1+(cid:15))pn] e (cid:0)(cid:15)2np=3 (4) between(cid:20) 0and(cid:0) 1. Settinge (cid:0)(cid:20) (cid:15)2 1c1=2 = (cid:14) andsolvingfor
(cid:21) (cid:20)(cid:15) 1,weget(cid:15) 1 = c2
1
ln(1=(cid:14)). Because(cid:14) < 1,wehave nla or tge grb o, ww ae syse me pk toa tim cao ld lyifi wed ithan ba .ly Fsi is rsi tn ww eh ai pch plyc 1 ed qo ue as
-
that ln(1=(cid:14)) > 0q. Thus as long as c
1
> 2ln(1=(cid:14)), we
tion 3 with (cid:12) = b=2: Pr[X (b=2)(c =b)]
h (cid:15) 02a a)v n(e c d0 1 1=< .k) S(cid:15) ( e1 k t= t< ib n) g1 ]. (cid:20) eB (cid:0)y e (cid:15)2 2(cid:0)e cq (cid:15) 12 2 =u ( (a k 3t = bi )bo )n ( =c4 1=, (cid:14)kw ) a=e n3 dh fa sov ore la vP n inyr g[ (cid:15)X 2 fo2 b re(cid:21) (cid:15)t 2w( ,e1 we+ n
e
e l rn( =1 ((cid:0) b=2 c2=b ) =(cid:0) 2(cid:21)ln =(b 2= (2 1i) m)c p1 (cid:15)= li2 e )cs< 1 ,e
i(cid:0)
.(cid:0) e.c 21 (cid:15)==2 b =b (cid:0)e2 1c l =na 2u(cid:21) ( .bse = B2b y) e(cid:21) < qu2 ae
(cid:0)
t2 i1 1 oi . nm 5Tp ,hl wi ue(cid:20) ess
1 1 1 1
get(cid:15) 2 = 3 c1bln(1=(cid:14)). Aslongasc 1 > 3bln(1=(cid:14)),we havePr[X 1 (cid:20)(cid:0) r]
(cid:20)
e (cid:0)(1=2)2c1=2 = e (cid:0)c1=8. Itfollows
have0<q(cid:15)
2
<1. thatselectingc
1
=8ln(1=(cid:14))whenb 2e2 impliesthat
(cid:21)
Becausethesamecut-offr is usedfors ands , we bothP1andP2holdwhenr =c =2.
1 2 1
require that r = (1 (cid:15) )c = (1 + (cid:15) )(c =b), i.e.,
1 1 2 1
(cid:0)
that b 1 2 ln(1=(cid:14)) = 1+ 3bln(1=(cid:14)). Thus, C Two-levelFilteringAlgorithm: Analysis
(cid:0) c1 c1
bpc
1
(cid:16) b q2ln(1=(cid:14)) =(cid:17)pc
1
+ q3bln(1=(cid:14)). Solving For ease of explanation, we present an analysis of a
(cid:0)
afo nr dc
h1
e, nw cee pgetpc
1
= ln(1=(cid:14))( pp3b+bp2)=(b (cid:0)1), s Si em ctp il oe nr 3v .e 2r .sio Inn to hf isth ve ert sw ioo n- ,le ev ve el ryfil tt ie mri eng aa sl og uo rr ci ethm mui sn
t
p be inserted into level-2, we let each hash-table decides
3b+2bp6b+2b2 independently whether the source gets inserted in that
c =ln(1=(cid:14)) whenb 3 (6)
1 (b 1)2 ! (cid:20) table. Using the notation of Section 3.2, here is step 1
(cid:0)
the algorithm: each level-2 hash-table T has a hash
2;i
This is the smallest c 1 that works for both s 1 and s 2, functionh 3;i associatedwith it. if h 2(s;d) < r 2 ands
whenapplyingtheaboveChernoffbounds(equations4 ispresentinT , weconsiderinsertingsintoeachlevel
1
and5). Becauseb > 1and2b2=(b 1)2 > 2,wehave 2hash-tablesT separately. ForeachT ,wecheckif
2;i 2;i
(cid:0)
thatc >2ln(1=(cid:14)).Toshowthatc >3bln(1=(cid:14))when h (s;d)islessthan1=(cid:13).Ifh (s;d)<1=(cid:13),weinsert
1 1 3;i 3;i
b 3,wemustshowthat3b+2bp6b+2b2 >3b(b 1)2, sintoT .Notethat,thus,wemayinsertsintomultiple
2;i
(cid:20) (cid:0)
i.e.,3+2p6b+2b>3b2 6b+3,i.e.,2p6>(3b level-2hash-tables, butwe expectto insertintoexactly
(cid:0) (cid:0)
8)pb. Now when b 3, we have 3b 8 1 < 2 onelevel-2hash-table.
(cid:20) (cid:0) (cid:20)
and pb < p6, and hence c > 3bln(1=(cid:14)). It follows The following proof for the algorithm above can be
1
thatforthec inequation6, P1andP2holdwhenr = adapted to the two-level filtering algorithm in Section
1
3.2byusingmartingaletailboundsonoccupancyprob-
(1+(cid:15) )(c =b)= c1 + 3c1 ln(1=(cid:14)).
2 1 b b lems[27]insteadofChernoffbounds.
Next consider the casqe when 3 < b < 2e2. As ar-
TheoremC.1. Given k, N;b > 1 such that k=b > 1
gued above, P1 holds with (cid:15) 1 = c2 1 ln(1=(cid:14)), as long and0<(cid:14) <1.Letz =max( b2b 1;5).Letr 1 = kz log2 (cid:14),
as c
1
> 2ln(1=(cid:14)). (This analysqis did not depend on and r
2
be minimal value tha(cid:0)t satisfies the following
b.) Ontheotherhand,notethatwecannotusethesame constraints:
analysis as in the previous case to show P2 holds be-
cause for example, when b = 4, the c in equation 6
1 2ln2=(cid:14)
is less than 3bln(1=(cid:14)). Instead, we apply equation 3 r
2 (cid:21) k(1 e (z
1)=z)(cid:15)2;
with (cid:12) = e: Pr[X 2 ec 1=b] e(1 (cid:0)1=e (cid:0)1)ec1=b = (cid:0) (cid:0) (cid:0) 1
e (cid:0)c1=b. We require tha(cid:21) t r = ec 1=(cid:20) b = (1 (cid:0)(cid:15) 1)c 1, i.e., r
2
(cid:21) k(1 e
2=b)((1l +n1 (cid:15)= )(cid:14)
ln(1+(cid:15) ) (cid:15)
);
(cid:15) 1 = 1 (cid:0)e=b = c2
1
ln(1=(cid:14)). Solving for c 1, we get (cid:0) (cid:0) 12
e 2=b
2 (cid:0) 2
cc 11 S(cid:21)= im2 i2 ll anl rn ( l( 1 y1 ,== (cid:14) s(cid:14) e)) = tt= ( in( 11q g(cid:0)(cid:0) ee b)e cb 2 1) =.2 b. =Mo (cid:14)re ao nv de sr, olP v1 inh go fl od rs cfo ,r wal el (cid:15)w 2h >ere 0(cid:15) ;1 an= d1 0(cid:0) <1
(cid:15)
1(cid:0)
<1(cid:0) 1= :e (cid:0)(cid:0) (z (cid:0)1)=z(1+(cid:15) 2);
(cid:0) 1
get that c 1 = bln(1=(cid:14)) and moreover, P2 holds for all Also;r 2 (cid:20) 1:
c bln(1=(cid:14)). Thusselectingc suchthat
1 1
(cid:21) Let (cid:15) be the value of (cid:15) when r is minimized in the
01 1 2
c
1
= ln(1=(cid:14)) (cid:1)max( wb; h2 e= n(1
3(cid:0)
<e b= <b)2 2)
e2 (7)
a
1
eb )o .veconstraints.Let(cid:13) =r 2k,and!=(1 (cid:0)(cid:15) 01)(cid:13)(1
(cid:0)
Thus, for any given b > 1, positive (cid:14) < 1, and k
implies both P1 and P2 hold when r = ec =b. (Note such that k=b > 1, if r exists satisfying above con-
1 2
that0 < (1 e=b)2 < 1andhencec > 2ln(1=(cid:14)),as straints, Algorithm II reports srcIPs such that any k-
1
(cid:0)
requiredforP1.) superspreaderisreportedwithprobabilityatleast1 (cid:14),
(cid:0)
Finally, consider the case when b 2e2. Note that whileasrcIPwithlessthank=bdistinctdestinationsis
(cid:21)
the c from equation 7 grows linearly in b. Thus for (falsely)reportedwithprobabilitylessthan(cid:14).
1Webeginouranalysisbymakinganobservation.Our Let k = k(1 1). For a source i with n k :
sampling is done by hashing source-destination pairs; Pr[X 0 = 1] =(cid:0) 1 z Pr[X = 0] 1 (1i (cid:21) r2)k0 0
therefore, if the same source-destination pair appears whichij
isatleast1
(cid:0)
e
r2k0=i (cid:13)j
.
(cid:21) (cid:0) (cid:0) (cid:13)
multiple times, its chances of being sampled do not (cid:0) (cid:0)
Therefore, for a source i with n k , we
change. Thus,hashingeffectivelyreducesallthepack- i (cid:21) 0
can write the expected value of tables set E[S ] =
ets in the stream to a set of distinct source-destination (cid:13) E[X ] (cid:13)(1 e r2k0=(cid:13)). Let(cid:22) =E[S ].i The
pairs, and in this transformed set, a superspreader ap- j=1 ij (cid:21) (cid:0) (cid:0) 1 i
randomvariableS isequivalentlytheresultofsampling
pearsatleastk =tN times.Effectively,wesampleonly P i
(cid:13)coinsofbiasPr[X =1],sowecanusetheChernoff
from this transformed set. Therefore, we analyze the ij
boundstogetalowerboundonS ,withwithprobabil-
algorithm in this transformed set, in which all source- i
ity at least 1 (cid:14).That is, for (cid:15) (0;1), by Chernoff
destinationpairsaredistinct. (cid:0) 2 1 2
bounds: Pr[S
i
(1 (cid:15) 1)(cid:22) 1] e(cid:0)(cid:22) 21(cid:15)2 1.
Proof. We consider Algorithm II in Section 3.2, under (cid:20) (cid:0) (cid:20)
Let ! = (1 (cid:15) )(cid:22) . We need to have Pr[S
1 1 1 i
lt yh ze Aep llta h lr e oa gm fa ae l rst ie te hrs n meg sgiv ia nte in v theb esy , pat rnh ode oftt hh aee rno er bte h am e se. faW el .se ew poil sl itfi ivrs et s.ana- T(1
h(cid:0)
ere(cid:15) 1 fo)(cid:22) re1 ,]
(cid:22)(cid:20)
1
(cid:21)2(cid:14).(cid:0) (cid:15)W
2
2
1e loc gan
2
(cid:14).g Set inth ci es (cid:22)b 1y (cid:21)set (cid:13)ti (n 1g (cid:0)e e(cid:0)(cid:22) (cid:0)21
r
(cid:13)(cid:15) 22 1
k0(cid:20)
)w(cid:20) 2(cid:14) e.
needtohave(cid:13)(1 e r2k0=(cid:13)) 2 log2:Since(cid:13) =r k,
Falsenegatives. Weanalyzethefalsenegativeerrorin (cid:0) (cid:0) (cid:21) (cid:15)2 1 (cid:14) 2
r k(1 e k0=k) 2 log2. Therefore,
twoparts. Forasourceiwithn i >k,wefirstshowthat 2 (cid:0) (cid:0) (cid:21) (cid:15)2 1 (cid:14)
thesourceisinsertedintoT ,withprobability1 (cid:14),in
1 (cid:0) 2 2 2
the first 1=z fraction of its total pairs. Then, we show r log :
2 (cid:21) k(cid:15)2(1 e k0=k) (cid:14)
that it is inserted into at least ! of the tables T 2;i over 1 (cid:0) (cid:0)
therestofitspairs,withprobability1 (cid:14),conditioned
(cid:0) 2 Thus, we get the first constraint in the optimization
on its presence in T . Together,these two parts ensure
1 probleminTheoremC.1.
that,withprobabilityatleast1 (cid:14),thesourceispresent
(cid:0)
in! ofthetablesT , afterallthedistinctdestinations
2;i
Falsepositives. Nowweanalyzethefalsepositiveer-
forthatsourceareseen.
ror. Asource iis a false positiveif n < k=b, but it is
Forthefirstpartofthefalsenegativeanalysis,weneed i
still identified as a superspreader by our algorithm. To
tosettherateofsamplingr sothatanysourcethatap-
1
boundthiserror,itisenoughtoshowthatthesourceis
pearsmorethanktimesinthesampledsetwillbesam-
pledwithaprobabilityof1 (cid:14),withinitsfirst 1 fraction presentin!ofthetablesT 2;iwithsufficientlylowprob-
(cid:0)2 z ability. Therefore, we compute a constraint on the rate
ofpackets.Thisisequivalenttosayingthatanysources
with k packetsispresentinT withprobabilityatleast ofsamplingr 2,sothat,withprobabilityatleast1 (cid:14),no
z 1 morethan!tableswillcontainthesource. Weno(cid:0) tethat
1 (cid:14). Equivalently, 1 Pr[s T n k=z] =
(cid:0) 2 (cid:0) 2 1 j s (cid:21) the probability of being a false positive is maximized
(1 (cid:0)r 1)k z whichneedstobeboundedby 2(cid:14). Therefore, whenn
i
isaslargeaspossible,soweassumenowthat
n =k=b.
z 2 i
r log : As in our analysis for the false negatives, let X be
1 ij
(cid:21) k (cid:14)
the indicator variable for the event that the source i is
Thisgivesusalowerboundonr 1. Wewantr 1 tobe putintothejthtableinT 2: X ij is1ifthesourceisput
assmallaspossibletominimizethememoryneeded,so intothejthtable,and0otherwise. Onceagain,wecan
wesetr toitslowerbound. compute the probability that source i gets put into the
1
Nowweanalyzethesecondpartofthefalsenegative jthtableT 2;j asfollows:Pr[X ij =1]=1 Pr[X ij =
(cid:0)
error.Bysettingr 1asspecified,weknowthatthesource 0] (cid:20)1 (cid:0)e (cid:0)2r2k=b(cid:13):7
willbepresentinT withprobability 1 (cid:14) inthefirst Therefore, the expected number of tables contain-
ek z xap mac ik ne ets th. eS po r, oi bn abth1 ile itr yem tha ai tn ti hn eg sk o( u1 rc(cid:0) e(cid:0) w1 z) il2 lpa fac lk le it ns t, ow !e ing (cid:13) j=s 1ou Erc [Xe ii j]w (cid:20)ith (cid:13)n (1i (cid:0)= ek b (cid:0)2c ra 2n k=bb (cid:13)e ):w Sri ut bte sn tita us tinE g[S foi] r (cid:13)= ,
tables in the second step, conditioned onthe eventthat wegetE[S ] r k(1 e 2=b).
P i (cid:20) 2 (cid:0) (cid:0)
thesourceisalreadypresentinT 1. Let(cid:22)
2
= E[S i]. Onceagain, with Chernoffbounds,
Let X ij be the indicator variable for the event that wecanget,for(cid:15) 2 > 0,Pr[S i (1+(cid:15) 2)(cid:22) 2] e (cid:0)c(cid:22)2,
(cid:21) (cid:20)
sourceiis putintothe jthtable, T 2;j, whenthe source wherec= loge(cid:15)2(1+(cid:15) 2) (cid:0)(1+(cid:15)2)
(cid:0)
is already present in T . The expected number of ta-
1 7Theconstant2canbechangeddependingonourassumptionon
bles T that will contain source i is the sum S =
(cid:13) j=12 X;j ij. j t sh ue mr eel ra 2tio <ns (cid:13)h ,ip wb he ictw he isen trur e2 wan hd en(cid:13) k. >He 1re .,forsimplicity,weonlyas-
PLet ! = (1 + (cid:15) )(cid:22) . Since we want to bound thetthsmallesthashvalue.Inordertogetan((cid:15);(cid:14))-
2 2 2
Pr[S (1 + (cid:15) )(cid:22) ] by (cid:14), this becomes (cid:14) approximateanswer,theauthorsshowthattneeds
i 2 2
e (cid:22)2((1+(cid:21) (cid:15)2)log(1+(cid:15)2) (cid:15)2). Substituting for (cid:22) , we g(cid:21) et to be no larger than 96=(cid:15)2, when O(log 1) copies
(cid:0) (cid:0) 2 (cid:14)
log1 r k(1 e 2=b)((1 + (cid:15) )log(1 + (cid:15) ) (cid:15) ). ofthealgorithmareruninparallel.
(cid:14) (cid:20) 2 (cid:0) (cid:0) 2 2 (cid:0) 2
Thus,
Puttingthemtogether:Inordertofindsuperspread-
(cid:15)
1 1 1 ers using LossyCounting, we need to replace the
r log :
2 (cid:21) k(1 e 2=b)((1+(cid:15) )log(1+(cid:15) ) (cid:15) ) (cid:14) regular frequency counter in LossyCounting with
(cid:0) (cid:0) 2 2 (cid:0) 2 a distinct counter. Therefore, when a source-
Thus,wehavethesecondconstraintforr . destination pair is examined, the source and des-
2
We finally have to establish the relationship between tination is hashed, and the t smallest hash values
(cid:15) and(cid:15) . Thiswegetbyequatingthedefinitionsof! (ofanyparticularsource)arestored. Attheendof
1 2 1
and! ,sincethealgorithmusesonlyonethreshold!8: eachepoch,allthesourceswhosecountsofdistinct
2
destinationsare belowthe threshold setby Lossy-
(cid:22) 1(1 (cid:15) 1) = (cid:22) 2(1+(cid:15) 2) Countingare discarded. We need to run O(log 1)
(cid:0) (cid:14)
(1 e
(cid:0)k0=k)(1
(cid:15) 1) = (1 e
(cid:0)2
b)(1+(cid:15) 2)
copies of the distinct counter per source, and use
(cid:0) (cid:0) (cid:0) themedianvalueofthemultiplecopies.Attheend,
1 e 2=b
(cid:15) = 1 (cid:0) (cid:0) (1+(cid:15) ): allsourceswhosethresholdexceedsk=b+(cid:15)arere-
1 (cid:0) 1 (cid:0)e (cid:0)k0=k 2 turned, where (cid:15) comes from the error in distinct-
counting. The tolerable error in LossyCounting
Thus,wegetthelastrelationintheproblem.
determines the number of epochs (and therefore,
Wewishtominimizer , subjecttotheseconstraints,
2 spacerequired), andwe setthese errorparameters
becausetheexpectedmemoryisO(r N+r N).There-
1 2 sothattheexpectedmemoryusageisminimized.
fore,thesolutiontotheprobleminTheoremC.1,gives
us asampling rater 2 suchthat asourcewithk distinct We show experimental results with two algorithms
destinations will be in at least ! tables, and a source based on this approach: (1) use one distinct counter
sendingtolessthankdistinctdestinationswillnotbein per source (Alt I), and (2) use log 1 distinct counters
(cid:14)
!tables,withprobabilityatleast1 (cid:14). per source, and use their median for counting approxi-
(cid:0)
matelythenumberofdistinctelements(AltII).Thedis-
D LossyCounting and Distinct Counting tinctcountingalgorithmrequiresO(log 1)parallelruns
(cid:14)
Algorithm for its guarantees. However,AltIisalways betterthan
AltIIinourexperiments. Thisisbecausemanysources
ThefollowingisasummaryofLossyCountingandthe send packets to only a few destinations, and for those
distinct counting algorithms that we use in our experi- sources,thereislog1 factorincreaseinthememoryus-
(cid:14)
mentalcomparisonsinSection5.3. age,eventhoughtheactualconstanttdecreases.
LossyCounting: Thestreamofelementsisdivided
(cid:15) into epochs, where each epoch contains 1 ele-
(cid:15)
ments;thus,foraninputstreamofN elements,we
willhave(cid:15)N epochs. Eachepochhastwophases:
in the first phase, the incoming elements are sim-
plystored,andifalreadypresent,theirfrequencyis
updated; in the second phase, the algorithm looks
over all elements, and discards those with a low
frequencycount. Itcanbeshownthatthefinalfre-
quencycountoftheelementsisatmost(cid:15)lowerthan
the true frequencycount, and clearly, it cannot be
largerthanthetruefrequencycount.
Distinct Counting: Every element in the input
(cid:15)
stream is hashed (uniformly) between (0;1), and
thetlowesthashvaluesarestored. Attheend,the
algorithmreportst=min asthenumberofdistinct
t
elementsinthestream,wheremin isthevalueof
t
8Alternately,wecoulduseaconstraint!1 >!2,andset!tobe
somevaluebetween!1and!2.