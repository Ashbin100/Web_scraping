Dynamic Taint Analysis for Automatic Detection, Analysis,
and Signature Generation of Exploits on Commodity Software
James Newsome DawnSong
jnewsome@ece.cmu.edu dawnsong@cmu.edu
Carnegie MellonUniversity Carnegie MellonUniversity
Abstract detected, we must quickly develop filters (a.k.a. attack
signatures)thatcanbeusedtofilteroutattackpacketsef-
ficiently,andhenceprotectvulnerablehostsfromcompro-
Software vulnerabilities have had a devastating effect miseuntilthevulnerabilitycanbepatched.Becauseanew
on the Internet. Worms such as CodeRed and Slammer worm can spread quickly, signature generation must be
can compromise hundreds of thousands of hosts within automatic—no manual intervention can respond quickly
hours or even minutes, and cause millions of dollars of enoughtopreventalargenumberofvulnerablehostsfrom
damage[25,42]. Tosuccessfullycombatthesefastauto- beinginfectedbyanewfast-spreadingworm.
matic Internetattacks, weneedfastautomatic attackde-
tectionandfilteringmechanisms.
Inthispaperweproposedynamictaintanalysisforau- We need fine-grained attack detectors for commodity
tomaticdetectionofoverwriteattacks,whichincludemost software. Manyapproaches havebeen proposed to de-
typesofexploits.Thisapproachdoesnotneedsourcecode tectnewattacks. Theseapproachesroughlyfallintotwo
or special compilation for the monitored program, and categories: coarse-grained detectors, that detect anoma-
henceworksoncommoditysoftware. Todemonstratethis lous behavior, such as scanning or unusual activity at a
idea,wehaveimplementedTaintCheck,amechanismthat certainport;andfine-graineddetectors,thatdetectattacks
canperformdynamictaintanalysisbyperformingbinary on a program’svulnerabilities. Coarse-grained detectors
rewriting at run time. We show that TaintCheck reliably mayresultinfrequentfalsepositives,anddonotprovide
detects mosttypes of exploits. We found that TaintCheck detailedinformationaboutthevulnerabilityandhowitis
produced no false positives for any of the many different exploited.Thus,itisdesirabletodevelopfine-grainedde-
programsthatwetested. Further,wedescribehowTaint- tectorsthatproducefewerfalsepositives,andprovidede-
Check could improve automatic signature generation in tailedinformationaboutthevulnerabilityandexploit.
severalways. Severalapproachesforfine-graineddetectorshavebeen
proposedthatdetectwhenaprogramisexploited.Mostof
thesepreviousmechanismsrequiresourcecodeorspecial
1. Introduction recompilation of the program, such as StackGuard [14],
PointGuard [13], full-bounds check [19, 37], Libsafe-
Softwarevulnerabilitiessuchasbufferoverrunsandfor- Plus [5], FormatGuard [12], and CCured [27]. Some of
matstringvulnerabilitieshavehadadevastatingeffecton them also require recompiling the libraries [19, 37], or
the Internet. Worms such as CodeRed and Slammer ex- modifyingtheoriginalsourcecode,orarenotcompatible
ploit software vulnerabilities and can compromise hun- withsomeprograms[27,13].Theseconstraintshinderthe
dreds of thousands of hosts within hours or even min- deploymentandapplicabilityofthesemethods,especially
utes,andcausemillionsofdollarsofdamage[25,42]. To forcommoditysoftware,becausesourcecodeorspecially
successfully combat fast Internet worm attacks, we need recompiled binaries are often unavailable, and the addi-
automatic detection and defense mechanisms. First, we tionalworkrequired(suchasrecompilingthelibrariesand
needautomaticdetectionmechanismsthatcandetectnew modifyingtheoriginalsourcecode)makesitinconvenient
attacks for previouslyunknownvulnerabilities. A detec- to apply these methods to a broad range of applications.
tion mechanism should be easy to deploy, result in few Notethatmostofthelarge-scalewormattackstodateare
falsepositivesandfewfalsenegatives,anddetectattacks attacksoncommoditysoftware.
early, before a significant fraction of vulnerable systems Thus, it is important to design fine-grained detectors
are compromised. Second, once a new exploit attack is thatworkoncommoditysoftware,i.e.,workonarbitrarybinaries without requiring source code or specially re- eratesignaturesforattackfiltering.Wehavedevelopedan
compiled binaries. This goal is difficult to achieve be- automatic tool, TaintCheck, to demonstrate our dynamic
cause important information, such as type information, taintanalysisapproach. TaintCheckoffersseveralunique
is not generally available in binaries. As a result, exist- benefits:
ing exploit detection mechanisms that do not use source (cid:15) Does not require source code or specially com-
codeorspeciallycompiledbinaryprograms,suchasLib-
piled binaries. TaintCheck operates on a normally
Safe[6],LibFormat[36],ProgramShepherding[22],and
compiled binary program. This makes TaintCheck
theNethercote-Fitzhardingeboundscheck [28], are typi-
simpleandpracticaltouseforawidevarietyofpro-
callytailoredfornarrowtypesofattacksandfailtodetect
grams,includingproprietaryprogramsandcommod-
many important types of common attacks (see Section 7
ityprogramsforwhichnosourcecodeisavailable.
fordetails).
(cid:15) Reliably detects most overwrite attacks. Taint-
Check’sdefaultpolicydetectsformat stringattacks,
We need automatic tools for exploit analysis and sig-
andoverwriteattacksthatattempttomodifyapointer
nature generation. Because fine-grained detectors are
used as a return address, function pointer, or func-
expensive and may not be deployed on every vulnerable
tion pointer offset. Its policy can also be extended
host, once a new exploit attack is detected, it is desir-
to detect other overwrite attacks, such as those that
abletogeneratefasterfiltersthatcanbewidelydeployed
attempt to overwrite data used in system calls or
to filter out exploit requests before they reach vulnera-
security-sensitivevariables.
blehosts/programs.Oneimportantmechanismiscontent-
basedfiltering,wherecontent-basedsignaturesareusedto (cid:15) Has no known false positives. Inour experiments,
pattern-matchpacketpayloadstodeterminewhetherthey TaintCheckgavenofalsepositivesinitsdefaultcon-
are a particular attack. Content-based filtering is widely figuration. As we discuss in Section 3, in many
used in intrusion detection systems such as Snort [32], caseswhenafalsepositivecouldoccur,itisasymp-
Bro [31], and Cisco’s NBAR system [43], and has been tomofapotentiallyexploitablebuginthemonitored
shownto bemore effectivethanother mechanisms, such program. For programs where the default policy of
assource-basedfilteringforwormquarantine[26]. How- TaintCheckcouldgenerateafalsepositive,weshow
ever,thesesystemsallusemanuallygenerateddatabases in Section 3 that it is straightforward to configure
ofsignatures. Manual signature generationis clearlytoo TaintCheck to reduce or eliminate those false posi-
slowtoreacttoawormthatinfectshundredsofthousands tives.
ofmachinesinamatterofhoursorminutes. We needto
have automatic exploit analysis and signature generation (cid:15) Enablesautomaticsemanticanalysisbasedsigna-
toquicklygeneratesignaturesforattackfilteringafteran turegeneration.
exploitattackhasbeendetected. We proposea newapproachforautomaticsignature
generation: usingautomaticsemanticanalysisofat-
tackpayloadstoidentifywhichpartsofthepayload
Our contributions. In this paper, we propose a new
couldbeusefulinanattacksignature. Previouswork
approach, dynamic taint analysis, for the automatic de-
in automatic signature generation uses content pat-
tection, analysis, and signature generation of exploits on
tern extraction to generate signatures [21, 24, 41].
commoditysoftware. Indynamictaintanalysis,welabel
Theinformationprovidedbysemanticanalysiscould
data originating from or arithmetically derived from un-
beusedtogenerateasignaturedirectly,orashintsto
trusted sources such as the network as tainted. We keep
content pattern extraction techniques. Because se-
trackofthepropagationoftainteddataastheprogramex-
mantic analysis providesinformation about the vul-
ecutes (i.e., what data in memory is tainted), and detect
nerabilityandhowitisexploited,itcouldpotentially
when tainted data is used in dangerous ways that could
allowanaccuratesignaturetobeautomaticallygen-
indicateanattack.Thisapproachallowsustodetectover-
eratedusingfewerpayloadsthanwouldbenecessary
writeattacks,attacksthatcauseasensitivevalue(suchas
using content pattern extraction alone. By requir-
returnaddresses,functionpointers,formatstrings,etc.)to
ing fewer attack payloads, semantic analysis could
be overwrittenwith the attacker’s data. Most commonly
generate a signature at an earlier stage of a worm
occurringexploitsfallintothisclass ofattacks. Afteran
epidemic,thusminimizingdamagecausedbyanew
attack has been detected, our dynamic taint analysis can
worm.
automaticallyprovideinformationaboutthevulnerability,
howthevulnerabilitywasexploited,andwhichpartofthe TaintCheck could be used to perform automatic se-
payload led to the exploit of the vulnerability. We show manticanalysisofattackpayloads,becauseitmoni-
howthisinformationcouldbeusedtoautomaticallygen- torshoweachbyteofeachattackpayloadisusedbythe vulnerable program at the processor-instruction jumpaddressesandformatstringsshouldusuallybesup-
level. As a first step, we show that TaintCheck can pliedbythecodeitself,notfromexternaluntrustedinputs.
be usedto identify the valueusedto overwritea re- However,anattackermayattempttoexploitaprogramby
turnaddressorfunctionpointer.Themostsignificant overwritingthesevalueswithhisowndata.
bytesofthisvaluecanbeusedaspartofasignature. We refertodatathatoriginatesorisderivedarithmeti-
We also show that for text-based protocols such as callyfromanuntrustedinputasbeingtainted. Inourdy-
HTTP, it can be used as a signature by itself, with namic taint analysis, we first mark input data from un-
onlyasmallfalsepositiverate. trustedsourcestainted,thenmonitorprogramexecutionto
trackhowthetaintedattributepropagates(i.e.,whatother
Moreover,we showhowTaintCheckcanbeusedas
data becomes tainted) and to check when tainted data is
anaccurateclassifierbothinexistingautomaticsig-
usedindangerousways. Forexample,useoftainteddata
nature generation systems, and in an automatic se-
asjumpaddressesorformatstringsoftenindicatesanex-
mantic analysis signature generation system. As an
ploitofavulnerabilitysuchasabufferoverrunorformat
accurate classifier, TaintCheck can be used to accu-
stringvulnerability.
rately identify new attacks. It can also be used to
Note that our approach detects attacks at the time of
verify the quality of generated signatures by deter-
use, i.e., when tainted data is used in dangerous ways.
miningwhetherrequeststhatmatchanewsignature
Thissignificantlydiffersfrommanypreviousapproaches
actuallycontainanattack.
which attempt to detect when a certain part of memory
TaintCheckaddsanewpointinthedesignspaceofau- is illegitimatelyoverwrittenby an attacker at the time of
tomatic detection and defense, and is the first approach the write. It is not always possible at the time of a write
thatachievesalltheaboveproperties. to detect that the overwrite is illegitimate, especially for
ThecurrentimplementationofTaintCheckslowsserver approachesnotusingsourcecodeorspeciallyrecompiled
executionbetween1.5and40times. However,ourproto- binaries. In contrast, our approach does not rely on de-
typehasnotbeenoptimized.Severaltechniquesdescribed tectionatthetimeofoverwriteandisindependentofthe
inSection4willleadtoamoreefficientimplementation. overwritingmethod, and thus can detect a wide range of
Additionally,we showin Section 5 that monitoring even attacks.
a small fraction of incoming requests with TaintCheck
could help to detect a new worm in the early stages of
anepidemic. Designandimplementationoverview TaintCheckper-
The rest of the paper is organized as follows. We de- forms dynamic taint analysis on a program by running
scribeTaintCheck’sdesignandimplementation,andhow the program in its own emulation environment. This al-
it detects various attacks, in Section 2. We show Taint- lowsTaintChecktomonitorandcontroltheprogram’sex-
Checkisabletodetectawidevarietyofattackswithfew ecution at a fine-grained level. Specifically, we imple-
falsepositivesandnegativesinSection3. Weevaluatethe mented TaintCheck using Valgrind [29]. Valgrind is an
effectivenessandperformanceofTaintCheckinSection4. opensourcex86emulatorthatsupportsextensions,called
WediscusshowTaintCheckcanbeappliedtodetectionof skins,whichcaninstrumentaprogramasitisrun.1
newattacksinSection5,andtoautomaticsignaturegen- Whenever program control reaches a new basic block,
erationinSection6.WepresentrelatedworkinSection7, Valgrindfirsttranslatestheblockofx86instructionsinto
andourconclusionsinSection8. its own RISC-like instruction set, called UCode. It then
passestheUCodeblocktoTaintCheck,whichinstruments
2. TaintCheckdesignand implementation the UCode block to incorporate its taint analysis code.
TaintCheck then passes the rewritten UCode block back
TaintCheck is a novel mechanism that uses dynamic
to Valgrind, which translates the block backto x86 code
taint analysis to detect when a vulnerability such as a
sothatitmaybeexecuted. Onceablockhasbeeninstru-
bufferoverrunorformatstringvulnerabilityisexploited.
mented, it is kept in Valgrind’s cache so that it does not
We first give an overview of our dynamic taint analysis
needtobereinstrumentedeverytimeitisexecuted.
approach,andthendescribehowweusethisapproachin
thedesignandimplementationofTaintCheck.
1NotethatwhileMemcheck,acommonlyusedValgrindextension,
isabletoassistindebuggingmemoryerrors,itisnotdesignedtodetect
Dynamic taint analysis Our technique is based on the attacks. Itcandetectsomeconditionsrelevanttovulnerabilitiesandat-
observationthatinorderforanattackertochangetheex- tacks,suchaswhenunallocatedmemoryisused,whenmemoryisfreed
ecutionofaprogramillegitimately,hemustcauseavalue twice, andwhena memorywrite passesthe boundaryofa malloc-
allocatedblock.However,itdoesnotdetectotherattacks,suchasover-
thatisnormallyderivedfromatrustedsourcetoinsteadbe
flowswithinanareaallocatedbyonemalloccall(suchasabufferfield
derivedfromhisowninput. Forexample,valuessuchas ofastruct),formatstringattacks,orstack-allocatedbufferoverruns.TaintSeed TaintTracker TaintAssert
Copy
(via double−free)
Add Attack
Use as
Data from Fn Pointer Detected!
Socket
Malloc’d
Buffer Untainted Data
Figure1.TaintCheckdetectionofanattack. (ExploitAnalyzernotshown).
To use dynamic taint analysis for attack detection, we set to a pointer to this structure. This information can
need to answer three questions: (1) What inputs should later be used by the Exploit Analyzer when an attack is
betainted? (2)Howshouldthetaintattributepropagate? detected. Optionally, logging can be disabled, and the
(3) What usage of tainted data should raise an alarm as shadow memory locations can simply store a single bit
an attack? To make TaintCheck flexible and extensible, indicatingwhetherthecorrespondingmemoryistainted.
we have designed three components: TaintSeed, Taint-
Tracker, and TaintAssert to address each of these three 2.2.TaintTracker
questions in turn. Figure 1 shows how these three com-
TaintTracker tracks each instruction that manipulates
ponents work together to track the flow of tainted data
data in order to determine whether the result is tainted.
anddetectanattack. Eachcomponenthasadefaultpolicy
UCode Instructions fall into three categories: data
and can easily incorporate user-defined policies as well.
movement instructions that move data (LOAD, STORE,
Inaddition,eachcomponentcanbeconfiguredtologin-
MOVE, PUSH, POP, etc.), arithmetic instructions that
formation about taint propagation, whichcan be usedby
performarithmeticoperationsondata(ADD,SUB,XOR,
the fourth component we have designed, the Exploit An-
etc.), and those that do neither (NOP, JMP, etc.). The
alyzer. Whenanattackis detected, theExploitAnalyzer
default policy of TaintTracker is as follows: for data
performs post-analysis to provide information about the
movementinstructions,thedataatthedestinationwillbe
attack, including identifying the input that led to the at-
tainted if and only if any byte of the data at the source
tack, andsemantic informationabout the attack payload.
location is tainted; for arithmetic instructions, the result
Thisinformationcanbeusedinautomaticattacksignature
will be tainted if and only if any byte of the operands is
generation,asweshowinSection6.
tainted. Whilearithmeticinstructionsalsoaffectthepro-
cessor’sconditionflags,wedonottrackwhethertheflags
2.1.TaintSeed
are tainted, because it is normal for untrusted data to in-
TaintSeedmarksanydatathatcomesfromanuntrusted fluencethem.Notethatforbothdatamovementandarith-
sourceofinputastainted.Bydefault,TaintSeedconsiders meticinstructions,literalvaluesareconsidereduntainted,
inputfromnetworksocketstobeuntrusted,sinceformost sincetheyoriginateeitherfromthesourcecodeofthepro-
programsthenetwork isthe mostlikely vectorofattack. gramorfromthecompiler.
TaintSeedcanalsobeconfiguredtotaintinputsfromother A special caseis for constantfunctions wherethe out-
sourcesconsidereduntrustedbyanextendedpolicy,e.g., put of the function does not depend on the inputs. For
inputdatafromcertainfilesorstdin. example, a common IA-32 idiom to zero out a register,
Each byte of memory, including the registers, stack, “xor eax, eax”, always sets eax to be zero regard-
heap, etc., has a four-byte shadow memory that stores a lessofwhethertheoriginalvalueineaxistaintedornot.
pointertoaTaintdatastructureifthatlocationistainted, TaintTracker recognizes these special cases such as xor
or a NULL pointer if it is not. We use a page-table-like eax, eaxandsub eax, eax,andsetstheresultlo-
structuretoensurethattheshadowmemoryusesverylittle cation to be untainted. Note that there can be more gen-
memory in practice. TaintSeed examines the arguments eral cases of constant functions where a sequence of in-
and results of each system call, and determines whether structionscomputes a constantfunction. We donothan-
anymemorywrittenbythesystemcallshouldbemarked dle these more general cases. However, such cases will
as tainted or untainted according to the TaintSeed pol- only make the dynamictaint analysis conservativeand it
icy. When the memory is tainted, TaintSeed allocates a hasnotbeenanissueinpractice.
Taint data structure that records the system call number, Inordertotrackthepropagationoftainteddata,Taint-
a snapshot of the current stack, and a copy of the data Trackeraddsinstrumentationbeforeeachdatamovement
that was written. The shadow memory location is then or arithmetic instruction. When the result of an instruc-tion is tainted by one of the operands, TaintTracker sets (cid:15) Format strings Bydefault, TaintAssert also checks
theshadowmemoryoftheresulttopointtothesameTaint whethertainteddataisusedasaformatstringargu-
structureasthetaintedoperand. Optionally,TaintTracker menttotheprintffamilyofstandardlibraryfunc-
caninsteadallocateanewTaintstructurewithinformation tions. These checks detect format string attacks, in
abouttherelevantinstruction(includingtheoperandloca- whichanattackerprovidesamaliciousformatstring
tions and values, and a snapshotof the stack) that points totricktheprogramintoleakingdataorintowriting
back to the previous Taint structure. When an attack is anattacker-chosenvaluetoanattacker-chosenmem-
detected, the Exploit Analyzer can follow this chain of oryaddress.Thesecheckscurrentlydetectwhenever
Taint structures backwards to determine how the tainted tainteddataisusedasaformatstring,evenifitdoes
datapropagatedthroughmemory. not contain malicious format specifiers for attacks.
This could be used to discover previously unknown
2.3.TaintAssert formatstringvulnerabilities. Optionally,TaintAssert
can instead only signal when the format string both
TaintAssertcheckswhethertainteddataisusedinways is tainted and contains dangerous format specifiers
thatitspolicydefinesasillegitimate.TaintAssert’sdefault such as %n. This option is useful when a vulnera-
policyisdesignedto detectformatstringattacks, andat- bility is already known, and the user only wants to
tacks that alter jump targets including return addresses, detectactualattacks.
functionpointers,orfunctionpointeroffsets.WhenTaint-
Toimplementthesechecks,weinterceptcallstothe
Checkdetectsthattainteddatahasbeenusedinanillegit-
printf family of functions (including syslog)
imateway,signallingalikelyattack,itinvokestheExploit
withwrappersthatrequestTaintChecktoensurethat
Analyzertofurtheranalyzetheattack.
theformatstringisnottainted,andthencalltheorig-
Thefollowingarepotentiallyillegitimatewaysinwhich
inal function. For most programs, this will catch
tainted data might be used. TaintAssert’s policy can be
any format string attack and not interfere with nor-
specifiedtocheckforanyoftheseindependently.
malfunctionality.However,ifanapplicationusesits
(cid:15) Jump addresses By default, TaintAssert checks ownimplementationofthesefunctions,ourwrappers
whethertainteddataisusedasajumptarget,suchas maynotbecalled.
areturnaddress,functionpointer,orfunctionpointer
(cid:15) System call arguments TaintAssert can check
offset. Many attacks attempt to overwrite one of
whether particular arguments to particular system
these in order to redirect control flow either to the
callsaretainted,thoughthisisnotenabledinTaint-
attacker’s code, to a standard library function such
Check’sdefaultpolicy. Thiscouldbeusedtodetect
as exec, orto another point in the program(possi-
attacksthatoverwritedatathatislaterusedasanar-
blycircumventingsecuritychecks).Incontrast,there
gument to a system call. These checks are imple-
areveryfewscenariosinwhichtainteddatawouldbe
mented using Valgrind’scallback mechanism to ex-
usedasa jumptargetduringnormalusageofapro-
aminetheargumentstoeachsystemcallbeforeitis
gram, and we have not found any such examples in
made.
ourtesting.Hence,thesechecksdetectawidevariety
ofattackswhilegeneratingveryfewfalsepositives. As an example, we implemented an optional pol-
icy to check whether the argument specified in any
Notethatjumptablesareapossibleexceptiontothis
execve system call is tainted. This could be used
rule.Ajumptablecoulduseuserinputasanoffsetto
todetectifanattackerattemptstooverwritedatathat
a jumpaddress. Thisisanacceptableprogramming
islaterusedtospecifytheprogramtobeloadedvia
practice if there are checks in place to sanitize the
an execvesystem call. We disabledthis check by
tainted data. gcc does not appear to construct jump
default, because some programs use tainted data in
tablesinthiswayinpractice,butothercompilersor
thiswayduringnormalusage. Anotableexampleis
hand-coded assembly might. See Section 3 for fur-
that Apache uses part of a URL string as the argu-
therdiscussionofthisscenario.
menttoexecvewhenaCGIisrequested.
WeimplementedthesechecksbyhavingTaintCheck
place instrumentation before each UCode jump in- (cid:15) Application or library-specific checks TaintAssert
structiontoensurethatthedataspecifyingthejump canalsobeconfiguredtodetectattacksthatarespe-
targetisnottainted.NotethatIA-32instructionsthat cific to an application or library. It can do this by
havejump-likebehavior(includingcallandret) checkingspecifiedmemoryrangesatspecifiedpoints
are translatedinto UCode jump instructions by Val- oftheprogram. Inparticular,itcanbeconfiguredto
grind. check whether a particular argument to a particularw
f
s
aAu
u
bnn
p
oc
p
vet
l
ei x io .ean dmi p ts oleta pi on rft ie td nhi tw s fh i -se sn tc ye h lv eee cr fk ut ih n na g ct titf ohu nen sc ,ft oi ao r smn dais t essc cta rrl iil bne egd ds. D Oe pf ta iou nlt
a
lP Pol oi lc iy
cy Format
Stri Bn ug
ffer
Over Df ol uo
ble
Fre He
eap
Smash
Return Address
To implement this, TaintCheck could be told to
Jump Address
check whether a particular addressrange or register Function Pointer
is tainted whenever the program counter reaches a Fn Ptr Offset
particular value, or whenever it is used in a certain System Call Args
way. Theaddressrangespecifiedcouldbeabsolute, Function Call Args
orcouldberelativetothecurrentstack frame. This
policyisapplicationdependentandisdisabledbyde- Figure2.Attackdetectioncoverage.
fault.
Thesechecksaresufficienttocatchawiderangeofat- collectadditionalsamples ofaworm, whichcanbe used
tacks. There are two other types of checks we also con- tohelpgenerateasignatureforthatworm.
sidered,butdecidednottouse.Thefirstistrackingwhich TheExploitAnalyzercouldalsobeusedtoprovidese-
flagsaretainted,andcheckingwhenataintedflagisused mantic informationabout the attack payload. This infor-
toaltercontrolflow. Thiscoulddetectwhentheattacker mation can be used to automatically generate attack sig-
overwritesa variablethataffectsthebehaviorofthepro- natures more accurately and with fewer samples than is
gram. However,tainteddatais usedto alter controlflow possible with purely content-based analysis of the attack
onaregularbasis,anditisunclearwhetherthereisareli- payload. To demonstrate this idea, the Exploit Analyzer
ablewaytodifferentiatethenormalcasefromanattack. currentlyidentifiesthevalueusedtooverwritethereturn
Thesecondtypeischeckingwhetheraddressesusedin address. We show in Section 6 that the most significant
datamovementinstructionsaretainted. Thiscoulddetect bytesofthisvaluecanbeusedinasignatureoftheattack.
whenanattackeroverwritesadatapointerinordertocon- Note that our techniquesare relatedto dynamicprogram
trolwheredataismovedtoorloadedfrom. However,itis slicing[4,23],althoughdynamicprogramslicingconsid-
commontousetainteddataasanoffsettodatamovement erscontrol-flowdependenciesandisoftenbasedonsource
instructions,particularlyinthecaseofarrays. codeanalysis.
2.4.ExploitAnalyzer 3. SecurityanalysisofTaintCheck
When TaintAssert detects that tainted data has been In this section, we analyze the attacks that can be de-
used in a way violating its security policy, thus signal- tectedbyTaintCheckandthefalsepositivesandfalseneg-
ingalikelyexploit,theExploitAnalyzercanprovideuse- ativesincurredbyTaintCheck.
fulinformationabouthowtheexploithappened,andwhat
theexploitattemptstodo. Thesefunctionsareusefulfor
identifying vulnerabilitiesand for generating exploitsig- Attacks detected by TaintCheck Figure 2 classifies
natures. overwriteattacksbythetypeofvaluethatisoverwritten,
Information logged by TaintSeed and TaintTracker andbythemethodusedtoperformtheoverwrite. Ingen-
shows the relevant part of the execution path in between eral,TaintCheckiscapableofdetectinganyoverwriteat-
tainted data’sentry into the system, and its use in an ex- tack that overwrites a value that would not normally be
ploit.BybacktracingthechainofTaintstructures,theEx- tainted. TaintCheck’s default policy is that jump targets
ploitAnalyzerprovidesinformationincludingtheoriginal and format strings should not be tainted, allowing it to
inputbufferthatthetainteddatacamefrom,theprogram detect attacks that overwritejump targets (such asreturn
counterandcallstackateverypointtheprogramoperated addresses,functionpointers,andfunctionpointeroffsets),
ontherelevanttainteddata,andatwhatpointtheexploit whetheralteredtopointtoexistingcode(existingcodeat-
actuallyoccurred.TheExploitanalyzercanusethisinfor- tack)orinjectedcode(codeinjectionattack),andallfor-
mationtohelpdeterminethenatureandlocationofavul- matstringattacks. It’simportanttonotethatmostofthe
nerabilityquickly,andtoidentifytheexploitbeingused. worm attacks we have seen to date fall into these cate-
TheExploitAnalyzercanoptionallyallowanattackto gories, including all the major worms such as the Slam-
continueinaconstrainedenvironmentafteritisdetected. merWorm andtheCodeRedWorm. TaintCheck’spolicy
Wecurrentlyimplementanoptiontoredirectalloutgoing can also be customized in order to detect an even wider
connections to a logging process. This could be used to rangeofattacks,asdescribedinSection2.3Falsenegativeanalysis Afalsenegativeoccursifanat- that the operationis actuallysafe. For example, the pro-
tacker can cause sensitive data to take on a value of his gram might use tainted data as a format string, but only
choosingwithoutthatdatabecomingtainted. Thiscanbe afterithasensuredthatitdoesnotcontainanymalicious
achieved if the altered data does not originate and is not formatspecifierssuchas%n(whichwouldsignifyapos-
arithmeticallyderivedfromuntrustedinputs,butisstillin- sibleformatstringattack). Anotherexampleisthatapro-
fluencedbyuntrustedinputs.Inparticular,becausewedo gram could use tainted data as a jump target in a jump
notconsiderthetaintedattributeofflags,theattackercan table, after checking that it is within expected bounds.
alter data by influencing the control flow of conditional Fortunately, these cases occur relatively rarely and usu-
branchestoevadetainting.Forexample,supposethevari- allyatfixedplaces(programcounters)inprograms. Most
ablexistainted. Astructureoftheformif (x == 0) of these false positives can be detected by running pro-
y = 0; else if (x == 1) y = 1; ... is se- grams on legitimate inputs through a training phase. In
mantically the same as y = x but would not cause y to thesecases,TaintCheckcaneitherbeconfiguredtoignore
become tainted, since the value for y is only influenced theparticularfailedtaintassertion,or,ifadditionalinfor-
indirectly by x, via the condition flags. If the attacker mation is available, tountaint the dataimmediately after
could later cause y to overwritea sensitive value, the at- ithasbeensanitychecked.Thelatteroptionissafer,since
tackwouldbeundetected.Anotherpotentialproblemisif an attacker mayattempt to overwritethe data againafter
tainteddataisusedasanindexintoatable. Forexample, ithasbeensanitychecked.
IIS translates ASCII input into Unicode via a table [15].
Theresultingtranslationisnottainted,becausethevalues 4. Evaluation
were copied from hard-coded literals, rather than arith-
meticallyderivedfromtheinput. We evaluate TaintCheck’s compatibility and incidence
OtherfalsenegativescanoccurifTaintCheckisconfig- of false positives in Section 4.1, its effectivenessagainst
uredtotrustinputsthatshouldnotbetrusted. Thecurrent variousattacksinSection4.2,anditsperformanceinSec-
default configuration of not trusting data read from net- tion4.3.
work sockets is sufficient to detect most remote attacks.
However, an attacker may be able to control data from 4.1.Compatibilityandfalsepositives
otherinputsources,dependingontheapplication. Anex-
We usedTaintCheckto monitoranumberofprograms
ampleofthisisavulnerabilityintheinndnewsserver,in
in order to check for false positives, and to verify that
which data from the network is first written to a file on
the programs were able to run normally. We tested sev-
disk,andthenreadbackintomemory[1,15].Thesetypes
eral server programs: apache, ATPhttpd, bftpd, cfingerd,
of false negativescan be minimized by using a more re-
and named; client programs: ssh and firebird; and non-
strictive policy of what inputs should be tainted. In our
network programs: gcc, ls, bzip2, make, latex, vim,
experiments, markingdata read from files other than dy-
emacs,andbash.
namically loaded libraries did not cause false positives,
All of these programs functioned normally when run
except in the case of some configuration files. In those
under TaintCheck, and no false positives occurred using
cases,itisstraightforwardtoconfigureTaintChecknotto
TaintCheck’sdefaultpolicyoftaintingdatafromnetwork
taintdatareadfromthosefiles.
socketsandassertingthatjumptargetsandformatstrings
areuntainted.Inourevaluationusingnamed,wereplayed
Analysis and handling of false positives In cases a trace containing 158,855 DNS queries to the primary
where TaintCheck detects that tainted data is being used nameserver at Princeton University. This nameserver is
in an illegitimate way even when there is no attack tak- also the secondary server for a top level European do-
ing place, it can mean one of two things. First, it could main, and handles outbound queries for Princeton users.
meanthattheprogramcontainsavulnerabilitythatshould Hence, this trace contains a diverse set of requests from
be fixed. For example, the program may be using an a diverse set of clients. Our named server was config-
uncheckedinput asaformat string. Inthiscase, the best ured to resolve each request by performing a recursive
solution is to fix the vulnerability, possibly using Taint- query. TheTaintCheck-monitorednamedserverbehaved
Check’sExploit Analyzertohelpunderstandit. Another correctlyanddidnotgenerateanyfalsepositives.
possibilityistoconfigureTaintChecktoonlysignalanat- To further test for false positives, we tried running all
tackifsomeotherconditionisalsotrue-forexample,ifa of the client programs and non-network programs with
taintedformatstringactuallydoescontaindangerousfor- a policy to taint data read from standard input, and data
matspecifiers(suchas%n). read from files (except for files owned by root, notably
Theotherpossibilityisthattheprogramperformssan- including dynamically loaded libraries). The only addi-
ity checks on the tainted data before it is used, ensuring tionalfalsepositivesthatresultedwereinvimandfirebird.In both cases, the program appears to be using data read detectataintedformatstring,whichcanleadtoaformat
fromoneofitsrespectiveconfigurationfilesasanoffsetto string attack. This programtook a line ofinput fromthe
ajumpaddress. Thiscouldeasilybefixedbyconfiguring user,andprinteditbackbyusingitastheformatstringin
TaintChecktotrustthecorrespondingconfigurationfiles. acalltoprintf.WhenweranthisprogramunderTaint-
Check,TaintCheckcorrectlydetectedthatataintedformat
4.2.Evaluationofattackdetection string was being used in printf. As a further test, we
wrote a program with a buffer overrun vulnerability that
We tested TaintCheck’s ability to detect several types
allowed the attacker to overwritea format string. An at-
ofattacks,includingseveralsyntheticandactualexploits.
tackermightchoosetooverwritetheformatstringtoper-
Most of these attacks attempted to use a vulnerability to
formaformatstringattackinsteadofdirectlyoverwriting
overwriteasensitivevalue.Theoneexceptionisaninfor-
thereturnaddressinordertoevadesomebuffer-overflow
mationleakattackinwhichauser-suppliedformatstring
protectionmechanisms. Again,wefoundthatTaintCheck
contained format specifiers, causing the program to out-
was able to determine correctly when the format string
put data from the stack. As Table 1 shows, TaintCheck
wastainted.
successfully detected each attack. For the format string
attacks that attempted to overwrite another value, Taint-
4.2.2.Actualexploits
Checkdetectedboththatataintedformatstringwasbeing
used,andthattheothervaluehadbeenoverwritten.Addi-
Inthissection,weevaluateTaintCheckonexploitstothree
tionally,TaintChecksuccessfullyidentifiedthevalueused
vulnerableservers: awebserver,afingerdaemon,andan
to overwrite the return address in the ATPhttpd exploit.
FTPserver. Inalltheseevaluations,TaintChecksuccess-
WeshowinSection6howthiscanbeusefulwhengener-
fully detected all the attacks and incurred no false posi-
atingasignatureforbufferoverflowattacks.
tivesduringnormalprogramexecution.
4.2.1.Syntheticexploits
ATPhttpd exploit ATPhttpd [35] is a web server pro-
gram. Versions 0.4b and lower are vulnerable to several
Inthissection,weevaluateTaintCheckusingsyntheticex-
buffer overflow vulnerabilities. We obtained an exploit
ploits on bufferoverrunsthat overwritereturn addresses,
that sends the servera malicious GET request [34]. The
functionpointers,andformatstringvulnerabilities. Inall
request asks for a very long filename, which is actually
theseevaluations,TaintChecksuccessfullydetectedallat-
shellcode and a return address. The filename overruns a
tacksandresultedinnofalsepositives.
buffer,causingthereturnaddresstobeoverwritten.When
the function attempts to return, it jumps instead to the
Detecting overwrittenreturn address In order to test
shellcodeinsidethefilename. Theattackeristhengiven
TaintCheck’s ability to detect an overwritten return ad-
aremoteshell.
dress, we wrote a small program with a buffer overflow
TaintCheck correctly detected that the return address
vulnerability. The program uses the dangerous “gets”
was tainted when the server was attacked, and did not
function in order to get user input. An input that is too
generate any false positives when serving normal GET
long will overflow the buffer and begin overwriting the
requests. TaintCheck also correctly identifies the return
stack. Weperformedatestinwhichthereturnaddressis
address value that overwrites the previous value. As we
overwrittenwiththeaddressofanexistingfunctioninthe
showinSection6,thiscansometimesbeusedasasigna-
code.TaintCheckwasabletodetecttheattackbecausethe
tureforanattack.
returnaddresswastaintedfromuserinput.
cfingerd exploit cfingerd is a finger daemon that con-
Detecting overwritten function pointer In a similar
tains a format string vulnerability in versions 1.4.2 and
test, we verified TaintCheck’s ability to detect an over-
lower. We obtained an exploit for this vulnerability that
writtenfunctionpointer.Wewroteaprogramwithastack
worksasfollows.Whencfingerdpromptsforausername,
buffer overflow vulnerability where the overrun buffer
the exploit responds with a string beginning with “ver-
could overwrite a function pointer on the stack. Again,
sion”,andalsocontainingmaliciouscode. Duetoanother
TaintCheckcorrectlydetectedtheattackbecausethefunc-
bug, cfingerd copies the whole string into memory, but
tion pointer was tainted by user input during the buffer
only reads to the end of the string “version”. Thus, the
overrun.
malicious code is allowed to reside in memory, and the
stringappearstobealegitimatequery.
Detecting format string vulnerability Finally, we cfingerd later contacts the identd daemon running on
wrote another program to verify TaintCheck’s ability to the querier’s machine. The exploit runs its own identd,Program OverwriteMethod OverwriteTarget Detected
ATPhttpd bufferoverflow returnaddress 4
synthetic bufferoverflow functionpointer 4
synthetic bufferoverflow formatstring 4
synthetic formatstring none(infoleak) 4
cfingerd syslogformatstring GOTentry 4
wu-ftpd vsnprintfformatstring returnaddress 4
Table1.EvaluationofTaintCheck’sabilitytodetectexploits
responding with a string that will be later used as a for- plete. WhenrununderValgrind’sNullgrindskin,thetask
mat string to the syslog function. When cfingerd uses took25.6seconds(3.1timeslonger). WhenusingMem-
thisformatstring, theentry forthe exitfunctionin the Check,ittook109seconds(13.3timeslonger). Whenus-
globaloffsettableisoverwrittentopointtothemalicious ing TaintCheck, it took 305 seconds (37.2 times longer).
codethatwasinsertedinthefirststep. Whencfingerdfin- Note that this is a worst-case evaluation as the applica-
ishesprocessingthequery,itattemptstoexit,butiscaused tion is completely CPU-bound. (Also note that we dis-
toexecutetheattacker’scodeinstead. cussoptimizationtechniquesattheendofthissection,one
Duringnormalusage,TaintCheckcorrectlydetectsthat of which in early implementation improvesperformance
tainted data is being used as a format string. When we overheadto24timesslowdown.)
used the exploit, TaintCheck detected the tainted format
string, andlater detectedwhenthe program attempted to
usethetaintedpointerintheglobaloffsettable. Short-lived: cfingerd Whenaprogramstarts,eachba-
sicblockisrewrittenondemandtoincludeTaintCheck’s
wu-ftpd exploit Version 2.6.0 of wu-ftpd has a format instrumentation.Whilebasicblockcachingamortizesthis
string vulnerability in a call to vsnprintf. We ob- penalty over a long execution time, it can be more sig-
tained an exploit for this vulnerability that uses the for- nificantfor veryshort-livedprocesses. In ordertoevalu-
matstringtooverwriteareturnaddress. TaintChecksuc- ate this case, we timed how long cfingerd 1.4.2 takes to
cessfully detects both that the format string supplied to startandserveafingerrequest. cfingerdrunsunderinetd,
vsnprintfistainted,andthattheoverwrittenreturnad- whichmeansitrestartsforeachrequest.
dressistainted. WithoutValgrind,therequesttookanaverageof.0222
seconds. Using the Nullgrind skin, the request took 13
4.3.Performanceevaluation timesaslong. TheMemcheckskintook32timesaslong,
andTaintChecktook36timesaslong.
We measured TaintCheck’s performance using two
“worst-case” workloads (a CPU-bound workload and a
short-livedprocessworkload),andwhatweconsidertobe
Commoncase:Apache Formanynetworkservices,the
amorecommonworkload(along-livedI/O-boundwork-
latency that a user experiences is due mostly to network
load). Foreachworkload, we measuredtheperformance
and/or disk I/O. For these types of services, we expect
when the program was run natively, when it ran under
that the TaintCheck’sperformance penalty should not be
Nullgrind(aValgrindskinthatdoesnothing),whenitran
as noticeable to the user. To evaluate this type of work-
under Memcheck (a commonly used Valgrind skin that
load,weusedtheApache2.0.49webserver.
checksforrun-timememoryerrors,suchasuseofunini-
In these tests we requested different web pages from
tializedvalues),andwhenitranunderTaintCheck. Our
the server, and timed how long it took to connect, send
evaluation was performed on a system with a 2.00 GHz
the request, and receive the response. In order to pre-
Pentium4,and512MBofRAM,runningRedHat8.0.
vent resource contention between the client process and
the server process, the client was run from another ma-
CPU-bound: bzip2 In order to evaluate the penalty chineconnectedtotheserverbya100Mbpsswitch. We
from the additional instrumentation that TaintCheck requested a dynamically generated CGI shell script and
writes into the monitored binary at run-time, we evalu- staticpagesofsizes1KBto10MB.Foreachtest,were-
ated the performance of bzip2, a CPU-bound program. questedthesamepageonehundredtimes,(thusallowing
Specifically, we measured how long bzip2 took to com- the document to stay in the server’s cache) and used the
pressa 15MBpackageofsourcecode(Vim6.2). When median response time. Figure 3 shows the performance
run normally, the compression took 8.2 seconds to com- overheadforeachtypeofrequest.30
25
20
15
10
5
0
CGI 1 KB 10 KB 100 KB 1 MB 10 MB
6.63 ms .987 ms 2.05 ms 9.79 ms 86.4 ms 851 ms
rotcaF
daehrevO
ecnamrofreP
tively.Ourtestsshowthatbzip2runs3.1timesslowerun-
No Valgrind der Valgrindthen whenrun natively. Hence, TaintCheck
Nullgrind could run significantly faster if it were implemented on
Memcheck
amoreefficientbinary-rewritingmechanismsuchasDy-
TaintCheck
namoRio.
Second, when performing instrumentation, we could
staticallyanalyzeeachbasicblocktoeliminateredundant
tracking code. This optimization would significantly re-
duce the amount of instrumentation added, causing the
instrumented program to run significantly faster. A pre-
liminaryimplementationofthisoptimizationallowedour
bzip2 benchmark to run only 24 times slower than na-
tive speed, instead of 37 times slower as in our non-
optimized implementation. We expect that further opti-
mizationcouldyieldanevenlargerperformanceimprove-
Figure3.PerformanceoverheadforApache. ment.
Y-axis is the performance overhead factor:
execution time divided by native execution 5. Detectionandanalysisofnewattacks
time. Native execution times are listed be-
TaintCheck’spropertiesmakeita valuabletoolfor de-
loweachexperiment.
tecting new attacks. An early warning of a new worm
orexploitcanbuytime toenableothercountermeasures,
such as generating and disseminatingan attack signature
Weexpectedtheoverheadfortheshellscripttoberel-
to filter traffic, and eventually, patching vulnerable sys-
ativelylarge,sincethewebservermustspawnashelland
tems. InSection6,weshowhowTaintCheckcanalsoas-
execute the script each time it is requested. Thus, Val-
sistincreatingasignatureforanewattacksothatitcanbe
grind must retranslate and reinstrument the code for the
filteredoutatnetworkperimeters. Inthissection,wede-
shelloneachrequest. Despitethis,theperformanceover-
scribetheusagescenarioforTaintCheck. TaintCheckcan
head was roughly on par with the results for static page
beusedatanindividualsitewhereitcaneitherbeusedin
requests. For static page requests we found that the per-
conjunctionwithotherdetectorstoreducetheirfalsepos-
formanceoverheadwasrelativelysmall. Asweexpected,
itivesrate,ortoprovideadditionalattackinformation; or
thepenaltyforrunningunderValgrindgrowslessapparent
beusedindependentlytochecksampledrequests. Toen-
asthesizeoftherequestgrows.Thisisbecausetheserver
ablefasterdetectionofanewworm,TaintCheckcanalso
becomeslessprocessor-bound,andmoreI/Obound.Note
beusedinadistributedsetting.
that eveninthe worst caseof a small, 1 KBpage, Taint-
Checkonlycausestheresponsetimetobeapproximately 5.1.Individualusage
25msinsteadof1msonalocal,high-speednetwork.This
delayisunlikelytobeverynoticeabletoauser,especially IndividualsitescanuseTaintChecktodetectorprevent
ifthepagewerebeingloadedoverawideareanetwork. attacks on themselves.2 Ideally, a site could use Taint-
Checktoprotectitsservicesallofthetime. However,this
isimpracticalinmanycasesbecauseofTaintCheck’sper-
Improving performance Note that the current imple-
formanceoverhead.Whileamoreoptimizedimplementa-
mentation is a research prototype and is not yet opti-
tionofTaintCheckcouldrunmuchfasterthanthecurrent
mized for performance. There are several ways that we
implementation, there will always be some performance
canimprovetheperformanceofTaintCheck. First,some
penaltyfordynamictaintanalysis.
performance overhead is due to the implementation of
There are several ways that TaintCheck could be used
Valgrind. We used Valgrind because it is open source
to detect new attacks. One approach is to use it in con-
and relatively easy to use. However, as we showed in
junctionwitha fasterdetectorinordertoreduceitsfalse
our evaluation, programs run several times slower under
positiverateandprovideadditionalinformationaboutan
Valgrindevenwhennoadditionalinstrumentationisper-
formed. Anotherx86emulator,DynamoRio,offersmuch 2NotethatifTaintCheckdoesnotdetectanexploit,itcouldbebe-
better performance than Valgrind, due to better caching causetheparticularversionoftheserverbeingusedisnotvulnerable.In
and other optimization mechanisms. According to Kiri- ordertobecertainthatarequestdoesnotcontainanexploit,thesystem
needstocheckagainstevery versionoftheserver thatitisinterested
anskyet. al.[22],DynamoRiocausesabzip2benchmark
inprotecting. Anindividualsitecanprotectitselfbycheckingonlythe
torunapproximately1.05timesslowerthanwhenrunna- versionsoftheserverthatitactuallyuses.attack. In particular, we show how TaintCheck can be tant whenother detectionmechanismsfailtodetect such
combined with honeypots,or with operatingsystem ran- newattacks.
domization [10, 20, 8]. TaintCheck can also be used by In order to prevent attacks, sampled requests can be
itself,samplingrequestswhenitisunabletokeepupwith redirectedtoaserverthatisprotectedbyTaintCheck(pos-
all incoming requests. This approach could detect new siblyonthesamemachineasthenormalserver).Thisap-
attacksthatotherdetectorsmaymiss. proachhastwodrawbacks. First,legitimaterequeststhat
aresenttotheprotectedserverareservedsomewhatmore
slowly. However, for I/O-bound services, this difference
TaintCheck-enabled honeypots A honeypot is a net-
may not be noticeable as shown in Section 4. Second,
work resource with no legitimate use. Any activity on a
anattackermaybeabletodetectthatheisusingthepro-
honeypotislikelytobemalicious,makingthemusefulfor
tectedserverbymeasuringtheresponsetime.Inthatcase,
detectingnewattacks[24]. However,noteverythingsent
hemaybeabletoaborthisrequestbeforetheexploittakes
toahoneypotisnecessarilyanexploit. Requestscouldbe
place,laterresendingitinhopethatitwouldgototheun-
relatively innocuous probes or sent by mistake by legiti-
protected server. For that reason, it may be desirable to
mateusers. An attackerwhodiscoversa honeypotcould
choosewhatrequeststosampleonaperuserbasisrather
also raise false alarms by sending innocuous requests to
thanaperrequestbasis.
the honeypot. This is particularly a problem if requests
Theotherapproachistoallowsampledrequeststouse
sent to the honeypot are used to automatically generate
thenormalserver,andreplaytheminparalleltotheTaint-
attacksignatures.
Check protected server. In this case, when an attack is
A honeypotcould use TaintCheck to monitor all of its
detected the unprotected server may have already been
network services. This would allow it to verify whether
compromised. However, the system could immediately
requeststhatitreceivesareexploitsbeforedecidingwhat
quarantinethepotentiallycompromisedserver,andnotify
action to take, and provide additional information about
administrators,thusminimizinganydamage.
detectedattacks.
In either case, oncea newattack has been detected by
TaintCheck,itispossibletopreventfurtherattacksbyus-
TaintCheck plus OS randomization Several tech- ingTaintChecktoprotectthenormalserver(witha100%
niqueshavebeenproposedto randomizepartsofthe op- sampling rate) until the vulnerability can be fixed or an
eratingsystem,suchasthelocationofthestack[10],the attack signature can be used to filter traffic. We discuss
locationoftheheap[10,8],thesystemcallinterface[10], using TaintCheck to help generate a signature in Section
or even the instruction set [20]. These techniques make 6.
it difficult for an attacker’s code to run correctly on an
exploited system, typically causing a program to crash 5.2.Distributedusage
once it has been exploited, thus minimizing the damage
Sites using TaintCheck could also cooperate for faster
caused. However, these techniques alone cannot prevent
attackdetection. Onceonesitehasdetectedanewattack,
futureattacks.Theattackerisfreetoattackthevulnerable
theinformationabouttheattackcanbeusedbyanyoneto
programagainandagain,usuallycausingtheprogramto
defendagainsttheattack.Ideally,asignatureforanattack
crash, and possibly even exploiting the program if he is
couldbegeneratedassoonasonesiterunningTaintCheck
lucky enough to guess the randomized values [38]. Fur-
detects the attack. This signature could then be used by
ther,itisnotpossibletoidentifywhichrequestcausedthe
everyonetoefficientlyfilteroutattackrequests,thuspre-
programtocrash,orwhetherthatrequestwasactuallyan
ventingfurtherexploits.
attack.
Asaconcreteexample,supposethatawormauthorde-
Itispossibletoidentifywhichrequestcontainedanat-
velops a hit list of vulnerable servers and hard codes it
tack,ifany,byusingTaintChecktoanalyzealogofrecent
into a worm [42]. Such a worm could spread evenmore
requestsafteraprogramcrashes. Onceanexploitrequest
quickly than fast scanning worms such as Blaster. The
has beenidentified, itispossibletotake anumberofac-
worm author could also throttle the spread of the worm,
tions, including generating a signature for the attack, or
which may allow it to infect more machines before the
simplyblockingfuturerequestsfromthesender.
wormwasdetectedthanifitspreadasquicklyaspossible.
Whetherbybrute forceorbystealth, sucha wormcould
Standalone TaintCheck We can use TaintCheck inde- infectaverylargenumberofmachinesbeforeitwasno-
pendently on randomly sampled incoming requests. De- ticed. However, if TaintCheck is deployed on d fraction
pending how the sampling is done, TaintCheck can be ofthevulnerableservers,eachofwhichsamplesrequests
usedtodetectorpreventnewattackswithprobabilitypro- withprobabilitys,wewouldexpecttodetectthewormby
1
portionaltothesamplingrate. Thisisparticularlyimpor- thetimethat vulnerableserversarecompromised. For
dsexample,if10%ofthevulnerableserverssample10%of and to perform semantic analysis of attack payloads. In
their incoming trafficwith TaintCheck, the worm should some cases, the semantic information could be used di-
be detected around the time that 100 servers have been rectly as a signature. Otherwise, it can be used to give
compromised. Ifthereare1millionvulnerablehosts,this hintstoacontentpatternextractor,possiblyallowingitto
means the new attack can be detected after only 0:01% generateanaccuratesignaturewithfewerpayloadsthanit
vulnerable servers are compromised. By automatically wouldrequireotherwise.
generatinganddistributingasignaturefortheworm,fur-
thercompromisesofothervulnerablehostswouldbesig-
Obtainingoverwritevalues InSection4weshowthat
nificantlyreduced.
TaintCheckcanidentifythevalueusedtooverwritea re-
turnaddressorafunctionpointer.Formostcode-injection
6. Automaticsignaturegeneration
exploits,thisvalueneedstopointtoafixedareafortheex-
ploittoworkcorrectly;i.e.,usuallyatleastthethreemost
Onceanewexploitorwormisdetected,itisdesirableto
significant bytes of this value must remain constant. For
generateasignatureforitquickly,sothatexploitrequests
manyexploits,thisvaluemustoccurliterallyintheattack
maybefilteredout,untilthevulnerabilitycanbepatched.
payload. In other exploits, the servermay perform a de-
We first propose a newapproach for automatic signature
codingstep(suchasURLdecoding)inordertoobtainthe
generation: using automatic semantic analysis of attack
actualpointer. TaintCheckcandistinguishbetweenthese
payloads. We describe the advantages of this approach,
two cases, and trace back to determine which bytes of
and describe how it could be implemented using Taint-
the encoded payload correspond to the decoded address.
Check.WethenshowseveralwaysthatTaintCheckcanbe
Hence, TaintCheck is often able to produce a signature
usedasaclassifierinordertoenhanceautomaticsignature
automaticallybasedonthethreemostsignificantbytesof
generationsystems(bothexistingonesusingcontentpat-
a value used to overwrite a jump target such as a return
ternextraction,andfutureonesusingautomaticsemantic
address or function pointer. Similarly, for existing-code
analysis).
attacks,therearetypicallyonlyafewplacesthatareuse-
fulfortheattacktojumpto(e.g.,afewgloballibraryentry
6.1. Automatic semanticanalysis based signature
points).Thus,similartechniqueswillworkforidentifying
generation
signaturesforexisting-codeattacksaswell.
Previousautomaticsignaturegenerationtechniquesuse While a three-byte signature may seem short, it could
content pattern extraction to generate signatures [21, 24, bespecificenoughforprotocolswithanunevendistribu-
41]. Thatis,theyconsiderattackpayloadsasopaquebyte tionofbytesequences(e.g.,text-basedprotocolssuchas
sequences, and attempt to find patterns that are constant HTTP).Inouranalysisofaweek-longtraceofincoming
acrossattackpayloadstouseassignatures. and outgoing HTTP requests containing 59250 connec-
We propose a new approach for automatic signature tions from the Intel Research Pittsburgh Lab, 99.97% of
generation: using automatic semantic analysis of attack allthree-bytesequencesoccurredinlessthan.01%ofall
payloadstoidentifywhichpartsofthepayloadsarelikely connections,and91.8%ofallthree-bytesequencesnever
tobeconstant(i.e.,usefulinasignature). Semanticanal- occurred at all. To further test this idea, we used Taint-
ysis could potentially allow an accurate signature to be ChecktoidentifythereturnaddressusedintheATPhttpd
generatedgivenfewerattackpayloadsthanarenecessary exploitdiscussedinSection4.2.2.Wefoundthatthethree
in systems that use only content pattern extraction. By most significant bytes of this value occurred in only one
requiring fewer attack payloads, semantic analysis could requestin theweek-longtrace. Therequestwasa POST
generate a signature at an earlier stage of a worm epi- requestthatwasusedtouploadabinaryfile. Thiscorre-
demic,thusminimizingdamagecausedbyanewworm. spondstoafalsepositiverateof.0017%.Hence,thethree
TaintCheckcouldbeusedtoperformautomaticseman- mostsignificantbytesofthevalueusedtooverwriteare-
tic analysis of attack payloads, because it monitors how turn address or function pointer, which can be identified
eachbyteofeachattackpayloadisusedbythevulnerable byTaintCheck,areoftendistinctiveenoughtobeusedasa
programattheprocessor-instructionlevel. Asafirststep, reasonablyaccuratesignaturebythemselves,atleastuntil
wehaveimplementedafeaturethatallowsTaintCheckto amoredescriptivesignaturecanbefoundorthevulnera-
identifythe valueusedto overwritea functionpointeror bilitycanberepaired.Whenitisnotspecificenoughtobe
returnaddress. We also describeseveralother promising usedbyitself,itcanstillbeusedaspartofamorespecific
directionsforusingTaintCheckto performautomaticse- signature.Notethatouranalysisisalsoconsistentwiththe
manticanalysis. findings in [30], which offers a more extensive analysis
Figure 4 illustrates how an automatic signature gener- of the usage of return addresses as signatures. In exper-
ationsystemcoulduseTaintChecktodetectnewattacks, iments using 19 different real exploits and traces, [30]Internet
W
orms
K
no w n
Legitimate(?) Requests
Signatures
Firewall / Filter
New
Worm (basedN oe
nw
s
W
e
mo ar
m nt iS c i ag nn aa lt yu sr ie ss
)
I Nn ete twrn oa rl
k
New Worm Samples + Semantic Information
Content Pattern Extractor
TaintCheck
(cid:19)(cid:20)(cid:11)(cid:1)(cid:12)(cid:1)(cid:19)(cid:20)(cid:11)(cid:1)(cid:12)(cid:1)(cid:19)(cid:20)(cid:19)(cid:20)(cid:9)(cid:1)(cid:10)(cid:1)(cid:19)(cid:20)(cid:9)(cid:1)(cid:10)(cid:1)(cid:19)(cid:20)(cid:9)(cid:1)(cid:10)(cid:1)(cid:19)(cid:20)(cid:19)(cid:20)(cid:19)(cid:20)(cid:7)(cid:1)(cid:19)(cid:20)(cid:7)(cid:1)(cid:8)(cid:1)(cid:19)(cid:20)(cid:7)(cid:1)(cid:8)(cid:1)(cid:19)(cid:20)(cid:7)(cid:1)(cid:8)(cid:1)(cid:19)(cid:20)(cid:7)(cid:1)(cid:8)(cid:1)(cid:19)(cid:20)(cid:7)(cid:1)(cid:8)(cid:1)(cid:19)(cid:20) (cid:21)(cid:11)(cid:1)(cid:12)(cid:1)(cid:21)(cid:11)(cid:1)(cid:12)(cid:1)(cid:21)(cid:21)(cid:9)(cid:1)(cid:10)(cid:1)(cid:21)(cid:9)(cid:1)(cid:10)(cid:1)(cid:21)(cid:9)(cid:1)(cid:10)(cid:1)(cid:21)(cid:21)(cid:21)(cid:7)(cid:1)(cid:21)(cid:7)(cid:1)(cid:8)(cid:1)(cid:21)(cid:7)(cid:1)(cid:8)(cid:1)(cid:21)(cid:7)(cid:1)(cid:8)(cid:1)(cid:21)(cid:7)(cid:1)(cid:8)(cid:1)(cid:21)(cid:7)(cid:1)(cid:8)(cid:1)(cid:21) (cid:11)(cid:1)(cid:12)(cid:1)(cid:11)(cid:1)(cid:12)(cid:1)
(cid:9)(cid:1)(cid:10)(cid:1)(cid:9)(cid:1)(cid:10)(cid:1)(cid:9)(cid:1)(cid:10)(cid:1)
(cid:7)(cid:1)(cid:7)(cid:1)(cid:8)(cid:1)(cid:7)(cid:1)(cid:8)(cid:1)(cid:7)(cid:1)(cid:8)(cid:1)(cid:7)(cid:1)(cid:8)(cid:1)(cid:7)(cid:1)(cid:8)(cid:1)
(cid:11)(cid:12)(cid:11)(cid:12)
(cid:9)(cid:10)(cid:9)(cid:10)(cid:9)(cid:10)
(cid:7)(cid:7)(cid:8)(cid:7)(cid:8)(cid:7)(cid:8)(cid:7)(cid:8)(cid:7)(cid:8)
(cid:17)(cid:1)(cid:17)(cid:1)
(cid:15)(cid:1)(cid:15)(cid:1)(cid:15)(cid:1)
(cid:13)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)
(cid:17)(cid:1)(cid:18)(cid:1)(cid:17)(cid:1)(cid:18)(cid:1)
(cid:15)(cid:1)(cid:16)(cid:1)(cid:15)(cid:1)(cid:16)(cid:1)(cid:15)(cid:1)(cid:16)(cid:1)
(cid:13)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)
(cid:22)(cid:24)(cid:22)(cid:24)(cid:23)(cid:17)(cid:1)(cid:18)(cid:1)(cid:22)(cid:24)(cid:23)(cid:17)(cid:1)(cid:18)(cid:1)(cid:22)(cid:24)(cid:23)(cid:22)(cid:24)(cid:23)(cid:15)(cid:1)(cid:16)(cid:1)(cid:22)(cid:24)(cid:23)(cid:15)(cid:1)(cid:16)(cid:1)(cid:22)(cid:24)(cid:23)(cid:15)(cid:1)(cid:16)(cid:1)(cid:22)(cid:24)(cid:23)(cid:22)(cid:24)(cid:23)(cid:22)(cid:24)(cid:23)(cid:13)(cid:1)(cid:22)(cid:24)(cid:23)(cid:13)(cid:1)(cid:14)(cid:1)(cid:22)(cid:24)(cid:23)(cid:13)(cid:1)(cid:14)(cid:1)(cid:22)(cid:24)(cid:23)(cid:13)(cid:1)(cid:14)(cid:1)(cid:22)(cid:24)(cid:23)(cid:13)(cid:1)(cid:14)(cid:1)(cid:22)(cid:24)(cid:23)(cid:13)(cid:1)(cid:14)(cid:1)(cid:22)(cid:24)(cid:23) (cid:17)(cid:1)(cid:18)(cid:1)(cid:17)(cid:1)(cid:18)(cid:1)
(cid:15)(cid:1)(cid:16)(cid:1)(cid:15)(cid:1)(cid:16)(cid:1)(cid:15)(cid:1)(cid:16)(cid:1)
(cid:13)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)(cid:13)(cid:1)(cid:14)(cid:1)
(cid:17)(cid:18)(cid:17)(cid:18)
(cid:15)(cid:16)(cid:15)(cid:16)(cid:15)(cid:16)
(cid:13)(cid:13)(cid:14)(cid:13)(cid:14)(cid:13)(cid:14)(cid:13)(cid:14)(cid:13)(cid:14)
(cid:0)(cid:1)(cid:0)(cid:1)(cid:0)(cid:1)(cid:0)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:1)(cid:4)(cid:1)
(cid:0)(cid:1)(cid:2)(cid:1)(cid:0)(cid:1)(cid:2)(cid:1)(cid:0)(cid:1)(cid:2)(cid:1)(cid:0)(cid:1)(cid:2)(cid:1)
(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:1)(cid:4)(cid:1)
(cid:0)(cid:2)(cid:0)(cid:2)(cid:0)(cid:2)(cid:0)(cid:2)
(cid:3)(cid:4)(cid:3)(cid:4)(cid:3)(cid:4)(cid:3)(cid:4)
(cid:5)(cid:1)(cid:6)(cid:1)(cid:5)(cid:1)(cid:6)(cid:1)(cid:5)(cid:1)(cid:6)(cid:1)(cid:5)(cid:1)(cid:6)(cid:1) (cid:5)(cid:1)(cid:6)(cid:1)(cid:5)(cid:1)(cid:6)(cid:1)(cid:5)(cid:1)(cid:6)(cid:1)(cid:5)(cid:1)(cid:6)(cid:1) (cid:5)(cid:6)(cid:5)(cid:6)(cid:5)(cid:6)(cid:5)(cid:6)
Figure4.UsingTaintChecktodetectnewattacksandperformautomaticsemanticanalysis.
demonstrates that using a range of return addresses (ap- itislikelyafillerbyte. Whileanattackermayattemptto
proximately the three most significant bytes) as a signa- performmeaninglessoperationsonthefillerbytesinorder
turecanfilteroutnearly100%wormattackpacketswhile tofoolsuchatechnique,itmaybepossibletoextendthe
onlydropping0.01%oflegitimatepackets. ExploitAnalyzerwithdynamicslicingtechniques[4,23]
Notethat attacksexploitinga formatstringvulnerabil- toidentifywhichoperationsare“meaningful”andwhich
ity may not have a constant return address that we can arenot.Additionally,anybytesusedonlyaftertheexploit
leverageforasignature,becauseaformatstringvulnera- hastakenplacemaynotbeessentialtoexploitthevulner-
bilityoftenenablestheattackertooverwriteanylocation ability.Hence,theycouldbedifferentinotherinstancesof
inmemorywithanyvalue. However,inordertoperform a polymorphic worm (one that uses encryption and code
the overwrite, the format string supplied by the attacker obfuscationsothatnotwoinstancesareidentical[44]),or
often needs to contain certain format modifiers such as indifferentexploitsforthesamevulnerability.Usingsuch
%n. When TaintCheck detects a format string attack, it bytesinasignaturemaymakethesignaturemorespecific
candeterminewhethertheformatstringisdirectlycopied thanitneedstobe,leadingtofuturefalsenegatives.Con-
fromtheattackpacket;ifso,thenwecouldusesuchfor- versely, bytes that are used by the program before it is
matmodifiersandusethisaspartoftheattacksignature. exploited may be necessary to make the program follow
thecontrolpathleadingtotheexploit.
Another technique that could be used to determine
Potentialtechniquesforfurthersemanticanalysis In
which parts of the request are irrelevant to the exploit is
future work, we plan to investigatemore advanced tech-
toflipbitsintheattackpacketandseewhethertheexploit
niques of semantic analysis to assist automatic signature
stillsucceeds. Iftheattackcanstillsucceedafteracertain
generation.
bitisflipped,thenwewillknowthatthatthevalueofthat
One possibility is for TaintCheck to keep track of
bitwillnotaffectthesuccessoftheexploitandhencemay
whether each byte of the request is used in any signifi-
notbeinvariantfornewattacksonthesamevulnerability.
cant way, and how it is used. This could be helpful for
identifyingfillerbytes,whichcouldbe(butdon’thaveto
6.2.Classifier andsignatureverifier
be) completely different in each instance. These bytes
could be completely random, or the attacker could use In addition to automatic semantic analysis based sig-
these bytesto formred herringpatterns,foolingthe sys- nature generation, TaintCheck has direct applications to
temintogeneratinguselessorharmfulsignatures. Ifany other aspects of automatic signature generation. Taint-
byteisnotusedtoaffectabranch,usedtoperformacal- Checkcanbeusedasa classifierin ordertoenhanceau-
culation,usedinasystemcall,orexecutedbytheworm, tomatic signature generation systems (both existing onesusingcontentpatternextraction,andfutureonesusingau- thevulnerabilityandtheexploit. Patternextractionmeth-
tomaticsemanticanalysis). AswehaveshowninSection ods can then be used in each group, and thus, generate
5, TaintCheck can be used to detect new attacks so that moreaccuratesignatures.
signatures can be generated for them. TaintCheck could
alsobeusedtoverifythequalityofnewlygeneratedsigna-
Signatureandalarmverification TaintCheckcanalso
tures,bydeterminingwhetherrequestsmatchinganewly
be used to verify signaturesand alarms. In a single-user
generatedsignatureactuallycontainanattack.
setting, this can be used to verify the quality of a newly
generatedsignature. Inadistributedsystemwhereattack
Classifyingattackpayloads Previousautomaticsigna- signaturesandalarmstonewattacksaredisseminated,at-
ture generation systems such as Earlybird [41], Honey- tackers or incompetent participants may inject bogus or
comb[24],andAutograph[21]usecoarsegrainedattack low quality signatures and alarms that will cause denial-
detectors to find samples of new attacks. Each of these of-serviceattacksonlegitimatetraffic. Thus,thereceiver
techniquescanpotentiallyidentifyinnocuousrequestsas needs to validate the signatures and the alarms received
malicious requests, eitherby accident, or as the result of toensurethattheyarevalidandwillnotcausedenial-of-
anattacker“feeding”thesysteminnocuousrequests(e.g., serviceattacks. TaintCheckcanbeusedastheverifierto
by sending them to a known honeypot). When this hap- check that the remotely generated signatures and alarms
pens, a signature could be generated that matches legit- arevalid. Inparticular,itcouldmeasurethefalsepositive
imate requests, causing a denial of service attack if that rate of the signatures by validating whether the matched
signature is used to filter traffic. Moreover, these sys- requestsreallycontainexploits,andbyvalidatingwhether
tems need to wait until multiple (potentially many) pay- thesamplerequestsinthealarmsarerealattacks.
loadsarecapturedbeforegeneratingasignature,inorder
todecreasetheprobabilityofasignaturebeinggenerated
7. Relatedwork
for legitimate requests that were incorrectly identified as
worms. Thus, they suffer from a tradeoff between false
Program Shepherding. Program Shepherding [22] is
positiverateandspeedofsignaturegeneration.
the closest related work to TaintCheck. Program Shep-
AswehaveshowninSection5,TaintCheckcanbeused
herding is a runtime monitoring system that keeps track
either by itself or in conjunction with other classifiers to
of whether code has been modified since it was loaded
help accurately detect new attacks. The system can be
fromdisk,andcheckseachcontroltransfertoensurethat
nearlycertainthatarequestismaliciousifTaintCheckde-
thedestinationistoabasicblockthathasnotbeenmodi-
terminesthatanexploitoccurred,sinceTaintCheckoffers
fied. Thus,ProgramShepherdingcanpreventcodeinjec-
averylowincidenceoffalsepositives.Hence,thereisno
tionattacks.Italsopreventssomeexistingcodeattacksby
need to wait for other similar requests to be classified as
ensuringthat controltransfersto alibrary canonlygoto
malicioustobeconfidentthattherequestisactuallymali-
exported entry points, and that return addresses point
cious,asdoneinprevioussignature-generationsystems.
to just after a call instruction. However, these tech-
Anothertechniquethatwe haveimplementedinTaint-
niques do not prevent many existing-code attacks (e.g.,
Checkisanoptiontoallowawormtoattempttospreadin
overwriteafunctionpointertotheexeclibrarycall). In
aconfinedenvironmentafterithasexploitedtheprotected
contrast, TaintCheck can prevent these existing-code at-
server,whileredirectingalloutgoingconnectionstoalog-
tacks. Moreover,TaintCheck,viadynamictaintanalysis,
gingprocess. Inthisway,anynumberofsamplescanbe
providesdetailedinformationhowthevulnerabilityisex-
generated from just one worm sample. These additional
ploited. ProgramShepherdingdoesnot.
samples can be used to help identify which parts of the
wormareinvariantacrossdifferentinstancesoftheworm.
These invariant portions can then be used to generate a Other runtime detection mechanisms Many ap-
signature. proaches havebeenproposed to detectwhencertainvul-
In future work, we plan to investigate more advanced nerabilities are exploited by attacks. Most of these pre-
techniques for TaintCheck to further assist in automatic vious mechanismsrequire sourcecode orspecial recom-
signature generation as a classifier. For example, Taint- pilation of the program, such as StackGuard [14], Point-
Checkcannotonlydetectexploitattacks,butalsodistin- Guard [13], full-bounds check [19, 37], LibsafePlus [5],
guish between different vulnerabilities and different ex- FormatGuard [12], and CCured [27]. Many of them re-
ploits. Thus,TaintCheckcannotonlybeaone-bitclassi- quire recompiling the libraries [19, 37], modifying the
fier, i.e., whether a payload contains an exploit attack or originalsourcecode,orarenotcompatiblewithsomepro-
not, but also be a more sophisticatedclassifier, i.e., clas- grams [27, 13]. These issues hinder the deployment and
sify differentpayloads into differentgroups according to the applicability of these methods in attack defense forcommodity software, since source code is often unavail- detected attacks, which can be used for automatic signa-
able. turegeneration.
Several other approaches for runtime attack detection
have been proposed that do not require source code Other signature generation approaches and defense
or specially compiled binary programs, such as Lib- systems Several automatic signature generation meth-
Safe[6],LibFormat[36],ProgramShepherding[22],and ods have recently been proposed, including Early-
theNethercote-Fitzhardingeboundscheck[28].However, bird [41], Honeycomb [24], and Autograph [21]. Early-
they fail to detect many types of attacks. For example, bird [41] monitors trafficandgenerates signatureswhich
LibSafe only catches buffer overflows related to certain consist of the Rabin fingerprints of the most commonly
string-handlingfunctions,LibFormatonlydetectscertain occurring39bytesubstringsinthemonitoredtraffic.Hon-
formatmodifiersinformatstringsandthuscanhavehigh eycomb[24]classifiestrafficthatissenttoahoneypotas
false positives and false negatives, and the Nethercote- malicious, and generates signatures based on the longest
Fitzhardinge boundscheck has significant falsepositives commonsubstringsfound in trafficsent to the honeypot.
and false negatives. In contrast, TaintCheck detects a Autograph [21] uses distributed monitoringpoints to de-
widerrangeofattacksandincursfewerfalsepositives. termine what hosts are performingport scans. All traffic
Otherapproacheshavebeenproposedformorecoarse- from hosts that have been seen performing port scans is
grained attack detection, including system call interpo- classifiedasmalicious. Autographthenusesafilechunk-
sition (e.g. Systrace [33], GSWTK [17], Tron [7], ing techniqueto split requestsinto blocks, andgenerates
Janus [18], and MAPbox [3]). These approaches detect asignatureconsistingofthemostcommonblocksseenin
attacksbydetectinganomaloussystemcallsequencesina malicioustraffic.
program. Theydonotgivedetailedinformationaboutthe AsweshowedinSection6,TaintCheckcanbeusedas
vulnerabilityandhowitisexploited,andrequirebuilding a classifierto reducethe falsepositiveand/or falsenega-
modelsforeachprotectedprogram. tive rates of the classifiers used in these systems. Taint-
Check can also provide semantic analysis of attack pay-
loads,whichcanbeusedtogeneratesignatureswithfewer
Othertaint-basedapproaches Statictaintanalysishas samples than by using content-analysis alone. Finally,
been used to find bugs in C programs [16, 39, 46] or to TaintCheck can also be used to verify the signatures and
identify potentially sensitive data in Scrash [9]. Perl [2] alarmsproducedbysuchsystems.
doesruntimetaintcheckingtoseewhetherdatafromun- Shield[45]presentsanalternativeapproachtocontent-
trustedsourcesareusedinsecurity-sensitivewayssuchas based filtering. Shield uses the characteristics of a vul-
asanargumenttoasystemcall. nerabilitytomanuallygenerateasignatureforanyexploit
Chowet.al. independentlyandconcurrentlyproposed ofthatvulnerabilitybeforeanexploitisseeninthewild.
to use whole-system simulation with tainting analysis to This is a promising approach, but it does not help in the
analyzehowsensitivedataarehandledinlargeprograms casethatthewormutilizesavulnerabilitythatwasprevi-
suchasApacheandEmacs[11].Thetaintingpropagation ouslyunknown,oronlyrecentlybecameknown.
in TaintCheck is similar to the one in [11]. However, Sidiroglou and Keromytis propose a worm vaccine ar-
their work focuses on analyzing the lifetime of sensitive chitecture to automatically generate patches for vulnera-
data such as passwords, where our work concerns attack bilities[40].
detectionanddefense.
Minos independently and concurrently proposed hard- 8. Conclusion
ware extension to perform Biba-like data integrity check
Inordertocombattherapidspreadofanewwormbe-
of control flow to detect attacks at runtime [15]. Their
fore itcancompromisealargenumberofmachines, itis
work uses hardware and OS modifications to perform
necessarytohaveautomaticattackdetectionanddefense
Biba integrity checks at the whole-system level. In con-
mechanisms. In this paper we have proposed dynamic
trast, TaintCheck requires no hardware or OS modifica-
taintanalysisandshownhowitcanbeusedtodetectand
tions, and can be very flexible and fine-grained to detect
analyze most types of software exploits, without requir-
attacks that were not addressed in Minos such as format
stringvulnerabilities3andattacksthatoverwritesecurity- ingsourcecodeorspecialcompilationofaprogram,thus
allowing it to easily be used on commodity software. It
sensitive variablessuch as system callarguments. Taint-
reliablydetectsmanyattacks,andwehavefoundnofalse
Check is also able to perform more detailed analysis of
positivesinourtests. Inaddition,becauseitmonitorsthe
executionofaprogramatafine-grainedlevel,TaintCheck
3Minoscandetectsomeformsofformatstringvulnerabilitiesifthey
can be used to provide additional information about the
alterthecontrolflow,however,ourworkcandetectformatstringvulner-
abilitiesevenwhentheydonotaltercontrolflow. attack. Itiscurrentlyabletoidentifytheinputthatcausedthe exploit, show how the malicious input led to the ex- format string vulnerabilities. In Proceedings of the 10th
ploitataprocessor-instructionlevel,andidentifythevalue USENIXSecuritySymposium,August2001.
used to overwrite the protected data (e.g. the return ad- [13] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. Point-
Guard: Protecting pointers from buffer overflow vulnera-
dress).
bilities. In12thUSENIXSecuritySymposium,2003.
Furthermore,wehaveshownthatTaintCheckisparticu-
[14] C.Cowan,C.Pu,D.Maier,J.Walpole,P.Bakke,S.Beat-
larlyusefulinanautomaticsignaturegenerationsystem—
tie, A. Grier, P.Wagle, Q. Zhang, and H. Hinton. Stack-
itcanbeusedtoenablesemanticanalysisbasedsignature Guard: automatic adaptive detection and prevention of
generation, enhancecontent patternextractionbasedsig- buffer-overflowattacks. InProceedingsofthe7thUSENIX
naturegeneration,andverifythequalityofgeneratedsig- SecuritySymposium,January1998.
natures. [15] J.R.CrandallandF.T.Chong. Minos: Architecturalsup-
portforsoftwaresecuritythroughcontroldataintegrity. In
To appear in International Symposium on Microarchitec-
9. Acknowledgments
ture,December2004.
[16] J. Foster, M.Fahndrich, and A. Aiken. Atheoryoftype
We would like to thank David Brumley, Mike Bur-
qualifiers. In ProceedingsoftheACMSIGPLANConfer-
rows,JedediahCrandall,DebinGao,BradKarp,Angelos
enceonProgrammingLanguageDesignandImplementa-
Keromytis,NicholasNethercote,JonathonShapiro,Peter tion(PLDI),1999.
Szor,HelenWang,FelixWu,AviYaar,andLidongZhou [17] T.Fraser, L.Badger, andM.Feldman. HardeningCOTS
forprovidingfeedbackandassistanceonthisproject. We softwarewithgenericsoftwarewrappers. IntheProceed-
also thank the anonymous reviewers for their insightful ingsoftheIEEESymposiumonSecurityandPrivacy,pages
2–16,1999.
feedback.
[18] I.Goldberg,D.Wagner,R.Thomas,andE.A.Brewer. A
secure environment for untrusted helper applications. In
References the Proceedings of the 6th USENIX Security Symposium,
SanJose,CA,USA,1996.
[1] ISCinnd2.xremotebufferoverflowvulnerability. http: [19] R. Jones and P. Kelly. Backwards-compatible bounds
//securityfocus.com/bid/1316. checking for arrays and pointers in C programs. In Pro-
[2] Perl security manual page. http://www.perldoc.
ceedingsoftheThirdInternationalWorkshoponAutomated
com.
Debugging,1995.
[3] A.AcharyaandM.Raje. MAPbox: Usingparameterized [20] G.S.Kc,A.D.Keromytis,andV.Prevelakis. Countering
behaviorclassestoconfine applications.IntheProceedings code-injection attacks with instruction-set randomization.
9thUSENIXSecuritySymposium,2000. InProceedingsofthe10thACMconferenceonComputer
[4] H.AgrawalandJ.Horgan. Dynamicprogramslicing. In
andCommunicationSecurity,2003.
Proc.SIGPLAN,1990. [21] H.-A. Kim and B. Karp. Autograph: toward automated,
[5] K.Avijit,P.Gupta,andD.Gupta. Tied,libsafeplus: Tools
distributedwormsignaturedetection.InProceedingsofthe
forruntimebufferoverflowprotection.InUSENIXSecurity
13thUSENIXSecuritySymposium,August2004.
Symposium,August2004. [22] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure
[6] A.Baratloo, N.Singh, andT. Tsai. Transparentrun-time
executionviaprogramshepherding. InProceedingsofthe
defenseagainststacksmashingattacks.InUSENIXAnnual
11thUSENIXSecuritySymposium,August2002.
TechnicalConference2000,2000. [23] B.KorelandJ.Laski. Dynamicslicingofcomputerpro-
[7] A. Berman, V. Bourassa, and E. Selberg. Tron: Process- grams. InJ.SystemsandSoftware,volume13,1990.
specific file protectionfortheunixoperatingsystem.Inthe [24] C. Kreibich and J. Crowcroft. Honeycomb - creating in-
ProceedingsoftheUSENIXTechnicalConferenceonUNIX trusiondetectionsignaturesusinghoneypots. InProceed-
andAdvancedComputingSystems,1995. ings of the Second Workshop on Hot Topics in Networks
[8] S.Bhatkar,D.C.DuVarney,andR.Sekar. Addressobfus- (HotNets-II),November2003.
cation: An efficient approach tocombat abroad rangeof [25] D.Moore,V.Paxson,S.Savage,C.Shannon,S.Staniford,
memory error exploits. In USENIX Security Symposium, andN.Weaver.Insidetheslammerworm.InIEEESecurity
2003. andPrivacy,volume1,2003.
[9] P.Broadwell,M.Harren,andN.Sastry. Scrash: Asystem [26] D.Moore,C.Shannon,G.Voelker,andS.Savage.Internet
forgeneratingsecuritycrashinformation. IntheProceed- quarantine: Requirements for containing self-propagating
ingsofthe12thUSENIXSecuritySymposium,2003. code. In2003IEEEInfocomConference,2003.
[10] M.ChewandD.Song. Mitigatingbufferoverflowsbyop- [27] G.C.Necula,S.McPeak,andW.Weimer. CCured: type-
eratingsystemrandomization.TechnicalReportCMU-CS- saferetrofitting oflegacycode. InProceedingsoftheSym-
02-197,CarnegieMellonUniversity,December2002. posiumonPrinciplesofProgrammingLanguages,2002.
[11] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and [28] N.NethercoteandJ.Fitzhardinge.Bounds-checkingentire
M.Rosenblum.Understandingdatalifetimeviawholesys- programswithoutrecompiling. InProceedingsoftheSec-
temsimulation. InUSENIX SecuritySymposium, August ondWorkshoponSemantics,ProgramAnalysis,andCom-
2004. puting Environments for Memory Management (SPACE
[12] C. Cowan, M. Barringer, S. Beattie, and G. Kroah- 2004),Venice,Italy,Jan.2004. (Proceedingsnotformally
Hartman. FormatGuard: automaticprotectionfromprintf published.).[29] N.NethercoteandJ.Seward. Valgrind: Aprogramsuper- [39] U.Shankar,K.Talwar,J.Foster,andD.Wagner.Detecting
visionframework. InProceedingsoftheThirdWorkshop format-string vulnerabilities with type qualifiers. In Pro-
onRuntimeVerification (RV’03),Boulder,Colorado,USA, ceedingsofthe10thUSENIXSecuritySymposium,2001.
July2003. [40] S.SidiroglouandA.D.Keromytis. Anetworkwormvac-
[30] A. Pasupulati, J. Coit, K. Levitt, and F. Wu. Buttercup: cinearchitecture.InProceedingsoftheIEEEInternational
On network-based detection of polymorphic buffer over- Workshops on Enabling Technologies: Infrastructure for
flowvulnerabilities. InIEEE/IFIPNetworkOperationand CollaborativeEnterprises(WETICE),WorkshoponEnter-
ManagementSymposium,May2004. priseSecurity,pages220–225,June2003.
[31] V.Paxson.Bro:asystemfordetectingnetworkintrudersin [41] S.Singh,C.Estan,G.Varghese,andS.Savage.TheEarly-
real-time.ComputerNetworks,31(23-24),December1999. Bird system for real-time detection of unknown worms.
[32] T.S.Project. Snort,theopen-sourcenetworkintrusionde- Technical Report CS2003-0761, University of California,
tectionsystem. http://www.snort.org/. SanDiego,August2003.
[33] N.Provos. Improvinghostsecuritywithsystemcallpoli- [42] S.Staniford,V.Paxson,andN.Weaver. Howto0wnthe
cies.IntheProceedingsofthe12thUSENIXSecuritySym- Internetinyoursparetime. In11thUSENIXSecuritySym-
posium,2003. posium,2002.
[34] r code. ATPhttpd exploit. http://www.cotse. [43] C. Systems. Network-based application recognition.
com/mailing-lists/todays/att-0003/ http://www.cisco.com/univercd/cc/td/
01-atphttp0x06.c. doc/product/software/ios122/122newf%t/
[35] Y.Ramin. ATPhttpd. http://www.redshift.com/
122t/122t8/dtnbarad.htm.
˜yramin/atp/atphttpd/. [44] P.Szor. Huntingformetamorphic. InVirusBulletinCon-
[36] T. J. Robbins. libformat. http://www.
ference,2001.
securityfocus.com/tools/1818,2001. [45] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier.
[37] O.RuwaseandM.Lam. Apracticaldynamicbufferover-
Shield: Vulnerability-drivennetworkfilters forpreventing
flow detector. In Proceedings of the 11th Annual Net-
knownvulnerabilityexploits. InACMSIGCOMM,August
workandDistributedSystemSecuritySymposium, Febru-
2004.
ary2004. [46] X. Zhang, A. Edwards, and T. Jaeger. Using CQual for
[38] H.Shacham,M.Page,B.Pfaff,E.-J.Goh,N.Modadugu,
staticanalysisofauthorizationhookplacement.InthePro-
andD.Boneh. Ontheeffectivenessofaddressspaceran-
ceedingsofthe11thUSENIXSecuritySymposium,2002.
domization. InACMComputerandCommunicationSecu-
ritySymposium,2004.