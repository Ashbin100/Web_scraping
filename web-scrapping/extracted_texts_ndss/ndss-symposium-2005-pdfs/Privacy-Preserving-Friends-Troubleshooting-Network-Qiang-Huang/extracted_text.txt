Privacy-Preserving
Friends Troubleshooting Network
Qiang Huang Helen J. Wang Nikita Borisov
Princeton University Microsoft Research University of California, Berkeley
qhuang@princeton.edu helenw@microsoft.com nikitab@cs.berkeley.edu
Abstract—Content sharing is a popular use of peer-to-peer Ensuring integrity is challenging because malicious peers
systems because of their inherent scalability and low cost of may lie about the applications they own and the configuration
maintenance. In this paper, we leverage this nature of peer-to-
state they have, which can lead to incorrect troubleshooting
peer systems to tackle a new problem: automatic misconfigu-
results. A machine can be malicious either because its owner
ration troubleshooting. In this setting, machine configurations
from peers are shared to diagnose misconfigurations on a sick has ill intentions or because it is compromised by an attacker.
machine.Thekeychallengesarepreservingprivacyofindividual We cope with the ill-intentioned-user problem by designing
configuration data and ensuring the integrity of peer contri- well-established social trust into the troubleshooting frame-
butions. To this end, we construct the Friends Troubleshooting
work. Today, when encountering computer problems, most
Network (FTN), a peer-to-peer overlay network, where the links
people first seek help from their friends and neighbors. Based
between peer machines reflect the friendship of their owners.
Our FTN manifests recursive trust rather than transitive trust. on this observation, we construct a Friends Troubleshooting
To achieve privacy, we use the general scheme of a historyless Network (FTN), which is a peer-to-peer overlay network,
and futureless random-walk for routing, during which search is where a link between two machines is due to the friendship
carried out simultaneously with secure parameter aggregation
of their owners. We assume that friends will either provide
for the purpose of troubleshooting. Our design has been guided
authentic configuration information to each other, or, in cases
by the characteristics of a real-world friends network, the MSN
Instant Messenger (IM) network. We have prototyped our FTN where configurations are privacy sensitive, refuse to supply
system and analyzed the tradeoff between privacy and protocol information, rather than giving false content.
efficiency. In the real world, if Alice asks her friend Bob a question to
which Bob does not know the complete answer, Bob may ask
I. INTRODUCTION
his friend Carol on Alice’s behalf. Troubleshooting requests
Today’s desktop PCs have not only brought to their users in the FTN are recursively forwarded to friends of friends
an enormous and ever-increasing number of features and in the same way. One may quickly conclude that our system
services, but also an increasing amount of troubleshooting manifests transitive trust. However, if Alice and Carol aren’t
cost and productivity losses. Studies [15], [16] have shown friends,CarolmayprovideuntruthfulanswersifAlicewereto
that technical support contributes 17% to the total cost of askherdirectly,buttruthfuloneswhenaskedbyBob.Because
ownershipoftoday’sdesktopPCs.Alargeamountoftechnical of this, we say that FTN manifests recursive trust instead.
support time is spent on troubleshooting failures, many of Despite the friendship-based trust in the FTN, privacy
which are caused by misconfigurations. remains a crucial goal: while friends can be trusted not to
Inthispaper,weaddresstheproblemofprivacy-preserving, provide false information, they may be curious about the con-
peer-to-peer misconfiguration diagnosis. We build on our pre- figuration of their peers, and such configurations may contain
viously developed algorithm for automatic misconfiguration privacy-sensitive information. In our position paper [18], we
troubleshooting, called PeerPressure [17]. PeerPressure uses sketchedanFTNdesignwhichtriestoachieveprivacythrough
the common configurations from a set of helper machines ahistorylessandfuturelessrandom-walkofanownerlesstrou-
to identify the anomalous misconfigurations on the sick one. bleshootingrequest,duringwhichsearchaswellasparameter
Withreal-worldtroubleshootingcasesasevaluations,wehave aggregation are carried out for the purpose of PeerPressure
showntheeffectivenessoftheapproach.TocarryoutPeerPres- troubleshooting. The design was not robust against a number
sure diagnosis, we need to gather statistics from a sample set of privacy-compromising attacks. In this paper, we develop
of helper machines. In our position paper [18], we advocated our original idea into a full-fledged design and system. Be-
taking the peer-to-peer approach in searching for helpers and cause of the unique privacy and integrity requirements of our
gatheringstatistics.Ascomparedtoacentralizeddatabase,the problem, previous techniques for anonymity and private data
peer-to-peerapproachprovideslowcostmaintenanceofup-to- aggregation cannot be readily applied.
date helper configuration samples and distributed trust. How- Our design is guided by the operational MSN Instant
ever, PeerPressure-based peer-to-peer troubleshooting poses Messenger (IM) friends network data. With the IM data, we
interesting challenges in preserving the privacy of both the analyze the tradeoffs between privacy and efficiency. We have
troubleshootingusersandpeerhelpers,aswellastheintegrity prototyped the FTN system with which a user can diagnose
of the troubleshooting results. misconfigurations in about a minute while achieving a highprivacy level for all participants. thatmatchthevalueofthesuspectentryM ,thecardinalityC
e e
Coping with compromised FTN nodes remains an open (thenumberofdistinctvaluesforthisentryamongthesample
challenge. We provide no mitigation mechanisms other than set), and the most popular value for the entry. PeerPressure
those already presented in [18]. uses these parameters along with the sample set size and
For the rest of the paper, we first provide background the number of suspect entries to calculate the probability
on PeerPressure in Section II. Then, we state our privacy of a suspect entry being the cause of the symptom: P =
e
objectives in Section III. In Section IV, we explain our N+Ce where N is the number of samples and t
N+Cet+CeMe(t−1)
protocol by reviewing the previous design (Subsection IV-A), isthenumberofsuspects.Theintuitionbehindthisprobability
describing attacks against it (Subsection IV-B), and introduc- calculation is that the more conformant a suspect entry is
ing a cluster-based secure multiparty parameter aggregation with the samples, the more likely it is to be healthy. The top
scheme and various other enhancements and optimizations ranking entries with regard to this probability are diagnosed
(Subsections IV-C, IV-D, IV-E). Using the MSN IM data, as the root-cause candidates. Then, the troubleshooting user
we present an evaluation of our design, including analysis can use the collected, most popular values for corrections.1
and simulation of the trade-off between privacy and protocol The sample set can be obtained either from a database of
efficiencyinSectionV.WedescribeourprototypeFTNsystem registry snapshots collected from a large number of user
and its performance in Section VI. We compare and contrast machines or from a peer-to-peer troubleshooting community
our work with the related work in Section VII and finally suchastheonedescribedinthispaper.Wehavedemonstrated
conclude in Section VIII. PeerPressure [17] as an effective troubleshooting method: our
PeerPressure troubleshooter was able to pinpoint the root-
II. BACKGROUND:PEERPRESSURE
cause misconfiguration accurately for 12 out of 20 real-world
PeerPressure [17] assumes that an application operates troubleshooting cases and for the remaining ones, it narrowed
correctly on most machines and hence that most machines down the number of root-cause candidates by three orders of
have healthy configurations. It uses the statistics from a set magnitude.
of sample helper machines that run the same application to
identify anomalous misconfigurations. The distinct feature of III. PRIVACYMODELANDOBJECTIVES
PeerPressure in contrast with other work in this area [19]
Before we dive into our protocol design, we first state our
is that it eliminates the need to manually identify a healthy
privacy model and objectives.
machine as a reference point for comparison. We have exper-
imented with a PeerPressure-based troubleshooting toolkit on A. Private Information
Windows systems where most of configuration data is stored
The information being communicated in FTN is PC con-
in a centralized registry. Figure 1 illustrates the operation of
figuration data. We denote the complete set of configuration
our PeerPressure troubleshooter.
data on a machine as D. A subset of D is identity-revealing,
such as usernames and cookies, which we denote as D .2 The
Registry Entry Suspects i
Entry Data canonicalizer filtering turns any user-specific entries into a
App HKLM\Software\Msft\... On
canonicalizedform(Section II).TheremainingsetD =D−
Tracer HKLM\System\Setup\... 0 r
HKCU\%\Software\... null D i may contain information that compromises privacy when
Run the
faulty app linked with user identity. Some examples of such information
P2P Trouble- are URLs visited and applications installed. Our privacy ob-
Canonicalizer
shooting
jective is to protect all peers’ privacy by anonymizing such
Community
privacy-sensitive information in D ; of course, D must never
Search r i
Troubleshooting Result & Fetch be revealed.
Entry Prob. In addition to the configuration data, we aim to protect
HH KK LL MM \\ SS yo sft tw ea mr \e S\M ets uf pt\ \. .. .. . 00 .. 26 S At nat ais lyt zic ea rl DB S no af pR se hg ois tstry the identities of the sick machine and the helpers. In some
HKCU\%\Software\... 0.003 cases,themerefactthatoneisrunningaparticularapplication
PeerPressure
may be privacy-sensitive; in our protocol, we hide whether
Fig.1. PeerPressureTroubleshooter
each participant is the sick machine, a helper, or simply a
PeerPressure first uses application tracing (with the “App- forwarding node that does not run the application.
Tracer”) to capture the configuration entries and values that
are touched by the abnormal execution of the application B. Attacks
undertroubleshooting.Theseentriesaremisconfigurationsus- We assume an operational environment where participants
pects. Then, the canonicalizer turns any user- or machine- are honest-but-curious and never lie about their configuration
specific entries into a canonicalized form. For example, user information. We also assume that attackers do not know the
names and machine names are all replaced with constant
strings “USER NAME” and “MACHINE NAME”, respec- 1Of course, proper roll-back mechanisms are needed if a root-cause
candidateisnotactuallytherootcause(whenthecorrectiondoesnotremove
tively. Next, from a sample set of helper machines, for each
thesicksymptom).
suspect entry e, PeerPressure obtains the number of samples 2Findingallidentity-revealingentriesisanopenresearchquestion.FTN topology information. While it is possible to obtain intoonestepinsuchaway(nextbullet)thattheparame-
friendship topology from side channels, there is much uncer- ter values at any point represent the collective state for a
tainty on which friends one trusts to troubleshoot with and set of friends, and therefore do not reveal any individual
which ones of them are online. The ways attackers attempt to state.
obtain private information include the following: • Historyless and futureless random-walk routing: To pre-
1) Eavesdrop on machines on the same LAN serve the privacy of the troubleshooting user as well
2) Message inspection attack: Infer privacy-sensitive infor- as node owners on the search path, we design the
mation by passively inspecting the messages that are troubleshooting messages to be ownerless and not to
passing by. contain any routing history or future routing state, such
3) Polling attack: Repeatedly send fake troubleshooting as the source or the nodes traversed or to be traversed.
requests to a friend to infer his private information. In addition, we make sure that the troubleshooting state
4) Gossip attack: Friends may gossip (i.e., collude) and gathered from the past is aggregate in nature so that
correlate pieces of information. individualstateisdisguised.Eachnodeontheforwarding
pathoftherandom-walkiseitheraforwarderthatsimply
C. Existing Tools proxies the request, or a helper that contributes its own
relevantconfigurationstotherequestandthenproxiesthe
There are many existing tools for achieving anonymity or
request.
forprivatedataaggregation.Webrieflyexplainwhysuchtools
For the rest of the section, we first review our previous
are not readily applicable to our problem; a more detailed
design from our position paper [18] and the possible attacks
review of the related work is in Section VII.
against it in Subsections IV-A and III-B. We then present our
Anonymitysystems,suchasmixnetworks[4],allowtosend
protocol enhancements in Subsections IV-C, IV-D, and IV-E.
messages while hiding their origin. Forwarding configuration
overamixnetworkwouldpreserveprivacyoftheparticipants,
A. Previous Design
as it would dissociate the contents from the users identities.
1) CreatingaRequestontheSickMachine: Asickmachine
However, it would violate our integrity model, as recursive
firstfiltersouttheidentity-revealingentriesfromthesuspects.
trustisachievedonlywhenfriendscommunicatedirectlywith
Then it creates a troubleshooting request which contains
eachother.Amixnetworkwouldleavenowaytoverifywhere
1) The name of the application executable that is under
the data came from and thus leave open the possibility of
troubleshooting; 2) a random nonce ReqID identifying the
malicious configuration data.
request;3)thevaluedistribution(orhistogram)ofeachsuspect
Another way to preserve the anonymity of the contributors
entry e — a list of values and the vector Count (i) counting
is to use a private aggregation or voting protocol based on e
the occurrences of each value i; the vector size increases
a secure multi-party sum or homomorphic encryption [2].
over time as new values are encountered along the way; 4)
However, these protocols work only when there is a known
RemainingnumberofsamplesneededR.ThegoaloftheFTN
spaceofchoicesforthedata.Inourcase,thespaceofpossible
protocol is for a sick machine to obtain the aggregate value
values for a configuration entry is unknown, and we must
distributionsforallsuspectentries.Withthevaluedistribution
determine the number of distinct values (cardinality) as well
of each entry e, the sick node can extract the cardinality (C ),
as the most popular value, while not revealing which value e
the number of matches (M ), and the most popular value to
belongstowhichparticipant.Tosolvethisproblem,wedefine e
carry out the PeerPressure diagnosis.
a new aggregation scheme, described in Section IV-E, which
To preserve source anonymity, the requester randomly
uses a secure multi-party sum as a building block.
initializes the value distribution and remaining number of
samples needed. However, careful readers may realize that
IV. PRIVACY-PRESERVINGSEARCHANDPARAMETER
it is not possible to do the random initialization for value
AGGREGATIONPROTOCOLINFTN
distributions since space of plausible values for each entry is
The FTN is an overlay network similar to Gnutella [9] or
most likely unknown. This was one of the unresolved issues
Kazaa [11]; however, overlay links are made only to trusted
in our previous paper. In this paper, one of our enhancements
friends’machines.Weassumethatfriendsareabletoexchange
(Section IV-E) makes random initialization possible.
public keys out of band and use them to establish secure
2) Parameter Aggregation: The sick machine establishes a
communication channels.
secure channel with an available friend chosen at random and
We take the following basic approaches to achieve our sendsitthetroubleshootingrequest.ThefriendsendsanACK
privacy objectives in the FTN: ifitcanbecomeeitheraforwarderorahelperfortherequest.
• Integration of search and parameter aggregation in one If no ACK is received upon timeout, then the requester tries
transaction: If search is a separate step, returning the another friend chosen at random. To avoid routing loops or
IP addresses of helpers, then the querier can determine double-counting,ifafriendhasalreadyseentheReqID ofan
the applications running on the helpers’ machines. Since arriving request in the past, the friend replies with a NACK.
application ownership could be private information, we A friend that receives a troubleshooting request and runs
integratesearchandparametergatheringforPeerPressure the application under troubleshooting only becomes a helpersome of the time, with probability P . If it always chose D. Enhancement 2: Countering Gossip Attacks with Cluster-
h
to participate, the second-to-last-hop node could infer infor- ing
mation about the last-hop node. When the application under
We mitigate the gossip attacks through a cluster-based se-
troubleshootingisverypopular,withhighprobability,thelast-
curemulti-partysumschemeasillustratedinFigure2.Whena
hop node is capable to help. Therefore, the previous node can
nodereceivesatroubleshootingrequest,insteadofcontributing
comparetherequestandreplyandisolatethelast-hophelper’s
to the request individually, it forms a troubleshooting cluster
configuration state.
from its immediate friends and initiates a secure multi-party
A helper needs to update the troubleshooting request; for
sum procedure that blends individual contributions into an
each suspect entry e, it increments Count (i) where i is its
e aggregate that encapsulates the contributions from both the
own value for e (extending the value distribution vector as
cluster and the past hops. The initiating node serves as the
necessary if i is not already represented). Then, the helper
cluster entrance. A separate cluster member must be selected
decrements R. If R is positive, the helper proxies the request
as the cluster exit for receiving the aggregate; in this way, no
to one of its friends.
single node knows the aggregate contribution of a cluster.
IfR becomes0,thenodeisthelasthop.Thelast-hopnode
In this section, we assume that each entry e is known to
waits for a random amount of time, then sends the reply back
have only a few possible values (e.g. true or false); the next
to the previous hop. Without the random wait, the second-to-
sectionexplainshowtochangeouralgorithmwhenthisisnot
lasthopnodecouldknowthatthereplycamefromthelasthop
the case. This assumption allows us to represent the value
and compare the Count (i)’s in request and reply to obtain
e
distribution of e as a fixed vector of Count (i) for each
the last-hop node’s values. The reply follows the request path e
entry e and each value i of e. The contribution of the cluster
back to the sick machine. The sick machine first subtracts
entrance includes the aggregate value distribution from the
the random initialization from the value distributions; then it
previous hops. Members who do not run the application or
performs PeerPressure diagnosis.
whochoosenottohelpaccordingtoP willcontributetheall
Each node on the forwarding path must record the ReqID, h
zeroes vector. Members who help will set the vector element
the request arrival time, along with the previous and next hop
corresponding to their value to 1, and 0’s for the rest.
friend. There is a timeout associated with each request. If a
The detailed steps of our cluster-based secure multi-party
node does not receive a valid reply when the timeout expires,
sum procedure are as follows (see also Figure 2):
orif it mustgo offline,it sends backwardsthe replyincluding
the aggregate of past samples up to itself and also notifies its 1) Randomsharegenerationanddistribution:Eachcluster
nexthoptoterminateitswaitingstatus.Weanalyzetheproper participant generates G random shares for its contri-
timeout values in Section VI. bution vector, where, G is the cluster size. It then
distributes each share to a distinct cluster member. The
B. Attacks Against Previous Protocol
contribution vector also includes a value V , which is 0
h
We now present the possible privacy-compromising attacks or 1 depending on whether the member decided to help
against our previous design, as follows: or not.
• Gossip attacks: A helper directly contributes its relevant 2) Cluster exit election: The cluster head assigns all clus-
configuration to the request. If the helper’s previous ter members (excluding itself) sequential numeric IDs,
and next hop friends collude, they can determine its starting at 0. Each cluster member i selects a random
configuration information. nonce n i and broadcasts a commitment [12] to it. After
• Pollingattacks:Evenwithprobabilistichelping,acurious receiving all commitments, the members broadcast their
friend may repeatedly send fake troubleshooting requests nonces. Each member verifies all the commitments and
(cid:80)
to its next hop with R = 1 and determine the last-hop computes the sum n = G i=− 01n i, and then picks the
contribution by comparing the request and reply. Even member with ID = n mod G − 1 to be the cluster
with a random wait at the last hop, the attacker can still exit.Thisresultsinafairlychosenrandomnumberinthe
conduct a statistical analysis to guess when the next hop range 0...G−1. As an optimization, cluster members
contributes to the request. whohavenofriendsoutsidetheclustercanindicatethis
upon accepting the invitation; those members will be
C. Enhancement1:CounteringPollingAttacksbyEliminating
excluded from the choice of potential cluster exits to
R
avoid dead ends.
To mitigate the polling attack, we avoid specifying the 3) Unicastsubtotaltotheclusterexit:Eachclustermember
remaining number of hops R explicitly. Instead, each helper sums up all the shares it has received from others and
nodeonlyproxiestherequestfurtherwithaprobability,P = unicasts its subtotal to the cluster exit.
f
1−1/N, where N is the total number of samples needed; 4) Exitingthecluster:Theclusterexitsumsupthereceived
otherwise it becomes the last hop. This results in N helpers subtotals of contribution vectors from all participants.
being involved on average. This probablistic proxying makes This aggregate is the valuedistribution from the past up
routing entirely historyless. Nodes that do not help always to the cluster exit. The exit also sums up the received
(cid:80)
forward the request. shares of V to obtain V , which is the number of
h G hclustermembersthatwereabletohelp.Withprobability 2) Iterative Helper Selection: The adaptive method of
(cid:80)
P f GVh, the cluster exit further proxies the request to choosingP h willachieveprobableinnocence(i.e.whenfewer
one of its friends, which becomes a cluster entrance of than half of the members become helpers; see Section V-C)
the next cluster hop. While it is possible to turn the with high probability. However, to achieve this, small cluster
clusterexitintoaclusterentranceforthenextcluster,we sizesneedtohaveaP hnearzero,therebyincreasingthelength
observefrom our MSN IM data (Section V-B)that such of the number of clusters that need to be traversed to collect
adjacent clusters contain 14.15% overlapping members, enough data, especially when the average cluster sizes are
reducing the value of the next clusters contribution. small. As an alternative, we present an iterative scheme that
achieves the same privacy guarantees while collecting more
During cluster formation, a friend can decline the cluster
contributions from neighbors.
invitation if its friendship with the cluster entrance is consid-
In this scheme, before any data aggregation is performed,
ered private or if it has already seen the request. The decision
every cluster member, regardless of whether it runs the appli-
aboutwhoseinvitationtoacceptmustbepre-configuredbythe
cation or not, randomly decides whether to participate or not
FTN node owners. Also during cluster formation, the cluster
and sets V to 0 or 1. It decides to participate probability P ,
entrance distributes the public keys of all cluster participants p p
which is close to 1. Then the cluster performs a multi-party
(that have accepted the invitation) to each of them for their 2
sumtoaddalltheV valuescountthenumberofparticipating
future secure communications; this is necessary because the p
members. If this sum includes more than half the cluster
cluster participants may not be friends with one another and
members, the cluster members discard their original decisions
thus may not know each other’s public keys.
and randomly pick a new V , repeating this entire step. This
p
The cluster exit needs to record the cluster entrance as the
process is repeated until fewer than half the members have
previoushopforthereturntripofthetroubleshootingrequest.
decided to participate.
Thenewclusterentrancerecordsthepreviousclusterexitasits
Afterthis,theaggregationproceedsasbefore,exceptinstead
previous hop. The other cluster members only need to record
of using V to decide whether to participate, only those
h
theReqIDtoavoidloopsincasetheyreceivethesamerequest
members who decided to participate and are running the
in the future.
applicationwillcontributetotheaggregate.Allothermembers
One may wonder whether it would be possible to just use
will contribute zero to the overall aggregate.
a single, large cluster. First of all, a large cluster incurs a
In the first step, all the members pick a V , regardless
p
heavy cost because the communication cost of the multi-party
of whether they are running the application or not. This
securesumprocedureisofO(G2)whereGistheclustersize.
way, the count of participating members does not reveal
Also, a single cluster would not sufficiently hide the identity
any information. In the second step, fewer than half the
of the sick machine, who would be the cluster head. Finally,
members participate, hence even if the cluster-wide aggregate
we must adhere to our recursive trust model by inviting only
is intercepted, it is not known whether each member runs the
immediate friends to join the cluster. According to the MSN
application with a probability greater than one-half.
IM user data (Section V-B), the median number of friends a
The probability P will depend on the size of the cluster,
p
userhasis9(someofwhichmaynotruntheapplicationunder
just as with P . However, in general P can be larger than
h p
troubleshooting or may not be willing to help); since we need
P , since too many members participating results in an extra
h
at least 10 helper samples for PeerPressure diagnosis [17], a
round of communication rather than a privacy compromise.
single cluster is simply not sufficient.
The choice of P involves a trade-off: with a P too high,
p p
1) Adaptive P h for Better Privacy in case of Cluster En- the first step will involve a high number of retries, increasing
trance and Exit Collusions: the communication cost. If P is too low, few members will
p
Our scheme achieves very good privacy when there is no participateineachcluster,whichmeansthatmoreclusterswill
collusionsbetweentheclusterentranceandtheexit.However, be needed to collect enough samples. We explain our choice
whentheydocollude,theywillobtaintheaggregatecontribu- of P in Section V.
p
tion of the cluster. The smaller the cluster is, the less privacy 3) CounteringSybilAttackwithThreshold-DrivenHelping:
can we achieve with our cluster-based secure multi-party sum A curious cluster entrance may launch a Sybil attack [6]
algorithm.Inparticular,ifall(ormost)oftheclustermembers againstitsfriendsbyincludingintheclusteralargenumberof
decide to help, then an attacker can guess with high certainty “ghost” friends who are just the cluster entrance itself. Then,
that a given cluster member runs the application. To this end, with high probability, the cluster exit will be elected to be
we allow cluster participants to adaptively choose their P one of the ghost friends, resulting in successful collusion.
h
according to the cluster size and the privacy level they desire. One countermeasure is that a cluster member only helps
Ingeneral,forsmallerclustersorforbetterprivacyguarantees, when there are a threshold number T common friends of
we must use a lower value of P . Of course, smaller P the cluster member and the cluster entrance in the cluster.
h h
will increase the number of nodes that must be queries for With this threshold, it takes at least T colluders to expose
each request. We give an an analysis of the trade-off between the cluster member’s contribution. However, this strategy also
desired privacy levels and efficiency using the MSN IM user increases the required hop count for troubleshooting, since
data in Section V. fewer friends will choose to be helpers. We will evaluate theA cluster hop on the forwarding path
Helper
1 3
1 1
0 2 4
Cluster 1 Cluster Cluster
Forwarder Entrance Helper 3 Exit Entrance
3
1 3
0. Receive a request
1. Distribute shares Non-
2. Elect the cluster exit Helper
3. Unicastsubtotal
4. Aggregate cluster sum and proxy
Fig.2. ParameterAggregationandPropagationwithinaCluster.
tradeoff between the hop count overhead and the threshold to be undercounted. For example, if the hash function has
scheme in Section V-C.4, using the MSN IM topology. a range of C values, the estimated cardinality will never be
Memberswhofallbelowthethresholdstillparticipateinthe higher than C.
securesumbutdonothelp,contributingtotheprivacyofother Fortunately,mostentrieshaveasmallcardinalityandhence
cluster members. If the complete friendship topology were alowerchanceofcollision.Entrieswithlargecardinalitiesare
known, such members could be identified and discarded from not likely to be identified root cause candidates by PeerPres-
consideration by the attackers; however, one of our security sure[17]:Asthecardinalityincreases,thesickprobabilitywill
assumptionsisthatindividualfriendshiprelationshipsarekept decrease.
private (Section III-B). According to our study [17], 97% of Windows registry
entries have no more than 3 values, and in 18 out of 20
E. Aggregate Cardinality Information real-world troubleshooting cases, the root cause entry has a
Inthissection,weaddressthecasewhenthesetofpossible cardinality of no more than 3. Therefore, we choose C =16,
values for suspect entries is unknown. In this case, we cannot because under-counting the cardinalities larger than 16 does
randomly initialize the value distribution (Section IV-A). We nothavemuchimpact on the PeerPressureranking of theroot
are also unable to perform the multi-party sum to aggregate cause candidates.
the value distribution within a cluster, as that requires a fixed- However, even for entries with small cardinalities, there
length vector with one entry for each possible value. Instead, is still a chance of hash collisions. Any two values have a
ourschemeistohavethesickmachinechooseahashfunction probability of collision of 1 for C = 16, and hence many
16
h to map values of each suspect entry into a small range entries with cardinalities of 2 and 3 will be undercounted.
0...C −1. The FTN nodes will then maintain the number We address this problem by using several hash functions,
of entry values that hash to each of the C values in the h 1,...,h k, and compute the histogram for each one. To
troubleshootingrequest.Thisthenrequiresustohaveasecond estimatethecardinality,thesickmachinecancountthenumber
round query to find out the most popular values of the top ofnon-zeroentriesinthehistogramforeachhashfunctionand
ranking root cause candidates yielded from the first round take the largest count. In this case, the cardinality will only
PeerPressure diagnosis, for the purpose of misconfiguration be undercounted if there is a collision in all k functions. For
corrections. an entry with 2 values, the chances of this are 1 , so by
16k
TheaggregatevectorwillcontainvaluesCount (i)foreach increasing k we can make this probability arbitrarily small.
e
entryeandeachvalueiintherange0...C−1.Whenahelper Our approach works well to measure small cardinalities
machineisupdatingtheaggregate,itwillcomputethehashof accurately, while undercounting large ones. Note that using
its own value for entry e, V , and increment Count (h(V )). several smaller histograms is more efficient than a single
e e e
Oncetheaggregateiscollected,thesickmachinecanestimate histogram: a histogram with kC values will have the same
the cardinality of each entry e of the values by counting the communication complexity as k histograms with C values,
number of non-zero Count (i)’s. but the odds of a collision for a hash function with range kC
e
1) Choose An Appropriate Hash Range: The range of the is 1 rather than 1 .
kC Ck
hash function directly affects the size of the troubleshooting Based on our previous PeerPressure evaluation [17], we
request, so we want to use a small hash function to reduce choose k = 6: Our data showed that the median number of
communication overhead. However, smaller hash functions suspect entries is 1171, with 87% of them having a single
increasethechanceofhashcollisionsandcausethecardinality value, with 7% of them having 2 values, 3% having 3 values,and 3% more than 3. For a 2-valued entry, the odds of a andexitnodesasthefirstround,ratherthanpickingnewones.
(cid:80)
collisionare 1 .Fora3-valuedentry,theoddsofatleastone The aggregate value computed is sum = V .
collision are 1(cid:161)6 16 − 15·14(cid:162) 6 . For a 4-valued entry, the odds are To do this, each participant who helpede in the fiV re s| th rj o(V ue n) d= ,i ane d
162
(1−15·14·13)6.Collisionsinentrieswithmorevaluesareeven whosevalueforematchesthehashvalueinthesecondrequest
163
morelikely;however,weareonlyinterestedinthecasewhere (h j(V e)=i)willcontributeV e tothesum.Allothermembers
there are enough collisions to produce only 3 or fewer values will contribute 0.
in each hash function; otherwise, the collision is irrelevant as SinceV e maybeastring,wehavetoconvertittoaninteger
the undercounted cardinality is unlikely to cause PeerPressure value. We do this by considering the bit representation of the
toidentify theentry as a rootcause. The probability of sucha string as an integer and adding it to the sum. Since all the
collision is lower than the probability of a collision among 4 shares in the multiparty sum must be of the same size, we
values,sointhefollowingcomputationweconsiderallentries take the sum over 8192-bit integers. This allows us to support
to have no more than 4 values. strings that are up to 1024 bytes in length. The shares in this
The chances of a collision occuring in any of the 1171 round are larger than in the first one; however, the number of
entries can be calculated as: entries involved is much smaller and so the communication
complexity is similar to the first round.
1−(cid:161) 1− 1 (cid:162) 0.07·1171 ·(cid:179) 1−(cid:161) 1− 15·14(cid:162) 6(cid:180) 0.03·1171 Once the sick machine receives the aggregate from all the
166 162
·(cid:179) 1−(cid:161)
1−
15·14·13(cid:162) 6(cid:180) 0.03·1171
≈5%.
n suod mes, bit yc ta hn ec ho im stop gu rt ae mthe vam luo est ip (o i.p eu .,la thr eva nl uu me bV ee rb oy
f
d saiv mid pi ln eg
s
163 e
with value V ) for hash function j from the first round.3 The
e
Therefore, in about 5% of all troubleshooting requests, result, interpreted as a string, will be the most popular value,
there will be some entry with an undercounted cardinality of which can then be used to repair the sick machine.
3 or less, which may be identified as a root cause. As we Ifthedivisionresultsinanon-integralvalue,ortheresulting
will show next, such collisions can be discovered during the string is not intelligible (e.g., contains non-ASCII characters),
second round query for the most popular values. If collisions this signals that a collision occurred and there are multiple
are found, then the sick machine can retry with a different values such that h (V ) = i. In this case, the sick machine
j e
set of hash functions or larger k. The new request should will know that the cardinality of e was undercounted. The
include only the entries where collisions occurred and thus sick machine will need to repeat the first-round query with
the communication overhead will be much smaller. a different set of hash functions to obtain a more accurate
For any suspect entry e, hash collisions in this entry may cardinality estimate, and then use the second round to obtain
cause its ranking to improve, while hash collisions in lower- the most popular values.
ranked entries may cause them to overtake e and lower its
ranking. Nevertheless, it is hard for entries with significantly V. PROTOCOLEVALUATION
larger cardinality to catch up on ranking. Therefore, in the
A. Security Analysis
secondround,wequerythemostpopularvaluesofafewmore
top-ranking entries in order to account for possible collisions. To evaluate the security of our design, we consider the
2) Diagnosis on the Sick Machine and Second Round kind of information that is revealed to each participant in the
Query: Using the aggregated histogram, the sick machine protocol. Note that secure communication channels at each
estimates cardinalities for all suspect entries, and then ranks linkrendereavesdroppingattacksineffective,andhencewedo
suspected entries according to the PeerPressure algorithm. notneedtoconsiderattacksfromnodeswhodonotparticipate.
However,thehistogramdoesnotrevealwhatthecorrectvalue A cluster member that is neither an entrance nor an exit
fortheentryshouldbe;inordertodiscoverit,thesickmachine will only learn the troubleshooting query, which does not
needs to perform another round of the protocol. identify the sick machine and thus does not contain privacy-
The sick machine can identify the hash of the most popular compromising information.
valueh (v)=i,whereh isthehashfunctionfromwhichwe A cluster entrance will see the query and the aggregate of
j j
obtained the cardinality. It can then ask its friends to identify thecontributionssofar.However,sincethisaggregateincludes
which value has that hash. However, only someone who runs a random initialization, it will not be able to find out the
the same application will be able to answer this query, and contributions of past clusters or find out whether the previous
we do not want to reveal who that might be. Therefore, we hop was the sick machine or simply a forwarder. It will also
onceagainmakeuseofsecuremultipartysumtofindthemost receive the aggregate data from the cluster exit. This data will
popular value without compromising privacy. include the contribution from the cluster as well as from any
Inthesecondroundoftheprotocol,thesickmachinemakes furtherhops.Becauseoftherandomwait,theclusterentrance
another request, this time containing a list of the top-ranking, willnotbeabletotellwhetherfurtherhopswereinvolvedand
root-cause candidate entries, as well as the hash values of the isolate the contributions from the cluster members.
most popular value; i.e. triples (e, i, j). The second round
proceeds similarly to the first one to compute an aggregate
3AmorerobustschemewouldrecomputethecountofcontributorstoVe
inordertobemoretolerantofclustermembersthatmayhaveleftbetween
over all the participants, except that it uses the same clusters thefirstandsecondround.The cluster exit will receive the shares of the cluster
14
members’contributionsandwillbeabletocomputetheirsum.
12
However, this sum will include the aggregate from the past
hopscontributedbytheclusterentrance,hencetheclusterexit 10
willnotbeabletoisolatethecontributionsfromthecluster.It
8
will also receive the aggregate from the next cluster entrance.
6
However,thisaggregatewillincludecontributionsfrommem-
bersofthenextclusteraswellaspotentialsubsequentclusters, 4
all of which are not known to the cluster exit. 2
We can see that message inspection attacks at any single
0
node do not reveal any privacy-sensitive information. Next, 2 7 12 17 22 27 32 37 42 47 52 57 62 67 72 77 82 87 9297..
we will consider gossip attacks when two members collude. Number of Friends
If a cluster entrance colludes with the cluster exit, together
they will be able to determine the contributions of the other
cluster members. They will still be unable to determine what
each individual member contributed: the secure multi-party
sum ensures that all other cluster members must collude to
reveal the contributions of an individual member. However,
they will learn some facts, such as the number of cluster
members that decided to help. By reducing the probability to
help, this number will be a small fraction of the cluster size
and therefore not compromise the privacy of the participants.
Section V-C examines the corresponding trade-off between
privacy and protocol efficiency.
The fair random selection of the cluster exit mitigates the
chances of a collusion between the cluster entrance and exit.
If a cluster entrance has C colluders in the cluster, the chance
of one of them being picked as the exit is C/G, where G is
the cluster size. A Sybil attack can be used to increase these
chances;ontheotherhand,thresholdparticipation(SectionIV-
D.3) mitigates the consequences of a collusion. It is also
possible for a cluster entrance to cooperate with the entrance
of the next cluster and isolate the contributions of the cluster.
However, this type of collusion is less likely, since the next
entranceispickedbytheclusterexitandneverrevealedtothe
previous entrance.
Theuseofahistorylessrandomwalkmakespollingattacks
less productive, as an attacker cannot reduce the likelihood of
afriendforwardingatroubleshootingrequesttootherclusters.
Any response to a request is likely to include the aggregate
information from several clusters and not reveal privacy-
compromising details. As another defense against polling
attacks, we limit the rate at which a node becomes a helper
in queries (see Section VI).
B. Friends Network Characteristics
We obtained a snapshot of MSN IM operational data from
2003. It had 150,682,876 users. The number of friends of a
IMuserrepresentstheupperlimitofourclustersize.Figure3
depicts the distribution on the number of friends, showing a
median of 9, and an average of 19. We excluded those users
with just one friend since these nodes will not be included on
the FTN forwarding path.
The number of common friends impacts the FTN routing
because FTN needs to avoid loops or double-counting (Sec-
tion IV). we found that two neighboring nodes have 14.15%
)%001(egatnecreP
Fig.3. DistributionoftheNumberofFriends
of common friends in average; two nodes that are two hops
awayfromeachotherhave2%;threehops,0.3%;and4hops,
less than 0.1%. Further, we randomly picked 100 IM users
with more than 4 friends (since an FTN node will not form
a cluster unless it has more than 4 friends (Section IV-D.1).
We find that on average, 28.92% of a node’s friends do not
share any common friends with the node; 21.52% have one
common friend with the node; 10.61% have 2; 9.85% have 3;
the remaining 29.1% have 4 or more.
Another friends network characteristics that is of interest
to the FTN is how likely is a troubleshooting request to be
routedtoa“deadend”,anodeontheforwardingpathwithno
otherfriendstoproxytherequeston.Insuchcases,parameter
propagationterminateswithoutgatheringenoughsamples.The
probability of routing to such dead ends is P =
(cid:80) ToDeadEnd
P(G = i)·P (i), where P(G = i) denotes the
i DeadEnd
percentage of clusters of size i, and P (i) represents
DeadEnd
the average percentage of dead end participants in a cluster
of size i. According to our computation from our MSN IM
data,P =0.0013.So,theaveragenumberofnodes
ToDeadEnd
that need to be traversed before reaching such a dead end is
1/0.0013=770, which far exceeds the number of nodes that
need to be traversed with the FTN protocol (Section V-C).
C. Tradeoff Analysis
1) Metric: We use the metric of probable innocence that
was introduced by Reiter and Rubin [14] for measuring the
uncertainty of a cluster member being a helper: A cluster
member is considered to be probably innocent if, from the
colluders’pointofview,thememberappearsnomorelikelyto
beahelperthannottobeone.Thisrequiresthatnomorethan
half of the cluster participants should help with troubleshoot-
ing, or P < 0.5. Therefore, we define the innocence level,
h
I = −log P , where P is the probability that over half of
10 I I
the cluster participants help with troubleshooting. We exclude
theclusterentranceandexitfromtheparticipantssinceweare
assumingthattheyarecolludinginordertofindoutthecluster
(cid:80) (cid:161) (cid:162)
aggregate. P = G−2 G−2 Pi(1 − P )G−2−i
I i=[(G−2)/2]+1 i h h
where G is the cluster size. Here, we assume the worst case
scenariothateveryclustermemberownstheapplicationunder
troubleshooting — if not, P will be smaller. We also assume
I
that every cluster member chooses the same P . Therefore,
h0.45
0.4
0.35
0.3
0.25
0.2
0.15
0.1
0.05
0
4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36
Cluster Size
)hP(
pleH
ot
ytilibaborP
alsosimulatedourFTNroutingprotocolonthestaticMSNIM
I = 1 I = 2 I = 3 topology, configured with various innocence levels. For each
I = 4 I = 5 I = 6
I = 7 I = 8 I = 9 innocencelevel,werandomlypicked100startingnodesasthe
requestor, and set P =1−1/N =0.9 for N =10 samples.
f
We list in Table I the number of clusters and nodes involved
basedonoursimulation.Onecanseethatingeneral,thenum-
ber of clusters involved in our simulation is slightly smaller
thanourcalculations.Thisisbecauseweusedanupper-bound
estimate of P = 2.33% for our calculations, while in
overlap
our simulation, P is different for each cluster, and is
overlap
in general less than 2.33%. In reality, the number of clusters
required to collect 10 samples might be larger, since not all
Fig.4. TheSelectionofP hforDifferentClusterSizestoAchieveDifferent friends are available or own the corresponding application. It
InnocenceLevels. is clear from the table that the higher the privacy requirement
is, the longer the routing path it takes.
the higher the innocence level I is, the better the privacy is,
and the smaller the P is. Figure 4 shows P ’s that a member
I h 3) Iterative helper selection.: Using the iterative helper
should take with various cluster sizes for achieving different
selection method described in Section IV-D.2, we can guar-
innocence levels. In general, P takes a smaller value for a
h antee probable innocence for all the cluster participants in the
higher innocence level or a smaller cluster size.
face of cluster entrance and exit collusion, while achieving
We use the average number of clusters involved in trou-
a higher participation rate. For example, we can set the
bleshooting, E(N ), as the metric for evaluating protocol
c probability to participate P based on the cluster size to the
p
efficiency, since the troubleshooting response time E(N )
c valuecorrespondingtoI =1inFigure4.Theaveragenumber
is dictated by the number of clusters a troubleshooting re-
of helpers in a cluster will match the one when P is chosen
h
quest traverses. (The expected number of nodes involved is
similarly, and hence we expect the search to terminate after
approximately 19 · E(N ) since a node has 19 friends on
c only2.02clusters.However,wecancomparetheprivacylevel
average.) We have: E(N ) = (cid:80) N where
P is the percent of
usc
ers
thatPo ow wn n· tihP e(G ap= pi l) i· ci· aP th io,i
n under
to that with innocence level9, as in both cases the probability
own thatmorethanhalfoftheclustermemberswillbecomehelpers
troubleshooting, i denotes the cluster size, P(G = i) is the
is negligible. (Of course, at innocence level 9, the expected
percent of clusters with size i, and P is the probability to
h,i number of helpers will be significantly less than half.)
help according to cluster size i for a given innocence level.
Withthecommonfriends’statisticsfromourMSNIMfriends The helper selection causes involves at least one extra
network topology (Section V-B), we estimate P(G = i)·i round communication in each cluster, more if retries are
as P(F = i)·i·(1−P overlap), where P(F = i) denotes necessary, which will happen with probability 10% in our
the percentage of users with i friends, and P overlap is the example choice of P p. Therefore, the latency of a request
percentage of the cluster entrance’s friends that have already using the iterative method going through n clusters will be
seentherequest(andhencewillnotjoinitscluster).According higher than if the adaptive P method is used by a factor
h
to overlapping friends distribution, neighboring nodes have of about 3.1/2 (as there are two rounds of communication
14.15% of common friends in average, and since neighboring in the adaptive P method). However, this is still lower than
h
cluster entrances are two hops away, one can estimate the the latency of a request when innocence level 3 or higher
(cid:80)
upper bound of P overlap as ∞ l=2(0.1415)l = 2.33%, where is desired. Furthermore, since fewer machines are involved
(0.1415)l approximates the percentage of common friends in the aggregate computation, there’s less of a chance of
between the current cluster entrance and a previous cluster encountering a malicious or compromised node. Therefore,
entrance that is l hops away. the iterative helper selection method is useful when a high
2) Innocence Level Vs. Number of Clusters: Now, we use level of privacy is desired, and when the median cluster sizes
the MSN IM friendship topology to evaluate the trade-off are small.
between privacy (I) and average number of clusters (E(N ))
c
involvedinatroubleshootingevent.WeassumethatP =1 4) Threshold-Driven Helping Vs. Number of Clusters:
own
(e.g., the application under troubleshooting is very popular). Now, we evaluate the path length overhead due to the use
We impose an upper bound on the cluster size to 36 for limit- of threshold-driven helping strategy (Section IV-D.3). Based
ingtheintra-clustercommunicationoverhead.Thisreducesthe on our common friends data from the MSN IM network
averagenumberofnodesinaclusterto14basedonourMSN (Section V-B), a threshold of T = 1 reduces the number of
IM data. Table I shows the expected number of clusters and helpers from the cluster by 28.92%, T = 2 by 50.44%, and
nodesneededtoobtain10samples(withwhichPeerPressureis T =3by61.05%.Figure5showsthetrendofaveragenumber
already effective [17]) using the static IM friendship topology of clusters needed with these threshold values to obtain 10
(Figure 3) for achieving nine different innocence levels. We samples for nine different innocence levels.InnocenceLevel 1 2 3 4 5 6 7 8 9
Expected#Clusters 2.02 2.82 3.67 4.62 5.68 6.91 8.3 9.84 11.65
Expected#NodesInvolved 28 39.4 51.4 64.69 79.55 96.8 116.2 137.82 163.11
Avg#ClustersinSimulation 2 3.1 3.59 4.55 5.78 6.75 8.18 9.49 11.27
Avg#NodesInvolvedinSimulation 27.6 44.5 47.47 69.2 85.9 92.5 120.35 140.4 162.3
TABLEI
AVERAGENUMBEROFCLUSTERSANDNODESINVOLVEDTOOBTAIN10SAMPLES
45
40
35
30
25
20
15
10
5
0
1 2 3 4 5 6 7 8 9
Innocence Level
ot
deriuqeR
sretsulC
fo rebmuN
egarevA
selpmaS
01 niatbO
T=0 T=1 T=2 T=3
Fig. 5. The average number of clusters required to obtain 10 samples for
differentthresholdhelpingstrategies.
3
2.5
2
1.5
1
0.5
0
8 59 105 213 717 945 1303 2337 2975 4371
Number of Suspects
)dnoceS(
emiT
gnissecorP
lacoL
45
40
35
30
25
20
15
10
5
0
1 2 3 4 5 6 7 8 9
Innocence Level
Fig.6. LocalProcessingTimeVs.NumberofSuspectsfor20Real-world
TroubleshootingCases.
VI. PROTOTYPEIMPLEMENTATIONANDPERFORMANCE
We have prototyped an FTN system in C#. In our im-
plementation, aside from P , we also set a help budget, in
h
the unit of “requests per friend per day”, for FTN nodes to
control the rate of configuration state exposure. In addition, a
disk budget is configured by an FTN user to set aside for
maintaining FTN protocol state such as previous and next
hops for respective ReqID’s that have been traversing the
node. The disk budget is fair-shared among the node’s active
troubleshooting friends. Figure 6 shows the local processing
times for the 20 troubleshooting cases under study [17]. The
processing time grows with the number of suspect entries.
In terms of bandwidth overhead, for the troubleshooting
cases[17]weevaluatedwith,thereisamedianof1171suspect
entries. When cardinality is unknown, the size of the value
distribution field depends on the range of the small-valued
emiT
esnopseR
detamitsE
Enterprise User (sec)
Home User (min)
Fig. 7. The estimated average response time for enterprise users (5 Mbps
availablebandwidth)andhomeusers(100Kbpsavailablebandwidth)
hash function. If we use six 16-valued hash function, and
we reserve 1 byte for the count, the troubleshooting request
message is about 100 KB. If we choose the 20 top-ranking
entries as the root-cause candidates, and reserve 1024 bytes
to aggregate the sum of the most popular value, the second
roundquerymessageisapproximately20KB.(Ofcourse,the
requests can be compressed to save network bandwidth.)
During the process of cluster aggregation, each participant
has to transmit M ∗G KB information, where M KB is the
troubleshooting message size. Each node on the return path
only needs to transmit M KB information. The number of
clustersinvolvedontheforwardingpathisE(N )onaverage.
c
Thereturnpathhas2E(N )nodes,sincetheentranceandexit c
nodesofeachclusterontheforwardingpatharebothinvolved
to propagate the reply back along the return path. Figure 7
depicts the estimated average response time for an enterprise
userwith5Mbpsavailablebandwidthfortroubleshooting,and
a broadband home user with bandwidth of 100 Kbps, when
cardinality is unknown, to achieve nine different innocence
levels.
Also, we can estimate the timeout that a node on the
forwarding path should set. The average hop length to obtain
10samplesunderinnocencelevel6isAvgHopLen=1/(1−
P¯ ) = 6.9, where P¯ = 0.855 is the average probability f f
of forwarding the request from one cluster to another. The
varianceofthehoplengthisvar =(P¯ )/((1−P¯ )2).Hence, √ f f
we have AvgHopLen + 3 · var = 26. The cumulative
(cid:80)
probability of all hop lengths ≥ 26 is ∞ P¯ (L−1) (1− (cid:80) L=45 f
P¯ )=P¯ 44 (1−P¯ ) ∞ P¯ L =P¯ 44 =0.001. Therefore,
f f f L=0 f f
we choose 26 to estimate the upper limit of the hop length,
and set the timeout to be 1.6 minutes for an enterprise user
with5Mbpsbandwidth,and67minutesforahomeuserwith
100 Kbps bandwidth.VII. RELATEDWORK noise would significantly impact ranking accuracy. Increasing
the number of samples for effective noise filtering would un-
There is much related work in the area of anonymization.
acceptably increase the overhead of troubleshooting requests.
The random walk approach is also those used in FreeNet [5]
Our problem of privacy-preserving parameter aggregation
and Crowds [14]. FreeNet is a distributed anonymous infor-
shares much similarity to the problem of secure and privacy-
mation storage and retrieval system. Crowds provides anony-
preserving voting [8], [2] with three distinctions. First, voting
mouswebtransactions.Otheranonymizationsystemarebased
requires voters to be authenticated by a centralized authority,
on Chaum’s mixes [4], which serve as proxies to provide
suchasthegovernment.Second,ourprotocolhasanadditional
sender-receiver unlinkability through traffic mixing. Onion
requirement of participation privacy; otherwise, the privacy of
routing [10] extends the mixes with layers of onion-style pre-
theapplicationownershipiscompromised.Lastly,mostvoting
encryptions.Tarzan[7]implementsthemixideausingapeer-
scenarios involve a fixed, limited number of voting chances,
to-peeroverlayandprovidessenderanonymityandrobustness
while our troubleshooting problem does not.
to the mix entry point.
The authors of SIA[13] presented a set of techniques for
Alloftheaboveanonymizationtechniquesaddresspoint-to- secure information aggregation in sensor networks with the
pointcommunications.However,ourprotocolinFTNinvolves presence of malicious sensors and aggregators. The integrity
one-to-many communication, in the form of broadcasting a of information aggregation is achieved essentially through
troubleshooting request to peers. This broadcast should be authentication which is identity-revealing. In FTN, we cannot
limited according to the friend relationships, which is more do the same because of the privacy concerns.
naturallyimplementedusingapeer-to-peeroverlay.Further,as
discussedinSectionIII,ourrecursivetrustmodelrequiresthat VIII. CONCLUSIONS
the configuration data be transmitted between friends. Fully Inthispaper,wehavepresentedthedesign,implementation,
anonymous configuration data arriving over a mix network and the evaluation of the Friends Troubleshooting Network, a
could not be trusted to be authentic, as only friends can peer-to-peer overlay network that aggregates privacy-sensitive
be trusted not to contribue false and potentially harmful configuration data from peers to carry out PeerPressure-based
information about their configurations. misconfigurationroot-causediagnosis.ThelinksbetweenFTN
Canny [3] proposed a collaborative filtering algorithm to nodes reflect the friendship of their owners. The FTN man-
allow a community of users to compute a public aggregate ifests recursive trust rather than transitive trust. In FTN, we
of their data without exposing individual users’ data. In his use a historyless and futureless random walk for integrated
scheme, homomorphic encryption[2] is used to anonymously searchandcluster-basedparameteraggregationtoachievepri-
aggregate encrypted user data and the decryption key is not vacy. We further introduce a cluster-based secure aggregation
held by any single person but instead secret-shared among protocol to find the cardinality and mode of a collection of
all the clients. The FTN targets a highly dynamic friends valueswhilepreservingtheprivacyofindividualcontributions.
community where users join and leave all the time. The key Many of our design decisions are guided by a real-world
share generation process would incur a high cost since new friendsnetworktopologyobtainedfromtheMSNIMnetwork.
shares would have to be generated every time a user joins. FTN poses interesting tradeoffs between privacy and protocol
Furthermore, the collaborative filtering algorithm is designed efficiency which we have analyzed in detail with the real-
for a known, fixed set of items, while the set of values for world friends network data. The performance of our current
configurationentriesrelevanttotroubleshootingrequestsisnot prototype allows enterprise users to diagnose misconfigura-
known ahead of time. tions in a minute with a high privacy guarantee. We believe
Similarly, the well known secure multiparty sum protocol our techniques can be applied to other application scenarios
enables aggregation without revealing individual private con- that require privacy-preserving information aggregation.
tributions; however, this protocol only supports aggregations
of fixed-length vectors. We use the secure sum protocol as
IX. ACKNOWLEDGMENTS
a building block, but we extend it to support counting the Luis von Ahn, Josh Benaloh, David Brumley, John Duna-
gan, Yih-Chun Hu, David Jao, and Dan Simon have given us
number of distinct values in a set, as well revealing the
invaluable discussions and critiques on the technical content,
mostpopularvalue,whilekeepingtheindividualcontributions
as well as the presentation of this paper. We are grateful for
private.Wealsomakesuretosendtheresultsoftheaggregate their help. We also thank the anonymous reviewers for their
to a single node, different than the cluster entrance, such that insightful comments and suggestions.
collusion between at least two nodes is required to find out
REFERENCES
the cluster-wide sum.
Another technique for privacy-preserving data aggregation [1] Rakesh Agrawal and Ramakrishnan Srikant. Privacy Perserving Data
Mining. InProceedingsofSIGMOD,2000.
is to introduce random perturbations [1] at each input. The
[2] Benaloh.VerifiableSecret-BallotElections.PhDthesis,YaleUniversity,
idea is that these perturbations would not significantly affect Sept.1987.
theaggregate,whilehidingindividualcontributions.However, [3] JohnCanny. CollaborativeFilteringwithPrivacy. InIEEESecurityand
Privacy,2002.
thisisonlytruewhenalargenumberofsamplesarecollected;
[4] D. L. Chaum. Untraceable Electronic Mail, Return Addresses and
with only 10 samples needed for PeerPressure, the random DigitalPseudonyms. InCACM,1981.[5] Ian Clarke, Oskar Sandberg, Brandon Wiley, and Theodore W. Hong.
Freenet: A distributed anonymous information storage and retrieval
system.InProc.InternationalWorkshoponDesignIssuesinAnonymity
and Unobservability. In Proceedings of International Workshop on
DesignIssuesinAnonymityandUnobservability,2001. LectureNotes
ComputerScienceVolume2009.
[6] John R. Douceur. The Sybil Attack. In Proceedings of the 1st
InternationalWorkshoponPeer-to-PeerSystems(IPTPS),2002.
[7] Michael J. Freedman, Emil Sit, Josh Gates, and Robert Morris. Intro-
ducingTarzan,aPeer-to-PeerAnonymizingNetworkLayer. InIPTPS,
2002.
[8] T.Fujioka,T.Okamoto,andK.Ohta.APracticalSecretVotingScheme
forLargeScaleElections. InProceedingsofAuscrypt,Dec.1992.
[9] TheGnutellav0.6Protocol,GnutellaDevelopmentForum,2001.
[10] D.M.Goldschlag,M.G.Reed,andP.F.Syverson. OnionRoutingfor
AnonymousandPrivateInternetConnections. InCACM,Feb1999.
[11] KaZaa. http://www.kazaa.com.
[12] MoniNaor. BitCommitmentUsingPseudo-Randomness. InAdvanced
inCryptology—CRYPTO’89,pages128–136,1989.
[13] Bartosz Przydatek, Dawn Song, and Adrian Perrig. SIA: Secure
InformationAggregationin SensorNetworks. InProceedingsof ACM
SenSys,Nov2003.
[14] Michael K. Reiter and Aviel D. Rubin. Crowds: Anonymity for Web
Transactions.InACMTransactionsonInformationandSystemSecurity,
Nov1998.
[15] MSilverandLFiering. DesktopandNotebookTCOUpdatedforthe
21stCentury,September2003.
[16] Web-to-Host:ReducingtheTotalCostofOwnership,TheTollyGroup,
May2000.
[17] Helen J. Wang, Yu Chen, John Platt, Ruyun Zhang, and Y. M. Wang.
PeerPressure,AStatisticalMethodtowardsAutomaticTroubleshooting.
Technical Report MSR-TR-2003-80, Microsoft Research, Redmond,
WA,Nov2003.
[18] Helen J. Wang, Yih-Chun Hu, Chun Yuan, Zheng Zhang, and Yi-Min
Wang. Friends Troubleshooting Network: Towards Privacy-Preserving,
Automatic Troubleshooting. In Proceedings of the 3rd International
WorkshoponPeer-to-PeerSystems(IPTPS),2004.
[19] Yi-Min Wang, Chad Verbowski, John Dunagan, Yu Chen, Helen J.
Wang,ChunYuan,andZhengZhang. STRIDER:ABlack-box,State-
basedApproachtoChangeandConfigurationManagementandSupport.
InProceedingsofLISA,2003.