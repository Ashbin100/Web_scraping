One-way Isolation: An Effective Approach for
(cid:3)
Realizing Safe Execution Environments
WeiqingSun Zhenkai Liang R.Sekar V.N.Venkatakrishnany
DepartmentofComputerScience, Department ofComputerScience,
StonyBrookUniversity. UniversityofIllinoisatChicago.
fwsun,zliang,sekarg@cs.sunysb.edu venkat@cs.uic.edu
Abstract 1. Introduction
Inthispaper,wepresentanapproachforrealizingasafeex- 1.1. MotivatingApplications
ecutionenvironment(SEE)thatenablesusersto“tryout”
Systemadministratorsanddesktopusersoftenencounter
new software (or configuration changes to existing soft-
situations where they need to experiment with potentially
ware)withoutthefearofdamagingthesysteminanyman-
unsafe software or system changes. A high-fidelity safe
ner. A key property of our SEE is that it faithfully repro-
execution environment (SEE) that can support these activ-
ducesthebehaviorofapplications,asiftheywererunning
ities, while protectingthesystem frompotentially harmful
nativelyontheunderlyinghostoperatingsystem.Thisisac-
effects,willbeofsignificantvaluetotheseusers. Applica-
complishedviaone-wayisolation:processesrunningwithin
tionsofsuchSEEinclude:
theSEEaregivenread-accesstotheenvironmentprovided
bythehostOS,buttheirwriteoperationsarepreventedfrom (cid:15) Running untrusted software. Often, users execute
escapingoutsidetheSEE.Asaresult,SEEprocessescannot downloadedfreeware/sharewareor mobile code. The
impactthebehaviorofhostOSprocesses,ortheintegrityof risk of damage to the user’s computer system due to
data on the host OS. Our SEE supports a wide range of untrusted code is high, yet a significant fraction of
tasks, including: study of malicious code, controlled exe- users seem to be willing to take this risk in order to
cutionofuntrustedsoftware,experimentationwithsoftware benefitfromthefunctionalityofferedbysuchcode.An
configurationchanges, testing of software patches, and so SEEcanminimizesecurityriskswithoutnegatingthe
on. It provides a convenient way for users to inspect sys- functionalitybenefitsprovidedbysuchsoftware.
temchangesmadewithintheSEE.Iftheuserdoesnotac- (cid:15) Vulnerability testing. System administrators may be
cept these changes, they can be rolled back at the click of
interestedinprobingwhetherasystemissusceptibleto
a button. Otherwise, the changes can be “committed” so
thelatestemailvirus,worm orotherattacks. Ahigh-
as to become visible outside the SEE. We provide consis-
fidelity SEE can allow them to perform such testing
tencycriteriathatensuresemanticconsistencyofthecom-
withouttheriskofcompromisingproductionsystems.
mitted results. We also develop an efficient technique for
(cid:15) Software updates/patches. Application of security
implementing the commit operation. Our implementation
patchesareroutinelydelayedinlargeenterprisesinor-
results show that most software, including fairly complex
dertoallowtimeforcompatibilityandinteroperability
server and client applications, canrun successfully within
testing. Such testing is typically done after shutting
the SEE. The approach introduces low performance over-
down production systems for extended periods, and
heads,typicallybelow10%.
hence may be scheduled for weekends and holidays.
In contrast, a high-fidelity SEE can allow testing of
updates to be performed without having to shutdown
productionsystems. Theseconcernsapplymore gen-
erallytosoftwareupgradesorinstallationsaswell.
(cid:15) System reconfiguration. Administrators may need to
reconfigure software systems, and would ideally like
to “test out” these changes before deploying them on
(cid:3)ThisresearchissupportedinpartbyanONRgrantN000140110967
production systems. This is currently accomplished
andanNSFgrantCCR-0208877.
yResearch conductedwhenthe authorwas a graduate studentin the manually,bysavingbackupcopiesofallfilesthatmay
DepartmentofComputerScience,StonyBrookUniversity.bemodifiedduringreconfiguration.AnSEEwillauto- The concept of isolation has been proposed as a way to
matethisprocess,andmoreover,avoidpitfallssuchas addresstheproblemofeffectcontainmentforcompromised
overlookingtobackupsomeofthemodifiedfiles. processesin[8,13,28]. [13]developedtheconceptofone-
way isolation as an effective means to isolate the effects
1.2. SEERequirementsandtheNeedforNewAp- ofrunningprocessesfromthepointtheyarecompromised
proach (or suspected of being compromised). They also develop
protocols for realizing one-way isolation in the context of
In order to support the kinds of applications mentioned databases and file systems. However, they only provide a
above,anSEEmustprovidethefollowingfeatures: high-leveltreatment,anddonotaddresspracticalissuesthat
(cid:15) Confinementwithoutunduerestrictionsonfunctional- ariseinimplementingsuchanapproachforCOTSapplica-
tionsrunningovercommodityOSes.
ity. The effects of process execution within an SEE
should not “escape” the SEE and become visible to Inourpreviouswork[12],weaddressedsomeoftheseis-
normal applications running outside. Otherwise, one suesanddevelopedauser-leveltoolforisolatingtheeffects
cannotruleoutthepossibilityofSEEprocessesalter- ofCOTSapplicationsontheLinuxOS.Thefocusofthatef-
ingthe operationofotherapplicationsrunningonthe fortwasonuntrustedsoftwareexecution,andonasolution
same system or elsewhere in the network. Such con- thatwasrealizedentirelyattheuserlevel. Suchasolution
finementcanbeachievedusingaccesscontrolrestric- does not require OS changes or even administrative privi-
tions, e.g., by prohibiting all operations that modify legetoinstallorusethetool. However,inordertoachieve
filesoraccessthenetwork. However,suchrestrictions acompletelyuser-landsolution,[12]compromisesonper-
willpreventmostapplicationsfromexecutingsuccess- formanceas wellasgenerality. In particular,theapproach
fullywithinanSEE. suffersfromhighoverheadsthatcanbeover100%insome
(cid:15) Accurate environment reproduction. For SEEs to be instances. Moreover, isolation semantics cannot be faith-
usefulintheaboveapplications,itisessentialthatthe fullyreproducedfor operationsthatconcernfilemeta-data
behavior of applications be identical, whether or not such as permissionsand ownership. For directories, isola-
theyoperatewithintheSEE.Sincethebehaviorofan tion is achieved using an ad-hoc approach that is hard to
applicationisdeterminedbyitsenvironment(contents implementandprovidessemanticsthatisinconsistentwith
of configuration or data files, executables, libraries, that offiles. Finally, no systematic solution to the commit
etc.),itisnecessarytoreproduce,asaccuratelyaspos- problem is provided. The approach developed in this pa-
sible,thesameenvironmentwithintheSEEastheen- peraddressesallthesedrawbacks. Moreover,itgeneralizes
vironmentthatexistsoutsideSEE. the approach so that isolation can be providedfor non-file
(cid:15) Ability to commit results. In many of the above ap- operations,e.g.,certainclassesofnetworkaccesses.
plications,includinguntrustedsoftwareexecutionand
software or system updates, a user would like to re- 1.3. ApproachOverview
taintheresultsofactivitiesthatweresuccessful.Thus,
The SEEs described in this paper are based on the con-
the SEE must provide a mechanism to “commit” the
ceptofone-wayisolation. WhereasVMsgenerallyemploy
results of activities that took place within it. A suc-
two-wayisolationbetweenthehostenvironmentandtheen-
cessfulcommitshouldhavethesameeffectasifallof
vironmentthatexistswithinaVM,one-wayisolationmakes
theoperationscarriedoutwithintheSEEactuallytook
thehostenvironmentvisiblewithintheSEE.Inthissense,
placeoutside.
theSEEprocessescan(anddo)seetheenvironmentoftheir
Most existingapproaches for safe executiondo notsatisfy host system, and hence accurate reproduction of environ-
these requirements. For instance, sandboxing techniques ment is assured. However, the effects of SEE processes
achieveconfinement,butdosobyseverelyrestrictingfunc- areisolatedfromoutsideapplications,therebysatisfyingthe
tionality. Virtual machines (VMs) and related approaches confinementrequirement.
[3,36]relaxaccessrestrictions,butdonotofferanysupport
Inourapproach,anSEEiscreatedtorunaprocesswhose
forenvironmentreproductionorcommitting. Fileversion-
effectsaretobeshieldedfromtherestofthesystem. One
ingsystems[26, 40, 39, 16, 5, 23, 25, 31, 19] can provide
or more such SEEs may be active on the host OS. Any
rollbackcapabilities,buttheydon’tprovideamechanismto
children created by processes within an SEE will also be
discriminate among changes made by different processes,
confined to that SEE, and will share the same consistent
andhencecannotsupportselectiverollbackoftheeffectsof
view of system state. Typically, a user will start a com-
untrustedprocessexecution.
mandshellwithinanewSEE,andusethisshelltocarryout
taskssuchasrunninguntrustedprograms.Shemayalsorunhelperapplications,suchasimageordocumentviewers,or 2. DesignofSecure ExecutionEnvironment
arbitrary utility applications to examine the resulting sys-
temstate. Finally,ifshewantstoacceptthechangesmade ThetwofunctionsofourSEEare(a)toprovideone-way
within the SEE, she can commit the results. The commit isolation, and (b) to support commitoperation. These two
processcauses thesystemstate, asviewedinsidetheSEE, aspectsofSEEaredescribedinmoredetailbelow.
tobemergedwiththestateofthehostOS.Wepresentcon-
sistencycriteriaaimedatensuringthecorrectnessofthere- 2.1. AchievingOne-wayIsolation
sultsofthecommitprocess.
The primary goal of isolation in our approach is effect
Our approach is implemented using interposition at the containment: preventingtheeffectsofSEEprocessesfrom
system call and virtual file system layers, and hence does affecting the operation (or outcome) of processes execut-
not require any changes to applications that run inside the ingoutsidetheSEE1.Thismeansthatany“read”operation
SEE.Evencomplextaskssuchascompilationandinstalla- (i.e.,onethatqueriesthesystemstatebutdoesnotmodify
tionoflargesoftwarepackages, andexecutionof complex it)maybeperformedbySEEprocesses. Italsomeansthat
client and server applications can be carried out success- “write”operationsshouldnotbepermittedtoaffectsystem
fully within the SEE. This is because our approach places state. There are two options in this context: one is to re-
few restrictions on operations performed by most applica- stricttheoperation,i.e.,disallowitsexecution. Thesecond
tions. In particular, no restrictions are placed on file ac- optionistoredirecttheoperationtoadifferentresourcethat
cesses,exceptinthecaseofaccesstospecialdevices. Net- isinvisibleoutsidetheSEE.Onceawriteoperationisredi-
workoperationsthatcorrespondto“read”operations,such rected,itisimportantthatsubsequentreadoperationsonthe
as querying a nameserver, can be permitted as well. Net- sameresourceberedirectedaswell.
workaccessesthatcorrespondto“write”operationscanbe
By restriction, we mean that an operation is prevented
permitted when the target of the communication satisfies
fromexecution. Anerrorcodemaybereturnedtothepro-
oneofthefollowingconditions:
cess,ortheoperationmaybesilentlysuppressedandasuc-
(cid:15) itisanapplicationrunningwithinanSEE,possiblyon cesscodereturned. Ineithercase,restrictioniseasytoim-
adifferenthost,or plement — we need only know the set of operations that
(cid:15) itisaspecial-purpose“proxy”thatislayeredbetween can potentially alter system state. The main drawback of
theapplicationandtheserviceaccessedbyit,andcan restrictionisthatitwilllikelypreventapplicationsfromex-
bufferthewriteactionsuntilcommittime. ecuting successfully. For instance, if a program writes a
file,itexpectstogetbackthesamecontentatalaterpoint
Thekeychallengeinimplementingsuchproxiesisthateven
intheprogramwhenthefileisread. However,anapproach
though they buffer certain operations, they should provide
based on restriction cannot do this, and hence most non-
a consistent view of system state to the SEE applications.
trivial applications will fail to run successfully under such
Specifically,ifanSEEprocess“writes”tosuchaproxyand
restriction. For this reason, restriction is a choice of last
subsequentlyperformsa“read”operation,theproxyshould
resortinourapproach.
returntheresultthatwouldhavebeenreturnedifthewrite
operationhadactuallybeencarriedout. Byredirection,wemeanthatanyoperationthatmodifies
some component of the host environment is instead redi-
rectedtoa differentcomponentthat isnotaccessed bythe
1.4. PaperOrganization
hostOSprocesses.Forinstance,whenanSEEprocesstries
Therestof thispaperisorganizedasfollows. Section2 to modifya file, a copy ofthe original filemay be created
presentsanoverviewofourapproach. Section3describes in a “private”area of the file system, andthe modification
our file system proxy, namely, the Isolation File System operation redirected to this copy. Redirection is intended
(IFS).Section4discussesthecriteriaandtheprocedurefor to provide a consistent view of system state to a process,
committingchangesmadetothefilesystem. Otheraspects therebyallowingittorunsuccessfully.
ofour approacharediscussedinSection5. Section6pro-
Redirection can be static or dynamic. Static redirection
vides an evaluation of the functionality as well as the per-
requires the source andtarget objects to be specified man-
formance of our approach. Related work is discussed in
ually. It is ideal for networkoperations. Forinstance, one
Section7,followedbyconcludingremarksinSection8.
maystaticallyspecifythat operations to bind a socketto a
port p should be redirected to an alternate port p0. Simi-
1Notethatweareinterestedinconfinement[11]fromthepointofview
ofsystemintegrity, ratherthanconfidentiality. Assuch,wedonotdeal
withwithissuessuchascovertchannels.larly, one may specify that operations to connect to a port 2.2. CommittingChanges
p on host h should be redirected to host h0 (which may
be the same as h) and port p0. By using such redirection, There are two key challenges in committing: one is to
ensure consistency of the resulting system state; the other
we can build distributed SEEs, where processes executing
isefficiency—toreducethespace andtime overheadsfor
withinSEEsonmultiplehostscancommunicatewitheach
logging and re-running of operations to a level that pro-
other.SuchdistributedSEEsareparticularlyusefulforsafe
vides good performance. Below, we provide a high-level
execution of a network server application, whose testing
overviewoftheissuesinvolvedincommit.
would typically require accesses by nonlocal client appli-
cations. (Note, however, that this approach for distributed The key problem in terms of consistency is that a re-
SEEsworksonlywhenallcross-SEEcommunicationstake source accessed within the SEE may have been indepen-
placedirectlybetweentheSEEprocesses,andnotthrough dently accessed outside of the SEE. This corresponds to
othermeans,e.g.,indirectcommunicationthroughashared concurrent access on the same resource by multiple pro-
NFSdirectory.) cesses, some within SEE and some outside. One possible
consistency criterion is the serializability criterion used in
Static redirection becomes infeasible if the number of
databases. Otherconsistencycriteriamaybeappropriateas
possible targets is too large to be enumerated in advance.
well,e.g.,forsometextfiles,itmaybeacceptabletomerge
For instance, it is hard to predict the files that may be ac-
the changes madewithin the SEE with changes made out-
cessed by an arbitrary application. Moreover, there are
side,aslongasthechangesinvolvedisjointportionsofthe
dependencies among operations on different file objects,
file.Adetaileddiscussionoftheissuesinvolvedindefining
e.g., an operation to create a file has the indirect effect of
commitcriteriaispresentedinSection4.1.
changing the contents of the directory in which the file is
created. Simply redirecting an access on the file, without There may be instances where the commit criteria may
correspondinglymodifyingaccessesofthedirectory,won’t notbesatisfied. Inthiscontext,wemakethefollowingob-
work. Tohandlesuchcomplexities,ourapproachsupports servations:
dynamicredirection,wherethetargetforredirectionisde-
(cid:15) Thereisnowaytoguaranteethatresultscanbecom-
termined automatically during the execution of SEE pro-
mitted automatically and produce consistent system
cesses. However, the possibility of hidden dependencies
state, unless we are willing to delay or disallow exe-
meansthattheimplementationofdynamicredirectionmay
cutionofsomeapplicationsonthehostOS.Introduc-
haveto be differentfor differentkindsof objects. Specifi-
ingrestrictionsordelaysonhostOSprocesseswillde-
cally, in our SEE architecture, dynamic redirection is sup-
featthepurposeofSEE,whichistoshieldthehostOS
ported by service-specific proxies. Currently, there is a
fromtheactionsofSEEprocesses. Hencethisoption
proxyforfileservice,andweenvisionproxiesforotherser-
isnotconsideredinourapproach.
vicessuchasWWWoremail.
(cid:15) Iftheresultsarenotcommitted,thenthesystemstate
In our current implementation, system call interposition
isunchangedbytaskscarriedoutwithintheSEE.This
is usedto implement restrictionand static redirection. We
means that these tasks can be rerun, and will most
restrictallmodificationoperationsotherthanthosethatin-
likely have the same desired effect. Hopefully, the
volve the file system and the network. In the case of file
conflictsweretheresultsofinfrequentactivitiesonthe
operations,allaccessestonormalfilesarepermitted,butac-
hostOS,andwon’tberepeatedthistime,thusenabling
cesses to raw devices and special purpose operations such
theresultstobecommitted.
as mounting file systems are disallowed. In terms of net-
(cid:15) If retry isn’tan option, the user canmanually resolve
work operations, we permit any network access for which
conflicts, deciding how the files involved in the con-
static redirection has been set up. In addition, accesses to
flict should be merged. In this case, the commit cri-
thenameserverandX-serverarepermitted.(Inreality,SEE
teria identifies the files and operations where manual
processesshouldnotgetunrestrictedaccesstoX-server,but
conflictresolutionisnecessary.
ourcurrentimplementationprovidesnomechanismtomon-
itorandenforcepoliciesonaccesstoX-server.) Asafinalpoint,wenotethatifaprocesswithinanSEE
communicatedwithanotherprocessexecutingwithinadif-
Dynamicredirectioniscurrentlysupportedinourimple-
ferent SEE, then all such communicatingSEEs need to be
mentationforonlyfilesystemaccesses. Itisrealizedusing
committedasiftheywerepartofasingledistributedtrans-
aproxycalledtheIsolationFileSystem(IFS),whichisde-
action.Currently,ourimplementationdoesnotsupportdis-
scribedindetailinSection3.
tributedcommits. Ourapproachforcommittingtheresults
ofoperationsperformedwithinasingleSEEisdescribedin
Section4.3. IsolationFileSystem (IFS) 3.2. DesignDetails
3.1. High-LevelOverview The description in the previoussection presented a sim-
plifiedviewof thefile system, wherethe file system has a
Inprinciple, a file system can be viewed asa tree struc- tree-structureandconsistsofonlyplainfilesanddirectories.
ture. Internalnodesinthistreecorrespondtodirectoriesor Inreality,UNIXfilesystemshaveaDAG(directedacyclic
files,whereastheleavescorrespondtodiskblocksholding graph)structure due to the presence of hardlinks. In addi-
file data. The children of directory nodes may themselves tion, file systems contain other types of objects, including
bedirectoriesorfiles.Thechildrenoffilenodeswillbedisk symboliclinksandspecialdevicefiles. Asmentionedear-
blocksthateithercontainfiledata,orpointerstofiledata. lier,IFSdoesnotsupportspecialdevicefiles.Anexception
This view of file system as a tree suggests an intuitive tothisruleismadeforpty’sandtty’s,aswellaspseudo
waytorealizeone-wayisolationsemanticsforanentirefile deviceslike /dev/zero, /dev/null, etc. Inthese cases,
system: whenanodeintheoriginalfilesystemisaboutto accessisredirectedtothecorrespondingdevicefilesonthe
be modified, a copy of this node, as well as all its ances- main file system. A symbolic link is simply a plain file,
tors, is createdin a “private”area of the file system called exceptthat the content ofthe fileis interpretedas the path
temporarystorage. Thewriteoperation,aswellasallother name of another file system object. For this reason, they
subsequent operations on this node, are then redirected to don’tneed any special treatment. Thus, we need only de-
thiscopy. scribehowIFSdealswithhardlinks(andtheDAGstructure
thatcanresultduetotheiruse.)
In essence, we are realizing isolation using copy-on-
write. Althoughthecopy-on-writetechniquehasbeenused When the file system is viewed as a DAG, its internal
extensivelyinthecontextofplainfiles,ithasnotbeenstud- nodescorrespondto directories, andtheleavescorrespond
iedin thecontextofdirectories. RealizingIFSrequiresus tofiles. Asmentionedearlier,theIFSdoesnotlookintothe
to supportcopy-on-writefor the entirefile system, includ- internal structure of files, and hence we treat them as leaf
ingdirectoriesandplainfiles. objects in the DAG. All nodes in the DAG are identified
by a unique identifier called the Inode number. (The in-
In our approach, copy-on-write on directories is sup-
odenumber remainsunique across deletion and recreation
ported using a shallow-copy operation, i.e., the directory
of file objects.) The edges in the DAG are links, each of
itselfiscopied,butitsentriescontinuetopointtoobjectsin
whichisidentifiedbyanameandtheInodenumberofthe
theoriginalfilesystem. Inprinciple,onecanuseshallow-
objectpointedbythelink. This distinctionbetweennodes
copyonfilesaswell,thusavoidingtheoverheadofcopying
andlinksinthefilesystemplaysacriticalroleineveryas-
diskblocksthatmaynotbechangedwithintheIFS.How-
pectofIFSdesignandimplementation.
ever,theinternalorganizationoffilesisspecifictoparticu-
larfilesystemimplementations,whereaswewanttomake Figure1illustratestheoperationofIFS.Thebottomlayer
IFStobefile-systemindependent.Hencefilesarecopiedin corresponds to a host OS file system. The middle layer is
theirentirety. the temporary storage to hold modified copies of files and
directories.ThetoplayershowstheviewwithinIFS,which
IFSisimplementedbyinterposingfilesystemoperations
isacombinationoftheviewsinthebottomtwolayers.Note
withintheOSkernelattheVirtualFileSystem(VFS)layer.
thattheorderingofthebottomtwolayersinthefigureissig-
VFS is a common abstraction in Unix across different file
nificant: theviewcontainedinthetemporarystorageover-
systems, and every file system request goes through this
ridestheviewprovidedbythemainfilesystem.
layer. Hence extensions to functionality provided at VFS
layercanbeapplieduniformlyandtransparentlytoallun- Thetemporarystorageareaisalsoknownas“privatestor-
derlyingfilesystemssuchasext2,ext3andNFS. age area” to signify that fact that it is not to be accessed
by the host OS. In order to support efficient movementof
WerealizeVFSlayerinterpositionusingthestackablefile
files between the two layers, which is necessary to imple-
systemapproachdescribedin[37]. Ineffect,thisapproach
ment the commit operation efficiently, it is preferable that
allowsonetorealizeanewfilesystemthatis“layered”over
the temporary storage be located on the same file system
existing file systems. Accesses to the new file system are
asthebottomlayer. (Ifthisisnotpossible,thentemporary
firstdirectedtothistoplayer,whichtheninvokestheVFS
storagecanbeonadifferentfilesystem,withthecaveatthat
operationsprovidedbythelowerlayer. Inthisway,thenew
committingwillrequirefilecopyoperationsasopposedto
filesystemextendsthefunctionalityofexistingfilesystems
renames.) Henceforth, we will use the term main file sys-
withouttheneedtodealwithfile-system-specificdetails.
temto denotethe bottom layerandIFS-temporarystorage
(orsimply“temporarystorage”)torefertothemiddlelayer./(cid:13) /(cid:13) /(cid:13)
Combined View(cid:13) a(cid:13) b(cid:13) a(cid:13) b(cid:13) a(cid:13) b(cid:13)
c(cid:13) d(cid:13) c(cid:13) d(cid:13) c(cid:13) d(cid:13) e(cid:13)
/(cid:13) /(cid:13)
Temporary(cid:13)
a(cid:13) a(cid:13)
Storage(cid:13)
c(cid:13) c(cid:13) d(cid:13) e(cid:13)
/(cid:13) /(cid:13) /(cid:13)
Main File System(cid:13) a(cid:13) b(cid:13) a(cid:13) b(cid:13) a(cid:13) b(cid:13)
c(cid:13) d(cid:13) c(cid:13) d(cid:13) c(cid:13) d(cid:13)
1. Initial state(cid:13) 2. After modifying file /a/c(cid:13) 3. After creating file /a/e(cid:13)
IFS file object(cid:13) Stub file object(cid:13) Full file object(cid:13)
Figure1.IllustrationofIFSLayoutonModificationOperations
In addition to storing private copies of files modified The copy-on-write operation on directories is imple-
withintheSEEinthetemporarystorage,theIFSlayeralso mented in a manner similar to that of files. Specifically,
containsa table that maintainsadditional informationnec- a stub version of the directory’s ancestor nodes are first
essarytocorrectlysupportIFSoperation.Thistable,which created in temporary storage. Next, the directory itself is
wecallasinodetable, isindexedbytheinode numbersof copied. Thiscopyoperationisashallowcopyoperation,in
filesystemobjects.Ithasafieldindicatingthatwhetherthe thatonlyastubversionoftheobjectslistedinthedirectory
inodecorrespondsanobjectintemporarystorage(temp)or arecreated.
an object the main file system (main). Further, if it is an
We illustrate the operation of IFS using the example
objectin the temporary storage, the flag indicates whether
shown in Figure 1. Suppose that initially (i.e., step 1 in
it is a stub object (stub). A stub object is simply a refer-
thisfigure),thereisadirectoryaandafilebundertheroot
encetotheversionofthesameobjectstoredinthemainfile
directoryinthemainfilesystem, withfilescanddwithin
system. In addition, auxiliary information needed for the
directory a. Step 2 of this figure illustrates the result of
commitoperationisalsopresent,asdescribedinSection4.
modifyingthefile/a/cwithintheSEE.Thecopy-on-write
InourIFSimplementation,copy-on-writeofregularfiles operationon/a/cfirstcreatesastubversionoftheancestor
isimplementedusingnormalfilecopyoperations.Inpartic- directories,namely,/and/a. Thenthefile/a/ciscopied
ular,whenaplainfilef ismodifiedforthefirsttimewithin from the main file system to the temporary storage. Sub-
theSEE,astubversionofallitsancestordirectoriesiscre- sequent accesses are redirected to this copy in temporary
ated in temporary storage (if they are not already there). storage.
Thenthefilef iscopiedintotemporarystorage. Fromthis
ThethirdstepofFigure1showstheresultofanoperation
pointon,allreferencestotheoriginalfilewillberedirected
thatcreatesafile/a/ewithintheSEE.Sincethischanges
tothiscopyintemporarystorage.
thedirectorya byaddinganotherfileto it, a shallowcopy
Aftercreatingacopyoff,wecreateanentryintheinode of the directory is made. Next, the file e is createdwithin
tablecorrespondingtotheoriginalversionoff onthemain the directory. The combined viewof IFS reflects all these
filesystem.Thisisdonesoastohandlehardlinkscorrectly. changes: accesses to file /a/c and /a/e are redirected to
In particular, consider a situation when there is a second the corresponding copies in the temporary storage, while
hard link to the same file object, and this link has not yet accessestofile/a/dwillstillgototheversioninthemain
been accessed within IFS. When this link is subsequently filesystem.
accessed,itwillbereferencingafileinthemainfilesystem.
Itisnecessarytoredirectthisreferencetothecopyoff in
temporary storage, or otherwise, the two links within IFS
thatoriginallyreferredtothesamefileobjectwillnowrefer
todifferentobjects,therebyleadingtoinconsistencies.4. ImplementationofIFSCommit Operation 4.1. CommitCriteria
AttheendofSEEexecution,theusermaydecideeither The commit criteria is a set of rules which determine
to discard the resultsor committhem. In the former case, whethertheresultsofchangesmadewithinanSEEcanbe
thecontentsofIFSaredestroyed,whichmeansthatwesim- committed automatically, and lead to a consistent file sys-
ply delete the contents of temporary storage and leave the tem state. Since the problem of consistency and commit-
contentsof the main file system “as is.” In the latter case, tinghasbeenstudiedextensivelyinthecontextofdatabase
thecontentsofthetemporarystorageneedtobe“merged” transactions, it is useful to formulate the commit problem
intothemainfilesystem. here in the terms used in databases. However, note that
there is no well-defined notion of transactions in the con-
When merging the contents of temporary storage and
text of IFS. We therefore identify the entire set of actions
main file systems, note that conflicting changes may have
that took place within SEE in isolation as a transaction T
i
taken place within and outside the IFS, e.g., the same file
and the entire set of actions that took place outside of the
may have been modified in different ways within and out-
SEE (but limited to the actions that took place during the
side the SEE. In such cases, it is unclear what the desired
lifetimeoftheSEE)asanothertransactionT .
h
merge result should be. Thus, the first problem to be ad-
dressed in implementing the commit operation is that of Thereareseveralnaturalchoicesforcommitcriteria:
identifyingcommitcriteriathatensurethatthecommitop- (cid:15) Noninterference. This requires that the actions con-
eration can be performed fully automatically (i.e., without tained in T be unaffected by the changes made in
i
anyuserinput)andisguaranteedtoproducemeaningfulre- T and vice-versa. More formally, let RS(T) and
h
sults. We describepossiblecommitcriteriain Section4.1. WS(T) denote respectively the set of all filesystem
Followingthis,wedescribeanefficientalgorithmforcom- objects read and written by a transaction T, respec-
mittingresultsinSection4.2.
tively.Then,noninterferencerequiresthat
If the commit criteria is not satisfied, then manual rec-
RS(T )\WS(T )=(cid:30)
onciliation of conflicting actions that took place inside the i h
SEE and outside will be needed. The commit criteria will
RS(T )\WS(T )=(cid:30)
h i
also identify the set of conflicting files and operations. At
thispoint,theusercandecideto: WS(T i)\WS(T h)=(cid:30)
(cid:15) abort,i.e., discardtheresultsofSEE execution. This The advantage of this criteria is that it leads to very
courseofactionwouldmakesenseiftheactivitiesper- predictable and understandable results. Its drawback
formedinsideSEEarelongerberelevant(oruseful)in isthatitistoorestrictive.Forinstance,consideracon-
thecontextofchangestothemainfilesystem. flictthatarisesduetoasinglefilefthatiswritteninT
h
(cid:15) retry, i.e., discard the results of SEE execution, cre- andreadinT i.Alsosupposethatfwasreadwithinthe
ateanewSEEenvironment,redotheactionsthatwere SEEafterthetimeofthelastmodificationoperationon
just performed within the SEE, and then try to com- f inT . ThenitisclearthatT usedthemodifiedver-
h i
mitagain. Iftheconflictwereduetoactivitiesonthe sionoff initscomputation,andhenceitneednotbe
host OS that are relatively infrequent, e.g., the result aborted,yetthenoninterferencecriteriawillnotpermit
ofacronjoboractionsofotherusersthatareunlikely T i tobecommitted.
to be repeated, then the retry has a high probability (cid:15) Serializability. This criteriarequiresthat theeffectof
ofallowing a successful commit. (Note that the retry concurrenttransactionsbethesameasiftheywereex-
willlikelystartwiththesamesystemstateasthefirst ecutedinsomeserialorder,i.e.,anorderinwhichthere
timeandhencewillhavethesameneteffectasthefirst wasnointerleavingofoperationsfromdifferenttrans-
time.) actions.InthecontextofIFS,thereareonlytwopossi-
(cid:15) resolve conflicts, i.e., the user manually examinesthe bleserialorders,namely,T iT handT hT i. Serializabil-
files involved in the conflict (and their contents) and ity has been used very successfully in the context of
determinesif it is safe to commit; and if so, what the databasetransactions,soitisanaturalcandidatehere.
merged contents of the files involved in the conflict. However, its use in SEE can lead to unexpected re-
The commit criteria will identify the list of files in- sults. Forinstance,considerasituationwhereafilef
volvedintheconflictandtheassociatedoperations,but ismodifiedinT i andisdeletedinT h. Atthepointof
therestofthestepsneedtobeperformedmanually. commit,theuserwouldbelookingatthecontentsoff
withintheSEEandwouldexpectthisresulttopersist
afterthecommit,butiftheserialorderT T weretobe
i h
permitted,thenf wouldnolongerbeavailable! Evenworse,itscontentswouldnotberecoverable.Thus,se- (cid:15) AnychangesmadewithintheSEEareinvisibleonthe
rializabilitymaybetoogeneralinthecontextofSEE: main file system, so the results of operations in T
h
if results were committed automatically when T and wouldnotbechangedifallT operationsweredelayed
i i
T were serializable, then there is no guarantee that tothepointofcommit.
h
theresultingsystemstatewouldbeasexpectedbythe (cid:15) AreadoperationR(f)performedinT canbedelayed
i
useroftheSEE.
to thepoint of commitandstill be guaranteedto pro-
(cid:15) Atomicexecution of SEEactivitiesat commit time. If duce the same results, provided the target f was un-
thestateofmainfilesystemafterthecommitwereas changedbetweenthetimeRwasexecutedandthetime
ifalloftheSEEactivitiestookplaceatomicallyatthe of commit. This translates to requiring that the last
pointofcommit,thenitleadstoaveryunderstandable modificationtimeoff inthemainfilesystemprecede
behavior. Thisisbecausethecontentsofthemainfile thetimestampofthefirstreadoperationonf inT .
i
systemafterthecommitoperationwillmatchthecon- (cid:15) The results of a write operation W(f) performed in
tentsof the IFS on everyfile that was read or written
T isunaffectedbyanyreadorwriteoperationinT ,
i h
within the IFS. The atomic execution criteria (AEC)
and hence it can be delayed to commit time without
is a restriction of serializability criterion in that only
changingitssemantics.
theorderT T ispermitted,andtheorderT T ,which
h i i h
Basedontheobservations,we concludethatAECissatis-
ledtounexpectedresultsintheexampleabove,isnot
fiedif:
permitted.
theearliestread-timeofanobjectwithintheIFS
Basedontheabovediscussion,weuseAECasthecriteria
occursafterthelastmodificationtimeofthesame
for automatic commits in SEE. In all other cases, the user
objectonthemainfilesystem.
willbepresentedwithasetoffilesanddirectoriesthatvio-
latetheAEC,andtheuserwillbeaskedtoresolvethecon- Note that the latest modification time of an object on the
flict using one of the options discussed earlier (i.e., abort, main file system is given by the mtime and ctime fields
redo,ormanuallyreconcile). associatedwiththatobject.Inaddition,weneedtomaintain
Inadditiontoprovidingconsistentresults,acommitcri- theearliestread-timeofeveryobjectwithintheIFSinorder
teria should be amenable to efficient implementation. In toevaluatethiscriteria.
this context, note that we don’t have detailed information Aslightexplanationoftheabovecriteriaisusefulinthe
about the actions within T h. In particular, the UNIX file context of append operations on files. Consider a file that
systemmaintainsonlythelastreadtimeandwritetimefor is appended by an SEE process is subsequently appended
eachfilesystemobject,sothereisnowaytoobtainthelist by an outside process. Both appends look like a write op-
of all read and write actions that took place within T h, or eration,andhencetheabovecommitcriteriawouldseemto
theirrespectivetimestamps. Wecould,ofcourse,maintain indicate that it is safe to commit results. But if this were
such detailed information if we intercepted all file opera- done,theresultsoftheappendoperationperformedoutside
tions on the main file system and recorded them, but this IFSwould be lost, which is anunexpectedresult. Clearly,
conflicts with our design goal that operations of processes iftheSEEprocesswererunatthetimeofcommit,thenno
outsideSEEshouldnotbechangedinanyway.Ontheother information would have beenlost. However,this apparent
hand,sincewedointerceptallfileaccesseswithintheIFS, problem is clarified once we realize that an appendopera-
wecan(anddo) maintainmoredetailedinformationabout tion really involves a read and then a write. Once this is
the timestamps of the read and write operations that took taken into account, a conflict will be detected betweenthe
placewithintheSEE.Thus,anidealcommitcriteria,from timethefilewasreadwithinIFSandthetimeitwasmod-
an implementation perspective, will be one that leverages ified outside, thereby causing the AEC criteria to be vio-
thedetailedtimestampinformationwehaveaboutT i while lated. More generally, whenever a file is modified within
beingabletocopewiththeminimaltimestampinformation IFSwithoutcompletelyerasingitsoriginalcontents(which
wehaveaboutT h. ItturnsoutthatAECsatisfiesthiscondi- is accomplished by truncating its length to zero), we treat
tion,andhencewehavechosenthiscriteriaasthebasisfor thisasareadfollowedbyawriteoperationforthepurposes
fullyautomatedcommitsinIFS. ofcommitting,andhandletheabovesituationcorrectly.
InordertodeterminewhetherAECissatisfied,weneed
4.1.1 ImprovementstoAEC
to reasonabout the timestamps of operationsin T andT
h i
and show that their orders can be permuted so that all op- The above discussion of AEC classifies operations into
erations in T h occur before the operations in T i, and that twokinds: readandwrite. Thebenefitofsuchanapproach
thispermutationdoesnotchangethesemanticsoftheoper- is its simplicity. Its drawback is that it can raise conflicts
ations.Wemakethefollowingobservationsinthisregard:evenwhenthereisameaningfulwaytocommit. Weillus- In the second case, conflicts are again avoided since all of
tratethiswithtwoexamples: the lookups on conflicting files took place after any of the
modificationoperationsinvolvingtheminthemainfilesys-
(cid:15) System log files are appended by many processes.
tem.
Based on earlier discussion about append operations
onfiles, theAECcriteriawon’tbesatisfiedwhenever We point out that inferring operations from the state of
anSEEprocessappendsanentrye1 tothelogfileand the file system can be error-prone. For instance, it is not
anoutsideprocesssubsequentlyappendsanotherentry possible to distinguish from system state whether a file a
e2tothesamefile.Yet,weseethattheresultscaneas- wasdeletedorifitwasfirstrenamedintobandthendeleted.
ilybemergedbyappendingbothe1 ande2 tothelog For this reason, we restrict the use of this approach to log
file. files and directories. In other cases, e.g., updates of text
(cid:15) Directories close to the root of the file system are al- files,wecanusethistechniquewithexplicituserinput.
mostalwaysexaminedbySEEprocessaspartoflook-
ing up a file name in the directory tree. Thus, if any 4.2. EfficientImplementationofCommit
changes were to be made in such directories by out-
Aftermakingadecisiononwhetheritissafetocommit,
sideprocesses,itwillleadtoAECbeingviolated. Yet,
thenextstepistoapplythechangestothemainfilesystem.
weseethatanamelookupoperationdoesnotconflict
One approach in this context is to traverse the contents of
with a file creation operation unless the name being
thetemporarystorageandcopythemintothemainfilesys-
lookedupisidenticaltothefilecreated.
tem. However, this simple approach does not always pro-
These examples suggest that AEC will permit commits duceexpectedresults. Consider,forinstance,acasewhere
moreoftenifwedistinguishedamongoperationsatafiner a file a is first renamed to b and then modified. A simple
levelofgranularity,asopposedtotreatingthemasreadand traversal and copy will leave the original version of a as
write operations. However, we are constrained by the fact is, and create a new file b whose contents are the same as
thatwedon’thaveacompleterecordoftheoperationsex- inthetemporarystorage. Thecorrectresult,whichwillbe
ecutedbyoutsideprocesses. Therefore,ourapproachisto obtained if we redo all the (write) operations at the point
try to infer the operations by looking at the content of the of commit, will leave the system without the file a. Thus,
files. Inparticular,letf o denotethe(original)contentofa thesimpleapproachforstate-basedcommitdoesnotwork
filesystemobjectatthepointitwascopiedintotemporary correctly.
storage, and f and f denote the content of the same file
h i Theaboveexamplemotivatesalog-basedsolution:main-
inthemainfilesystemandtheIFSatthepointofcommit.
tain a complete log of all successful modifications opera-
Wecanthencomputethedifference(cid:14)f betweenf andf ,
h o h tionsthatwereperformedwithintheSEE,andreplaythem
andthedifference(cid:14)f betweenf andf . Fromthesediffer-
i o i on the main file system at the point of commit. This ap-
ences,wecantrytoinferthechangesthatweremadewithin
proach has the benefit of being simple and being correct
andoutsideSEE.Forinstance,ifboth(cid:14)f and(cid:14)f consistof
h i in terms of preserving the AEC semantics. However, its
additionstotheendofthefile,wecaninferthatappendop-
drawbackisthatitisinefficient,bothintermsofspaceand
erations took place, and we can apply these differences to
time.Intheworstcase,thestorageoverheadcanbearbitrar-
f .
o ily higher than an approach that uses state-based commit-
In the case of directories, the situation is a bit simpler. ting. Forinstance,consideranapplicationthatcreatesand
Duetothenatureofdirectoryoperations,(cid:14)f willconsistof deletes many (temporary) files. The state-based approach
h
file(or subdirectory)creation anddeletion operations. Let will need to store very few files in temporary storage, but
F denote the set of files created or deleted in (cid:14)f, and let a log-based approach will need to store all the write op-
h h
F bethesetofnamesinthisdirectorythatwerelookedup erations that were performed, including those on files that
i
inT . Thisinformation, aswellasthetime offirstlookup were subsequentlydeleted. Moreover,redoing the logcan
i
oneachofthesenames,aremaintainedwithintheIFS.Let be substantially more expensive than state-based commit,
F = F \F . Now,wecanseethattheAECcriteriawill since the latter can exploit rename operations to avoid file
c h i
besatisfiedifeitheroneofthefollowingconditionshold: copiesaltogether.
(cid:15) F =(cid:30),or The above discussion brings forth the complementary
c
(cid:15) themodificationtimeoff precedesallofthelookup benefits of the two approaches. The first approach makes
o
use of the accumulated modification results on file system
timesonanyofthefilesinF .
c
objects,thusavoidingtheexpenseassociatedwiththemain-
Inthefirstcase,noneofthenameslookedup(i.e.,“read”) tenanceandredoingoflogs.Thesecondapproach,bymain-
withintheSEEweremodifiedoutside,thussatisfyingAEC. taininglogs,isabletohandlesubtlecasesinvolvingfilere-names. Inourimplementationofthecommitoperation,we createoperation.Anrmlinkoperationcancelsoutapreced-
combinethebenefitsofboth. ingaddlinkwiththesameoperands.
Werefertoourapproachasstate-basedcommit.Forfiles, In addition to removing redundant operations from the
thecommitactionusedinourapproachinvolvessimplyre- logs, we also reorder operations that do not interfere with
naming(orcopying)thefileintothemainfilesystem. For eachotherinordertofurthersimplifythelog. Inthiscon-
operationsrelatedtolinks,itrecordsaminimalsetoflink- text,notethattwovalidaddlinkoperationsinthelogassoci-
related operations that captures the set of links associated atedwithanyfilesystemobjectareindependent. Similarly,
with each file system object. In this sense, one can think anyaddlinkoperationontheobjectisindependentofanrm-
oftheapproachasmaintaining“condensed”logs,wherere- link operation. (Both these statements are true only when
dundant information is pruned away. For instance, there weassume thatoperationsthat aresupercededorcanceled
is no need to remember operations on a file if it is subse- byothershavealreadybeenremovedfromthelog.)
quently deleted. Similarly, if a file is renamed twice, then
Basedonthisdiscussion,wecanseethatacondensedlog
itwouldbeenoughtoremembertheneteffectofthesetwo
associatedwithafilesystemobjectcanconsistofoperations
renames. Toidentifysuchredundanciesefficiently,ourap-
inthefollowingorder:
proachpartitionsthelogsbasedontheobjectstowhichthey
apply. This log information is kept in the inode table de- (cid:15) zerooronecreateoperation. Sincethefilesystemob-
scribedearlier. jectdoesnotexistbeforecreation,thismustbethefirst
operationinthelog,ifitexists.
Operations that modify the contents of a file or change
(cid:15) zeroormorermlinkoperations.Notethatmultiplerm-
metadata(suchaspermissions)onanyfilesystemobjectare
link operations are possible if the file system object
notmaintainedinthelogs,butsimplyappliedtotheobject.
wasoriginallyreferencedbymultiplelinks.Moreover,
Ineffect,thestateoftheobjectcapturestheneteffectofall
the parent directories corresponding to these rmlink
such operations, so there is no need to maintain them in a
operationsmustallhaveexistedatthetimeofcreation
log. Thus,onlyinformationaboutfileordirectorycreation
ofSEE,orotherwiseanaddlinkoperation(tolinkthis
anddeletion,andthosethatconcernadditionorremovalof
objecttotheparentdirectory)musthavebeenexecuted
linksaremaintainedinthelog. Inaddition,tosimplifythe
before the rmlink. In that case, the addlink and rm-
implementation,weseparatetheeffectsofcreatingordelet-
link operations would have cancelled each other out
ingfilesystemobjectsfromtheeffectofaddingordeleting
andhencewon’tbepresentinthecondensedlog.
links. Thismeansthatthecreationofafilewouldberepre-
sentedinourlogsbytwooperations: onetocreatethefile (cid:15) zero or more addlink operations. Note that multiple
object, and another to link it to the directory in which the addlink operations are possible if the object is being
objectiscreated. Similarly,arenameoperationissplitinto referenced by multiple links. Also, there must be at
anoperationto adda link, anothertoremovea link, anda leastoneaddlinkoperationifthefirstoperationinthe
third (if applicable) to delete the file originally referenced logisacreateoperation.
by the new name. As in previous sections, file objects in- (cid:15) zerooronedelete operation. Notethat whena delete
volvedintheseoperationsareidentifiedbyinodenumbers
operationispresent,therewon’tbeanyaddlinkopera-
ratherthanpathnames.
tions,buttheremaybeoneormorermlinkoperations
Specifically,thelogcontainsoneofthefollowingopera- inthelog.
tions:
Giventhecondensedlogsmaintainedwiththeobjectsinthe
(cid:15) create and delete operations denote respectively the inode table, it seemsstraightforwardto carry outthe com-
creationofafileoradirectory,andareassociatedwith mitoperation. Theonlycatchisthatweonlyhavetherel-
thecreatedfilesystemobject. ative ordering of operations involving a single file system
object,butlostinformationabouttheglobalorderingofop-
(cid:15) addlinkandrmlinkoperationsdenote respectivelythe
erationsacrossdifferentobjects.Thisraisesthequestionas
additionanddeletionofalinkfromadirectorytoafile
towhetherthemeaningsoftheseoperationsmaychangeas
system object. These operations are associated with
a result. In this context, we make the following observa-
thefilesystemobjectthatisthetargetofthelink,and
tions:
havetwooperands.Thefirstistheinodenumberofthe
parentdirectoryandthesecondisthenameassociated (cid:15) Creation and deletion operations do not have any de-
withthelink. pendencies across objects. Hence the loss of global
orderingregardingtheseoperationsdoesnotaffectthe
The effect of some of these operations is supercededby
semanticsoftheseoperations.
other operations, in which case only latter operations are
maintained. For instance, a delete operation supercedes a (cid:15) Rmlinkoperationdependsupontheexistenceofparentdirectory,butnothingelse. Thismeansthataslongas Implementing Restriction at System Call Layer. The
itisperformedpriortothedeletionofparentdirectory, actionsofSEEprocessesareregulatedbyakernel-resident
its meaning will be the same as is it was executed in policy enforcement engine that operates using system call
theglobalorderinwhichitwasexecutedoriginally. interposition. This enforcement engine generally enforces
(cid:15) Addlinkoperationdependsonthecreationofthepar- thefollowingpoliciesinordertorealizeSEEs:
entdirectory(i.e., thedirectoryinwhichthelinkwill (cid:15) File accesses. Ensure that SEE processes can access
reside) and the target object. Moreover, an addlink only the files within the IFS. Access to device spe-
operation involving a given parent directory and link cialfilesarenotallowed,exceptfor“harmless”devices
namehasadependencyonanyotherrmlinkoperation liketty’sand/dev/null.
involving the same parent directory and link names.
(cid:15) Network access. Network accesses for which an ex-
This is because the addlink operation cannot be per-
plicit (static) redirection has been set up are allowed.
formedif a link with the same name is presentin the
The redirection may be to another process that exe-
parent directory, and the execution of rmlink affects
cuteswithinadifferentSEE,ortoanintelligentproxy
whethersuchalinkispresent. Thus,theeffectofad-
for a network service. (Note that network file ac-
dlinkoperationswillbepreservedaslongasanypar-
cessoperationsdonotfallinthiscategory—theyare
entdirectorycreation,aswellasrelevantrmlinkoper-
treatedasfileoperations.)
ationsareperformedbefore.
(cid:15) Interprocesscommunication(IPC).IPCoperationsare
Among operations that have dependency, one of the two
allowed among the processes within the same SEE.
possibleordersisallowable. Forinstance,anrmlinkopera-
However, no IPC may take place between SEE and
tioncannotprecedetheexistenceofeithertheparentdirec-
non-SEE processes. An exception to this rule is cur-
toryorthetargetofthelink.Similarly,anaddlinkoperation
rently made for X-server access. (To be safe, we
cannot precede an rmlink operation with the same parent
shouldrestrict X-serveraccesses madebySEE appli-
directoryand name components. (Recall that we have de-
cations so that they don’t interfere with X-operations
composed a rename operation into rmlink (if needed), ad-
made by non-SEE applications. However, our imple-
dlinkandanobjectdelete(ifneeded)operations,soitcan-
mentationdoesnotcurrentlyhavetheabilitytoenforce
not happen that an addlink operation is invoked on a par-
policiesatthelevelofX-requests.)
ent directory when there is already another link with the
(cid:15) Signals and process control. A numberof operations
samenameinthatdirectory.) Thismeansthateventhough
relatedto processcontrol, such as sending of signals,
the global ordering on operations has been lost, it can be
are restricted so that a process inside an SEE cannot
reconstructed. Our approach is to traverse the file system
interferewiththeoperationofoutsideprocesses.
within the temporary storage, and combine the condensed
logs while respecting the above constraints, and then exe- (cid:15) Miscellaneous “safe” operations. Most system calls
cutetheminordertoimplementthecommitstep. thatquerysystemstate(timersandclocks,filesystem
statistics, memory usage, etc.) are permitted within
AtomicCommits. Asmentionedbefore, thecommittingof
the SEE. In addition, operations that modify process-
modificationsshouldbedoneatomicallyinordertoguaran-
specificresourcessuchastimersarealsopermitted.
tee file system consistency. The natural way to do atomic
(cid:15) Privilegedoperations. Anumberofprivilegedopera-
operations is through file-locking: to prevent access to all
tions,suchasmountingfilesystems,changingprocess
thefilesystem objectsthat areto be modifiedbythe com-
schedulingalgorithms, setting system time, and load-
mittingprocess. WeuseLinuxmandatorylockstoachieve
ing/unloadingmodulesarenotpermittedwithinSEE.
this. Immediately before the committing phase, a lock is
applied to the list of to-be-committed files, so that other Note that the exact set of rules mentioned above may not
processesdonotgainaccessto these files. Onlywhenthe suitallapplications.Forinstance,onemaywanttodisallow
committingiscompletelydone,thelocksonthesefilesare all network accesses for an untrusted application, but may
released. be willing to allow some accesses (e.g, DNS and WWW)
forapplicationsthataremoretrusted. Tosupportsuchcus-
tomization, we use a high-level, expressive policy specifi-
5 Discussion
cation language called BMSL [29, 34] in our implemen-
tation. This language enables convenient specification of
Intheprevioustwosections,wediscussedaspectsofIFS,
policies that can be based on system call names as well
our filesystem proxy. In this section, we discuss how the
as arguments. The kinds of policies that can be expressed
othercomponentsofSEEfittogether,includingthecompo-
include simple access control policies, as well as policies
nentsthatsupportrestriction,networklevelredirection,and
thatdependonhistoryofpastaccessesand/orresourceus-
userinterface.age. In addition, the language allows response actions to User Interface. In this section, we describe the support
belaunchedwhenpoliciesareviolated. Forinstance,itcan providedinourimplementationforuserstomakedecisions
be specified that if a process tries to open a file f, then it regardingcommits.
should be redirected to open another file f0. Efficient en-
Typically,anSEEiscreatedwithaninteractiveshellrun-
forcementengines are generatedby a compiler from these
ning inside it. This shell is used by the user to carry out
policyspecifications. Moredetailsaboutthislanguageand
the tasks that he/she wishes to do inside the SEE. At this
itscompilercanbefoundin[34].
point,theusercanusearbitraryhelperapplicationstoana-
In our experience, we havebeen able to specify anden- lyze, compare, or check the validityof the results of these
forcepoliciesthatallowarangeofapplicationstofunction tasks.Forinstance,iftheapplicationmodifiesjusttextfiles,
withoutraisingexceptions,andtheexperimentationsection utilitieslikediffcanpointoutthedifferencesbetweenthe
describessomeofourexperiencesinthisregard. oldandnewversions.Ifdocuments,images,videooraudio
files are modified, then corresponding document or multi-
Support for Network Operations. Support for network mediaviewersmaybeused. Moregenerally,userscanem-
access can be provided while ensuring one-way isolation ploy the full range of file and multimedia utilities or cus-
semanticsinthefollowingcases: tomizedapplicationsthattheyuseeverydaytoexaminethe
(cid:15) accesstoservicesthatonlyprovidequery(andnoup- resultsofSEEexecutionanddecidewhethertocommit.
date)functionality,e.g.,accesstodomainnameservice Beforethe user makesa final decisionon committing, a
andinformationalwebsites,canbepermittedbycon- compactsummaryoffilesmodifiedwithintheSEEispro-
figuring the kernel enforcement engine so that it per- vided to the user. If the user does not accept the changes,
mitsaccesstocertainnetworkportsoncertainhosts. she can just roll them back at a click of button. If she ac-
(cid:15) communication with processes running within other cepts the changes, then the commit criteria is checked. If
SEEs can be supported by redirecting network ac- it is satisfied, then the commit operation proceeds as de-
cessesappropriately.Thisfunctionisalsoprovidedby scribedearlier. If not, theuser maystill decideto proceed
thekernelenforcementengine. to commit, but this is supported only in certain cases. For
(cid:15) accesses to any service can be allowed, if the access instance, if the whole structure ofthe file system has been
changed outside the SEE during its operation, there won’t
is made through an intelligentproxy that can provide
be a meaningful way to commit. For this reason, overrid-
isolationsemantics.
ing of commit criteria is permitted only when the conflict
Currently,ourimplementationsupportsthefirsttwocases. involvesaplainfile.
UseofdistributedSEEsprovidesaneasywaytopermitiso-
RecallthatSEEsmaybeusedtorununtrustedand/orma-
latedprocess to access anylocal server— onecan simply
licioussoftware. Insuchcases,additionalprecautionsneed
runtheserverinisolation,andredirectaccessesbytheiso-
to be taken to ensure that this software does not interfere
lated process to this isolated server. However, for servers
withthehelperapplications,subvertingthemintoproviding
thatoperateinadifferentadministrativedomain,orservers
aviewofsystemstatethatlooksacceptabletotheuser. In
thatinturnaccessseveralothernetworkfunctions,running
particular,we needto ensurethat untrustedprocesses can-
theserverinisolationmaynotalwaysbepossible. Insuch
not interfere with the operation of helper application pro-
cases,useofanintelligentproxythatpartiallyemulatesthe
cesses, or modify the executables, libraries or configura-
serverfunctionmaybeappropriate.
tionfilesusedbythem. Toensurethis, helperapplications
Intelligentproxiesmayfunctionintwoways. First,they can be run outside of the SEE, but having a read-only ac-
mayutilizeservice-specificknowledgeinfilteringrequests cess to the file system view within the IFS using a special
to ensure that only “read” operations are passed on to a path name. This approach ensures that the helper applica-
server. Second, they may provide some level of support tion gets its executable, libraries and config files from the
for “write” operations, while containing the effects within host file system. Another advantage of doing this is that
themselves, and propagating the results to the real server any modifications to the system state made by helper ap-
only at the point of commit. For instance, an email proxy plications do not clutter the user interface that reports file
maybeimplementedwhichsimplyacceptsemailfordeliv- modificationsthatwerecarriedoutwithintheSEE.(While
ery, but does not actually deliver them until commit time. it may seem that helper applications are unlikely to mod-
Naturally,suchanapproachwon’tworkinthecasewhena ify files, this is not true. For instance, running the bash
responsetoanemailisexpected. shellcausesittoupdatethe.bash historyfile;runninga
browserupdatesitshistoryandcachefiles;andsoon.)
Another limitation of our current implementation is that
itdoesnotprovidesupportforatomiccommitsacrossdis-
tributedSEEs.6. Evaluation cur significant inconveniencefor the user, thereby making
it easy for the user to always use it. In this case, the code
Inthissection,wepresentanevaluationofthefunction- willalwaysdisplaybenignbehavior.
alityandperformanceofourSEEimplementation.
Software installation. Another experiment performed a
6.1. EvaluationofFunctionality trial installation of mozilla browser. During the installa-
tion,anincorrectdirectoryname/usr/binwaschosenas
Untrusted applications. We describe two applications thelocationforinstallation,insteadofthedefaultdirectory
here:afilerenamingutilityfreewarecalledrta[33],which /usr/local/mozilla.Undernormalcircumstances,this
traverses a directory tree and renames a large number of causes Mozilla to copy a number of files into /usr/bin,
files based on rules specified on the command line, and thereby “polluting” the directory. After running the pro-
a photo album organizer freeware called picturepages gram in an SEE, the user interface indicated that a large
[30]. These applications ran successfully within our SEE. number of files (some are non-executables)were added to
Our implementation includes a GUI that summarizes files /usr/bin,whichwasnotdesirable. Abortingthisinstalla-
modifiedin theSEEso asto simplifyuser’staskofdecid- tion,werantheinstallationprogramasecondtime,thistime
ingwhetherthechangesmadebytheapplicationareaccept- with /usr/local/mozilla as the location for installa-
able. Using this GUI, we checked that the modifications tion.Attheendofinstallation,werestartedthebrowser,and
madebythese applicationswere asintended: renamingof visited severalsites to make sure that the program worked
many files, and creation of several files and/or directories. as expected. (For this experiment, the system call restric-
Wewerethenabletocommittheresultssuccessfully. tion layer was modified to allow all WWW accesses.) Fi-
nally,wecommittedtheinstallation,andfromthatpointon,
To simulate the possibility that these programs could
wewereabletousethenewinstallationofthebrowsersuc-
be malicious, we inserted an attack into picturepages
cessfully,outsideofSEE.
that causes it to append a new public key to the file
.ssh/authorized keys. (This attack would enable the
Upgradingandtestingaserver. Specifically,wewanted
author of the code to later log into the system on which
to upgrade our web server so that it can support SSL. We
picturepages was run.) Using our GUI, it was easy to
started a command shell under SEE, and used it to up-
spot the change to this file. The run was aborted, leaving
grade the apache software installation. We then ran the
thefilesysteminitsoriginalstate.
new server. To enable it to run, we used static redirection
for network operations, so that a bind operationto port 80
Maliciouscode. EmailattachmentsandWWWlinksare
was redirected to port 3080. We then ran a browser that
acommonsourceofvirusesandothermalware.Weusedan
accessed this server by connecting to this port. We veri-
SEEtoprotectsystemsfromsuchmalware.Specifically,we
fied that the newserver worked correctly. Meanwhile, the
modifiedtheMIMEtypehandlerconfigurationfileusedby
originalserverwasstillaccessibletoeveryone. Thus,SEE
Mozillasothatexecutables,aswellasviewerslaunchedto
allowedthesoftwareupgradetobetestedeasilyandconve-
processdocuments(e.g.,ghostscriptandxpdf)fetched
niently,withouthavingtoshutdowntheoriginalserver.
overtheInternet,wererunwithinSEE.Wefetchedsample
maliciousPostScriptandPerl codeoverthenetworkusing After verifying the operation of the new server, we at-
thisapproach. ThiscodewasexecutedinsidetheSEE.Us- temptedtocommittheresults. Unfortunately,thisproduced
ingourGUI,wewereabletoseethattheseprogramswere conflictsonsomefilessuchastheaccessanderrorlogfiles
performing unexpected actions, e.g., creating a huge file usedbytheserver. Wechosetoignoreupdatestosuchout-
in the user’s home directory. These actions were aborted. putfiles that were made withinthe SEE, and commitonly
Also,atthetimeofwritingthispaper,thereareseveralim- therestofthefiles,whichcouldbedonesuccessfully.
age flaw exploits (JPEG virus) that have captured the at-
tention of manyresearchers. Running such imageviewers
6.2. PerformanceEvaluation
insideanSEEwillhelpeliminatethispotentialdanger,be-
cause any malicious activity from the exploits will be iso- All performance results reported in this paper were ob-
latedfromaffectingthemainsystem. tained from a laptop running Red Hat Linux 7.3 with a
1.0GHz AMD Athlon4 processor, 512MB memory and a
Some kinds of malicious code are written to recognize
20GB, 4200rpm IDE hard disk. The primary metric was
typical sandbox environments, and if so, not display their
elapsedtime.
maliciousbehavior. This can cause a user to developtrust
in the code and then execute it outside of sandbox, when
the malcode will deliver its payload. With our approach,
wepointoutthatrunningthecodeinsideSEEdoesnotin-ghostview tar postmark Am−utils
)%(
daehrevO
fo
egatnecreP
Overhead for applications running in SEE
20 5
Isolation
Commit
15 4
3
10
2
5
1
0 0 2−clients 16−clients 30−clients
)%(
noitadargeD
fo
egatnecreP
Degradation for httpd server running in SEE
Connection Rate
Average Response Time
(a)Utilityapplications (b)Apachehttpdserver
Figure2.PerformanceResultsforProgramExecutioninSEE
Forperformanceevaluation,weconsideredthefollowing Log-basedCommit State-basedCommit
classesofexamples: Time Time Speedup
ghostview 0.03 0.03 1
(cid:15) Utility programs. In this category, we studied
tar 0.14 0.03 4.7
ghostview and tar utilities. Specifically, we per-
postmark 225 0.07 3214.3
formed ghostview on a 31M file, with no file modi-
Am-utils 16.9 0.35 48.3
ficationoperations;andtartogenerateatarballfrom
a26Mdirectory,andtheonlymodificationoperations
Figure 3.ComparisonforLog-based Commit
involved was the creation of this archive. From Fig-
and State-based Commit. Allnumbersare in
ure2,wecanseea3-12%overheadincurredforsuch
seconds.
applications during isolation phase, and a negligible
committimeoverhead.
(cid:15) Servers. We measured the performance overhead on package, which contains 7.6M lines of C code and
the Apache web server using WebStone [35], a stan- scripts. The buildingprocesscreates 152 filesand19
dard web server benchmark. We used version 2.5 of directories, as well as 6 rename and 8 setattr opera-
thisbenchmark,andranitonaseparatecomputerthat tions. Weranthisexperimentinbothoriginalfilesys-
isconnectedtotheserverthrougha100Mbpsnetwork. tem andIFS. Theresults, shownin Figure2, indicate
We ran the benchmark with two, sixteen and thirty alowisolationoverheadofunder2%andanegligible
clients. Intheexperiments,theclientsweresimulated commitoverhead.
toaccessthewebserverconcurrently. Theyrandomly
Inaddition,wealsocollectedresultsinFigure3toshow
fetch html files whose size is from 500 bytes to 5M.
theefficiencyofourstate-basedcommitapproach. Anim-
Thebenchmarkwasrunforadurationof30minutes,
plementationthatusedlogbasedcommittingwascompared
andtheresultswereaveragedacrosstensuchruns.The
with our state based committing implementation, and the
resultsareshowninFigure2.
performanceofboth of theapproacheswere compared for
(cid:15) Filesystem benchmarks. We used Postmark [9] and applications such as tar, postmark and Am-utils. The
Am-Utils[18]benchmarkstogetthebenchmarkdata resultsprojecttheadvantageofusingastatebasedcommit
forIFS. Postmarkisa filesystembenchmarktomea- approach, particularly illustrating the advantage of having
sure the performance for file system used by Internet accumulativeeffectsforfileobjects. Forinstance,thelarge
applications, such as email. In this experiment, we numberoftemporaryfilescreatedthendeletedinAm-utils
configuredPostmarktocreate500filesinafilepool, compilation and all the files created then deleted in Post-
withfilesizesrangingfrom500bytesto500KB.Ato- markexecution,arenotconsideredinthecommittingstage
talof2000filesystemoperationswereperformed. In as candidates, while log-based commit still needs to per-
total,1515fileswerecreated,1010filesread,990file form the whole set of operations (e.g. write) to all these
written,and1515filesdeleted.Thetestswererepeated files,sothereisasignificantdifferencebetweenthetwoap-
tentimes.Theresultsareasdepictedinfigure2.Over- proachesintermsofcommittime.
all, a 18% performance degradation is observed, and
commit overhead is near zero. Am-Utils is a CPU-
intensive benchmark result by building the Am-Utils7. RelatedWork breakmanybenign applications, aswellasalert malicious
applicationsveryquicklytotheeffectthattheiractionsare
Sandboxing. Sandboxing based approaches [7, 6, 1, 21, notsucceeding. Forinstance,ifawriteoperationissilently
27,22]involveobservingaprogram’sbehaviorandblock- suppressed,theapplicationcaneasilydetectthisbyreading
ing actions that may compromise the system’s security. backthecontents.
Janus[7]incorporatesaprocfilesystembasedsystemcall
interpositiontechniquefortheSolarisoperatingsystem. A Isolationapproaches. Two-wayisolationbetweenahost
more recent version has been implemented on Linux, and and guest operating system forms the basis of security in
uses a kernel module for interposition. Chakravyuha [6] virtualmachinebased approachesfor realizingSEEs. The
uses a kernel interception mechanism. MAPbox [1] is a “playground” approaches developed for Java programs in
sandboxingmechanismwherethegoalistomakethesand- [15,4]alsobelongtothisgeneralcategory—untrustedpro-
boxmoreconfigurableandusablebyprovidingatemplate grams are run on a physically isolated system, while their
forsandboxpoliciesbasedonaclassificationofapplication display is redirected to the user’s desktop. Note that the
behaviors. [21] creates the policy sandbox for programs file system on the user’s computer cannot directly be ac-
(such as web browser) by first tracking the file requests cessedontheplaygroundsystem,whichmeansthatthereis
made by the programs. This approach, however, requires two way isolation being employedin this case. Covirt [3]
a training phase, in which users need to run the programs proposesthatmostofapplicationsberuninsidevirtualma-
using“normal”inputs,sothatthepolicysandboxcancap- chineinsteadofhostmachines. Denali[36]isanothervir-
turea complete set of files accessed bythe programs. But tualmachinebasedapproachthatrunsuntrusteddistributed
inthecaseofuntrustedcode,thechoiceofsuchinputsmay serverapplications. Asoutlinedintheintroduction,allthe
notbeclear. SafeVirtualExecution(SVE)[27] usesSoft- aboveapproachessufferfromthedifficultyofenvironment
ware Dynamic Translation, a technique for modifying bi- reproduction, and also in committing the changes back to
naries as they execute, is used to implement sandboxing. theoriginalsystem. Asaresult,theydonotprovideahelp-
Systrace [22] is a sandboxing system that notifies the user fulapproachfortheapplicationsdiscussedintheintroduc-
aboutallsystemcallsthatanapplicationtriestoexecuteand tion.
thenusestheresponsefromtheusertogenerateapolicyfor
[13]wasthefirstapproachtopresentasystematicdevel-
theapplication.
opmentoftheconceptofone-wayisolationasaneffective
The main drawback of sandboxing based approaches is means to isolate the effects of running processes from the
the difficulty of policy selection, i.e, determining what ac- pointtheyarecompromised. Theydevelopedprotocolsfor
tionsarepermissibleforagivenpieceofsoftware.Notethat realizingone-wayisolationinthecontextofdatabasesand
malicious behavior may not only involve accessing unau- file systems. However, they do not present an implemen-
thorizedresources,butalsoaccessingauthorizedresources tation of their approach. As a result, they do not consider
inunauthorizedways. Forinstance,aprogramthatcreates theresearchchallengesthatariseduetothenatureofCOTS
acompressedversionofafilemayinsteadcreateafilethat applications and commodity OSes. Moreover,they do not
containsnousefuldata,whichisequivalenttodeletingthe provide a systematic treatment of issues related to consis-
originalfile. Itisunlikelythatapracticalsystemcanbede- tencyofcommittedresults.
veloped that can allow users to convenientlystate policies
In our previouswork [12], we developeda practical ap-
thatallowwriteaccesstothefilewhileensuringthatthefile
proachforsecureexecutionofuntrustedsoftwarebasedon
isreplacedwithitscompressedversion.Incontrast,anSEE
isolation. Thefocusofthiseffortwasondevelopingatool
permitsmanualinspection,aidedbyhelperapplications,to
thatcanbeeasilyinstalledandusedbyordinaryusersthat
beusedtodetermineifaprogrambehavedasexpected.This
maynothaveadministrativeaccesstoacomputer. Itisim-
approachismuchmoreflexible. Indeed,itishardtoimag-
plemented entirely at the user level, and does not require
inethattaskssuchasverifyingwhetherasoftwarepackage
anychanges to theOS kernel. Inorder to achievethis ob-
has been installed properly can even be formally specified
jective, [12] compromises on performance as well as gen-
usinganysandbox-typepolicy.
erality. In particular, the approach suffers from high over-
[28,38]extendsandboxingbyallowingoperationstobe headsthatcanbeover100%insomeinstances. Moreover,
disallowedsilently, i.e., byreturning a successcode to the isolationsemanticscannotbefaithfullyreproducedforcer-
program. The goal of the approaches is deception, i.e., tain operations that involve meta-data such as permissions
making a malicious program believe that it is succeeding andownership. Fordirectories, isolationisachievedusing
in its actions so as to observe its behavior. In our termi- an ad-hoc approach that is hard to implement and its se-
nology,theseapproachesuserestrictionratherthanredirec- mantics is inconsistent with that of file updates. Finally,
tion. As we observedearlier, use of restriction is likely to nosystematic solutionto the commitproblemis provided.The approach developed in this paper addresses all these by (potentially) compromised processes are not contained
drawbacks by implementing isolation within the kernel at within any environment, “cascading aborts” can become a
the VFS layer. Moreover, it shows how the approach can problem.Specifically,abenignprocessmayaccessthedata
begeneralizedsothatisolationcanbeprovidedfornon-file producedbyacompromisedprocess,inwhichcasetheac-
operations,e.g.,certainclassesofnetworkaccesses. tions ofthe benign processmay haveto be rolled back, as
wellastheactionsofprocessesthatusedtheresultsofsuch
Recovery-oriented systems. The Recovery-Oriented abenignprocessandsoon.Theriskofsuchcascadedaborts
Computing (ROC) project [24] is developing techniques shouldbeweighedagainsttheriskofnotbeingabletocom-
for fast recovery from failures, focusing on failures due mitinourapproach.Thus,thisapproachaswellastheROC
to operator errors. [2] presents an approach that assists approachmentionedabovearemoresuitablewhenthelike-
recovery from operator errors in administering a network lihood of rollbacks is low, and commit failures cannot be
server, with the specific example of an email server. The tolerated.
recovery capabilities provided by their approach are more
Loopbackfilesystem[14]cancreateavirtualfilesystem
general than those provided by ours. The price to be
from existingfile system andallowaccess to existingfiles
paid for achieving more general recovery capabilities is
usingalternativepathname. Butthisapproachprovidesno
that their implementation needs to be application spe-
supportforversioningorisolation.
cific, and hence will have to be tailored for each specific
application/service. Incontrast,weprovideanapplication- 3D file system [10] provides a convenient way for soft-
independent approach. Another important distinction is ware developers to work with different versions of a soft-
that with our approach, consistency of system state can warepackage. Inthissense,itislikeaversioningfilesys-
be assured whenever the commit proceeds successfully. tem. Italsointroducesatechniquecalledtransparentview-
With the ROC approach, which does not restrict network pathingwhichisbasedontranslatingfilenamesusedbya
operations,thereisnowaytopreventtheeffectsofnetwork process. It gives a union view of several directory struc-
operations from becoming so widely distributed in the tures thus allowing an application to transparently access
networktheycannotbefullyreversed. Inthecaseofemail onedirectorythroughanother’spath. Asitisnotdesigned
service, they allow a certain level of inconsistency, e.g., todealwithuntrustedapplications,itneedsthecooperation
redeliveringan email that was previouslyreadanddeleted fromtheapplicationforthismechanismtowork. TFS[32]
by a client, and expect the user to manually resolve this is a file system in earlier distributions of Sun’s operating
inconsistency. This potential for inconsistencyistraded in system(SunOS),whichallowedmountingofawritablefile
favorofeliminatingtheriskofcommitfailures. system on top of a read-only file system. TFS also has a
viewsimilarto3DFS,wherethemodifiablelayersitsontop
File system approaches. Elephant file system [26] is of the read only layers. [17] describes a union file system
equipped with file object versioning support, and supports for BSD, that allows “merging” of several directories into
flexible versioning policies. [5, 23, 25, 31, 19] use check one,withthemountedfilesystemhidingthecontentsofthe
pointingtechniqueto providedata versioning. [16]imple- originaldirectories. Theunionmountwillshowthemerger
ments VersionFS, a versatile versioning file system. They of the directories and only the upper layer can be modi-
useastackabletemplatefilesystemasours,anduseasparse fied. All these file systems are intended for software de-
file technique to reduce storage requirements for storing velopment,withtheUnionFSprovidingadditionalfacilities
versions of large files. While all of these approaches pro- for patching read only systems. However, they do not ad-
vide the basic capability to rollback system state to a pre- dresstheproblemofsecuringtheoriginalfilesystemfrom
vious time, such a rollback will discard all changes made untrusted/faulty programs; nor do they consider problems
sincethattime, regardlessofwhether theyweredone bya suchasdataconsistencyandcommitcriteria.
maliciousorbenignprocess. In contrast, theone-wayiso-
lation approach implemented in this paper guarantees se-
8. Summary
lective rollback of the actions of processes run within the
SEEwithoutlosingthechangesmadebybenignprocesses
Inthispaper,wepresentedanapproachforrealizingsafe
executingoutsideoftheSEE.
execution environments. We showed that the approach is
Repairable File System [40, 39] makes use of version- versatileenoughtosupportawiderangeofapplications. A
ingfilesystemtobringrepairfacilitytoacompromisedfile keybenefitofourapproachisthatitprovidesstrongconsis-
server. Fastrek[20]appliesthesimilarapproachtoprotect tency. In particular, if the results of isolated executionare
databases. Theseapproachescanattributechangestomali- not acceptable to a user, then the resulting system state is
ciousorbenignprocessexecutions,andallowausertoroll- asif the executionnevertook place. On the other hand, if
backchangesselectively.However,sincethechangesmade theresultsareaccepted,thentheuserisguaranteedthattheeffectofisolatedexecutionwillbeidenticaltothatofatom- [13] P.Liu,S.Jajodia,andC.D.McCollum. Intrusionconfine-
ically executingthe same program at the point of commit. mentbyisolationininformationsystems. InProceedings
We also discussed alternative commit criteria that exploit ofIFIPWorkshoponDatabaseSecurity,1999.
filesemanticstoreducecommitfailures. [14] Loopbackfilesystem. Unixmanpage.
Ourapproachmakesminimalmodificationstothekernel [15] D.MalkhiandM.K.Reiter. Secureexecutionofjavaap-
plets using a remote playground. Software Engineering,
intheformofmodulesthatprovidefilesystemisolationand
26(12),2000.
policyenforcement. It requires nochanges to applications
[16] K.-K.Muniswamy-Reddy,C.P.Wright,A.P.Himmer,and
themselves. Our functional evaluation illustrates the use-
E.Zadok. Aversatileanduser-orientedversioningfilesys-
fulness of the approach, while the performance evaluation
tem. In Proceedings of USENIX Conference on File and
shows that the approach is efficient, and incurs overheads
StorageTechnologies,2004.
typicallylessthan10%.
[17] J.-S.PendryandM.K.McKusick.Unionmountsin4.4bsd-
lite.InProceedingsof1995USENIXTechnicalConference
References
onUNIXandAdvancedComputingSystems,1995.
[1] A. Acharya and M. Raje. Mapbox: Using parameterized [18] J. S. Pendry, N. Williams, and E. Zadok. Am-utils user
behaviorclassestoconfineapplications. InProceedingsof manual,6.1b3edition,july2003. http://www.am-utils.org.
USENIXSecuritySymposium,2000. [19] Z. Peterson and R. Burns. Ext3cow: The design, imple-
[2] A.BrownandD.Patterson. Undoforoperators: Building mentation,andanalysisofmetadataforatime-shiftingfile
anundoablee-mailstore. InProceedingsofUSENIXAn- system. TechnicalReport.HSSL-2003-03, Hopkins Stor-
nualTechnicalConference,2003. ageSystemsLab,DepartmentofComputerScience,Johns
HopkinsUniversity,2003.
[3] P.M.ChenandB.D.Nobl.Whenvirtualisbetterthanreal.
In Proceedings of Workshop on Hot Topics in Operating [20] D. Pilania and T. Chiueh. Design, implementation, and
Systems,2001. evaluationofanintrusionresilientdatabasesystem.InPro-
ceedingsofInternationalConference onDependableSys-
[4] T.Chiueh,H.Sankaran,andA.Neogi. Spout: Atranspar-
temsandNetworks,2003.
ent distributed execution engine for java applets. In Pro-
ceedingsofInternationalConferenceonDistributedCom- [21] V. Prevelakis and D. Spinellis. Sandboxing applications.
putingSystems,2000. In Proceedings of Usenix Annual Technical Conference:
FREENIXTrack,2001.
[5] S.Chutani, O.T.Anderson, M.L.Kazar, B.W.Leverett,
W.A.Mason,andR.N.Sidebotham. Theepisodefilesys- [22] N.Provos. Improvinghostsecuritywithsystemcallpoli-
tem. InProceedingsoftheUSENIXWinter1992Technical cies.InProceedingsofUSENIXSecuritySymposium,2003.
Conference,1992. [23] S. Quinlan and S. Dorward. Venti: a new approach to
[6] A. Dan, A. Mohindra, R. Ramaswami, and D. Sitaram. archival storage. In Proceedings of USENIX Conference
Chakravyuha: A sandbox operating system for the con- onFileandStorageTechnologies.
trolledexecutionofaliencode. Technicalreport,IBMT.J. [24] Recovery-orientedcomputing. http://roc.cs.berkeley.edu.
Watsonresearchcenter,1997. [25] W.D. Roome. 3dfs: A time-orientedfile server. InPro-
[7] I.Goldberg,D.Wagner,R.Thomas,andE.A.Brewer. A ceedingsoftheUSENIXWinter1992TechnicalConference,
secureenvironmentforuntrustedhelperapplications: con- 1991.
finingthewilyhacker. InProceedingsofUSENIXSecurity [26] D. J. Santry, M. J. Feeley, N. C. Hutchinson, and A. C.
Symposium,1996. Veitch. Elephant: The file system that never forgets. In
[8] S.Jajodia,P.Liu,andC.D.McCollum. Application-level ProceedingsofWorkshoponHotTopicsinOperatingSys-
isolation to cope with malicious database users. In Pro- tems,1999.
ceedings of Annual Computer Security Applications Con- [27] K.ScottandJ.Davidson.Safevirtualexecutionusingsoft-
ference,1998. waredynamictranslation. InProceedingsofAnnualCom-
[9] J.Katcher. Postmark:Anewfilesystembenchmark. Tech- puterSecurityApplicationsConference,2002.
nicalReportTR3022,NetworkApplicanceInc.,1997. [28] R.Sekar,Y.Cai,andM.Segal. Aspecification-basedap-
[10] D.G.KornandE.Krell. Anewdimensionfortheunixfile proach for building survivable systems. In Proceedings
system. Software:Practice&Experience,20(S1),1990. ofNationalInformationSystemsSecurityConference, Oct
[11] B.W.Lampson.Anoteontheconfinementproblem.Com- 1998.
municationsoftheACM,16(10):613–615,1973. [29] R.SekarandP.Uppuluri. Synthesizingfastintrusionpre-
[12] Z.Liang,V.Venkatakrishnan,andR.Sekar. Isolatedpro- vention/detectionsystemsfromhigh-levelspecifications.In
gram execution: An application transparent approach for ProceedingsofUSENIXSecuritySymposium,1999.
executing untrusted programs. In Proceedings of Annual [30] K. Sitaker. Picturepages software.
ComputerSecurityApplicationsConference,2003. http://www.canonical.org/picturepages/.[31] C.Soules,G.Goodson,J.Strunk,andG.Ganger.Metadata [37] E.Zadok,I.Badulescu,andA.Shender.Extendingfilesys-
efficiency in a comprehensive versioning file system. In temsusingstackabletemplates.InProceedingsofUSENIX
Proceedings of USENIX Conference on File and Storage AnnualTechnicalConference,1999.
Technologies,2002. [38] M. Zalewski. Fakebust, a malicious code
[32] Translucentfilesystem,1990. SunOSReferenceManual, analyzer. http://www.derkeiler.com/Mailing-
SunMicrosystems. Lists/securityfocus/bugtraq/2004-09/0251.html.
[33] T. Tiilikainen. Rename-them-all, linux freeware version. [39] N. Zhu. Data versioning systems. Tech-
http://linux.iconet.com.br/system/preview/8622.html. nical report, Stony Brook University,
[34] P.Uppuluri. IntrusionDetection/PreventionUsingBehav- http://www.ecsl.cs.sunysb.edu/tech reports.html.
ior Specifications. PhD thesis, Stony Brook University, [40] N.ZhuandT.Chiueh. Design,implementation,andevalu-
2003. ationofrepairablefileservice. InProceedingsofInterna-
[35] Webstone, the benchmark for web servers. tional Conference on Dependable Systems and Networks,
http://www.mindcraft.com/webstone. 2003.
[36] A.Whitaker,M.Shaw,andS.Gribble.Denali:Lightweight
virtual machines for distributed and networked applica-
tions. In Proceedingsof USENIXAnnual Technical Con-
ference,2002.