NDSS 2017
TenantGuard: Scalable Runtime Verification of
Cloud-Wide VM-Level Network Isolation
Y. Wang1, T. Madi1, S. Majumdar1, Y. Jarraya2,
A. Alimohammadifar1, M. Pourzandi2, L. Wang1 and M. Debbabi1
1 Concordia University, Canada, 2 Ericsson Security Research, CanadaHighlights
TenantGuard, a VM-level network isolation verification system
– Pairwise reachability for over 25K VMs in 13s
– Built on OpenStack, a popular cloud management platform
– Based on a hierarchical model for virtual networks
– Leveraging efficient data structures, incremental verification and parallel computation
2Isolation Breaches
One of the Biggest Security Concerns in Cloud
Tenant D Tenant R
VM
VM
VM
VM
VM VM
VM
VM
VM VM
VM VM
VM VM
VM VM
3Isolation Breaches
One of the Biggest Security Concerns in Cloud
Tenant D Tenant R
VM
VM
VM
VM
VM VM
VM
VM
VM VM
VM VM
VM VM
VM VM
“Something” went wrong and D is hacked!
4Isolation Breaches
One of the Biggest Security Concerns in Cloud
OpenStack real word vulnerabilities
[OSSA 2014-008]
Any tenant is able to
create a port on
another tenant’s router!
VM
Reported:22.10.2013
VM
VM
VM Fixed: 27.03.2014
VM VM
VM
VM
[OSSA 2015-021]
VM VM
Security group rules are
VM VM
VM VM not effective on
VM VM
instances immediately!
Reported:02.09.2015
Fixed: 11.09.2015
More on: https://www.cvedetails.com/vulnerability-list/vendor_id-11727/Openstack.html
5Isolation Breaches
One of the Biggest Security Concerns in Cloud
One possible solution is: network isolation verification
[OSSA 2014-008]
Any tenant is able to
create a port on
another tenant’s router!
VM
Reported:22.10.2013
VM
VM
VM Fixed: 27.03.2014
VM VM
VM
VM
[OSSA 2015-021]
VM VM
Security group rules are
VM VM
VM VM not effective on
VM VM
instances immediately!
Reported:02.09.2015
Fixed: 11.09.2015
6Network Isolation Verification
Challenges
Size of virtual networks: 150M+ VM pairs*
1.
Diverse and distributed network functions
2.
(L3/4 functions including virtual routing, NATing, firewalling)
3. Large data from heterogeneous sources
4. Quickly invalidating verification results
* OpenStack user survey, 2016. Available at: https://www.openstack.org
7Existing Approaches
• Designed for physical networks
– Not suitable for VM-level pair-wise reachability
• Focus on small to medium virtual infrastructure
– Not designed for millions of VM pairs
• Can support VM-level reachability
– Taking minutes to hours for over 100 million pairs
8Assumptions
Tenants
TenantGuard
Input Data
Provider
Virtual Layer 2
Focuses on: Physical Layer
• Verifying security properties specified by cloud tenants
• Not detecting any specific attack
Relies on:
• The correctness of input data
• Existing solutions at other layers
• No sensitive information in the verification results
9TenantGuard: Architecture
10TenantGuard: Architecture
11Key Ideas
1. Hierarchical virtual network model (Router, subnet, VM)
2. Top-down verification approach (from prefix-level to IP-level)
3. Efficient data structures (Radix Trie and X-fast Binary Trie)
1.8.0.0/22
1.10.0.0/22
1.9.0.0/22
RA1 RB1 RB2
SNA1 SNA2 SNB1 SNB2 SNB3
Tenant Alpha Tenant Beta
12Key Ideas
1. Hierarchical virtual network model (Router, subnet, VM)
2. Top-down verification approach (from prefix-level to IP-level)
3. Efficient data structures (Radix Trie and X-fast Binary Trie)
1.8.0.0/22
1.10.0.0/22
1.9.0.0/22
RA1 RB1 RB2
SNA1 SNA2 SNB1 SNB2 SNB3
Tenant Alpha Tenant Beta
13Key Ideas
1. Hierarchical virtual network model (Router, subnet, VM)
2. Top-down verification approach (from prefix-level to IP-level)
3. Efficient data structures (Radix Trie and X-fast Binary Trie)
14Hierarchical Virtual Network Model
External 1.8.0.0/22
1.10.0.0/22
Network
1.9.0.0/22
Router
RA1 RB1 RB2
Subnet
SNA1 SNA2 SNB1 SNB2 SNB3
VM
Tenant Alpha Tenant Beta
15Hierarchical Virtual Network Model
1.8.0.0/22
1.10.0.0/22
1.9.0.0/22
Routing Rules
RA1 RB1 RB2
NAT Rules
Host Routes
SNA1 SNA2 SNB1 SNB2 SNB3
Security Groups
Tenant Alpha Tenant Beta
16Baseline Approach
Verifying every possible VM pair (e.g., over 150 million pairs!!)
1.8.0.0/22
1.10.0.0/22
1.9.0.0/22
1.10.0.2 1.10.0.3 1.9.0.2
RA1 RB1 RB2
SNA1 SNA2 SNB1 SNB2 SNB3
Tenant alpha Tenant beta
17Top-Down Verification
Step one
1.8.0.0/22
1.10.0.0/22
Check isolation between
1.9.0.0/22
subnets within the same
tenant environment 1.10.0.2 1.10.0.3 1.9.0.2
Step two
RA1 RB1 RB2
Check isolation
between different
tenant environments
SNA1 SNA2 SNB1 SNB2 SNB3
Step three
Check VM-isolation
only for subnets
Tenant alpha Tenant beta
found to be reachable
18Top-Down Verification
Step one
1.8.0.0/22
1.10.0.0/22
Check isolation between
1.9.0.0/22
subnets within the same
tenant environment 1.10.0.2 1.10.0.3 1.9.0.2
Step two
RA1 RB1 RB2
Check isolation
between different
tenant environments
SNA1 SNA2 SNB1 SNB2 SNB3
Step three
Check VM-isolation
only for subnets
Tenant alpha Tenant beta
found to be reachable
19Top-Down Verification
Step one
1.8.0.0/22
1.10.0.0/22
Check isolation between
1.9.0.0/22
subnets within the same
tenant environment 1.10.0.2 1.10.0.3 1.9.0.2
Step two
RA1 RB1 RB2
Check isolation
between different
tenant environments
SNA1 SNA2 SNB1 SNB2 SNB3
Step three
X
Check VM-isolation
only for subnets
Tenant alpha Tenant beta
found to be reachable
Subnets not reachable
20Top-Down Verification
Step one
1.8.0.0/22
1.10.0.0/22
Check isolation between
1.9.0.0/22
subnets within the same
tenant environment 1.10.0.2 1.10.0.3 1.9.0.2
Step two
RA1 RB1 RB2
Check isolation
between different
tenant environments
SNA1 SNA2 SNB1 SNB2 SNB3
Step three
Check VM-isolation
only for subnets
Tenant alpha Tenant beta
found to be reachable
21Efficient Data Structure
Capturing Routing Rules
Matching rule is O(L), here L is max. 32
r2 r3 r1
IP Range 1 Range 2 Range 3
22Efficient Data Structure
Storing Intermediary Results
• Storing results of matching routing rules against IP ranges
• Searching is O(logL), here L is max. 32
Destination IP
IP range
23Efficient Data Structure
Storing Intermediary Results
• Storing results of matching routing rules against IP ranges
• Searching is O(logL), here L is max. 32
Destination IP
Verification Status
00 no decision yet
01 loop
10 blackhole
11 reachability
24Efficient Data Structure
Storing Intermediary Results
• Storing results of matching routing rules against IP ranges
• Searching is O(logL), here L is max. 32
Destination IP
Already visited nodes
from source to this IP range
25Incremental Verification
Graph update
1.8.0.0/22
Radix trie 1.10.0.0/22
creation/deletion 1.9.0.0/22
Radix trie
1.10.0.2 1.10.0.3 1.9.0.2
update
X-fast trie
RA1 RB1 RB2
creation/deletion
X-fast trie
update
SNA1 SNA2 SNB1 SNB2 SNB3
VM-level
isolation
verification
Security group
Tenant alpha Tenant beta
verification
26Incremental Verification
Adding a Security Group
Graph update
1.8.0.0/22
Radix trie 1.10.0.0/22
creation/deletion 1.9.0.0/22
Radix trie
1.10.0.2 1.10.0.3 1.9.0.2
update
X-fast trie
RA1 RB1 RB2
creation/deletion
X-fast trie
update
SNA1 SNA2 SNB1 SNB2 SNB3
VM-level
isolation
verification
Security group
Tenant alpha Tenant beta
verification
27Application to OpenStack
• OpenStack Kilo with one controller and 80 compute nodes
• Parallelization of reachability verification with Apache Ignite
• Integration to OpenStack Congress
28Performance Evaluation
Data collection and processing TenantGuard performs 82%
time vary from 1.5 to 2 seconds faster than the baseline
N. P. Lopes, N. Bjørner, P. Godefroid, K. Jayaraman, and G. Varghese. Checking beliefs in dynamic networks, NSDI’15.
29Further Performance Improvement
Reachability between 168 Relationship between cluster
millions VM pairs in 13 seconds size and speedup gain
30Identifying Performance Factors
Number of VMs and hops have Number of routing rules has
less effects due to the reduced almost no effect due to the use
complexity and design of Radix and X-fast tries
31Conclusion
• Future work
– Integrating existing tools at other layers (physical, L2)
– Ensuring integrity of input data
– Addressing privacy issues from the verification results
• Summary
– TenantGuard, a VM-level network isolation verification system
– Integrated our approach to OpenStack
– Reachability for over 150 million VM pairs in 13 seconds
Project webpage: arc.encs.concordia.ca
Corresponding author:
Suryadipta Majumdar (su_majum@encs.concordia.ca)
Thank youBackups
33Experimental Settings
• Test Environment
– Two series of datastes
• SNET (represents small to medium networks)
• LNET (represents large networks)
– NoD (NSDI’15) and a baseline algorithm
• Real Cloud
– Ericsson research cloud
– Mainly to evaluate the real world applicability of TenantGuard
– Only observed a minor incompatibility issue due to version mismatch
34