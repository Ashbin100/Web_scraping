Measuring small subgroup attacks
against Diffie-Hellman
Luke Valenta∗, David Adrian†, Antonio Sanso‡, Shaanan Cohney∗,
Joshua Fried∗, Marcella Hastings∗, J. Alex Halderman†, Nadia Heninger∗
∗
University of Pennsylvania
†
University of Michigan
‡
Adobe
February 28, 2017This work
(cid:73) Revisit decades-old small subgroup attacks in Diffie-Hellman
(cid:73) Looked at hosts and implementations in the wild
(cid:73) Punch line: Nobody implements the countermeasures!
(cid:73) Emerged from Logjam [ABDGGHHSTVVWZZ 2015]Textbook (Finite-Field) Diffie-Hellman Key Exchange
[Diffie Hellman 1976]
p a prime (so F∗ is a cyclic group)
p
g < p group generator (often 2 or 5)
ga mod p
gb mod p
Images from XKCDTextbook (Finite-Field) Diffie-Hellman Key Exchange
[Diffie Hellman 1976]
p a prime (so F∗ is a cyclic group)
p
g < p group generator (often 2 or 5)
ga mod p
gb mod p
Enc (data)
gab
gab mod p gab mod p
Images from XKCDTextbook (Finite-Field) Diffie-Hellman Key Exchange
[Diffie Hellman 1976]
p a prime (so F∗ is a cyclic group)
p
g < p group generator (often 2 or 5)
ga mod p
gb mod p
Enc (data)
gab
gab mod p gab mod p
Images from XKCD
NH: “There are dragons swimming under the placid surface of this beautiful
mathematical lake.”generator
Background: groups, subgroups, and generators
Cyclic group
Order = #elements in groupBackground: groups, subgroups, and generators
Cyclic group
Order = #elements in group
generatorBackground: groups, subgroups, and generators
Cyclic group
Order = #elements in group
generatorBackground: groups, subgroups, and generators
Cyclic group
Order = #elements in group
generatorBackground: groups, subgroups, and generators
Cyclic group
Order = #elements in group
generatorBackground: groups, subgroups, and generators
Cyclic group
Order = #elements in group
generatorBackground: groups, subgroups, and generators
Subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Small subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Small subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Small subgroup
Order = #elements in subgroup
generatorBackground: groups, subgroups, and generators
Small subgroup
Order = #elements in subgroup
generatorRepeat for many small subgroups =⇒ find b using Chinese
Remainder Theorem
Existence of small subgroups → small subgroup attacks.
g generates correct subgroup of order q
g generates subgroup of order 3
3
[Lim Lee 1997]
g
3
gb, Enc (data)
gb
3
compute b mod 3Existence of small subgroups → small subgroup attacks.
g generates correct subgroup of order q
g generates subgroup of order 3
3
[Lim Lee 1997]
g
3
gb, Enc (data)
gb
3
compute b mod 3
Repeat for many small subgroups =⇒ find b using Chinese
Remainder TheoremSmall subgroup attacks
Made much worse with...
(cid:73) Many small subgroups (i.e., p-1 has many small factors)
(cid:73) Short secret exponents (common optimization)
(cid:73) Reused Diffie-Hellman values (common optimization)Countermeasures
The countermeasures against these attacks are well known, and
built into every DH standard:
(cid:73) Use a “safe” prime p = 2q+1, where q is prime
1. Verify 2≤y ≤p−2 (otherwise, may leak 1 bit)
(cid:73) Use a subgroup of large prime order q mod p
1. Verify 2≤y ≤p−2
2. Verify 1=yq modp“The Internet is vast, and filled with bugs.”
—Adam Langley, Crypto 2013
Theorem (Murphy’s law)
Anything that can go wrong, will go wrong.
Corollary
If it is possible for an implementation to have made a mistake,
someone has.
Inspiration for our work
The attacks and defenses are known. Why is this work interesting?Theorem (Murphy’s law)
Anything that can go wrong, will go wrong.
Corollary
If it is possible for an implementation to have made a mistake,
someone has.
Inspiration for our work
The attacks and defenses are known. Why is this work interesting?
“The Internet is vast, and filled with bugs.”
—Adam Langley, Crypto 2013Inspiration for our work
The attacks and defenses are known. Why is this work interesting?
“The Internet is vast, and filled with bugs.”
—Adam Langley, Crypto 2013
Theorem (Murphy’s law)
Anything that can go wrong, will go wrong.
Corollary
If it is possible for an implementation to have made a mistake,
someone has.Standards mandate smaller subgroups
Leaves room for implementation mistakes
NIST SP800-56a: Recommendation for Pair-Wise
Key Establishment Schemes Using Discrete
Logarithm Cryptography
(cid:73) No extra benefit from using small subgroups when already
using short exponents
(cid:73) DSA needs small subgroups, but not DHFast internet scanning lets us study behavior of
publicly accessible hosts.
Widely deployed RFC5114 groups follow NIST
recommendations*:
Group Host Counts
Name p (bits) q (bits) HTTPS SMTP IKEv1 IKEv2
Group22 1024 160 3% ≈0% 17% 13%
Group23 2048 224 ≈0% 33% 17% 13%
Group24 2048 256 ≈0% ≈0% 18% 14%
Total — — 40.6M 3.4M 1.9M 1.3M
Group 23: Can recover 201 bits of exponent in ≈ 242 work
*: Scans from November 2016Hosts don’t validate group order.
Hosts accepting...
Non-Safe
DHE Hosts
Primes
HTTPS 11M 14%
IKEv1 2.6M 13%
IKEv2 1.3M 14%
SSH 11M ≈0%Hosts don’t validate group order.
Hosts accepting...
Non-Safe
DHE Hosts 0
Primes
HTTPS 11M 14% 0.6%
IKEv1 2.6M 13% *
IKEv2 1.3M 14% *
SSH 11M ≈0% 3%
*: Did not scan: 0 causes unpatched Libre/Openswan to restart IKE daemon.Hosts don’t validate group order.
Hosts accepting...
Non-Safe
DHE Hosts 0 1
Primes
HTTPS 11M 14% 0.6% 3%
IKEv1 2.6M 13% * 28%
IKEv2 1.3M 14% * 0%
SSH 11M ≈0% 3% 25%
*: Did not scan: 0 causes unpatched Libre/Openswan to restart IKE daemon.Hosts don’t validate group order.
Hosts accepting...
Non-Safe
DHE Hosts 0 1 p-1
Primes
HTTPS 11M 14% 0.6% 3% 5%
IKEv1 2.6M 13% * 28% 27%
IKEv2 1.3M 14% * 0% 0%
SSH 11M ≈0% 3% 25% 33%
*: Did not scan: 0 causes unpatched Libre/Openswan to restart IKE daemon.Hosts don’t validate group order.
Hosts accepting...
Non-Safe
DHE Hosts 0 1 p-1 g /g
Primes 3 7
HTTPS 11M 14% 0.6% 3% 5% ≈100%
IKEv1 2.6M 13% * 28% 27% 99%
IKEv2 1.3M 14% * 0% 0% 97%
SSH 11M ≈0% 3% 25% 33% N/A
*: Did not scan: 0 causes unpatched Libre/Openswan to restart IKE daemon.Libraries don’t validate group order.
Similar findings to [DCE 2017 (up next!)]
(cid:73) “The server obtains the DH
parameters via a PKCS#3 file which
Library Validation
does not contain any subgroup
(TLS)
information. This file format is the
Mozilla NSS g ≤2 defacto standard across all crypto
OpenJDK g ≤2
libraries.”
OpenSSL1.0.2 None*
BouncyCastle g ≤2
(cid:73) OpenSSL vulnerable to full
Cryptlib g ≤2
libTomCrypt None Lim-Lee key recovery attack for
CryptoPP None RFC 5114 primes
Botan None
GnuTLS g ≤2
(cid:73) Amazon Load Balancer vulnerable
to partial key recovery attack
*: before CVE-2016-0701 in Jan ’16Misconceptions
Academics Implementors
“There are many good reasons “safe primes (...) have quite
for using smaller subgroups, some undesirable properties.
including efficiency and the fact They don’t have a subgroup with
that this setting matches the size of the selected security
theoretical security analyses of parameter and that requires
cryptosystems.” them to use very large keys.”
Fact: Short exponents with safe primes and with small subgroups
are both well-studiedDisconnects
Academics Implementors
“I bet there are TLS clients (and
“(...) it is only necessary to other DH users) out there that
validate cryptographic use those values, and we would
parameters properly - but this is break them (...) functionality
very well-known.” trumps security every day, and
twice on Tuesdays.”
Countermeasures may be known, but are not always implemented(cid:73) Software developers:
(cid:73) Take care when it comes to cryptographic validation
(cid:73) Project Wycheproof: test crypto libraries against known
attacks (https://github.com/google/wycheproof)
(cid:73) Sysadmins:
(cid:73) Test your servers with our tools!
(https://github.com/eniac/crypscan)
Questions?
Takeaways
(cid:73) Standards writers:
(cid:73) Software developers have different priorities
(cid:73) The fewer checks required, the better! (Murphy’s Law)(cid:73) Sysadmins:
(cid:73) Test your servers with our tools!
(https://github.com/eniac/crypscan)
Questions?
Takeaways
(cid:73) Standards writers:
(cid:73) Software developers have different priorities
(cid:73) The fewer checks required, the better! (Murphy’s Law)
(cid:73) Software developers:
(cid:73) Take care when it comes to cryptographic validation
(cid:73) Project Wycheproof: test crypto libraries against known
attacks (https://github.com/google/wycheproof)Questions?
Takeaways
(cid:73) Standards writers:
(cid:73) Software developers have different priorities
(cid:73) The fewer checks required, the better! (Murphy’s Law)
(cid:73) Software developers:
(cid:73) Take care when it comes to cryptographic validation
(cid:73) Project Wycheproof: test crypto libraries against known
attacks (https://github.com/google/wycheproof)
(cid:73) Sysadmins:
(cid:73) Test your servers with our tools!
(https://github.com/eniac/crypscan)Takeaways
(cid:73) Standards writers:
(cid:73) Software developers have different priorities
(cid:73) The fewer checks required, the better! (Murphy’s Law)
(cid:73) Software developers:
(cid:73) Take care when it comes to cryptographic validation
(cid:73) Project Wycheproof: test crypto libraries against known
attacks (https://github.com/google/wycheproof)
(cid:73) Sysadmins:
(cid:73) Test your servers with our tools!
(https://github.com/eniac/crypscan)
Questions?References
Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice
David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick
Gaudry, Matthew Green, J. Alex Halderman, Nadia Heninger,
Drew Springall, Emmanuel Thom´e, Luke Valenta, Benjamin
VanderSloot, Eric Wustrow, Santiago Zanella-B´eguelin, Paul
Zimmermann. CCS 2015. weakdh.org
Indiscreet Logs: Persistent Diffie-Hellman Backdoors in TLS
Kristen Dorey, Nicholas Chang-Fong, Aleksander Essex. NDSS
2017Measuring small subgroup attacks
against Diffie-Hellman
Luke Valenta∗, David Adrian†, Antonio Sanso‡, Shaanan Cohney∗,
Joshua Fried∗, Marcella Hastings∗, J. Alex Halderman†, Nadia Heninger∗
∗
University of Pennsylvania
†
University of Michigan
‡
Adobe
February 28, 2017