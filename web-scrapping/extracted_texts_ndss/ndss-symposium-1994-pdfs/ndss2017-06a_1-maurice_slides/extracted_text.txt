www.iaik.tugraz.at
Hello from the Other Side:
SSH over Robust Cache
Covert Channels in the Cloud
ClémentineMaurice,ManuelWeber,MichaelSchwarz,LukasGiner,Daniel
Gruss,CarloAlbertoBoano,StefanMangard,KayRömer
GrazUniversityofTechnology
February2017—NDSS2017
1/25www.iaik.tugraz.at
Outline
cache covert channels
how do we get a covert channel working in the cloud?
how do we get a covert channel working in a noisy environment?
what are the applications of such covert channel?
2/25caches buffer frequently used data
every data access goes through the cache
caches are transparent to the OS and the software
www.iaik.tugraz.at
CPU cache
main memory is slow compared to the CPU
3/25every data access goes through the cache
caches are transparent to the OS and the software
www.iaik.tugraz.at
CPU cache
main memory is slow compared to the CPU
caches buffer frequently used data
3/25caches are transparent to the OS and the software
www.iaik.tugraz.at
CPU cache
main memory is slow compared to the CPU
caches buffer frequently used data
every data access goes through the cache
3/25www.iaik.tugraz.at
CPU cache
main memory is slow compared to the CPU
caches buffer frequently used data
every data access goes through the cache
caches are transparent to the OS and the software
3/25last-level cache
divided in slices
shared across cores
inclusive
hash function maps a
physical address to a slice
www.iaik.tugraz.at
Caches on Intel CPUs
L1 and L2 are private
core0 core1 core2 core3
L1 L1 L1 L1
ring
L2 L2 L2 L2
bus
LLC LLC LLC LLC
slice0 slice1 slice2 slice3
4/25divided in slices
shared across cores
inclusive
hash function maps a
physical address to a slice
www.iaik.tugraz.at
Caches on Intel CPUs
L1 and L2 are private
core0 core1 core2 core3 last-level cache
L1 L1 L1 L1
ring
L2 L2 L2 L2
bus
LLC LLC LLC LLC
slice0 slice1 slice2 slice3
4/25shared across cores
inclusive
hash function maps a
physical address to a slice
www.iaik.tugraz.at
Caches on Intel CPUs
L1 and L2 are private
core0 core1 core2 core3 last-level cache
L1 L1 L1 L1 divided in slices
ring
L2 L2 L2 L2
bus
LLC LLC LLC LLC
slice0 slice1 slice2 slice3
4/25inclusive
hash function maps a
physical address to a slice
www.iaik.tugraz.at
Caches on Intel CPUs
L1 and L2 are private
core0 core1 core2 core3 last-level cache
L1 L1 L1 L1 divided in slices
ring
L2 L2 L2 L2 bus shared across cores
LLC LLC LLC LLC
slice0 slice1 slice2 slice3
4/25hash function maps a
physical address to a slice
www.iaik.tugraz.at
Caches on Intel CPUs
L1 and L2 are private
core0 core1 core2 core3 last-level cache
L1 L1 L1 L1 divided in slices
ring
L2 L2 L2 L2 bus shared across cores
inclusive
LLC LLC LLC LLC
slice0 slice1 slice2 slice3
4/25www.iaik.tugraz.at
Caches on Intel CPUs
L1 and L2 are private
core0 core1 core2 core3 last-level cache
L1 L1 L1 L1 divided in slices
ring
L2 L2 L2 L2 bus shared across cores
inclusive
LLC LLC LLC LLC hash function maps a
slice0 slice1 slice2 slice3
physical address to a slice
4/25www.iaik.tugraz.at
Set-associative caches
0 1617 2526 31
Address Index Offset
Cache
5/25www.iaik.tugraz.at
Set-associative caches
0 1617 2526 31
Address Index Offset
Cacheset
Cache
Dataloadedinaspecificsetdependingonitsaddress
5/25www.iaik.tugraz.at
Set-associative caches
0 1617 2526 31
Address Index Offset
way0 way3
Cacheset
Cache
Dataloadedinaspecificsetdependingonitsaddress
Severalwaysperset
5/25www.iaik.tugraz.at
Set-associative caches
0 1617 2526 31
Address Index Offset
way0 way3
Cacheset
Cacheline
Cache
Dataloadedinaspecificsetdependingonitsaddress
Severalwaysperset
Cachelineloadedinaspecificwaydependingonthereplacementpolicy
5/25www.iaik.tugraz.at
Timing differences
107
104
101
50 100 150 200 250 300 350 400
Access time [CPU cycles]
sessecca
fo
rebmuN
cache hits cache misses
6/25covert channel: two processes communicating with each other
not allowed to do so, e.g., across VMs
literature: stops working with noise on the machine
solution? “Just use error-correcting codes”
www.iaik.tugraz.at
Cache-based covert channels
cache attacks → exploit timing differences of memory accesses
7/25literature: stops working with noise on the machine
solution? “Just use error-correcting codes”
www.iaik.tugraz.at
Cache-based covert channels
cache attacks → exploit timing differences of memory accesses
covert channel: two processes communicating with each other
not allowed to do so, e.g., across VMs
7/25solution? “Just use error-correcting codes”
www.iaik.tugraz.at
Cache-based covert channels
cache attacks → exploit timing differences of memory accesses
covert channel: two processes communicating with each other
not allowed to do so, e.g., across VMs
literature: stops working with noise on the machine
7/25www.iaik.tugraz.at
Cache-based covert channels
cache attacks → exploit timing differences of memory accesses
covert channel: two processes communicating with each other
not allowed to do so, e.g., across VMs
literature: stops working with noise on the machine
solution? “Just use error-correcting codes”
7/25works across CPU cores as the last-level cache is shared
does not need shared memory, e.g., memory de-deduplication
→ works across VM in the cloud, e.g., on Amazon EC2
www.iaik.tugraz.at
Prime+Probe
attacker knows which cache set the victim accessed, not the content
8/25does not need shared memory, e.g., memory de-deduplication
→ works across VM in the cloud, e.g., on Amazon EC2
www.iaik.tugraz.at
Prime+Probe
attacker knows which cache set the victim accessed, not the content
works across CPU cores as the last-level cache is shared
8/25→ works across VM in the cloud, e.g., on Amazon EC2
www.iaik.tugraz.at
Prime+Probe
attacker knows which cache set the victim accessed, not the content
works across CPU cores as the last-level cache is shared
does not need shared memory, e.g., memory de-deduplication
8/25www.iaik.tugraz.at
Prime+Probe
attacker knows which cache set the victim accessed, not the content
works across CPU cores as the last-level cache is shared
does not need shared memory, e.g., memory de-deduplication
→ works across VM in the cloud, e.g., on Amazon EC2
8/25www.iaik.tugraz.at
Prime+Probe
Victimaddressspace Cache Attackeraddressspace
9/25www.iaik.tugraz.at
Prime+Probe
Victimaddressspace Cache Attackeraddressspace
Step1: Attackerprimes,i.e.,fills,thecache(nosharedmemory)
9/25www.iaik.tugraz.at
Prime+Probe
loadsdata
Victimaddressspace Cache Attackeraddressspace
Step1: Attackerprimes,i.e.,fills,thecache(nosharedmemory)
Step2: Victimevictscachelineswhilerunning
9/25www.iaik.tugraz.at
Prime+Probe
loadsdata
Victimaddressspace Cache Attackeraddressspace
Step1: Attackerprimes,i.e.,fills,thecache(nosharedmemory)
Step2: Victimevictscachelineswhilerunning
9/25www.iaik.tugraz.at
Prime+Probe
fast
access
Victimaddressspace Cache Attackeraddressspace
Step1: Attackerprimes,i.e.,fills,thecache(nosharedmemory)
Step2: Victimevictscachelineswhilerunning
Step3: Attackerprobesdatatodetermineifsethasbeenaccessed
9/25www.iaik.tugraz.at
Prime+Probe
slow
access
Victimaddressspace Cache Attackeraddressspace
Step1: Attackerprimes,i.e.,fills,thecache(nosharedmemory)
Step2: Victimevictscachelineswhilerunning
Step3: Attackerprobesdatatodetermineifsethasbeenaccessed
9/25Sender 1 0 0 1 1 0
Receiver 1 1 0 1 1 0
(b) Noise: substitutionerror
Sender 1 0 0 1 1 0 Sender 1 0 0 1 1 0
Receiver 1 0 0 0 0 0 1 1 0 Receiver 1 0 0
(c) Senderdescheduled: insertions (d) Receiverdescheduled: deletions
www.iaik.tugraz.at
Why can’t we just use error correcting codes?
Sender 1 0 0 1 1 0
Receiver 1 0 0 1 1 0
(a) Transmissionwithouterrors
10/25Sender 1 0 0 1 1 0 Sender 1 0 0 1 1 0
Receiver 1 0 0 0 0 0 1 1 0 Receiver 1 0 0
(c) Senderdescheduled: insertions (d) Receiverdescheduled: deletions
www.iaik.tugraz.at
Why can’t we just use error correcting codes?
Sender 1 0 0 1 1 0 Sender 1 0 0 1 1 0
Receiver 1 0 0 1 1 0 Receiver 1 1 0 1 1 0
(a) Transmissionwithouterrors (b) Noise: substitutionerror
10/25Sender 1 0 0 1 1 0
Receiver 1 0 0
(d) Receiverdescheduled: deletions
www.iaik.tugraz.at
Why can’t we just use error correcting codes?
Sender 1 0 0 1 1 0 Sender 1 0 0 1 1 0
Receiver 1 0 0 1 1 0 Receiver 1 1 0 1 1 0
(a) Transmissionwithouterrors (b) Noise: substitutionerror
Sender 1 0 0 1 1 0
Receiver 1 0 0 0 0 0 1 1 0
(c) Senderdescheduled: insertions
10/25www.iaik.tugraz.at
Why can’t we just use error correcting codes?
Sender 1 0 0 1 1 0 Sender 1 0 0 1 1 0
Receiver 1 0 0 1 1 0 Receiver 1 1 0 1 1 0
(a) Transmissionwithouterrors (b) Noise: substitutionerror
Sender 1 0 0 1 1 0 Sender 1 0 0 1 1 0
Receiver 1 0 0 0 0 0 1 1 0 Receiver 1 0 0
(c) Senderdescheduled: insertions (d) Receiverdescheduled: deletions
10/25www.iaik.tugraz.at
Our robust covert channel
physical layer:
transmits words as a sequence of ‘0’s and ‘1’s
deals with synchronization errors
data-link layer:
divides data to transmit into packets
corrects the remaining errors
11/25receiver probes the set continuously
sender transmits ’0’ doing nothing
→ lines of the receiver still in cache → fast access
sender transmits ’1’ accessing addresses in the set
→ evicts lines of the receiver → slow access
www.iaik.tugraz.at
Physical layer: Sending ‘0’s and ‘1’s
sender and receiver agree on one set
12/25sender transmits ’0’ doing nothing
→ lines of the receiver still in cache → fast access
sender transmits ’1’ accessing addresses in the set
→ evicts lines of the receiver → slow access
www.iaik.tugraz.at
Physical layer: Sending ‘0’s and ‘1’s
sender and receiver agree on one set
receiver probes the set continuously
12/25sender transmits ’1’ accessing addresses in the set
→ evicts lines of the receiver → slow access
www.iaik.tugraz.at
Physical layer: Sending ‘0’s and ‘1’s
sender and receiver agree on one set
receiver probes the set continuously
sender transmits ’0’ doing nothing
→ lines of the receiver still in cache → fast access
12/25www.iaik.tugraz.at
Physical layer: Sending ‘0’s and ‘1’s
sender and receiver agree on one set
receiver probes the set continuously
sender transmits ’0’ doing nothing
→ lines of the receiver still in cache → fast access
sender transmits ’1’ accessing addresses in the set
→ evicts lines of the receiver → slow access
12/25problem: slice number depends on all bits of the physical address
we can build a set of addresses in the same cache set and same slice
without knowing which slice
cacheset cacheline
cachetag index offset
physicaladdress xxxx
2MBpageoffset
www.iaik.tugraz.at
Eviction set generation
need a set of addresses in the same cache set and same slice
13/25we can build a set of addresses in the same cache set and same slice
without knowing which slice
cacheset cacheline
cachetag index offset
physicaladdress xxxx
2MBpageoffset
www.iaik.tugraz.at
Eviction set generation
need a set of addresses in the same cache set and same slice
problem: slice number depends on all bits of the physical address
13/25without knowing which slice
www.iaik.tugraz.at
Eviction set generation
need a set of addresses in the same cache set and same slice
problem: slice number depends on all bits of the physical address
cacheset cacheline
cachetag index offset
physicaladdress xxxx
2MBpageoffset
we can build a set of addresses in the same cache set and same slice
13/25www.iaik.tugraz.at
Eviction set generation
need a set of addresses in the same cache set and same slice
problem: slice number depends on all bits of the physical address
cacheset cacheline
cachetag index offset
physicaladdress xxxx
2MBpageoffset
we can build a set of addresses in the same cache set and same slice
without knowing which slice
13/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
#3
#4
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
ri
m
#3
e
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
e
m
#3 ri
p
#4 S S S S S S S S
R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
r
o
#3 b
e
#4 S S S S S S S S
R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
e
b
#3 o
r
p
#4 S S S S S S S S
R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
ri
m
#3
e
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
#3
e
m
#4 S S S S S S S S ri
p
R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
r
o
#3 b
e
#4 S S S S S S S S
R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
#3
e
b
#4 S S S S S S S S o
r
p
R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
ri
m
#3
e
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
prime
#3 R R R R R R R R
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
r
o
#3 b e R R R R R R R R
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
probe
#3 R R R R R R R R
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
ri
m
#3
e
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
#3
prime
#4 R R R R R R R R
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 p CacheSets
r
o
#3 b
e
#4 S S S S S S S S
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1
#2 CacheSets
#3
probe
#4 R R R R R R R R #1
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1 (cid:51)
#2 CacheSets
#3
#4 #1
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1 (cid:51)
#2 CacheSets
#3
#4 #1
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1 (cid:51)
repeat!
#2
#3
#4 #1
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1 (cid:51)
#2 (cid:51) repeat!
#3 #2
#4 #1
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1 (cid:51)
#2 (cid:51) repeat! #3
#3 (cid:51) #2
#4 #1
14/25www.iaik.tugraz.at
Jamming agreement
sender receiver
eviction sets eviction sets
#1 (cid:51) #4
#2 (cid:51) repeat! #3
#3 (cid:51) #2
#4 (cid:51) #1
14/25www.iaik.tugraz.at
Sending the first image
15/253-bit sequence number
request: encoded sequence number (7 bits)
appending the number of ’0’s in the word to itself
→ property: a word cannot consist solely of ’0’s
deletion errors: request-to-send scheme that also serves as ack
’0’-insertion errors: error detection code → Berger codes
SQN EDC
3bits 4bits
www.iaik.tugraz.at
Handling synchronization errors
Physical layer word Data
12bits
16/25appending the number of ’0’s in the word to itself
→ property: a word cannot consist solely of ’0’s
’0’-insertion errors: error detection code → Berger codes
EDC
4bits
www.iaik.tugraz.at
Handling synchronization errors
deletion errors: request-to-send scheme that also serves as ack
3-bit sequence number
request: encoded sequence number (7 bits)
Physical layer word Data SQN
12bits 3bits
16/25www.iaik.tugraz.at
Handling synchronization errors
deletion errors: request-to-send scheme that also serves as ack
3-bit sequence number
request: encoded sequence number (7 bits)
’0’-insertion errors: error detection code → Berger codes
appending the number of ’0’s in the word to itself
→ property: a word cannot consist solely of ’0’s
Physical layer word Data SQN EDC
12bits 3bits 4bits
16/25www.iaik.tugraz.at
Synchronization (before)
17/25www.iaik.tugraz.at
Synchronization (after)
18/25www.iaik.tugraz.at
Synchronization (after)
18/25www.iaik.tugraz.at
Synchronization (after)
18/25RS word size = physical layer word size = 12 bits
packet size = 212 −1 = 4095 RS words
10% error-correcting code: 409 parity and 3686 data RS words
3686RS-words 409RS-words
Data-linklayerpacket Data Parity
Physicallayerword Data SQN EDC
12bits 3bits 4bits
www.iaik.tugraz.at
Data-link layer: Error correction
Reed-Solomon codes to correct the remaining errors
19/25www.iaik.tugraz.at
Data-link layer: Error correction
Reed-Solomon codes to correct the remaining errors
RS word size = physical layer word size = 12 bits
packet size = 212 −1 = 4095 RS words
10% error-correcting code: 409 parity and 3686 data RS words
3686RS-words 409RS-words
Data-linklayerpacket Data Parity
Physicallayerword Data SQN EDC
12bits 3bits 4bits
19/25www.iaik.tugraz.at
Error correction (after)
20/25Native 36.03KBps 0.00% stress -m 1
AmazonEC2 45.25KBps 0.00% –
AmazonEC2 45.09KBps 0.00% webserverservingfilesonsenderVM
AmazonEC2 42.96KBps 0.00% stress -m 2onsenderVM
AmazonEC2 42.26KBps 0.00% stress -m 1onreceiverVM
AmazonEC2 37.42KBps 0.00% web server on all 3 VMs, stress -m 4
on3rdVM,stress -m 1onsenderand
receiverVMs
AmazonEC2 34.27KBps 0.00% stress -m 8onthirdVM
www.iaik.tugraz.at
Evaluation
Environment Bitrate Errorrate Noise
Native 75.10KBps 0.00% –
21/25AmazonEC2 45.25KBps 0.00% –
AmazonEC2 45.09KBps 0.00% webserverservingfilesonsenderVM
AmazonEC2 42.96KBps 0.00% stress -m 2onsenderVM
AmazonEC2 42.26KBps 0.00% stress -m 1onreceiverVM
AmazonEC2 37.42KBps 0.00% web server on all 3 VMs, stress -m 4
on3rdVM,stress -m 1onsenderand
receiverVMs
AmazonEC2 34.27KBps 0.00% stress -m 8onthirdVM
www.iaik.tugraz.at
Evaluation
Environment Bitrate Errorrate Noise
Native 75.10KBps 0.00% –
Native 36.03KBps 0.00% stress -m 1
21/25AmazonEC2 45.09KBps 0.00% webserverservingfilesonsenderVM
AmazonEC2 42.96KBps 0.00% stress -m 2onsenderVM
AmazonEC2 42.26KBps 0.00% stress -m 1onreceiverVM
AmazonEC2 37.42KBps 0.00% web server on all 3 VMs, stress -m 4
on3rdVM,stress -m 1onsenderand
receiverVMs
AmazonEC2 34.27KBps 0.00% stress -m 8onthirdVM
www.iaik.tugraz.at
Evaluation
Environment Bitrate Errorrate Noise
Native 75.10KBps 0.00% –
Native 36.03KBps 0.00% stress -m 1
AmazonEC2 45.25KBps 0.00% –
21/25www.iaik.tugraz.at
Evaluation
Environment Bitrate Errorrate Noise
Native 75.10KBps 0.00% –
Native 36.03KBps 0.00% stress -m 1
AmazonEC2 45.25KBps 0.00% –
AmazonEC2 45.09KBps 0.00% webserverservingfilesonsenderVM
AmazonEC2 42.96KBps 0.00% stress -m 2onsenderVM
AmazonEC2 42.26KBps 0.00% stress -m 1onreceiverVM
AmazonEC2 37.42KBps 0.00% web server on all 3 VMs, stress -m 4
on3rdVM,stress -m 1onsenderand
receiverVMs
AmazonEC2 34.27KBps 0.00% stress -m 8onthirdVM
21/25www.iaik.tugraz.at
Building an SSH connection
VM1 VM2
TCPClient TCPServer
(e.g.ssh) (e.g.sshd)
Socket Socket
TCP↔File TCP↔File
FileSystem FileSystem
CovertChannel CovertChannel
Hypervisor
Prime+Probe Prime+Probe
LastLevelCache(LLC)
22/25Telnet also works with occasional corrupted bytes with stress -m 1
www.iaik.tugraz.at
SSH evaluation
Between two instances on Amazon EC2
Noise Connection
No noise (cid:51)
stress -m 8 on third VM (cid:51)
Web server on third VM (cid:51)
Web server on SSH server VM (cid:51)
Web server on all VMs (cid:51)
stress -m 1 on server side unstable
23/25www.iaik.tugraz.at
SSH evaluation
Between two instances on Amazon EC2
Noise Connection
No noise (cid:51)
stress -m 8 on third VM (cid:51)
Web server on third VM (cid:51)
Web server on SSH server VM (cid:51)
Web server on all VMs (cid:51)
stress -m 1 on server side unstable
Telnet also works with occasional corrupted bytes with stress -m 1
23/25even in the cloud, even in presence of extraordinary noise
our robust covert channel supports an SSH connection
we extended Amazon’s product portfolio :)
www.iaik.tugraz.at
Conclusion
cache covert channels are practical
24/25our robust covert channel supports an SSH connection
we extended Amazon’s product portfolio :)
www.iaik.tugraz.at
Conclusion
cache covert channels are practical
even in the cloud, even in presence of extraordinary noise
24/25we extended Amazon’s product portfolio :)
www.iaik.tugraz.at
Conclusion
cache covert channels are practical
even in the cloud, even in presence of extraordinary noise
our robust covert channel supports an SSH connection
24/25www.iaik.tugraz.at
Conclusion
cache covert channels are practical
even in the cloud, even in presence of extraordinary noise
our robust covert channel supports an SSH connection
we extended Amazon’s product portfolio :)
24/25www.iaik.tugraz.at
Conclusion
cache covert channels are practical
even in the cloud, even in presence of extraordinary noise
our robust covert channel supports an SSH connection
we extended Amazon’s product portfolio :)
24/25www.iaik.tugraz.at
Conclusion
cache covert channels are practical
even in the cloud, even in presence of extraordinary noise
our robust covert channel supports an SSH connection
we extended Amazon’s product portfolio :)
24/25www.iaik.tugraz.at
Hello from the Other Side:
SSH over Robust Cache
Covert Channels in the Cloud
ClémentineMaurice,ManuelWeber,MichaelSchwarz,LukasGiner,Daniel
Gruss,CarloAlbertoBoano,StefanMangard,KayRömer
GrazUniversityofTechnology
February2017—NDSS2017
25/25