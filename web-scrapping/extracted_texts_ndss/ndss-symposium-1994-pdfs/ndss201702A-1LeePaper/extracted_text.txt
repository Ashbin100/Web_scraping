DELTA: A Security Assessment Framework
for Software-Defined Networks
Seungsoo Lee† Changhoon Yoon† Chanhee Lee† Seungwon Shin† Vinod Yegneswaran‡ Phillip Porras‡
† KAIST ‡SRI International
{lss365, chyoon87, mitzvah, claude}@kaist.ac.kr {vinod, porras}@csl.sri.com
Abstract—Developingasystematicunderstandingoftheattack This paper introduces a new SDN security evaluation
surfaceofemergentnetworks,suchassoftware-definednetworks framework,calledDELTA,whichcanautomaticallyinstantiate
(SDNs), is necessary and arguably the starting point toward attack cases against SDN elements across diverse environ-
making it more secure. Prior studies have largely relied on ments, and which may assist in uncovering unknown security
ad hoc empirical methods to evaluate the security of various
problems within an SDN deployment. Motivated by security
SDN elements from different perspectives. However, they have
testing tools in the traditional network security domain [13],
stopped short of converging on a systematic methodology or
[36], DELTA represents the first security assessment tool for
developingautomatedsystemstorigorouslytestforsecurityflaws
SDN environments. Moreover, we enhanced our tool with a
in SDNs. Thus, conducting security assessments of new SDN
software remains a non-replicable and unregimented process. specialized fuzzing module [26] to exploit opportunities for
This paper makes the case for automating and standardizing discovering unknown security flaws in SDNs.
the vulnerability identification process in SDNs. As a first step,
IndesigningDELTA,wefirstassessedtheoveralloperation
we developed a security assessment framework, DELTA, that
reinstantiatespublishedSDNattacksindiversetestenvironments. of an SDN by tracking its operational flows. Operational flow
Next,weenhancedourtoolwithaprotocol-awarefuzzingmodule analysis provides a basis for understanding the attack surfaces
to automatically discover new vulnerabilities. In our evaluation, availabletoexternalagentsacrossanSDNdeployment,andis
DELTAsuccessfullyreproduced20knownattackscenariosacross agenerallyapplicablestrategyforapproachinganySDNstack.
diverse SDN controller environments and discovered seven novel BasedonthepopularOpenFlowprotocolspecification[29],we
SDN application mislead attacks. categorize operational flows into three categories (see Section
II). In each category, we explore possible security issues and
assess which ones are covered by existing studies.
I. INTRODUCTION
Our intent is to design a testing framework that automates
With the increasing interest and visibility of SDN proto-
the systematic exploration of vulnerabilities exposed in SDN
cols, so too grows the increasing need for thorough security
deploymentsfromdiverseperspectives.Todate,previousstud-
assessments of SDN components and component interactions.
ies are limited in their coverage of the SDN attack surface, in
This need has not gone unnoticed by security researchers.
thattheyusuallydependonspecificSDNelementsornetwork
Indeed, several security challenges have been raised in prior
environments. To overcome this issue, we devised a method
work [23], [31], [38], and an even wider range of attack sce-
to reveal possible unknown security problems in an SDN by
narios have been enumerated against SDN environments [1],
employing a blackbox fuzzing technique, which randomizes
[17], [22].
message input values to detect vulnerabilities in the direct
interface or failures in the downstream message processing
Such security-critical reviews of SDNs offer a view into
logic. When generating random test vectors, DELTA uses the
various breaches, but overall, the attack surfaces thus far
information from the analysis of the SDN operations and
explored have been quite limited to either highly targeted
focuses on the cases where vulnerabilities are likely to be
exploits, such as ARP spoofing, or specific vulnerabilities that
located.
arise in various SDN components. Each previous result may
not be applicable to other SDN environments (e.g., different
We implemented a prototype framework for DELTA and
control planes). Hence, operators seeking to assess security
evaluateditwithreal-worldSDNelements.Foreachcontroller,
issuesintheirSDNenvironmentsneedtosurveyexistingSDN
DELTA is customized with a simple configuration file. The
security-related studies and determine relevance on a case-by-
flexibledesignofDELTAaccommodatesbothopensourceand
case basis. Furthermore, an operator may have to adapt or
commercial SDN controller implementations. Our prototype
redesign deployment-specific security test suites.
can (currently) reproduce 20 known SDN-related attack sce-
nariostargetingseveralwell-knownSDNelements,suchasthe
ONOScontroller[2],theOpenDaylight(ODL)controller[25],
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation the Floodlight controller [27] and the commercial Brocade
on the first page. Reproduction for commercial purposes is strictly prohibited Vyatta SDN controller [3]. In addition, DELTA was able
without the prior written consent of the Internet Society, the first-named author to discover seven new attack scenarios by applying protocol
(for reproduction of an entire paper only), and the author’s employer if the
fuzzing techniques.
paper was prepared within the scope of employment.
NDSS ’17, 26 February - 1 March 2017, San Diego, CA, USA
The new attack scenarios exposed by DELTA have been
Copyright 2017 Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23457 reported to the Open Networking Foundation (ONF) [28], thestandards body dedicated to the promotion of SDN and defin- manually configures network flow-handling policies for each
ing the OpenFlow protocol [12]. The results of our analysis network device. Instead, an SDN abstracts the complexity of
have also informed our collaborations with the ONF security the underlying networks, and this abstraction hides network
working group in drafting white papers defining best practices topologies and network devices from end-users. Thus, unlike
for securing SDN environments. Furthermore, DELTA has traditional networks, SDN contains the global view of the
beenopensourcedasoneofONF’sofficialopenSDNprojects whole network through the high-level network abstraction.
[33].
OpenFlow: OpenFlow is the de-facto standard protocol
This paper describes the following contributions: for the communication between the control plane (a.k.a., the
OpenFlow controller1) and the data plane. Hence, considering
• An analysis of vulnerabilities in the SDN stack that OpenFlow in SDN networks is quite natural, and many com-
can mislead network operations. Through this analy- mercial deployments have successfully employed OpenFlow
sis, we can reconcile test input with erroneous SDN as the primary interface between those two planes [16], [20].
errors and operational failures. We introduce seven
criteria for automatically detecting a successful attack
B. SDN Control Flows
scenario from these failure conditions. We then show
how to combine this information for assessing root
cause analysis on successful attacks. Controller
Load Balancer
• Thedevelopmentofanautomatedsecurityassessment Routing App Applications
APP
framework for SDN capable of reproducing diverse
attackscenarios.Thisframeworkcurrentlyreproduces
PACKET_IN Flow Rule Statistics
20 attack scenarios against real-world SDN elements Notifier Service Service Core Services
withsimpleconfigurationsandisreadilyextensibleto
PACKET_IN FLOW_MOD
support more scenarios.
STATS_REQUEST STATS_RESPONSE
• The incorporation of blackbox fuzzing techniques
into our framework to detect new unknown attack Switch
scenarios. Through our evaluation, we verified that
thistechniquefoundsevenpreviouslyunknownattack Fig.1:ExamplesofSDN/OpenFlowcontrolflows.Dottedlinesindi-
cases. catesymmetriccontrolflowsandsolidlinescorrespondtoasymmetric
control flows.
• The demonstration of flexibility of system design by
evaluating it against three popular, open-source SDN
controllers and the commercial Brocade Vyatta SDN The operations of SDN (specifically, those based on the
controller. OpenFlow protocol) can be classified into three types of
control based on the control flow of the OpenFlow protocol:
We have shared our results with ONF and they are being
(i) symmetric control flow operations, (ii) asymmetric control
referenced by its security working group in defining new
flow operations, and (iii) intra-controller control flow opera-
standards. Furthermore, our framework has been promoted to
tions.
an official open source project by ONF [33].
Symmetric control flow operations: In these operations,
an SDN component sends a request to another component
II. BACKGROUNDANDMOTIVATION
and receives a reply back (i.e., a request-reply pair). Fig-
A. SDN and OpenFlow ure 1 presents an example illustrating this operation using
dotted lines. Consider a load balancer on a controller that
In traditional networks, a control plane, computing sophis-
needs switch statistics to distribute traffic loads. To retrieve
ticated networking functions, and a data plane, handling low-
statistics from the switch, the load balancer first issues a
level packet forwarding based on the policies of the control
statistics request event to the statistics service in the con-
plane,aretightlycoupledandusuallycolocatedwithinasingle
troller core. Once the service notices the event, it sends
device. Since these two planes are often embedded within
the STATS_REQUEST message to the switch through an
a proprietary network device, it is inherently challenging
OpenFlow message. Then, the switch packs its statistics in-
to insert new functions into the device without specialized
formation in the STATS_RESPONSE message and sends it to
knowledge or vendor cooperation.
the controller again. Finally, the statistics service returns the
To overcome this fundamental problem, software-defined received statistics to the load balancer.
networking presents a paradigm that emphasizes the decou-
Asymmetric control flow operations: In contrast to the
plingofthecontrolplanefromthedataplane,withalogically
previous operation, some SDN operations only involve unidi-
centralized control plane operated using (high-performance)
rectionalmessaging(e.g.,messagesthatdonotrequireareply).
commodity hardware. This separation allows network ad-
Technically, most SDN control-flow interactions fall under
ministrators to manage complicated traffic within a central-
asymmetric control flows (e.g., control for handling packet
ized network view. The key features of SDN are high-level
network abstraction and programmability. Another difference
1In the case of OpenFlow-based SDN networks, the term controller is
between SDNs and traditional networks is a strong movement
commonly used to denote the control plane. This paper uses both terms
away from static network policies, in which an administrator interchangeably.
2arrival and inserting flow policy). The solid lines in Figure 1 how a malicious application confuses a benign application by
representtwokindsofasymmetriccontrolflows(PACKET_IN manipulating the intra-controller control flow operation.
and FLOW_MOD). Once a packet arrives at the switch, the
switch first matches the packet with the flow entries in its III. RELATEDWORK
flowtable.Iftheswitchcannotfindanymatchingflowentries,
it sends a PACKET IN message containing a portion of the Our work is inspired by prior work in SDN security and
packetheadertothecontroller.Then,thecontrollerdeliversthe vulnerability-analysis techniques.
packet-arrival event to its applications. This message passing
SDNSecurityandAttacks:Therehavebeenseveralstud-
occurs in one asymmetric control flow as packets arrive. The
ies[1],[22]dealingwithattackavenuesinSDNs.Kreutzetal.
other asymmetric control flow is started from the application
argue that the new features and capabilities of SDN, such as
on the controller. For example, once a routing application
a centralized controller and the programmability of networks,
receives the packet arrival event, it must decide how best to
introducenewthreats[22].Bentonetal.pointoutthatfailures
processtheevent(e.g.,forwardingthepackettosomewhereor
due to lack of TLS adoption by vendors for the OpenFlow
droppingthepacket).Thus,theroutingapplicationmayinform
control channel can make attacks such as man-in-the-middle
thedataplaneatwhichportthepacketshouldbeoutput.After
attacksanddenialofserviceattackseasier[1].Moreover,some
theroutingapplicationissuesapacket-forwardingpolicytothe
researchers have raised other issues, such as inter-application
Flow-Rule service, the service sends a FLOW MOD message
conflicts, access control, topology manipulation, and sharing
totheswitch.Finally,theswitchinsertsthepacket-forwarding
relationships [5], [9], [17], [31], [39]. Ro¨pke et al. [32] have
policy into its flow table and forwards the packet.
demonstrated that SDN applications can launch stealth attacks
Intra-controllercontrolflowoperations:Unlikesymmet- and discussed how such applications can be easily distributed
ricandasymmetriccontrolflows,intra-controllercontrolflows viathird-partySDNappstores,suchastheHPAppStore[19].
are initiated by applications running on a controller (i.e., con- Besides, even without delivering malicious SDN applications
trolplane).Whenapplicationsinteractwithoneanotheroruse to SDNs, Dover et al. have also shown that it is possible to
theinternalservicesofthecontroller,theydosobyemploying launch denial-of-service and spoofing attacks by exploiting
the APIs exposed by the controller. If a routing application the implementation vulnerability that exists in the switch
requiresthetopologyinformationfromtheinternalservicesto management module of Floodlight [10], [11]. Although there
compute a dynamic routing path, the routing application calls have been several studies on SDN vulnerabilities, contempo-
anAPIthatreturnsthecurrenttopologyinformation.ThisAPI rary controllers remain vulnerable to many of these attacks.
function may in turn invoke several internal APIs. Finally, the Hence, we propose a software framework that can simplify
topology information is delivered to the routing application. reproducibility and verification of diverse attack scenarios.
This call-chain is an example of intra-controller control flow.
Vulnerability Detection Tools and Techniques: Tradi-
tional network security testing tools such as Metasploit [24],
C. Motivating Example
Nessus [36], and Nmap [13] are equipped with a rich library
of vulnerabilities and composable attack modules. However,
App 1 App 2 App 3 App 4 because these tools are specialized for legacy and wide-area
networks, they are directly unsuitable for SDN networks. In
PACKET_IN (3) PACKET_IN a recent BlackHat briefing, the presenters explored the SDN
attack surface by actually attacking each layer of SDN stack,
PACKET_IN Subscribers
(1) App 2 and then demonstrated some of the most critical attacks that
(2)App 4 directly affect the network availability and confidentiality.
Core Services
Thus, SDN-specific security threats are complex and cannot
Controller Instance be revealed by existing network security testing tools, such as
Metasploit [24] and Nessus [36], as they are not SDN-aware.
PACKET_IN Flow
Packet
Our goal is to develop an analogous tool for OpenFlow
networks. Fuzz testing was first proposed by Miller et al. in
OpenFlow
Host A Host B
Switch theearly1990sandhassteadilyevolvedtobecomeavitaltool
in software security evaluation [26], [41]. The current body of
Fig. 2: Event Listener Unsubscription attack
work in black-box fuzz testing may be broadly divided into
mutational and generation- (or grammar-) based techniques.
Figure 2 illustrates how a malicious application could While the former strategies rely on mutating input samples
make a benign application incapable of receiving any of the to create test inputs, the latter develop models of input to
necessary control messages from a switch. In this instance, derive new test data. DELTA makes use of both strategies,
a malicious application (App 1) accesses the list knowing with mutational being the primary approach.
which application receives the PACKET IN control message
Examples of mutational fuzzers include SYMFUZZ [4],
(the most important control message), and discovers that App
zzuf [15], BFF [18], AFL-fuzz [46] and PacketVaccine [43].
4 is waiting for PACKET IN messages (1). Then, App 1
Unlike these approaches, our system employs a fuzz-testing
unsubscribesApp4fromthelist(2),andthusApp4isunable
methodology that is specialized for SDNs. We recognize that
to receive any PACKET IN messages (3).
because the operations and topologies of SDNs are more
This is a real working example (applicable to Floodlight dynamicthantraditionalnetworks,randomizationofaspecific
[27] and OpenDaylight [25] controllers), and it illustrates portion of the packets is insufficient. Hence, we classify the
3Controller
Flow Type Attack Code Attack Name
ONOS OpenDaylight Floodlight
SF-1 Switch Table Flooding [11] X X O
SF-2 Switch Identification Spoofing [10] X O O
Symmetric Flows
SF-3 Malformed Control Message [37] X O O
SF-4 Control Message Manipulation [35] O O O
AF-1 Control Message Drop [35] O O O
AF-2 Control Message Infinite Loop [35] O O O
AF-3 PACKET IN Flooding [21], [38], [40] O O O
AF-4 Flow Rule Flooding [8], [38], [45] O O O
Asymmetric Flows AF-5 Flow Rule Modification [35] O O O
AF-6 Switch Firmware Misuse [35] O O O
AF-7 Flow Table Clearance [35] O O O
AF-8 Eavesdrop [35] O O O
AF-9 Man-In-The-Middle [35] O O O
CF-1 Internal Storage Misuse [39] O O O
Intra-Controller Control Flows CF-2 Application Eviction [39] O O N/A
CF-3 Event Listener Unsubscription [39] N/A O O
NF-1 System Command Execution [39] O O O
NF-2 Memory Exhaustion [39] O O O
Non Flow Operations
NF-3 CPU Exhaustion [39] O O O
NF-4 System Variable Manipulation [35] X O O
TABLE I: Summary of known SDN attack cases: N/A means this attack is not available. O means the controller is vulnerable to this attack,
and X means that it is not vulnerable.
operations of SDN into three types of control based on the A. SDN Control Flow Operation Vulnerabilities
control flow, and incorporate the features of those operations
Symmetric Control Flow Vulnerabilities: Table I identi-
into DELTA’s fuzzing module. ShieldGen is an example of
fies four symmetric control flow vulnerabilities. One vulnera-
a grammar-based fuzzer, that uses knowledge of data formats
bility arises in the presence of weak authentication during the
andprobing,toautomaticallygeneratevulnerabilitysignatures
handshakestep.Thisvulnerabilitycanleadtoreplayattacksto
and patches from a single attack instance [7]. Godefroid et
thecontroller,suchastheSwitchIdentificationSpoofingattack.
al. present a grammar-based whitebox fuzz-testing approach
For example, the Floodlight controller classifies the identi-
inspired by symbolic execution and dynamic test generation
fication of the connected switch according to a Data Plane
[14]. Unlike such approaches, DELTA does not require the
ID (DPID). However, a man-in-the-middle (MITM) concern
entiresourcecodeofthetargetsystem.Scottetal.introduceda
arises, in which an attacker replays handshake steps with the
troubleshooting system called STS that automatically inspects
DPID of an already connected switch causing Floodlight to
vulnerabilities in control platforms using a fuzzing technique
disconnectitselffromtheswitch.Also,asFloodlightmanages
[34].ThefocusofSTSisidentifyingtheMCS(minimalcausal
the connected switch’s information in its internal storage, it
sequence)associatedwithabug.However,DELTAreproduces
consumes the memory resources within the host. An attacker
knownvulnerabilitiesandevenfindsunknownonesbychang-
can persistently replay meaningless handshake messages to
ingtheparametersofitsfuzzingmoduleswithoutMCS.Yaoet
exhausttheinternalstorageofthecontroller(i.e.,SwitchTable
al.proposedanewformalmodelandcorrespondingsystematic
Flooding attack). Such an attack could result in a controller
blackbox test approaching for SDN data plane [44]. While
shutdown.
thisapproachmainlyfocusesonthetestingpathsofSDNdata
planes,DELTAappliesfuzzingfunctionstodiscoverunknown
Inadditiontotherelayattack,symmetriccontrolflowmes-
security flaws.
sages also enable Malformed Control Message attacks. Each
control message carries the OpenFlow version information in
IV. VULNERABILITIESINSDNFLOWS its header, which should be consistent with other messages. If
the attacker replaces the version value in a response message
This section explores how the three SDN flow operations
within a symmetric control flow with an invalid value, an
described in Section II are related to vulnerabilities that can
inconsistency arises that may result in a switch disconnection.
harm SDN operations. Vulnerabilities related to the SDN
The Control Message Manipulation attack is similar to the
control flows are discussed in Section IV-A, and the locations
Malformed Control Message attack; however, in this case, the
of vulnerabilities resulting from irrelevant flow operation are
attacker manipulates the header type of symmetric control
described in Section IV-B. Table I provides a high-level
flows leading to switch disconnection.
overviewofSDNvulnerabilities.Italsodenoteswhichattacks
relate to the controller (i.e., control plane). However, some Asymmetric Control Flow Vulnerabilities: Table I iden-
attacks highly depend on the architecture of a specific con- tifies nine asymmetric control flow vulnerabilities. Most con-
troller.Here,weconsiderthreewell-knowncontrollers:ONOS, trollersmaintain alistener mechanismthat allowsapplications
OpenDaylight, and Floodlight, as these controllers arguably to register to receive specific messages from the data plane.
represent the most popular and widely used SDN controllers When a message arrives at the controller, this mechanism
in use today. delivers the message to the applicable registered applications,
4either in sequence or parallel, depending on the implemen- applications. For instance, a developer who implements an
tation of controllers. Misbehaving or rogue applications can application running on the controller could make a mistake
interferewiththeorderofapplicationsinthelist,andcausethe inside the application logic, which can cause the termination
application to drop the message (i.e., Control Message Drop of the application (i.e., System Command Execution attack).
attack). Malicious applications can alternatively implement an Since most controllers employ the multi-threaded program-
infinite loop (i.e., Control Message Infinite Loop attack) to mingparadigm,theterminationoftheapplicationcanmislead
prevent other applications from acting on the message. the controller into shutdown. If a target network does not
havecontrollerredundancy,thiscouldresultinanetwork-wide
Controllers and switches are also vulnerable to perfor-
outage.
mance degradation by malicious or erroneous applications.
One such example is the PACKET IN Flooding attack. In The malicious application can intentionally consume all
thisscenario, anadversarygeneratesa numberofmeaningless available system resources of a controller to affect other ap-
flowstootherhostsinordertotriggerafloodofPACKET IN plicationsoreventhecontroller.Forinstance,maliciousappli-
messages to the controller, which eventually degrades the cations can halt the control layer by intentional unconstrained
performance of the controller. On the other hand, a Flow Rule memory consumption (i.e., Memory Exhaustion attack), or
Flooding attack is also feasible. A malicious application can by unconstrained thread creation to exhaust available CPU
installanumberofflowrulesthroughFLOW MODmessages cycles (i.e., CPU Exhaustion attack). System time is also
tothetargetswitchtooverflowtheflowtable,whichcouldlead consideredasystemresourcethatisusedtochecktheresponse
the switch into an unpredictable state. time of symmetric control flows. If the malicious application
manipulates this system time, the switch connected to the
Amalicious applicationmayalso manipulateresidentflow
controllercouldenteranunexpectedstate(i.e.,SystemVariable
rules in the switch that have been installed by other applica-
Manipulation attack).
tions. For instance, although a flow rule installed by a firewall
application may instruct the switch to drop the flows from V. SYSTEMDESIGN
the malicious host, a peer application could modify the flow
rule to forward corresponding flows from the malicious host Thissectiondiscussesthedesignconsiderationsmotivating
(i.e., Flow Rule Modification attack). Also, by changing the our design and thendescribes theDELTA systemarchitecture.
rules, the malicious application can manipulate the flow table
intheswitch(i.e.,FirmwareMisuseandFlowTableClearance A. Design Considerations
attack).
Table I reviewed 20 known attack scenarios, which can be
When the control messages between the controller and the reproduced without much difficulty. If testing each case re-
switch are unencrypted, an attacker located between them can quires a different testing environment, the costs of conducting
guess what topology is constructed by sniffing control mes- these tests can rapidly become prohibitive, even within highly
sages(i.e.,Eavesdropattack)inapassivemanner.Theattacker sensitivecomputingenvironments.Thus,thetestingframework
may also intercept the control message and then change some should be easily configured and correctly reproduced. In ad-
fieldvaluesofthecontrolmessageswithmaliciousintent(i.e., dition, these attack scenarios should be operated with diverse
Man-In-The-Middle attack). SDNcomponents,suchasdifferentcontrolplanesandnetwork
applications, to cover most possible attack surfaces of SDN.
Intra-Controller Control Flow Vulnerabilities: Table I
identifies three intra-controller control flow vulnerabilities. Given these practical testing concerns, the requirements
Unfortunately, most controllers do not provide access control driving our penetration framework can be summarized as fol-
mechanisms to limit API usage among applications. A mali- lows: (i) it should cover as many attack scenarios as possible,
cious application may access and alter network topology data (ii) it should be highly automated, to minimize the human
withintheinternalstorage ofthecontroller,impactingallpeer skillsandtimenecessarytoconducttesting,and(iii)itshould
applications that derive flow control decisions based on this be inter-operable with a diverse set of SDN components.
networktopologydata(i.e.,anInternalStorageMisuseattack). In addition, we also require that our framework be easily
extensible to new test cases, and assist in the identification
Some controllers provide a mechanism that dynamically
of entirely new attack scenarios. The following sections will
controls applications running on the controller. The problem
consider these requirements in more detail.
with this is that a malicious application can also abuse this
mechanismwithoutanyconstraint.Forexample,themalicious
applicationcandynamicallyunloadaFirewallapplication(i.e., B. Blackbox Fuzzing
Application Eviction attack). Also, the malicious application
As previously summarized, 20 attacks against SDN have
can prevent some applications which want to receive the
beenpresentedsofar.However,awiderrangeofundiscovered
control message from the switch from being notified of the
attack scenarios against SDNs remain, which our framework
control message (i.e., Event Listener Unsubscription attack).
can help operators explore and discover. To identify such
unknown attack cases, we borrow the notion of fuzz testing
B. Non Flow Operation Vulnerabilities
developed in the context of legacy software and protocol test-
Table I identifies four non-flow operation vulnerabilities. ing.Fuzztestingallowthedevelopmentofentirelyrandomized
Although SDN controllers have been referred to network testingvectorstodetermineifprograminterfacesaresubjectto
operatingsystems(NOS),mostcontrollersareimplementedas unexpectedinputhandlingerrors.Wechooseblackboxfuzzing,
general networking applications. Thus, controllers are unfor- rather than whitebox fuzzing, because the former does not
tunatelysubjecttothesamevulnerabilitiesasfoundinnormal require the source code of target programs, and it can be
5FV 1
Ee send HELLO receive HELLO send FEATURES_REQ receive FEATURES_RES send GET_CONFIG_REQ receive GET_CONFIG_RES send SET_CONFIG
S1 S2 S3 S4 S5 S6 S7
send STATS_REQ S8 receive STATS_RES S9 deliver to applications update topology
receive PORT_STATUS update topology
A1
send ECHO_REQ receive ECHO_RES
S10 S11
update topology
Rr A3 I1
send VENDOR receive VENDOR send FLOW_MOD
S12 S13 send BARRIER_REQ receive BARRIER_RES
S14 S15
receive PACKET_IN FV 2 deliver to applications
A2 update internal
FV 3 send FLOW_MOD update internal flow tables flow tables
A4
receive FLOW_REMOVED A5 update internal flow tables
send PACKET_OUT
send PORT_MOD update internal flow tables
A6
send PACKET_OUT update internal flow tables
A7 I2
Fig. 3: Operational state diagram of typical SDN controller and fuzzing vector (FV) examples
applied to both open source and proprietary SDN components Next, based on the state diagram, we investigated (i) the
and devices. sequenceofcontrolflows,presentedinSectionII,todetermine
whether there are candidate control flows for randomization
State Diagram of SDN Control Message:Akeyanalysis
(Fuzzing Vectors FV 1 and FV 2 in Figure 3), and then
inblackboxfuzzingisthatofdeterminingtheinputparameters examined the (ii) input values conveyed in each control flow
thatmustbesubjecttoinputrandomization,whichisacentral (FV 3 in Figure 3).
consideration in our framework design. Instead of selecting
valuesforrandomizationinanadhocmanner,wederivethose
Controller Switch
values from the analysis of SDN control flows. HELLO
HELLO
The SDN operations of a typical SDN controller, which
FEATURES_REQUEST
employs OpenFlow protocol v1.0 [29], can be represented in
an operational state diagram as shown in Figure 3. Although FEATURES_RESPONSE
weonlypresentthestatediagramforOpenFlowv1.0,wehave
GET_CONFIG_REQUEST
also analyzed OpenFlow v1.3 [30] and it is a straightforward
extension. GET_CONFIG_RESPONSE
SET_CONFIG
In the state diagram (Figure 3), label R stands for a ready
state to receive or send the control messages. The other states
arelabeledinaccordancewiththetypeofcontrolmessages:(i)
Fig. 4: Symmetric flow sequence randomization example
stateslabeledSinvolvesymmetriccontrolmessagetransitions,
(ii) states labeled A involve asymmetric control message tran-
sitions, and (iii) states labeled I involve API calls generating RandomizingControlFlowSequence:Wecanrandomize
intra-controller control messages. the control flow sequence in two major steps: (i) inferring
current state of an SDN controller, and (ii) manipulating the
control flow sequence.
Each edge designates the type of control message or the
specific controller behavior that triggered the state transition. Inferring the current state of an SDN controller is simple:
For example, as shown in Figure 3, when a controller in intercepttheongoingcontrolmessagestounderstandandtrack
R state receives a PACKET IN message from a switch, the down the operations of the controller. In the case of the
state of the controller transitions to A2. In A2, the controller symmetric control flows, the current state of the controller
delivers the message to the applications, causing another state can be inferred from the control messages intercepted from
transition to the next state A3, where the controller verifies if the control channel between the controller and the switches.
thePACKET INincludeslinkinformation.Oncethepacketis For example, as shown in Figure 3, the controller states from
verified to include link information, the controller updates the R to S7 represents the OpenFlow handshake process. Based
network topology, moves to I1 state, and finally, comes back on which type of OpenFlow message is sent or received,
to the ready state. As illustrated, the state diagram can clearly it is possible to infer in which state the controller resides.
describe the points at which the controller takes the input and Meanwhile, in the case of the asymmetric control flows, the
howeachinputinducesthestatetransition.Therefore,basedon state of the controller can be detected by not only intercepting
suchanoperationalanalysisresult,wecaneffectivelyperform the control messages but also by monitoring the changes in
the input randomization against the SDN controllers. the controller behaviors, because some of the state transitions
6in asymmetric control flows are triggered by the controller After
operations. As illustrated in Figure 3, the states from R to APP X APP B
A3 describes how PACKET IN messages are delivered to
APP A APP B APP C APP D
applications, and it is difficult to detect state transitions to (2) Before
A3 by intercepting the control messages. Thus, to detect such
Control Message
state transitions, we monitor any changes in the controller N o t i fi e r Core Services
behavior and specifically in this example deploy an additional
application to confirm the reception of PACKET IN.
(1) Controller
Once the state of the controller is analyzed, we can
manipulatethesequenceofthecontrolflow.Torandomizethe
sequenceofthesymmetriccontrolflows,weintentionallydrive
an SDN controller to violate the standard protocol. Figure 3 Switch A Switch B
Host A Host B
(Fuzzing Vector 1) illustrates the control flow of the standard
OpenFlow handshake that could be potentially manipulated. Fig. 6: Asymmetric flow sequence randomization example in the
Forexample,asshowninFigure4,itispossibletomanipulate parallel order
the sequence by omitting a couple of message exchanges
(crossed out) to test if the controller or the switch is subject
to such protocol violations.
the controller to modify the state of a switch (FV 3 in Figure
3).Mostfieldsaredefinedasanunsignedintegertype,andwe
After
canrandomizethesevaluestomisleadtheswitchintoparsingit
APP D APP C APP B APP A
Before (e.g.,0ormaximum).Sincecontrolmessagesbetweenthedata
APP A APP B APP C APP D
plane and the control plane are commonly delivered through
Control Message a plain TCP channel2, all field values of the control messages
Core Services
(2) Notifier can be intercepted at the control channel and manipulated
easily, which could result in critical network instabilities.
(1) Controller For example, a priority field in a FLOW MOD message can
be maximized. Such field-value randomization can be also
appliedtothesymmetricflows.Also,mostcontrollersprovide
their own APIs to improve the flexibility of intra-controller
Switch A Switch B
Host A Host B
controlflows.TheseAPIsmaybeusedbyanyhostednetwork
application, which means that any application has a chance
Fig. 5: Asymmetric flow sequence randomization example in the
sequential order to change (or randomize). Our framework adopts this idea to
randomize input values of a control flow.
DELTA uses fuzzing techniques and ex-post-facto anal-
Such control flow manipulation can be also applied to the
ysis to identify vulnerabilities in the target program. We
asymmetric flows, such as the flow shown in Figure 3 (from
have outlined seven test criteria as vulnerability detectors
A2 to A3 in FV 2). If a PACKET IN message is sent to
that trigger ex-post-facto analysis: (i) a controller crash, (ii)
the controller by the network device (step 1 in Figure 5), the
an application crash, (iii) internal-storage poisoning (iv) a
controllersequentiallydeliversthemessagetotheapplications
switchdisconnection, (v)switch-performance downgrade,(vi)
in a specific order (step 2 in Figure 5). Figure 5 (Before)
inter-hostcommunicationdisconnection,and(vii)error-packet
shows the default sequence where App A first receives the
generation.IfafuzzcasegeneratedbyDELTAresultsinanyof
PACKET IN message, and App D receives the message last
the following, the test inputs will be flagged for ex-post-facto
(i.e., A → B → C → D). Here, we can change the control
vulnerability assessment.
flow (i.e., change the order of the applications) randomly at
runtime as shown in Figure 5 (After).
C. System Architecture
In addition to the sequential asymmetric control message
This section presents the overall architecture of DELTA
deliverymechanism,messagescanbedeliveredtoapplications
and explain each of its components. As shown in Figure 7,
in parallel as shown in Figure 6. For example, when the
our framework consists of a centralized agent manager and
controller receives a PACKET IN message (step 1 in Figure
multiple agents. The agents are classified into three different
6), it simultaneously delivers the asymmetric message to the
types based on their location: application, channel, and host.
applications (step 2 in Figure 6). However, of those applica-
Those agents are located in the middle of SDN control flows
tions concurrently running on the controller, a certain set of
and implement attack scenarios.
applications may be defined to follow a particular order in
receiving the message. In this example, we arbitrarily injected Agent Manager: The agent manager (AM) assumes the
App X, so that this application can receive the message ahead role of a controller that manages all the agents. The AM
of App B (Figure 6 (After)). As demonstrated, it is possible consists of four modules: Controller Manager, Attack Con-
to randomize such sequences. ductor, Agent Handler, and Result Analyzer. The AM is not
Randomizing Input Values: Besides the control flow,
2The OpenFlow specification suggests an encryption transport (e.g., TLS)
input values of a control flow can also be randomized. For
to encrypt outgoing messages; however, it is frequently disabled in favor of
example,weselectedtheFLOW MODmessage,whichallows performance[1].
7ONOS OpenDaylight Floodlight Brocade Vyatta
V 1.2 1.3 1.4 1.5 Hydrogen Helium Lithium Beryllium 0.91 1.0 1.1 1.2 2.3.0
RD 6/5/15 9/18/15 12/16/15 3/10/16 2/4/14 9/29/14 6/29/15 2/22/16 12/8/14 12/30/14 4/17/15 2/7/16 2016
SP (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) - (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
TABLEII:Supportedapplicationagentsforvariouscontrollerversions:Vindicatesversion,RDindicatesreleasedate(MM/DD/YY),andSP
indicates whether or not it is supported.
The application agent consists of four modules: (i) At-
Application Agent Channel Agent Host Agent
tack Simulator, (ii) AM Interface, (iii) Control-Flow Fuzzer,
Attack Simulator Attack Simulator Flow Information Collector and (iv) Value Fuzzer. The attack simulator includes known
Control-Flow Value Control-Flow Value malicious functions for a target controller, and it executes
Flow Generator
Fuzzer Fuzzer Fuzzer Fuzzer
malicious functions as indicated by the AM. For example, if
AM Interface AM Interface AM Interface the AM initiates an Internal Storage Misuse attack [39], its
operational scenario is already located within the application
agent. Command messages from the AM are delivered to the
Agent Handler
agent via the AM interface. The other modules (i.e., control-
Attack Conductor Result Analyzer RFeuszuzilntg flow fuzzer and value fuzzer) are used to randomize SDN
LLoogg control flows and their input values. They will be invoked by
ONOS OpenDaylight Floodlight Dummy Controller a command message from the AM, and they will randomize
Controller Manager Config. required elements to detect unexpected reactions produced by
thecontroller.Moredetaileddescriptionsofthosemodulesare
Agent Manager (AM)
provided in the last part of this section.
Fig.7:OverallarchitectureofDELTAwithfourkeycomponents:(i)
ChannelAgent:Thechannelagentsniffsandmodifiesthe
AgentManager,(ii)ApplicationAgent,(iii)ChannelAgent,and(iv)
controlmessagespassingthroughthecontrolchannelbetween
Host Agent.
the control plane (i.e., controller) and the data plane. As
the communication is often unencrypted, the channel agent
can manipulate control messages by intercepting them. While
the application agent is controller-dependent, the channel
coupledwithSDNcomponents;itindependentlyconductstwo
agent is SDN protocol-dependent. DELTA currently supports
functions: (i) controls other agents remotely, to replay known
OpenFlow 1.0 and 1.3, and the channel agent automatically
attack scenarios or discover unknown attack scenarios against
catches this information by inspecting the header field of
the target network, and (ii) retrieves the executed results from
control messages. The internal architecture of the channel
each agent.
agent shares many things with the application agent. The
Intheinitialstageofourframework,thecontrollermanager channel agent consists of four modules: (i) Attack Simulator,
readsaconfigurationfilecontainingtheinformationofatarget (ii) AM Interface, (iii) Control-Flow Fuzzer, and (iv) Value
controller(e.g.,versioninformationandinstalledpath)because Fuzzer. The functions of these four modules are the same as
each target controller has a different way of loading network those of the application agents.
applications. For testing SDN-enabled switches, the controller
Host Agent:Thehostagentbehavesasahost(ormultiple
managerinvokesthedummycontrollerthatbehavesasifitwas
hosts)participatinginthetargetSDNnetwork.Itiscapableof
a simple SDN controller. Then, the attack conductor initiates
generatingnetworktraffictoanyreachabletargets(e.g.,switch
known attack scenarios. Its operational scenarios are pre-
and host), and such a remotely controllable host is useful for
defined in this module. When our framework replays a known
launching some attacks initiated by hosts. For example, a host
attack scenario, this module controls each agent to conduct
agent can send a large volume of network traffic to an SDN-
the scenario based on the defined information. This module
enabled switch, causing a PACKET IN flooding attack [21],
controls other agents through the agent handler. Finally, if an
[38], [40]. Unlike other agents, the host agent does not have
attack is completed by each agent, the result will be sent back
known attack scenarios, but it can be employed to generate
to the result analyzer module, which will report these results
smallormassiveflows(miceorelephantflows),whichcanbe
to the operator. The attack conductor also controls the fuzzing
used during attack scenarios.
modules in each agent to find unknown attack cases.
The host agent consists of three modules: (i) Flow Infor-
mation Collector, (ii) Flow Generator, and (iii) AM Interface.
Application Agent: The application agent is an SDN ap-
Here,theAMinterfaceperformsthesameoperationsasthatof
plication running inside the controller, and it launches attacks
other agents. The flow information collector captures diverse
under the supervision of the AM. Since an SDN application
flow-related information, such as latency and the number of
can be directly involved in SDN control flows, our framework
sent and received flows. This information is used to detect
inserts an application (i.e., application agent) into a controller
someattacktypes.Theflowgeneratorproducesnetworkflows
to intercept, forge, and change SDN control flows and input
under the control of the AM.
variables, as applicable to the attack scenario. Application
agents are controller specific, as they must interact directly Fuzzing Modules: An administrator who chooses to em-
with each controller APIs. ploytheblackboxfuzzingfunctionsofourframeworkcanask
8the AM to activate fuzzing functions for the application and version 1.0 and 1.3. The host agent is a Java application
channel agents. If no guidelines are presented to the fuzzing program that generates network flows by creating new TCP
functions, they operate continuously until manual termination. connections or by using existing utilities, such as Tcpreplay
The operator can alternatively supply input to narrow fuzzy [42].Itcanalsocollectnetworkflowinformationbypassively
testing to a boundary range of randomization for the specific sniffingnetworkpackets.Allagentshavedirectconnectionsto
cases. theagentmanager(AM)withTCPconnections.Weimplement
fuzzing modules by modifying functions for controlling SDN
Currently, our framework provides two fuzzing module
operations. In the case of the application agent, the fuzzing
randomizingfunctions:(i)Control-FlowFuzzerand(ii)Value
modules parse arguments of each function, track the sequence
Fuzzer, which are both located within each agent. As their
of function call, and randomize arguments or the sequence
nameimplies,thecontrol-flowfuzzerrandomizesSDNcontrol
of function call based on the information provided by the
flow operations, and the value fuzzer randomizes the input
AM. With respect to the channel agent, the fuzzing modules
valuesofeachfunction.Thesemodulesmayoperateintandem
manipulate OpenFlow messages and delay the sequence of
or independently.
message flows.
Two fuzzing modules in the application agent use APIs
providedbyacontrollertorandomizecontrolflowsandvalues VII. EVALUATION
respectively. Since each controller provides different types of We conducted a wide range of experiments and perfor-
APIs, we analyze APIs provided by well-known controllers mance evaluations involving the DELTA security assessment
and extract common functionalities. Then, we try to design framework with well-known SDN controllers, ONOS(v1.4.0),
a generalized module that can cover diverse randomization OpenDaylight (Helium), Floodlight (v1.2), and a commercial
scenarioineachcontroller.Ofcourse,theimplementationwill controller (Brocade Vyatta v2.3.0).
be different in each controller, but the conceptual architecture
is similar across all controllers, which simplifies the DELTA A. Use Case 1: Finding Unknown Attacks
framework. In the case of the channel agent, the fuzzing
AmongthekeyfeaturesofDELTAisitsabilitytousespe-
modulesinterceptandparseongoingcontrolmessagesbetween
cializedfuzztestingtouncovernewSDNvulnerabilities.Here,
a controller and the data plane to randomize control flows
we highlight this capability using experiments we conducted
and values. For example, the control-flow fuzzer randomly
on ONOS, OpenDayLight (ODL), and Floodlight controllers.
holds one of control messages and later resends the message
Table III summarizes seven new attack scenarios that were
to manipulate the symmetric flow sequence. If a controller
revealedthroughourevaluation.Thesescenariosspanallthree
manages all flow-rule installations to the data plane, this
SDN control flow categories (symmetric, asymmetric, and
informationwillbedeliveredthroughanetworkmessage(e.g.,
intra-controller).
a TCP channel). In this case, the value fuzzer can capture and
forge this message (i.e., mounting a form of MITM attack
Unknown Attack Name Flow Target
[35]).
Sequence and Data-Forge ASY Floodlight
Stats-Payload-Manipulation SYM Floodlight, ODL
Wheneverarandomizationprocedureiscompleted,thetest
Echo-Reply-Payload-Manipulation SYM ODL
resultswillbedeliveredtotheresultanalyzerintheAM,which
Service-Unregistration INT ODL
thenanalyzestheresultstoverifytheeffectivenessofanattack
Flow-Rule-Obstruction INT ONOS
scenario. This evaluation for detecting new successful attacks
Host-Tracking-Neutralization INT ONOS
iscurrentlybasedonthesetofseventestcriteriamentionedin Link-Discovery-Neutralization INT Floodlight
the previous subsection on Blackbox Fuzzing. If any of these
seven outcomes is detected, the result analyzer regards this as TABLEIII:Unknownattackcaseclassification:ASY(Asymmetric),
SYM (Symmetric), and INT (Intra-controller) flows.
a new attack and reports the test case to the operator.
VI. IMPLEMENTATION 1)Asymmetric Control Flows: In this scenario, a previ-
ously unknown asymmetric control flow attack involves the
We have implemented an instance of DELTA to verify its
PACKET IN message and the Floodlight controller.
feasibility and effectiveness. To support the design features
described in Section V, we implemented three types of agents SequenceandData-ForgeAttack: Intheimplementation
and an agent manager in Java, in approximately 11,000 lines of the Floodlight controller, when PACKET IN messages
of code. arriveatthecontroller,itsequentiallydeliversthemessagesto
a set of applications that have registered callbacks. Moreover,
DELTA currently includes application agents for three
anyapplicationthatreceives the messagescanget, insert,
well-known open source controllers (i.e., ONOS, OpenDay-
and even remove the payload within a message. Thus, the
light, and Floodlight) and one commercial controller, enabling
combination of these two features can be misused by a mali-
it to replay attack scenarios and launch fuzzing functions as
cious or buggy application (e.g., delivering crafted payloads).
shown in Table II (OpenDaylight-Beryllium is under develop-
Furthermore, this problem can result in the network entering
ment). As the controller integration design involves the user
anunstablestate.Thefollowingstepbystepprocedureisused
of modular application agents, we are able to minimize the
to find an unknown attack.
integration cost (and impact) of extending DELTA to other
controllers.Thechannelagentemploysapacketcapturelibrary 1) On the initialization of DELTA, each subagent con-
to capture and modify control messages between a controller nects to the agent manager (AM). Then, the AM dis-
and network devices, and it currently understands OpenFlow playstheinitialcommands,whichwecanchoose.We
9select‘FindingUnknownattack’.TheAMrequestsa Before After
target control flow scenario code, and then selects an
asymmetric control flow.
2) We select the target asymmetric control flow mes-
sages to randomize. In this case, the PACKET IN
message is selected, and the AM notifies the target
message type to each fuzz module in the application
and channel agent.
3) As the host agents communicate with each other, the
fuzz modules randomize the sequence and the input Fig. 9: Results of the Sequence and Data-Forge attack experiment
valuesofmessagesmatchingthetargetmessagetype.
4) Whenever a fuzz cycle is completed, the AM checks
each case for violations of the criteria mentioned in
SectionV-B.Ifviolationsarefound,theAMretrieves payload from the message, and then the switch that sent the
the randomized inputs from each fuzz module, and PACKET IN message is subsequently disconnected (i.e., the
saves them in the log file. switch disconnection case in the criteria).
2)Symmetric Control Flows: Unlike the previous exper-
App Fuzzing Topology Other iment, this experiment involves symmetric control flows and
B
Agent Modules Manager Applications presents two new attack scenarios. These cases are detected
by the control channel fuzz module, using randomizing input
PACKET_IN Other
A N o t i fi e r S e r v i c e s Core Services values.
Floodlight Instance Stats-Payload-Manipulation Attack: As mentioned in
PACKET_IN Section II-B, the STATS REQUEST and STATS RESPONSE
Agent Controller messages are the representative messages for symmetric con-
Manager
trol flows. If an application wants to know specific flow
Network Hub statistics, the controller sends a STATS REQUEST message
Channel Agent
to solicit switch status information, then the switch responds
to the controller with the STATS RESPONSE message.
Switch Switch
Host Agent Normal Host
Fig. 8: Fuzz points of the Sequence and Data-Forge attacks Packet Capture
Using the control-flow fuzzer and the value fuzzer in
the application agent, Figure 8 illustrates the attack scenario,
highlighting with the points where the fuzzing modules ran-
domize. Specifically, the control-flow fuzzer randomizes the
delivery sequence of PACKET IN messages (A in Figure 8),
and the value fuzzer randomizes the message payloads (B
in Figure 8). When the fuzz modules change the sequence
and remove all payload bytes in a PACKET IN message, Controller
DELTA discovers the vulnerability. Due to the removal of the
payload, the Topology Manager (in Figure 8) is unable
to receive the original payload and thus causes an exception
error (e.g., NULL pointer exception). As a result, the switch
that sends the PACKET IN message is disconnected because
Fig.10:ResultsoftheStats-Payload-Manipulationattackexperiment
the controller has no exception-handling mechanism. Since
the switch disconnection is one of the criteria that determines
whetherthisfindingisanunknownattack,theAMdetermines
In this case, the DELTA operator first targets symmetric
that this case is an unknown attack scenario.
control flows. Then, the value fuzzer in the channel agent
Basedonthelogfilegeneratedbytheresultanalyzerinthe randomizescontrolmessagespassingthroughthecontrolchan-
AM, we re-examine the unknown case. Figure 9 illustrates the nel. Technically, when the fuzzing module modifies the type
output of the controller’s console during this analysis process. of STATS REQUEST message to an undefined value (before
Initially, the application agent is located at the end of the fuzzing: flow stats, after fuzzing: undefined), the Agent
sequence (in the ‘Before’ column of Figure 9). However, after Manager notices the switch disconnection matched to our
modifying the sequence, the application agent is moved to the criteria.
first entry of the ‘After’ column in Figure 9.
Figure 10 shows the results of the Stats-Payload-
Finally, the controller shows a NULL pointer exception Manipulation attack. When the value fuzzer changes the type
because the Topology Manager cannot properly handle a of the STATS REQUEST message to a randomized value, the
PACKET IN message, as the application agent removes the switch sends an error message (see Packet Capture in Figure
1010) to the controller, and the switch disconnects from the During one experiment, the value fuzzer in the application
controller (see Controller in Figure 10), which violates the agent found that it is possible to unregister certain services
switch-disconnection criterion. from other applications resulting in a significant disruption of
network connectivity. For this experiment, a DELTA operator
Echo-Reply-Payload-Manipulation Attack: In
targets intra-controller control flows and fuzzes only input
another experiment involving symmetric control flows, values.ThevaluefuzzerchoosestheDependencyManager,
the ECHO REQUEST and ECHO REPLY messages are
one of the available services to fuzz. While fuzzing input
popularly used in OpenFlow to exchange information about
parameters, DELTA will try to unregister all services of
latency, bandwidth, and liveness on connected switches. If the ArpHandler which manage ARP packets. Ultimately, the
controller does not receive a reply to the ECHO REQUEST
connectionbetweenhostsisdisconnected.Sincethisfuzzvalue
in time, it assumes that the switch is disconnected.
causesthedisconnectionofhosts,theAMdeterminesthiscase
as a newly found attack scenario.
The operator first selects the symmetric control flows
as the target flow type. Then, the AM randomly picks the
ECHO REPLYmessagetype,andthevaluefuzzerinthechan- Before
nel agent starts to randomize the message passing through the
control channel. When the fuzz module in the channel agent
randomizes the length field of the ECHO REPLY message as
an undefined value (before: 8, after fuzzing: 0), the switch
disconnection event is triggered in the controller.
After
Packet Capture
Length Field
Fig. 12: Results of the Service-Unregistration attack experiment
Controller
Basedonthelogfile,wecanbacktrackthisattackscenario.
As shown in Figure 12, the ArpHandler initially registered
three kinds of services: IHostFinder, IListenDataPacket, and
ICacheUpdateAware (Before in Figure 12). After the fuzzing
Fig. 11: Results of the Echo-Reply-Payload-Manipulation attack
modules unregister the services, the network loses its func-
experiment
tionality, since ARP packets play a critical role as during the
initiation of network communications (After in Figure 12).
Therefore, two hosts that are connected to the switch cannot
From the log information, we try to reproduce this attack
communicate with each other (i.e., criterion (vi): inter-host
case. Figure 11 shows the results of the Echo-Reply-Payload-
communication disconnection).
Manipulationattack.Whenthevaluefuzzerchangesthelength
fieldoftheECHO REPLYmessageto0value(PacketCapture
Flow-Rule-Obstruction Attack: In the implementation of
in Figure 11), the controller causes the exception to parse
ONOS, some applications may have configuration properties.
wrong length value of the message. Finally, the switch is
For example, if an application declares a specific variable as a
disconnected from the controller.
configuration property, the network administrator can change
thevariabledynamically.Inadditiontomanuallychangingthe
3)Intra-Controller Control Flows: In the case of intra-
properties, ONOS provides ComponentConfigService,
controller control flows, the fuzz modules in the application
whichtracksandchangesconfigurationpropertiesforitsappli-
agent have a significant role, and the channel agent is not
cations. While the service allows applications to dynamically
involved.Manyservicesprovidedbyeachcontroller,andthese
changetheconfigurationofeachcomponent,itcanalsochange
servicesformthetargets.Next,weconsiderthefollowingfour
unnecessary configurations.
unknown attack cases.
A previously unknown attack scenario was discovered
Service-Unregistration Attack: OpenDaylight provides a by targeting DELTA to the intra-controller flows. The value
substantial diversity of network services, and OpenDaylight- fuzzer in the application agent chooses ComponentConfigSer-
hosted applications can dynamically register and use these vice among available services for randomizing input val-
services. For example, applications can freely register the ues. When the value fuzzer randomizes certain properties of
DataPacketService to parse control messages arriving ReactiveForwarding,thedefaultapplicationtosendflow
from the switch (e.g., PACKET IN). While the application rules to the switch, the AM detects noticeable performance
canregistertheseservicesatinitialization,theapplicationscan degradation of the switch. More specifically, the fuzzing
dynamically change the services of other applications without module randomizes the Packet_Out_Only property of the
constraint, and potentially with malicious intent. ReactiveForwardingservice(default:false,afterfuzzing:true),
11and the ReactiveForwarding service sends no FLOW MOD
messages to the switch.
Before
Fig. 14: Results of the Host-Tracking-Neutralization attack experi-
After
ment
Link-Discovery-Neutralization Attack: Floodlight also
provides diverse network services in the controller core
for use by applications. Among these services, the
Fig. 13: Results of the Flow-Rule-Obstruction attack experiment LinkDiscoveryService offers a way of managing the
linkinformationbysendingLLDPpackettootherapplications.
For example, an application can read what link is connected
Withthelogfile,wecanverifythefeasibilityofthisattack. to a specific switch, or send LLDP packets to other switches
Figure 13 shows the difference of the latencies before and using this service.
after the attack. Since the ReactiveForwarding service does
We found that an application can prevent the controller
notsendFLOW MODmessagestotheswitch,everynewflow
from sending LLDP packets to all switches that are connected
arrivingattheswitchkeepsgeneratingPACKET INmessages
to the controller. This misleads the controller about tracking
tothecontroller.Thus,theaverageoflatenciesbecomesslower
the link information. For the discovery, an operator selects
(about 4 ms in Figure 13 bottom) than the average before
intra-controller control flows as the target to be manipulated
the attack (about 1 ms in Figure 13 top) as the workload of
by the value fuzzer module in the application agent (not in
the controller increases (i.e., criterion (v): switch performance
the channel agent). The value fuzzer module feeds all switch
downgrade).
information to an API provided by the LinkDiscoverService,
Host-Tracking-NeutralizationAttack:ONOSkeepstrack which suppresses the sending of LLDP packets.
of the location of each end-host connected to switches
through the HostLocationProvider, which maintains Before After
host-relatedinformation(e.g.,anIPaddress,aMACaddress,a
VLANID,endaconnectedport).Thus,ifanend-hostattaches
toaswitchandtheservicenoticesandupdatestheinformation
of the end-host. As mentioned in the previous unknown attack
scenario,ComponentConfigServicecanalsochangesomecon-
figuration properties belonging to the HostLocationProvider
Switch
service.
Host
An operator can aim DELTA at the intra-controller flows
Fig. 15: Results of the Link-Discovery-Neutralization attack exper-
for input value fuzzing (not flow sequence), then the Com-
iment. A red circle (before) represents a live link between two
ponentConfigService service is selected by the value fuzzer switches, and a red dotted line (after) represents a failed link.
in the application agent for input-value randomization. While
the value fuzzer works, the controller receives error messages
from the switch. Since the switch sending error messages to As a result of this attack, the controller is forced to
thecontrollermatchesoneofthesevenvulnerabilitydetection misinterpret the link-state information. Using a post-mortem
criteria, the AM logs information that the fuzzing module analysis of the log information, we can reproduce this attack
randomized the hostRemovalEnabled property of the scenario to check if this attack really violates the criteria (i.e.,
HostLocationProvider (default: true, after fuzzing: false). This criterion (iii) internal-storage poisoning). As shown in Figure
change effectively prevents the tracking of end-host locations. 15,thecontrollerwebUIdisplaysthecorrectnetworktopology
For example, if a host is disconnected from the switch, the information(BeforeinFigure15).However,aftertheattackis
controller does not detect this disconnection. conducted, the topology information is changed, although the
real topology as not been altered (After in Figure 15).
To verify this unknown attack scenario, we analyzed the
log information and backtracked the attack. Figure 14 shows
B. Use Case 2: Reproducing Known Attacks
the outputs from a packet capture tool [6] in the channel
agent. The channel agent senses the error messages from the Sincetheproceduresandoutputsofknownattackscenarios
switch, which means that the controller for the flow rules is are pre-specified, each agent needs to follow the steps and
not available due to the invalid host. However, although the sequences of those scenarios with the pre-defined parameters.
communication ends, error messages are sent to the controller In the case of reproducing the known attack scenarios, we
every10secondsuntilthecontrollershutsdown(i.e.,criterion will illustrate two example cases: Man-In-The-Middle attack
(vii): error-packet generation). and Application Eviction attack.
12Man-In-The-Middle Attack: As presented in Section IV,
Packet Capture: Before Packet Capture: After
most commercial switches do not support the encryption of
controlmessagesbetweenthecontrolplaneandthedataplane
(i.e., plain TCP channel) due to the performance issue. Thus,
an attacker can freely sniff control messages and manipulate
them, which can result in serious problems (e.g., network
failures). In the implementation of the channel agent, we Floodlight Web UI: Installed Flow Rules
embeded the rule-modification function that can change an
originalOpenFlowactiontoacraftedactioninaFLOW MOD
message,whichisusedtoenforceaflowruletoaswitch,into
the attack simulator.
Fig. 17: Results of the MITM attack experiment
(1)
unload an application running on the controller (briefly men-
tioned in Section IV). However, due to no restriction on
(2) using the mechanism, an application can arbitrarily unload
other applications. Here, we demonstrate an attack against the
commercialBrocadeVyattaSDNcontroller[3],whichisbased
on OpenDaylight.
(3)
(A)
(4)
(B)
Fig. 16: Steps of the MITM attack experiment
Fig. 18: Results of the Application Eviction attack experiment
The following four steps elaborate the procedure of this
Oncethe targetcontroller hasbeen initialized,as shownin
attack conducted against the Floodlight controller presented
Figure 18 (A), the application agent and the target application
in Figure 16. (1) Upon the initialization of DELTA, each
to evict are up and running (both are in ACTIVE state). Here,
agent connects to the agent manager (AM). Then, the AM
we attempt to evict the flowmanager application, which plays
first shows the initial available commands. Here, we selected
a critical role in managing flow rules on the switches. Then,
‘Replaying known attacks’. (2) The AM requests an attack
once the target is confirmed, the agent executes the attack to
scenario code, or an operator can select all. Here, we selected
stop the target application. As a result, one can see that the
attack code ’B-2-A’ denoting the MITM attack, whose code is
flowmanagerapplicationisnolongerinanACTIVEstateafter
determined based on the classification presented in [35]. (3)
the attack (Figure 18 (B)).
The AM organizes the actions of each agent based on the
steps of the attack. During the attack, the AM also shows From the attack case, we can consider that many commer-
the attack process. Internally, the channel agent starts to cialandopensourcecontrollerscanbetestedbyDELTA.Thus,
intercept FLOW MOD messages, and the attack simulator in we are planning to test the vulnerabilities of those controllers
the channel agent changes the action field of the messages in the near future.
defined in the configuration file. (4) The AM retrieves the
outputoftheattackfromtheagentsandindicatesonthescreen C. Performance
whether the attack was successful or failed.
1)Finding Unknown Attacks: For finding unknown attack
To verify if the attack process is successful, we monitor cases, DELTA serially executes fuzz modules in each agent.
packets on the control channel and observe the message Upon completion of each fuzz test cycle, the analyzer in AM
changes through the Floodlight Web UI. Figure 17 shows checksiftheattackwassuccessful.TableIVshowstheamount
the results of the attack. While the output port was 15 at oftimetakentocompleteonefuzztestcycle.Theasymmetric
the beginning (see Packet Capture (Before) in Figure 17), the control flow takes the longest average time, because the case
outputporthasbeenchangedto19(seePacketCapture(After) uses all fuzzing modules in the application and the channel
in Figure 17). The crafted FLOW MOD messages have been agent.
installedintotheswitch(Figure17bottom).Thus,flowswould
2)Reproducing Known Attacks: Table V describes the
be redirected to a wrong port after the attack.
executiontimeforreproducingeachknownattackscenario.In
Application Eviction Attack: Most controllers adopt a the case of ONOS, the Event-Listener-Unsubscription attack
mechanism that can allow users to dynamically load and is not possible since ONOS does not provide APIs to access
13Control Flow Type Average Running Time
our tool to diverse control platforms. However, currently our
Asymmetric Control Flow 82.5 sec
framework covers most well-known open source controllers,
Symmetric Control Flow 80.4 sec
and we will provide an interface module for other control
Intra-controller Control Flow 75.2 sec
platforms to easily integrate or extend our framework.
TABLE IV: Finding unknown attack microbenchmark
Second, some operations require human involvement. We
have tried to minimize the amount of human interaction, and
our framework can be operated with simple configurations.
eventlisteners.InthecaseofFloodlight,itisnotpossibletore- However, some cases, such as adding new attack scenarios,
produce the Application-Eviction attack because the controller require manual modifications to some parts of the framework.
does not support a dynamic mechanism that loads/unloads This situation happens when our framework discovers a new
otherapplications.Besidesthoseattackscenarios,weexcluded type of attack through the fuzzing module. In this case, we
theSwitchTableFloodingattackfromthetotalexecutiontime canunderstandanattackscenariothroughtheloginformation,
since it takes more than 90 minutes to fill up 2GB of memory but this may require a new way to handle SDN control
of a Floodlight controller [11]. flows or messages. We will revise this in the near future to
automatically handle all (or most) operations.
AsshowninTableV,mostoftheattackscanbereproduced
within a minute. The System-Command-Execution attack (NF-
1) shows the shortest execution time (less than a second).
IX. CONCLUSION
It takes only five minutes to reproduce all of the aforemen-
This paper describes an important first step toward devel-
tionedattacks,withtheexceptionoftheSwitch-Table-Flooding
oping a systematic methodology for automatically exploring
attack. These results serve to underscore the flexibility and
the critical data flow exchanges that occur among SDN com-
usability of DELTA. Specifically, it enables network operators
ponents in search of known and potentially unknown vulner-
to efficiently reproduce attacks and easily conduct systematic
abilities. To our knowledge, this framework, called DELTA,
securityassessmentsofOpenFlownetworks.Intheabsenceof
represents the first and only SDN-focused security assessment
such a framework, it would be significantly more challenging
tool available today. It has been designed for OpenFlow-
to create test environments for varying and complex SDN
enabled networks and has been extended to work with the
attack scenarios.
most popular OpenFlow controllers currently available. We
also presented a generalizable SDN-specific blackbox fuzz
Controller
Attack Code testing algorithm that is integrated into DELTA. This fuzz
ONOS OpenDaylight Floodlight
testing algorithm enables the operator to conduct in-depth
SF-1 - - 5400 sec
SF-2 16.09 sec 16.34 sec 15.96 sec testingofthedatainputhandlinglogicofarangeofOpenFlow
SF-3 21.5 sec 12.33 sec 11.99 sec componentinterfaces.Wedemonstratetheeffectivenessofthis
SF-4 28.1 sec 19.27 sec 18.6 sec fuzztestingalgorithmbypresentingsevenpreviouslyunknown
AF-1 12.55 sec 8.47 sec 3.13 sec attack scenarios that were detected by this tool.
AF-2 3.38 sec 8.12 sec 3.21 sec
AF-3 12.59 sec 17.79 sec 11.96 sec
AF-4 43.65 sec 23.28 sec 43.2 sec
ACKNOWLEDGMENT
AF-5 40.43 sec 40.24 sec 20.35 sec
This material includes work supported by the National
AF-6 20.52 sec 20.25 sec 20.2 sec
Science Foundation under Grant No. 1547206. Any opinions,
AF-7 20.6 sec 20.32 sec 20.17 sec
findings, and conclusions or recommendations expressed in
AF-8 33.62 sec 33.18 sec 33.14 sec
AF-9 17.8 sec 17.19 sec 7.88 sec this material are those of the author(s) and do not necessarily
CF-1 2.6 sec 3.14 sec 2.14 sec reflect the views of the National Science Foundation. This
CF-2 22.57 sec 13.33 sec N/A work is also supported by Institute for Information & Com-
CF-3 N/A 13.22 sec 13.11 sec munications Technology Promotion (IITP) grant funded by
NF-1 0.028 sec 0.095 sec 0.127 sec the Korean government (MSIP) (No. B0126-16-1026, Devel-
NF-2 23.54 sec 23.2 sec 23.16 sec opment of Core Technologies for SDN-based Moving Target
NF-3 23.43 sec 23.36 sec 23.35 sec
Defense).
NF-4 3.39 sec 4.86 sec 3.17 sec
Total 346.38 sec 317.98 sec 274.84 sec
REFERENCES
TABLE V: Reproducing known attacks microbenchmark: Attack
Code is referenced by Table I [1] K. Benton, L. J. Camp, and C. Small. Openflow vulnerability assess-
ment. InProceedingsofthesecondACMSIGCOMMworkshoponHot
topicsinsoftwaredefinednetworking(HotSDN’13).ACM,2013.
[2] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide,
B.Lantz,B.O’Connor,P.Radoslavov,W.Snow,etal. Onos:towards
VIII. LIMITATIONANDDISCUSSION
an open, distributed sdn os. In Proceedings of the third workshop on
Like other research work, our system also has some limi- Hottopicsinsoftwaredefinednetworking(HotSDN’14).ACM,2014.
tations. First, some testing cases require installing a specified [3] Brocade. Brocade SDN Controller, 2016. http://www.brocade.com/
en/products-services/software-networking/sdn-controllers-applications/
agent (i.e., Application Agent) to an SDN controller. For
sdn-controller.html/.
example, to reproduce the Internal Storage Misuse attack in
[4] S. K. Cha, M. Woo, and D. Brumley. Program-adaptive mutational
each controller requires the installation of our Agent Manager
fuzzing. In Proc. of the IEEE Symposium on Security and Privacy,
for each controller. This limitation may slow the adaptation of May2015.
14[5] B. Chandrasekaran and T. Benson. Tolerating sdn application failures [31] P.Porras,S.Shin,V.Yegneswaran,M.Fong,M.Tyson,andG.Gu. A
withlegosdn.InProceedingsofthe13thACMWorkshoponHotTopics security enforcement kernel for openflow networks. In Proceedings
inNetworks(HotNets’14).ACM,2014. of the first workshop on Hot topics in software defined networks
[6] G.Combsetal. Wireshark-networkprotocolanalyzer. Version0.99,5,
(HotSDN’12),2012.
2008. [32] C.Ro¨pkeandT.Holz. Sdnrootkits:Subvertingnetworkoperatingsys-
temsofsoftware-definednetworks. InResearchinAttacks,Intrusions,
[7] W.Cui,M.Peinado,H.J.Wang,andM.E.Locasto. Shieldgen:Auto-
andDefenses,pages339–356.Springer,2015.
maticdatapatchgenerationforunknownvulnerabilitieswithinformed
probing. In Security and Privacy, 2007. SP’07. IEEE Symposium on, [33] S.Lee,andC.Yoon,andS.ShinandS.Scott-Hayward. DELTA:SDN
pages252–266.IEEE,2007. SECURITYEVALUATIONFRAMEWORK.http://opensourcesdn.org/
projects/project-delta-sdn-security-evaluation-framework.
[8] A.R.Curtis,J.C.Mogul,J.Tourrilhes,P.Yalagandula,P.Sharma,and
S.Banerjee. Devoflow:scalingflowmanagementforhigh-performance [34] C.Scott,A.Wundsam,B.Raghavan,A.Panda,A.Or,J.Lai,E.Huang,
networks. In ACM SIGCOMM Computer Communication Review, Z. Liu, A. El-Hassany, S. Whitlock, et al. Troubleshooting blackbox
volume41,pages254–265.ACM,2011. sdn control software with minimal causal sequences. In Proceedings
of the 2014 ACM Conference on SIGCOMM, pages 395–406. ACM,
[9] M.Dhawan,R.Poddar,K.Mahajan,andV.Mann. Sphinx:Detecting
2014.
securityattacksinsoftware-definednetworks. InNDSS,2015.
[35] SDNSecurity.org. SDNSecurityVulnerabilitiesGenomeProject. http:
[10] J.M.Dover. Adenialofserviceattackagainsttheopenfloodlightsdn
//sdnsecurity.org/project SDN-Security-Vulnerbility-attack-list.html.
controller,2013.
[36] T. N. Security. Nessus. http://www.tenable.com/products/
[11] J. M. Dover. A switch table vulnerability in the open floodlight sdn
nessus-vulnerability-scanner.
controller,2014.
[37] A.Shalimov,D.Zuikov,D.Zimarina,V.Pashkov,andR.Smeliansky.
[12] O. N. Foundation. Security Working Group. https://www. Advanced study of sdn/openflow controllers. In Proceedings of the
opennetworking.org/technical-communities/areas/services. 9th Central & Eastern European Software Engineering Conference in
[13] Fyodor. Nmapsecurityscanner. http://www.nmap.org. Russia, CEE-SECR ’13, pages 1:1–1:6, New York, NY, USA, 2013.
ACM.
[14] P. Godefroid, M. Y. Levin, and D. A. Molnar. Automated whitebox
fuzztesting. InNDSS,volume8,pages151–166,2008. [38] S. Shin and G. Gu. Attacking software-defined networks: A first
feasibility study (short paper). In Proceedings of ACM SIGCOMM
[15] S.Hocevar. zzuf. https://github.com/samhocevar/zzuf.
WorkshoponHotTopicsinSoftwareDefinedNetworking(HotSDN’13),
[16] C.-Y. Hong, S. Kandula, R. Mahajan, M. Zhang, V. Gill, M. Nan- August2013.
duri, and R. Wattenhofer. Achieving high utilization with software-
[39] S.Shin,Y.Song,T.Lee,S.Lee,J.Chung,P.Porras,V.Yegneswaran,
driven wan. In ACM SIGCOMM Computer Communication Review,
J. Noh, and B. B. Kang. Rosemary: A robust, secure, and high-
volume43,pages15–26.ACM,2013.
performance network operating system. In Proceedings of the 2014
[17] K. Hong, L. Xu, H. Wang, and G. Gu. Poisoning network visibility ACMSIGSACConferenceonComputerandCommunicationsSecurity
in software-defined networks: New attacks and countermeasures. In (CCS’14),November2014.
Proceedings of the 22nd Annual Network and Distributed System
[40] S.Shin,V.Yegneswaran,P.Porras,andG.Gu. Avant-guard:Scalable
SecuritySymposium(NDSS’15),February2015.
andvigilantswitchflowmanagementinsoftware-definednetworks. In
[18] A. D. Householder and J. M. Foote. Probability-based parameter Proceedingsofthe20thACMConferenceonComputerandCommuni-
selection for black-box fuzz testing. Technical report, 2012. CERT cationsSecurity(CCS’13),November2013.
TechnicalReport. [41] A.Takanen,J.D.Demott,andC.Miller.FuzzingforSoftwareSecurity
[19] HP. HPSDNAppStore. https://marketplace.saas.hpe.com/sdn. Testing and Quality Assurance. http://www.mcafee.com/us/products/
network-security-platform.aspx.
[20] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh,
S.Venkata,J.Wanderer,J.Zhou,M.Zhu,etal. B4:Experiencewitha [42] A.TurnerandM.Bing. Tcpreplay:Pcapeditingandreplaytoolsfor*
globally-deployedsoftwaredefinedwan.InACMSIGCOMMComputer nix. online],http://tcpreplay.sourceforge.net,2005.
CommunicationReview,volume43,pages3–14.ACM,2013. [43] X. Wang, Z. Li, J. Xu, M. K. Reiter, C. Kil, and J. Y. Choi. Packet
[21] D.KotaniandY.Okabe. Apacket-inmessagefilteringmechanismfor vaccine:Black-boxexploitdetectionandsignaturegeneration. InPro-
protection of control plane in openflow networks. In Proceedings of ceedingsofthe13thACMconferenceonComputerandcommunications
theTenthACM/IEEESymposiumonArchitecturesforNetworkingand security,pages37–46.ACM,2006.
Communications Systems, ANCS ’14, pages 29–40, New York, NY, [44] J. Yao, Z. Wang, X. Yin, X. Shiyz, and J. Wu. Formal modeling and
USA,2014.ACM. systematic black-box testing of sdn data plane. In Network Protocols
[22] D. Kreutz, F. M. Ramos, P. Verissimo, C. E. Rothenberg, S. Azodol- (ICNP),2014IEEE22ndInternationalConferenceon,pages179–190.
molky, and S. Uhlig. Software-defined networking: A comprehensive IEEE,2014.
survey. proceedingsoftheIEEE,103(1):14–76,2015. [45] M.Yu,J.Rexford,M.J.Freedman,andJ.Wang. Scalableflow-based
[23] D. Kreutz, F. M. V. Ramos, and P. Verissimo. Towards secure networking with difane. ACM SIGCOMM Computer Communication
and dependable software-defined networks. In Proceedings of ACM Review,40(4):351–362,2010.
SIGCOMM Workshop on Hot Topics in Software Defined Networking [46] M.Zalewski. AmericanFuzzyLop. lcamtuf.coredump.cx/afl/.
(HotSDN’13),August2013.
[24] D.Maynor. Metasploittoolkitforpenetrationtesting,exploitdevelop-
ment,andvulnerabilityresearch. Elsevier,2011.
[25] J.Medved,R.Varga,A.Tkacik,andK.Gray. Opendaylight:Towards
amodel-drivensdncontrollerarchitecture. In2014IEEE15thInterna-
tionalSymposiumon,pages1–6.IEEE,2014.
[26] B. P. Miller, L. Fredriksen, and B. So. An empirical study of the
reliabilityofunixutilities. CommunicationsofACM,1990.
[27] B.S.Networks.Floodlight.http://www.projectfloodlight.org/floodlight/.
[28] OpenNetworkingFoundation. https://www.opennetworking.org/.
[29] OpenFlow. OpenFlow Specification version 1.0.0. Technical report,
2009. http://archive.openflow.org/documents/openflow-spec-v1.0.0.pdf.
[30] OpenFlow. OpenFlow Specification version 1.3.0. Technical re-
port,2011. https://www.opennetworking.org/images/stories/downloads/
sdn-resources/onf-specifications/openflow/openflow-spec-v1.3.0.pdf.
15