Ef(cid:2)cient Context-Sensitive Intrusion Detection
JonathonT.Gif(cid:2)n SomeshJha BartonP.Miller
ComputerSciencesDepartment
UniversityofWisconsin,Madison
E-mail:fgiffin,jha,bartg@cs.wisc.edu
Abstract computationalgrid[10].Theseintrusiondetectionsystems
monitor processes running on the local machine and (cid:3)ag
unusual or unexpected behavior as malicious. In model-
Model-basedintrusiondetectioncomparesaprocess’sex- baseddetection[8], thesystemhas a modelofacceptable
ecution against a program model to detect intrusion at- behaviorforeachmonitoredprocess. Themodeldescribes
tempts. Models constructed from static program analy- actions that a process is allowed to execute. A monitor
sis have historically traded precision for ef(cid:2)ciency. We comparesthe runningprocess’s executionwith the model
address this problem with our Dyck model, the (cid:2)rst ef(cid:2)- and(cid:3)agsdeviationsasintrusionattempts.
cient statically-constructed context-sensitive model. This Model-basedintrusiondetectioncandetectunknownat-
modelspeci(cid:2)esboththecorrectsequencesofsystemcalls tackswithfewfalsealarms.Suchasystemdetectsnewand
that a program can generate and the stack changes oc- novelattacksbecausethemodelde(cid:2)nesacceptableprocess
curring at function call sites. Experiments demonstrate behavior rather than the behavior of known attacks. Yet,
that the Dyck model is an order of magnitude more pre- false alarms are low to non-existent for a properly con-
cise than a context-insensitive (cid:2)nite state machinemodel. structedmodelbecausethemodelcapturesallcorrectexe-
With null call squelching, a dynamic technique to bound cutionbehaviors.
cost,theDyckmodeloperatesintimesimilartothecontext- Constructingavalidandpreciseprogrammodelisachal-
insensitivemodel. lenging task. Previous research has focused on four ba-
We alsopresenttwostatic analysistechniquesdesigned sictechniquesformodelconstruction:humanspeci(cid:2)cation
tocountermimicryandevasionattacks. Ourbranchanal- [14],training[5,7,17,23,34],staticsourcecodeanalysis
ysisidenti(cid:2)esbetween32%and64%ofourtestprograms’ [31,32],andstaticbinarycodeanalysis[10]. Ofthese,we
system call sites as affecting control (cid:3)ow via their return usestatic binarycodeanalysissince it requiresnohuman
values. Interproceduralargumentcapture of general val- interaction, no determination of representative data sets,
uesrecovers32%to69%moreargumentsthanpreviously and no access to a program’s source code, although it is
reportedtechniques. unsuitableforinterpreted-languageanalysis. It constructs
modelsthatcontainall possibleexecutionpathsa process
mayfollow,sofalsealarmsneveroccur. However,anim-
1.Introduction precise modelmay incorrectly accept attack sequences as
valid. We use static binary analysis to construct a (cid:2)nite
Host-based intrusion detection seeks to identify attempts
statemachinethatacceptsallsystemcallsequencesgener-
to maliciouslyaccess the machineon whichthe detection
atedbyacorrectlyexecutingprogram.
systemexecutes.Remoteintrusiondetectionidenti(cid:2)eshos-
Models constructed from static program analysis have
tile manipulation of processes executing in a distributed
historicallytradedprecisionfor ef(cid:2)ciency. The most pre-
(cid:3) cise program representations, generally context-sensitive
This work is supported in part by Of(cid:2)ce of Naval Research grant
N00014-01-1-0708,DepartmentofEnergygrantsDE-FG02-93ER25176 push-downautomata(PDA),areprohibitivelyexpensiveto
and DE-FG02-01ER25510, Lawrence Livermore National Lab grant operate[10,31,32]. Forexample,WagnerandDeansug-
B504964, and NSF grant EIA-9870684. The U.S. Government is au-
gested the use of their less precise digraph model simply
thorizedtoreproduceanddistributereprintsforGovernmentalpurposes,
because more precise models proved too expensive. Our
notwithstanding any copyright notices af(cid:2)xed thereon. The views and
conclusionscontainedhereinarethoseoftheauthorsandshouldnotbein- earlierworkusedregularlanguageoverapproximationsto
terpretedasnecessarilyrepresentingtheof(cid:2)cialpoliciesorendorsements, a context-free language model, again due to cost. This
eitherexpressedorimplied,oftheabovegovernmentagenciesortheU.S.
paper presents a new model structure that does not suffer
Government.fromsuchdrawbacks. OurDyckmodelisahighlyprecise procmailimprovedfrom14.2withacontext-insensitive
context-sensitiveprogramrepresentationwithruntimebe- modelto0.8withtheDyckmodelasmeasuredbytheaver-
havioronlyslightlyworsethanacheap,impreciseregular agebranchingfactormetric.Excludingrecursivecallsites,
languagemodel. impossiblepaths[31,32]donotexistin theDyckmodel.
TheDyckmodelisaspowerfulandexpressiveasthefull Theonlysequencesofsystemcallsitacceptsarethosethat
PDAmodel.AnearlyresultbyChomskyprovedthatevery theprogramcouldactuallyproduce.
context-freelanguageis ahomomorphismoftheintersec-
Null call squelching, a dynamic method to limit null
tionofaDycklanguagewitharegularlanguage[2].Chom-
callgeneration.Wehavedevelopednullcallsquelchingto
sky’sresultimpliesthatourDyckmodelisaspowerfulas
preventexcessivenullcallgenerationwithoutreducingse-
thePDAmodel,sotheef(cid:2)ciencygainsweobservecomeat
curity.Squelchingcombinesbothstaticanddynamictech-
nolossincorrectness.
niquestogenerateonlythosenullcallsthatprovidecontext
TheDyckmodelcandetectabroadclassofattacks.Gen-
forasystemcall. Withsquelchingenabled,theworst-case
erally,themodeldetectsattacksthatexecutearbitrarycode,
numberofnullcallsgeneratedpersystemcallis bounded
as this code will not match the expected behavior of the
by2h,wherehisthediameteroftheprogram’scallgraph.
process.Forhost-basedintrusiondetection,thisincludes:
WepresenttheDyckmodelandnullcallsquelchinginSec-
tion4.
(cid:15) Attemptstoexercisearaceconditionthatusesinvalid
Ef(cid:2)ciency gains demonstrate the value of squelching.
control(cid:3)owtorepeatedlyexecuteacodesequence.
Previousexperimentsusingacontext-sensitivePDAcould
(cid:15) Attempts to bypass security checks via impossible not even be completed because the model update failed
paths(seeAppendixA). to terminate in reasonable time [31, 32]. With the Dyck
model, operationalcost nearsthat of a context-insensitive
(cid:15) Attemptstoexecuteprogramsviacommandinsertion
nondeterministic(cid:2)niteautomaton(NFA)model.
inunsanitizedargumentstosubshells.
Data (cid:3)ow analyses to counter mimicry attacks. We
(cid:15) Changingasymboliclinktargetbeforeanexeccall. useinterproceduraldata(cid:3)owanalysistomodelarguments
passedtoandreturnvaluesreceivedfromsystemcalls. In
(cid:15) Buffer overruns,heap over(cid:3)ows, or formatstring at-
combination,theseanalyseshindermimicryandevasionat-
tacksthatforceajumptoinjectedcode.
tacks[26,27,28,33]byrestrictingthepathsintheprogram
modelthatacceptanattacksequence.Wediscussdata(cid:3)ow
The Dyck model is further suited for remote intrusion
analysisinSection5.
detection. This detection technique identi(cid:2)es hostile ma-
nipulation of remotely executing programs that send cer-
tain system calls to a different, local machine for execu- 2.Related Work
tion. Successfulremotemanipulationmeansthelocalsys-
Inhuman-speci(cid:2)edmodel-basedintrusiondetection, ase-
tem executes malicious system calls. This is a stronger
curityanalystmanuallyspeci(cid:2)escorrectbehaviorforeach
threat model than the host-based intrusion detection set-
programof interest [14, 24] or annotates the source code
ting. Attackers do not exploit vulnerabilities at speci(cid:2)c
todescribesecurityproperties[1]. Aruntimemonitoren-
pointsofexecutionbutcanreplacetheentireimageofthe
forcesthemanuallydescribedmodel. Alternativesystems
remoteprocesswiththeirattacktoolatanyarbitraryexecu-
checkbehavioragainstaspeci(cid:2)cationofmaliciousactivity
tionpoint.BymodelingtheremotejobwithaDyckmodel
[18].Suchsystemsarereasonableforverysmallprograms;
andmonitoringthestreamofremotesystemcallsarriving
however,asprogramsgrow,humanspeci(cid:2)cationbecomes
at the local machine, we can detect remote manipulation
overlytedious.
thatproducesinvalidcallsequences.
Staticanddynamicprogramanalysisscalebetterbyau-
Thispapermakesthreeprimarycontributions:
tomatically constructing models. Wagner and Dean stat-
The Dyck model, enabling ef(cid:2)cient context-sensitive ically analyzed C source code to extract both context-
programmodeling.TheDyckmodelrepresentsasubstan- insensitive and context-sensitive models [31, 32]. Unfor-
tialimprovementinstaticallyconstructedprogrammodels. tunately,thecosttooperatetheirprecisecontext-sensitive
OurDyckmodelexposescallstackchangestothemonitor. abstract stack model was prohibitively high and unsuit-
Modeloperationishighlyef(cid:2)cientbecausethemonitorex- ableforpracticaluse. We observedsimilarexpensewhen
ploresonlytheexactcallpathfollowedbytheapplication. using context-sensitive push-down automata constructed
Experiments bear out these claims. All our test pro- via static analysis of SPARC binary code [10]. These
grams show an order of magnitude improvement in pre- papers recommended using imprecise context-insensitive
cision when using the Dyck model rather than a context- models to achieve reasonable performance. The Dyck
insensitive model. For example, the model precision for modelpresentedinthispapersigni(cid:2)cantlyimprovesuponthese works, providing a precise context-sensitive model program behaviors and generates a model that may miss
withexcellentperformancecharacteristics. attacks. Conversely,dynamicanalysisunderapproximates
Wagner and Dean also introduced the impossible path acceptable behaviors, leading to a high false alarm rate.
exploit. A context-insensitive model includes paths orig- Ultimately, a hybrid model based upon both approaches
inating from one function call site but returning to a dif- could be advantageous by minimizing the drawbacks of
ferentcallsite. Acorrectlyexecutingprogramcouldnever each technique. Although we chose to present the Dyck
follow such a path due to its call stack; however, an at- model in the context of static analysis, it appears equally
tacker could force impossible control (cid:3)ow via an exploit. well suited for use in dynamic analysis or a hybrid ap-
Our Dyckmodelis context-sensitiveanddetects impossi- proach.
blepathexploits.
Dynamicanalysis,basedupontheseminalworkofFor- 3.ModelConstruction Infrastructure
rest et al. [7], constructs program models from observed
behaviorduringrepeatedtrainingruns[8,9,12,13,16,17, Forcompletenessofpresentation,wehaveincludedasum-
19,29,35].Fengetal.[5]extendedtheworkofSekaretal. maryofinfrastructureworkin thisarea. Readersfamiliar
[23] to learn sequences of system calls and their calling withsuchworkcanskiptothispaper’smajornewcontri-
contexts. TheirVtPathprogrammodelisadatabaseofall butions: theDyckmodelinSection4 andmimicryattack
pairs ofsequential systemcalls andthestack changesoc- defensesinSection5.
curringbetweeneachpair,collectedovernumeroustrain- Our tool featurestwo components: the binary analyzer
ing runs. The VtPath language is the regular language andtheruntimemonitor. TheanalyzerreadsaSPARCbi-
expansionofa context-freelanguagewith boundedstack. naryprogramandusesstaticprogramanalysistoconstruct
This is equivalent to our Dyck model, where the stack amodeloftheprogram.Additionally,itrewritesthebinary
boundis the maximum depth of the program’scall graph programcodetoenablemorepreciseandef(cid:2)cientmodel-
whenignoringrecursion. However,ourworkdiffersfrom ing. The user then executes the rewritten binary in their
thatofFengetal.infourimportantaspects: security-criticalenvironment. Theruntimemonitortracks
the executionof the rewritten binaryto ensure that it fol-
(cid:15) The Dyck model is fundamentally more expressive
lowstheanalyzer’sconstructedmodel. Deviationfromthe
thanVtPath. Foref(cid:2)ciency,theDyckmodeltreatsre-
modelindicatesthatasecurityviolationhasoccurred.
cursion as regular. However, this is not a limitation
Ourprogrammodelisa(cid:2)nitestate machinewhoselan-
ofthemodel. TheDyckmodelcancorrectlyexpress
guagede(cid:2)nesallpossiblesequencesofsystemcallsthatan
context-sensitive recursive calls and accept a strictly
applicationmaygenerateduringcorrectexecution. Model
context-freelanguage.VtPathcannotmodelrecursion
constructionprogressesthroughthreestages.
becauseallpossiblerecursivedepthswouldneedtobe
learnedduringtraining. Itmustaccepta regularlan- 1. We read the binary program and construct a control
guage. (cid:3)ow graph (CFG) for each procedurein the applica-
tion. EachCFG representsthepossiblecontrol(cid:3)ows
(cid:15) TheDyckmodel,viaitsnullcallinstrumentation,de-
inaprocedure.
tects attacks that VtPath cannot. Null calls reduce
non-determinism,betterenablingthemonitortotrack 2. We convert each control (cid:3)ow graph into a non-
processexecution.AppendixApresentsanexample. deterministic (cid:2)nite automaton(NFA) that models all
correctcallsequencesthatthefunctioncouldproduce.
(cid:15) ThestaticanalyzerconstructingourDyckmodelana-
lyzessystemcallargumentsandreturnvaluestopre- 3. Wecomposethecollectionoflocalautomataatpoints
vent mimicry attacks [26, 27, 28, 33]. The Dyck ofinternaluserfunctioncallstoformasingleinterpro-
modelincludesrestrictionsonvalidargumentsandac- ceduralautomatonmodelingtheentireapplication.
ceptableexecutiondirectionsbaseduponsystemcall
returnvalues. TheVtPathmodel,and,indeed,allbut Theruntimemonitorenforcestheprogrammodelbyoper-
one learned model [25], ignore these arguments and atingtheinterproceduralautomatonatruntime.
returnvalues. Figure 1 contains the SPARC assembly code for three
examplefunctions,withsystemcallsinboldface. Figure2
(cid:15) Our context-free Dyck model is a compact program
presentstheNFAconstructedforeachfunction.
representation. Inthe worst case, a regularlanguage
Notethatsystemcalltransitionsincludearguments. We
expansion of a bounded context-free language, such
analyzethedata(cid:3)owoftheprogramtoreconstructanex-
asVtPath,maygrowexponentiallylarge.
pression graph for each argument. By simulating execu-
Weviewstaticanddynamicanalysistechniquesascom- tionofthemachineinstructionsintheexpressiongraph,the
plementary. Static analysis overapproximates acceptable analyzerrecoversstatically knownargumentvalues. This0 func: static char file[] = "filename";
1 save %sp, -96, %sp void func () f
2 sethi %hi(file), %o0 int fd = open(file, O_RDWR);
3 or %o0, %lo(file), %o0 for (int i=0; i<10; ++i)
4 call open action(fd, 128);
5 mov 2, %o1 writewrap(fd);
6 mov %o0, %l6 action(fd, 16);
7 mov 0, %l7 g
8 L1: cmp %l7, 10
9 bge L2
10 mov %l6, %o0
11 call action
12 mov 128, %o1
13 b L1
14 add %l7, 1, %l7
15 L2: call writewrap
16 nop
17 mov %l6, %o0
18 call action
19 mov 16, %o1
20 ret
21 restore
22 action: static char buf[128];
23 cmp %o0, 0 void action (int filedes, int size) f
24 ble L3 if (filedes > 0)
25 mov %o1, %o2 read(filedes, buf, size);
26 sethi %hi(buf), %o1 g
27 jmp read
28 or %o1, %lo(buf), %o1
29 L3: retl
30 nop
31 writewrap: static char root[] = "root";
32 sethi %hi(root), %o1 void writewrap (int filedes) f
33 or %o1, %lo(root), %o1 write(filedes, root, 5);
34 jmp write g
35 mov 5, %o2
Figure 1. SPARC assembly code and C source code for three example functions, func, action, and
writewrap. We analyze binary code and include this source code only to aid comprehension of the
codebehavior.
recoverypreventsanattackerfrompassingarbitraryargu- globalmodel[10, 31,32]; unfortunately,neithermodelis
ments to system calls. Observe that the (cid:2)rst argument to entirelysatisfactory.
read in Figure 1, the (cid:2)le descriptor returned by open, TheNFA model(Figure3)is an imprecisebut ef(cid:2)cient
isadynamicvalueandcannotbestaticallyrecoveredwith context-insensitive model. An NFA offers excellent run-
this technique. Section 5.1 presents a new technique for time performance, but suffers from impossible path ex-
recoveryofsuchvalues. ploits. Impossiblepathsexistwhenmultipledifferentcall
Theseautomatahaveadesirablepropertyforsystemcall sitestothesametargetprocedureexist. Thelanguageac-
modeling: in the absence of indirect function calls, the cepted by the model is then a superset of the program’s
modelissafe;i.e.,ifthereexistsaninputtoanunderlying actual language and includes paths not possible in actual
functionf suchthatf producesasequenceofcallsa1:::a n, programexecution. Thesepathsareimportant: anattacker
thenthelanguageoftheautomatonacceptsthissequence. may use the existence of such edges to attack a process
Hence,themonitorwillnotraisefalsealarms.Tomaintain withoutdetection.TheboldpathinFigure3isanimpossi-
the safety property at indirect call sites, we (cid:2)rst attempt blepathacceptingrepeatedreadandwritecalls.
argument recovery on the jump register to (cid:2)nd all possi- APDAmodeladdscontext-sensitivityforgreaterpreci-
bletargets.ForthesixtestprogramsusedinSection6,our sion, but suffers from extremely high runtime overheads.
analysisrecoversbetween70%and80%ofindirecttargets. Figure4showshowthePDAincludesamodelofthepro-
In the remainingcases, we mark the call-site as targeting gram’scallstack. Themonitorwillonlytraversematching
anyfunctionwhoseaddressistaken. callandreturntransitions,soimpossiblepathsdonotexist
Call-site replacement constructs a model of the entire inthemodel. Thisstackmodeladdscomplexitytotheop-
applicationbysplicinglocalautomatatogetheratfunction erationofthe PDA. Straightforwardexecutionfails in the
calledges. Thismodelstheprogram’sexecutionatpoints presenceofleft recursion. Thepost*algorithm[4], de-
offunctioncalls,i.e.control(cid:3)owshiftsintothecalledpro- signed to terminate even in a left recursive grammar, has
cedure. PreviousworkconstructedeitheranNFAorPDA worst-case complexity that is cubic in the number of au-func func
A
open(file,0) open(file,0)
writewrap writewrap epush(B)
e
action E B
push(C)
epop(B)
action action
write writewrap write e
(?,root,5) (?,root,5) pop(B) push(D) G
e
read e read
F C
(?,buf,?) (?,buf,?)
pop(C)
e
action
pop(D) H
D
epop(D)
Figure2.Localfunctionmodels. Figure4.PDAprogrammodel.
func func
A
open(file,0) open
writewrap writewrap
e
e C
E B B
e action B action
write
write
(?,root,5) e e B D G
e read C
(?,buf,?) F C read
e D H
e D D
Figure3.NFAprogrammodel. Theboldcycle Figure5.Dyckmodelwithoutsquelching.
isanimpossiblepath.
4.Dyck Model
tomatonstates[22]andleadstounreasonablyhighruntime We have developed the Dyck model, the (cid:2)rst ef(cid:2)cient
overheads[31,32]. statically-constructed context-sensitive model. The Dyck
BinaryrewritingcansomewhatmitigatethecostofPDA modelachievesmuchgreateref(cid:2)ciencythanaPDAbylim-
operationvianullcallinsertion.Nullcalls,ordummysys- iting state exploration. Like a PDA, the Dyck model in-
temcalls,observedbythemonitorindicatethepathofex- cludesastacktorecordfunctioncallreturnlocations. Ina
ecution followed by the process. This limits runtime ex- Dyckmodel,however,allstackupdatetransitionsarealso
ploration of the PDA to the states dominated by the null symbolsintheautomatonalphabet. Themonitorthenup-
calltransition. Unfortunately,thisnaivenullcallinsertion datestheDyckstackpreciselywhenthatupdatere(cid:3)ectsac-
hastwoshortcomings. First,wecannotstaticallycompute tualprogrambehavior.Toproducethesestackupdatesym-
the cost of a particular null call insertion point [20], pos- bols,weinserttwonullcallsatselectedfunctioncallsites
sibly leading to high cost. Second, the executioncontext in the program. A precall, immediately before the func-
informationisaccurateonlyuntilanattackertakescontrol tioncall,noti(cid:2)esthemonitorofthecallinglocation.When
oftheapplication. OurDyckmodeladdressestheseshort- thecallreturns,theprogramgeneratesapostcall. Thenull
comingsby providingan attack-resilient context-sensitive callsinsertedateachcallsitearedifferent,soeachcalland
modelthatdynamicallycontrolsnullcallcost. return path to the same target function is distinguishable.
Any postcall not matching the corresponding precall in-1 void func () f func
2 int fd = open(file, O_RDWR);
3 for (int i=0; i<10; ++i) f A
null_call(B);
4 action(fd, 128);
open
null_call(B);
g writewrap
null_call(C); C
5 writewrap(fd); E B B
null_call(C); action
null_call(D);
6 action(fd, 16); write
null_call(D); B D G
g
C
F C read
Figure6.CodeexamplewithDyckinstrumen› e
H
tation. Inserted null calls appear in bold›
face. Eachusercallhasanullcallindicating D D
callandreturn. Linenumberscorrespondto
thoseinFigure1. Althoughthis(cid:2)gureshows
Ccodeforreadability,weinstrumentSPARC Figure7.Dyckmodelwithsquelching.
binarycode.
highfrequency. Recursionandloopsexacerbatethenum-
ber of null calls produced. In these cases, execution fol-
dicates that the program is attempting to force execution lows a backedge in a function’s control (cid:3)ow graph or in
throughanimpossiblepath. theprogram’scallgraphandleadstorepeatednullcallsite
The language accepted by the Dyck model is a brack- execution. Other executionpatterns do not correspondto
eted context-free language originally developed by Gins- backedgetraversalandthusdonotaffecttherateatwhich
berg and Harrison [11]. The precall and postcall inserted executionencountersaparticularnullcall.
at each call site correspondto parenthesis symbols in the We do not insert Dyck calls naively. Our selection al-
language and form a Dyck language [3, 30]. The moni- gorithm statically chooses function call sites to avoid in-
toracceptsonlysequencesthatcorrectlymatchpairedpre- strumenting. First, it will not instrument recursive call
andpostcalls. Notethatthisforcedpairingisastricteruse sites. Each strongly connected component (SCC) in the
ofnullcalls thaninpreviousworkandpreventstheintro- program’scallgraphrepresentsarecursivecycle.Thisrule
duction of impossible paths even when under attack. An (cid:3)attenseachSCCintoasinglenode. Welosecontextsen-
attacker is free to insert or changethe null calls as he or sitivity at points of recursion, but limit the cost of instru-
she wishes; however, the manipulationsmust match some mentation.
correctprogramexecutionpath. Second, we do not instrument call sites that never exe-
Figure5showstheDyckmodel. Nullcallslinktheen- cute a system call. Note that a function f will not exe-
tryandexitsofatargetfunction’smodelwiththecallsites cute a system call if the entire subgraphof the program’s
tothatfunction. Edgeslabeled(cid:11)areprecallsthatinsert(cid:11) call graph rooted at f never reaches a system call. This
ontotheDyckstack.Edgeslabeled(cid:11)arepostcallsthatpop prunesportionsofthecallgraphthatareuninterestingfor
(cid:11). When reaching state B in the Dyck model, the moni- system call monitoring. The monitor need not follow the
torwillfollowonlythetransitioncorrespondingtotheob- program’s executionthrough such functions because they
servedsymbolinthecall stream. Conversely,whenoper- cannotgenerateasystemcall.
ating a PDA, the monitor must replicate its state and fol-
lowbothstackpushtransitionstostatesEandG,suffering 4.2.NullCallSquelching
greateroverhead.Figure6showshowtheprogramrewriter
Astrictlystatictechniquecannotadequatelyaddressthe
insertstheDycknullcallsintotheexistingprogram(recall
looping problem. We have developed null call squelch-
thatweinstrumentbinarycode). Eachprecallandpostcall
ing,adynamictechniquethatrestrictsnullcallgeneration.
isinsertedimmediatelybeforeandaftereachcallsite.
Squelchingproducesonlythemeaningfulnullcallsindicat-
Appendix B gives the formal de(cid:2)nition of the Dyck
ingthe call stack state whenreachinga system call. Null
model.
callsaroundafunctioncallthatreturnswithoutgenerating
asystemcallprovidenosecurityinformationandaredis-
4.1.SelectingInstrumentationPoints
carded. We showtwo importantresults: (cid:2)rst, thenumber
Naive instrumentation may lead to excessive run-time of null calls generatedis bounded by 2hn where h is the
overhead if program execution generates a null call with diameterofthe program’scall graphand n is the numberofsystemcallsgenerated.Second,weshowthatthemodel C toGtoDhasbeenreplacedwithan(cid:15)-transitiondirectly
resists attackermanipulation. We beginby describingthe fromC toD.
squelchingalgorithm. We(cid:2)nallyshowthatnullcallsquelchingimposesastrict
Wedonotchangetheselectionofnullcallinstrumenta- upperboundonthecostofinstrumentation.
tionpoints;rather,wemodifythesemanticsofinstrumen- THEOREM. LetC bethecallgraphforprogramP. De-
tation. First, we create a squelch stack in the program’s note by C the graph obtained from C with each strongly
dataspace.Theprecallinstrumentationpushesthecallsite connectedcomponentcollapsedtoasinglestate. Lethbe
identi(cid:2)erontothesquelchstack,butdoesnotsendtheiden- themaximeumdiameterofC. IfP generatesntruesystem
ti(cid:2)ertothemonitor. callsduringexecution,thentheworst-casenumberofnull
We modify system call sites to send the squelch stack callsgeneratedis2hn. e
along with the system call. The precall identi(cid:2)ers on the PROOF. SeeAppendixB.
squelch stack represent the calling context at the system
4.3.ResiliencetoAttackerManipulation
call. Thesquelchstackisthencleared.
Thepostcallcodeexaminesthestateofthesquelchstack. TheDyckmodelreliesuponstatekeptwiththeapplica-
If the stack is empty, then some system call site sent all tion: thesquelchstackandtherewrittencallsitesthatpro-
symbols to the monitor, including the precall at this call ducenullcalls. Sincethisstateisinthememoryimageof
site. Thus, the postcall is meaningful and is sent to the theprocessandnotofthemonitor,anattackermayarbitrar-
monitor. Ifthestackisnotempty,thenthiscallsitegener- ilymodifythestate. We claimthattheDyckmodelis re-
atednosystemcall. Theapplicationpopsthetopelement silienttoanysuchmodi(cid:2)cation. Thatis,modi(cid:2)cationsare
from the call stack. Rather than inserting irrelevant null successful only if they represent possibly legitimate pro-
calls into the call stream, this algorithm discards them at grambehavior.
theslightexpenseofstackactivityintheapplication. First, the attackercouldmodifythe stack. The monitor
Note that a postcall that pops an element should match will detectaddedelementsbeforea systemcall if thecall
the popped element. A mismatch indicates program ma- pathrepresentedbythestackisnotlegitimate.Bythesame
nipulation not visible to the monitor has occurred. The argument, element deletion will be detected if it attempts
program could kill itself, although an attacker could pre- to introduce an impossible path. We note that althougha
ventthetermination. Weinsteadobservethatthemanipu- denial-of-serviceattack is possiblebyreleasingthe mem-
lationisuninterestingbecauseitgeneratednosystemcalls. oryusedbythestacktoproduceamemoryfaultatthenext
Moreover, the squelch stack has entered a bad state that stackreference,theprocesscouldbekilledbyamyriadof
mayberevealedatthenextsystemcallevent. simplermeans.
Asanexampleofsquelching,considerTable1. Line(a) Second,theattackercouldmodifythecode.Theattacker
showsonepaththroughtheDyckmodelofFigure5with- couldpreventnullcallgeneration,generatealargenumber
outnullcallsquelching. Everyfunctioncallthatdoesnot ofnullcalls,orsenderroneousnullcalls. Theseareequiv-
generateasystemcallproducesamatchedDyckpair(cid:11);(cid:11) alent to the stack manipulations previouslydiscussed and
in the call stream. Clearly, such pairs provide no system willbedetectediftheyattempttointroduceanimpossible
callcontextandcanberemoved. Line(b)showsthesame path. Again, generatinga large numberof null calls may
callstringwithsuchpairsremoved.EveryremainingDyck terminate the process if the squelch stack space becomes
pair envelopssome system call and indicates the applica- exhausted.
tion’s stack context at the point of that system call. With Themonitorstorestheprogrammodelinaseparatepro-
squelching,theruntimecostofnullcallinsertionisnotably cessspace,soanattackercannotmodifythemodel.Simply
reducedwithnolossofsecurity. put, any modi(cid:2)cations to the state kept in the application
We change model construction to incorporate null call still must produce valid call sequences to be accepted by
squelching. In particular, any precall-postcall sequence themonitor.Thus,theattackergainsnothingbymodifying
must be convertedto an (cid:15)-transition. We describe this as thisstate.
alanguagetransformation.LetLbethelanguageaccepted
bytheDyckmodelwithoutnullcallsquelchingandL0
be 5.DataFlowAnalysis
thelanguageacceptedwithsquelching. Leth:L!Lre-
placeallprecall-postcallstringswith(cid:15).Thenh(cid:3) :L!L0
,
We have designed two advanced data (cid:3)ow analyses to
counter the mimicry and evasion attacks described in re-
denotingrecursivecallstohterminatingwhennoprecall-
postcall strings exist in
L0
, generates the squelched lan-
cent literature [26, 27, 28, 33]. These papers stress the
guageL0
. Figure7showstheDyckmodeltransformedto
need to monitor system call arguments and return values
topreventanattackerfromusingsystemcallsasnopsina
acceptasquelchedlanguage.NotethatthepairD;Dfrom
mimicry attack. We have addeda newobject to the anal-
ysis infrastructure that enables such analyses. The dataNumberof
MonitoredCallString: NullCalls:
(a) open,B,B,B,B,B,read,B,B,B,B,read,B,B,B,B,B,C,write,C,D,D 18
(b) open,B,read,B,B,read,B,C,write,C 6
Table 1. System call strings accepted by the Dyck model. These strings correspond to possible
paths in Figure 5 and Figure 7. (a) A possible path accepted by the context›free Dyck model. (b)
Thestringin(a)withnullcallsquelching. Notethelargedropinobservednullcalls.
dependencegraph (DDG) represents complex interproce- may take any necessary corrective action. If the monitor
dural data (cid:3)ows and is described in Appendix C. Sec- doesnottrackthesereturnvaluesandsomesystemcallar-
tion 5.1 presents argument capture, a method to recover gumentsareunknown,theattackercanundetectablycause
statically-knownarguments. Branchanalysis,explainedin thesystem calls tofail. Branchanalysis detectssuch ma-
Section 5.2, uses the DDG to identify branch conditions nipulation.
dynamically set by system call return values. With both Ouranalysisdeterminestheexpectedsubsequentprocess
argumentandbranchanalysis,wereducetheopportunities executionbaseduponthereturnvalueofasystemcall.We
forasuccessfulmimicryattack. insertpredicatetransitionsintotheautomatonthatindicate
controldependenciesupon returnvalues. At runtime, the
5.1.ArgumentCapture monitorrecordsreturnvaluesandtraversesanyedgewith
apredicatethatevaluatestotrueasifitwerean(cid:15)-transition.
To prevent an attacker from manipulating arguments
Itignoresanyedgeevaluatingtofalse. Ifanattackeruses
passed to a system call, we use the DDG to re-
anopcalltosteerexecution,thatcallmustbefollowedby
cover statically-known arguments. Our analysis recov-
systemcallsthatmatchtheerrorcasebehaviorintheactual
ers statically-knowndatavalues usinga two step process.
application.
First,itfollowspathsinthedatadependencegraphtocol-
Forexample,theDDGrevealsthatthebranchinstruction
lecttheexpressiongraphforthevalue.Second,itsimulates
inline24ofFigure1(a)is baseduponthereturnvalueof
theexecutionoftheinstructionsintheexpressiongraphto
open. Weinsertpredicatetransitionsintoaction’smodel
determine the value. If analysis cannot reliably construct
correspondingto the branch behavior (Figure 8). Should
the expressiongraphor if a value is notstatically known,
an attacker use the open call as a nop by specifying an
theanalyzermarksitasunknown.Multipleexecutionpaths
invalidargument,themonitorwoulddetectanintrusionif
may set argumentsdifferently,so we recoversets of inte-
readwerethenextsymbol. Thefailedopencallblocks
gers, set of regular expressions for string arguments, and
thepathtothereadcallviaitsreturnvalue.Thus,branch
dependenciesupona returnvaluefroma previoussystem
analysishelpspreventdevelopmentofsuccessfulattacks.
call.Thisinterproceduralapproachismoregeneralthanthe
constant-valuedintraproceduralcapturedescribedinprevi-
6.Evaluation
ouswork,furtherrestrictingthepossibilitiesforsuccessful
attackermanipulation. We evaluate our program models with two criteria: pre-
Importantly, these argument recoveries help prevent cision and ef(cid:2)ciency. Precise models present an attacker
mimicryandevasionattacks[26,27,28,33]. Considerthe withlittleopportunitytoinsertmalicioussystemcalls. An
readsystemcalltransitioninFigure2.Withargumentre- ef(cid:2)cientmodeladdsonlya small runtimeoverheadto the
covery, we can replace the transition read(?,buf,?) existing process execution. Only ef(cid:2)cient models will be
with read(=open,buf,f16,128g). The (cid:2)rst argu- deployed,andonlyprecisemodelsaddsecurityvalue.Pre-
mentisthereturnvaluefromopen,andthethirdargument cise models generally have higher runtime overhead. We
isthesetofvaluesf16,128g. Anattackercouldnottrans- demonstratethattheDyckmodelwithsquelchingpresents
formthisreadcallintoanopbecauseargumentrecovery anexcellenttradeoffbetweenprecisionandef(cid:2)ciency.
preventsthenecessarymanipulation.
6.1.Metrics
5.2.BranchAnalysis
We use standard techniques to measure these criteria.
A mimicry attack works well because the attacker can Theaveragebranchingfactormetric,originallydeveloped
easily generate nop system calls to steer model operation byWagnerand Dean[31, 32], measuresmodelprecision.
asneeded. Thesenopcallsuseinvalidargumentstoforce Averagebranchingfactoris a dynamicmeasureof an ad-
thecalltofailandnotchangesystemstate. Failedsystem versary’sopportunitytoinsertdangeroussystemcallsinto
calls return an error indicator so that legitimate programs a running process’s call stream. As the monitor operatesCallSites
Program Workload Functions Instructions System User
procmail Filterone1MBmessagetoalocalmailbox. 1,619 112,951 203 8,166
gzip Compressa13MBtext(cid:2)le. 884 56,710 96 2,746
eject OpentheCD-ROMdrivetray. 1,039 70,177 159 3,903
fdformat Formatahigh-density(cid:3)oppydisk. 957 67,874 197 3,767
ps Reportprocessstatusofallprocesses. 963 59,814 96 3,301
cat Concatenate38(cid:2)lestotaling500MBtoa(cid:2)le. 838 52,028 108 2,615
Table2.Testprograms,workloads,andstatistics.
action
open<=0 open>0 10
5
read
0
proc mailgzip eject fdfor matps cat
Figure 8. The model for action with branch
analysis.
the automaton model, it records all potentially dangerous
systemcallsthatitwouldacceptasthenextcall.Theaver-
agebranchingfactoristhenthetotalnumberofthesecalls
dividedbythenumberofautomatonupdatesperformedby
themonitor. Alowaveragebranchingfactorindicatesthat
anattackerhaslittleopportunitytoundetectablyinsertma-
licioussystemcallsintothecallstream.
Ef(cid:2)ciency measurements are straightforward and take
two forms. First, we timethelengthofprocessexecution
with and without model operation. Second, we measure
each process’s runtime memoryusage increase due to bi-
narycodeinstrumentationandthe modelstate keptin the
monitor.
6.2.ExperimentalDesign
We include precision and ef(cid:2)ciency results for six test
programs. Table2showstheworkloadsusedforeachpro-
gram.Notethatexperimentsusingpsarenotreproducible
because its execution depends upon constantly changing
system state. Table 2 also gives statistics for the binary
code of each program. The number of user function call
sites indicates the level of interprocedural control (cid:3)ow
transfersandtheworst-casenumberofDyckinstrumenta-
tionpoints.Wecurrentlyanalyzestatically-linkedbinaries,
sothesestatisticsincludelinkedlibrarycode.
ThesetestprogramsandourruntimemonitorrunonSo-
laris8onaSunUltra10440Mhzworkstationwith640MB
rotcaF
gnihcnarB
egarevA
NFA
Dyck
Squelched Dyck
* Value < 0.1
* **
Figure 9. NFA and Dyck precision. Lower
barsindicategreaterprecision.
of RAM. The monitor and test processes run simultane-
ouslyonthesamemachine. Wehavenotyetimplemented
supportforkerneltrapmonitoring,sotheapplicationcom-
municates with the monitor with a shared message queue
forthepurposesofourexperimentation. Thecollectionof
Solarislibckerneltrapwrapperfunctionsde(cid:2)nesoursetof
systemcallevents.
We measured precision and ef(cid:2)ciency for all six pro-
grams.Themonitorcalculatestheaveragebranchingfactor
foreverytest programusing themethoddescribedabove.
Todetermineruntimeoverheads,weusetheUNIXtime
programtomeasurethewalltimeelapsedduringexecution
ofthetestprogram.Thetestprogramandthemonitorexe-
cuteonthesamemachine,sothistimeincludestestprocess
execution,monitorexecutionasitoperatestheautomaton,
andcontextswitchesbetweentheprocesses.Thetimedoes
not include setup time in the monitor, in which it parses
theprogrammodelfroma(cid:2)le.Wemeasurememoryusage
byrecordingthemaximumprocessimagesize,observedat
everyreturnfromthebrkkerneltrap.Weranexperiments
onalightlyloadedmulti-usermachinewithnootheractive
users.
6.3.EffectsoftheDyckModel
We analyzedhow the Dyck model in(cid:3)uencedprecision
and ef(cid:2)ciency. We compared the Dyck model with andProgram Base NFA % Dyck % SquelchedDyck %
procmail 0.42 0.37 0 0.58 38 0.40 0
gzip 7.02 6.61 0 610.64 8600 7.16 2
eject 5.14 5.17 1 5.19 1 5.22 2
fdformat 112.41 112.36 0 112.22 0 112.38 0
ps 0.05 0.05 0 0.14 180 0.09 80
cat 54.65 56.32 3 895.67 1539 80.78 48
Table3.Programexecutiontimesinseconds. Thebaseexecutiontimehasnoautomatonoperation.
Percentagescompareagainstbaseexecution. Modelshadnoargumentrecoveryorbranchanalysis.
Program Unmonitored (a)Infrastructure (b)Instrumentation (c)StateMachine (d)%Increase
procmail 3272 600 104 840 29%
gzip 600 288 56 296 59%
eject 576 400 64 248 54%
fdformat 600 368 80 408 81%
ps 520 360 56 264 62%
cat 496 328 32 72 21%
Table 4. Memory use (KB) due to instrumentation and monitoring. Unmonitored is base›case ex›
ecution of the unmodi(cid:2)ed programs. Columns (a)(cid:150)(c) show additional use due to the rewriting
infrastructure, our instrumentation, and the state machine structure in the monitor. Column (d)
showspercentageincreasecomparedtothebasecase.
withoutsquelchingagainsttheNFAmodelusedinourpre- erated12,800timesmoresystemcallsthanbaseexecution
viouswork[10]. Figure9showstheprecisionofthethree duetoloopiteration.
modelsforallsixtestprograms.NotethattheDyckmodels We also measured the memory overheadof monitoring
improveprecisionbyanorderofmagnitude. Forexample, with the squelchedDyck model (Table4). This overhead
procmailimprovesfromanaveragebranchingfactorof has two parts: the memory needs of the monitor process
14.2usingtheNFAmodelto0.79withthesquelchedDyck andtheincreasedsizeoftheinstrumentedexecutable. The
model. monitoris thesameacrossallprocesses,differingonlyin
Thesquelchedmodelappearstobeslightlyless precise thestatemachinereadfrom(cid:2)le. Thus,themonitor’scode
thantheunsquelchedDyckmodel. However,thisisaside andstaticdata,1736KB, isaone-timecost sharedacross
effect of the average branchingfactor calculation. Recall multipleexecutions. Approximately1MBofthiscodere-
that the monitor divides the number of potentially dan- sides in shared libraries likely already used by other pro-
gerous system calls that could be accepted during execu- cesses on the system. State machinesare not shared, and
tionbythenumberofautomatonoperations. Theaverage theirmemorysizesareshownincolumn(c).
branchingfactoristheninverselyproportionaltothenum- Instrumented binaries use additional memory for two
berofeventspassedtothemonitor. Asquelchedprogram reasons. First,programsizeincreasesasanartifactofour
willgeneratefewernullcallsthananunsquelchedprogram, current rewriting infrastructure (column (a)). This over-
leadingtoaslightincreaseintheaveragebranchingfactor. head will disappear as we transition to our new rewriting
Table3presentsexecutiontimesforthevariousmodels. environment(alreadyinuseofotherareasofourproject).
Measurement noise accounts for slight timing variations. Second, null call insertion adds code to the program, as
Note the marked improvement when the Dyck model in- shown in column (b). Column (d) shows the percentage
cludes squelching. The squelched Dyck model produced increase due to our instrumentation and to the state ma-
2(cid:150)5timesmoresystemcallsthantheNFAmodel,depend- chinestructureinthemonitor. Memorydemandsbecome
ingupontheprogram.Withtheexceptionofcat,theper- more critical when we wish to monitor large numbers of
formance impact of the additional calls is not signi(cid:2)cant. processesonasystem. Wehaveidenti(cid:2)edseveralareasin
For a system-call-bound program such as cat, the addi- whichwecanmakesubstantialoptimizationsinourmem-
tionaltimeconsumedbynullcallsbecomesnoticeable.We ory usage. For example, column (c) might be reduced
expect that performance could be markedly improved by by more ef(cid:2)cient encodings of our state machines. Al-
batchingDyckcalls and sendingthem with actual system thoughweareunawareofpublishedmemoryneedsin re-
callstominimizethenumberofuser-to-kerneltransitions. latedprojects,webelieveourresultswouldcomparefavor-
Squelchingis critical: the unsquelchedgzip modelgen- ably.1.0
0.5
0.0
proc mailgzip eject fdfor matps cat
rotcaF
gnihcnarB
egarevA
SystemCallSites
No Capture
Program AffectingBranches
Intraprocedural Analysis, Constant Values procmail 97
Interprocedural Analysis, General Values gzip 54
* Value < 0.01 eject 101
fdformat 103
ps 44
cat 45
Table5.Branchanalysisresults. Table2lists
* * * * * thetotalnumberofsystemcallsitesperpro›
gram. Here, the data indicates the size of
thesubsetofsystemcallsiteswhosereturn
valueaffectsprogrambranching.
Figure 10. Effects of argument capture.
Lower bars indicate greater precision. All
bars use the squelched Dyck model. The 64% such system calls in the test programs. Constant-
black bars correspond to the black bars in valued intraprocedural argument capture corresponds to
Figure 9. Note the average branching factor previous work. Our capture recovers general arguments
scalehaschangedbyanorderofmagnitude passed interprocedurally. This stronger analysis recovers
fromFigure9. between 32% and 69% more arguments, depending upon
thetestprogram.
Theseareclearlypartialresults providingonlyanearly
6.4.EffectsofArgumentCapture indication of effectiveness against mimicry attacks. Our
current work in mimicry attack detection and prevention
WebelievethesquelchedDyckmodelrepresentsthebest
isbaseduponanalyzingtheattacksasalanguagecontain-
tradeoff between precision and ef(cid:2)ciency. We used this
mentproblem[33].Formally,giventhelanguageLofsys-
modeltoinvestigatetheeffectsofimprovedargumentcap-
tem call sequences accepted by the monitor, we must de-
ture. Wetestedargumentcaptureinthreeforms. First,all
termineif L containsoneormoreattacksequences. This
argument capture was turned off. Second, we recovered
study requiresfurtherinvestigationand is one component
onlyargumentssetintraprocedurallywithasingleconstant
ofourcontinuingresearch.
value, corresponding to our previous work [10]. Finally,
we enabled the completerecoverytechniquethat uses in-
7.Conclusions
terproceduralanalysistorecovergeneralrepresentationsof
call arguments. Figure 10 shows the model precision at The Dyck model is an ef(cid:2)cient context-sensitiveprogram
eachlevelofcaptureforalltestprograms. representation. Our experiments show that such context-
sensitive models signi(cid:2)cantly improve the strength of an
6.5.DataFlowAnalysisinSupportofMimicryAt›
intrusiondetectionsystem. With null call squelching,the
tackDetection
Dyck model operates with ef(cid:2)ciency only slightly worse
Mimicryandevasionattacksexploitsomede(cid:2)ciencyof than an imprecise context-insensitive NFA. This makes
a program’s model so that the monitor accepts an attack context-sensitivemodelsusable.Lastly,interproceduralar-
system call sequence as valid [26, 27, 28, 33]. Tan et al. gumentcaptureandbranchanalysisbaseduponsystemcall
and Wagner and Soto stress the need to monitor system returnvalueslimitattackermanipulation,reducingoppor-
call arguments and return values for mimicry attack pre- tunitiesforsuccessfulattacks.
vention. As our (cid:2)rst hardening against mimicry attacks,
we have implemented branch analysis and have extended Acknowledgements
argument capture to general values passed interprocedu-
We thank the anonymousreferees and the othermembers
rally. Figure10showstheargumentcaptureimprovement,
oftheWiSAsecuritygroupatWisconsinfortheirvaluable
andTable5showstheresultsforbranchanalysis. Average
feedbackandsuggestions.
branchingfactorispoorlysuitedtomeasurementofbranch
analysis,sothenumberofcallsitesaffectingbranchingis
References
advisoryonly.
Theresults appearpromising. System callsites thatset [1] K.AshcraftandD.Engler.Usingprogrammer-writtencom-
branchesarethosewhosereturnvalueaffectsprogramcon- pilerextensionstocatchsecurityholes.InIEEESymposium
trol(cid:3)ow. Ourbranchanalysisidenti(cid:2)esbetween32%and onSecurityandPrivacy,Oakland,California,May2002.[2] N.Chomsky. Context-free grammars and pushdown stor- [17] W.Lee,S.Stolfo,andK.Mok. Adataminingframework
age. InQuarterlyProgressReportNo.65,pages187(cid:150)194. for building intrusion detection models. In IEEE Sympo-
MassachusettsInstituteofTechnologyResearchLaboratory sium on Security and Privacy, Oakland, California, May
ofElectronics,April1962. 1999.
[3] N.ChomskyandM.Schu¤tzenberger. Thealgebraictheory [18] U. Lindqvist and P. Porras. eXpert-BSM: A host-based
ofcontext-freelanguages. InP.BraffortandD.Hirschberg, intrusion detection solution for Sun Solaris. In 17th An-
editors,ComputerProgrammingandFormalSystems,Stud- nualComputerSecurityApplicationsConference(ACSAC),
ies in Logic and the Foundations of Mathematics, pages pages240(cid:150)251,NewOrleans,Louisiana,December2001.
118(cid:150)161.North-HollandPublishingCompany,Amsterdam, [19] T.Lunt.Automatedaudittrailanalysisandintrusiondetec-
1963. tion: Asurvey. In11thNationalComputerSecurityCon-
[4] J.Esparza,D.Hansel,P.Rossmanith,andS.Schwoon. Ef- ference(NCSC),Baltimore,Maryland,October1988.
(cid:2)cient algorithms for model checking pushdown systems. [20] S.Maheshwari. Traversalmarkerplacementproblemsare
In12thConferenceonComputerAidedVeri(cid:2)cation(CAV), NP-complete. Technical Report CU-CS-09276, Depart-
LNCS#1855,pages232(cid:150)247,Chicago,Illinois,July2000. mentofComputerScience,UniversityofColorado, Boul-
Springer-Verlag. der,Colorado,1976.
[5] H. Feng, O. Kolesnikov, P. Fogla, W. Lee, and W. Gong. [21] K.Ottenstein. Data-FlowGraphsasanIntermediatePro-
Anomaly detection using callstack information. InIEEE gramForm. Ph.D.dissertation,PurdueUniversity,August
Symposium on Security and Privacy, Oakland, California, 1978.
May2003. [22] S.Schwoon. Model-Checking Pushdown Systems. Ph.D.
[6] J.Ferrante,K.Ottenstein,andJ.Warren. Theprogramde- dissertation,TechnischeUniversita¤tMu¤nchen,June2002.
pendencegraphanditsuseinoptimization. ACMTransac- [23] R.Sekar,M.Bendre,P.Bollineni,andD.Dhurjati. Afast
tionsonProgrammingLanguages and Systems, 9(3):319(cid:150) automaton-basedmethodfordetectinganomalousprogram
349,July1987. behaviors. In IEEE Symposium on Security and Privacy,
[7] S.Forrest,S.Hofmeyr,A.Somayaji,andT.Longstaff. A Oakland,California,May2001.
senseofselfforUNIXprocesses. InIEEESymposiumon [24] R.SekarandP.Uppuluri. Synthesizingfastintrusionpre-
SecurityandPrivacy,Oakland,California,May1996. vention/detectionsystemsfromhigh-levelspeci(cid:2)cations.In
[8] T. Garvey and T. Lunt. Model-based intrusion detection. 8thUSENIXSecuritySymposium,Washington,DC,August
In 14th National Computer Security Conference (NCSC), 1999.
Baltimore,Maryland,June1991. [25] R. Sekar, V. Venkatakrishnan, S. Basu, S. Bhatkar, and
[9] A. Ghosh, A. Schwartzbard, and M. Schatz. Learning D.DuVarney. Model-carryingcode: Apracticalapproach
program behavior pro(cid:2)les for intrusion detection. In 1st forsafeexecutionofuntrustedapplications. InACMSym-
USENIX Workshop on Intrusion Detection and Network posium on Operating System Principles (SOSP), Bolton
Monitoring,SantaClara,California,April1999. Landing,NewYork,October2003.
[10] J.Gif(cid:2)n,S.Jha,andB.Miller. Detectingmanipulatedre- [26] K. Tan, K. Killourhy, and R. Maxion. Undermining an
mote call streams. In 11th USENIX Security Symposium, anomaly-based intrusion detection system using common
SanFrancisco,California,August2002. exploits.InRecentAdvancesinIntrusionDetection(RAID)
[11] S.Ginsbergand M.Harrison. Bracketedcontext-freelan- 2002,LNCS#2516,pages54(cid:150)73,Zurich,Switzerland,Oc-
guages. JournalofComputerandSystemSciences,1:1(cid:150)23, tober2002.Springer-Verlag.
1967. [27] K.TanandR.Maxion. (cid:147)Why6?(cid:148) De(cid:2)ningtheoperational
[12] S.Hofmeyr,A.Somayaji,andS.Forrest. Intrusiondetec- limitsofstide,ananomalybasedintrusiondetector.InIEEE
tion system using sequences of system calls. Journal of SymposiumonSecurityandPrivacy,pages188(cid:150)201,Oak-
ComputerSecurity,6(3):151(cid:150)180,1998. land,California,May2002.
[13] K. Ilgun, R. Kemmerer, and P. Porras. State transi- [28] K.Tan, J. McHugh, and K. Killourhy. Hiding intrusions:
tion analysis: A rule-based intrusion detection approach. Fromthe abnormal to the normal and beyond. In 5th In-
IEEE Transactions on Software Engineering, 21(3):181(cid:150) ternationalWorkshoponInformationHiding,LNCS#2578,
199,March1995. Noordwijkerhout, Netherlands, October 2002. Springer-
[14] C.Ko,G.Fink,andK.Levitt. Automateddetectionofvul- Verlag.
nerabilities in privileged programs by execution monitor- [29] H. Teng, K. Chen, and S.-Y. Lu. Adaptive real-time
ing. In10thAnnualComputerSecurityApplicationsCon- anomaly detection using inductively generated sequential
ference(ACSAC),Orlando,Florida,December1994. patterns.InIEEESymposiumonSecurityandPrivacy,Oak-
[15] D.Kuck,R.Kuhn,D.Padua,B.Leasure,andM.Wolfe.De- land,California,May1999.
pendencegraphsandcompileroptimizations.InACMSym- [30] W.vonDyck.Gruppentheoretischestudien.Mathematische
posiumonPrinciplesofProgrammingLanguages(POPL), Annalen,20:1(cid:150)44,1882.
pages207(cid:150)218,Williamsburg,Virginia,January1981. [31] D.Wagner. Static Analysis and Computer Security: New
[16] T.Laneand C.Brodley. Temporal sequence learning and Techniques for Software Assurance. Ph.D. dissertation,
data reduction for anomaly detection. ACM Transactions UniversityofCaliforniaatBerkeley,Fall2000.
onInformationandSystemSecurity,2(3):295(cid:150)331,August [32] D.WagnerandD.Dean.Intrusiondetectionviastaticanal-
1999. ysis. In IEEESymposium on Security and Privacy, Oak-
land,California,May2001.[33] D. Wagner and P. Soto. Mimicry attacks on host based
(cid:15) (cid:6)= S [(cid:0)[(cid:0)where(cid:0)=fqjq 2(cid:0)g.
intrusion detection systems. In 9th ACM Conference on i
!
ComputerandCommunicationsSecurity (CCS),Washing- [i
ton,DC,November2002. (cid:15) Systemcalltransition: (cid:14)(q;(cid:11);(cid:15)) = (p;(cid:15))ifq !(cid:11) p 2
[34] C.Warrander,S.Forrest,andB.Pearlmutter. Detectingin- (cid:14)
i
trusions using system calls: Alternative data models. In
IEEESymposiumonSecurityandPrivacy,Oakland,Cali- (cid:15) Precall before (cid:12); pushes p onto stack: (cid:14)(q;p;(cid:15)) =
fornia,May1999. (r;p)ifq !(cid:12) p2(cid:14) andristheentrystateof(cid:12)
i
[35] A.Wespi,M.Dacier,andH.Debar. Intrusiondetectionus-
ingvariable-lengthaudittrailpatterns. InRecentAdvances (cid:15) Postcallafter(cid:12);popspfromstack:(cid:14)(r;p;p)=(p;(cid:15))
in Intrusion Detection (RAID) 2000, LNCS #1907, pages ifq !(cid:12) p2(cid:14) andr2F
i (cid:12)
110(cid:150)129,Toulouse,France,October2000.Springer-Verlag.
ThenDmodelsthesystemcallsequencesgeneratesbythe
A.VtPathAttack application with a bracketed context-free language. The
subsequencesofDconsistingentirelyofsymbolsfrom(cid:0)[
The VtPath model fails to detect impossible path attacks
(cid:0)formaDycklanguage.
baseduponnon-determinismthattheDyckmodelcande-
LEMMA1. InthesquelchedDyckmodel,apostcallfol-
tect due to null call insertion. Consider the code in Fig-
lowseitheratruesystemcallorapostcall.
ure11. Thefunctionsecurity checkveri(cid:2)esthecur-
PROOF. Supposeapostcalltfollowsaprecallr. Thenr
rentprocessidandallowstherootusertoaccessa(cid:2)lebut
was atthetopoftheapplication’ssquelchstack. Bycon-
deniesaccesstoallothers. Thefunctionlogwritesactiv-
struction, squelching removes both r and t from the call
itytoalog(cid:2)leandhasabufferoverrunatline13.
stream.
The attack works as follows: an attacker without root
privilege enters log via the call at 7. They over(cid:3)ow the
LEMMA 2. Let c0;:::;c
n
be an observed sequence of
bufferinlogtosetthereturnaddresstothereturnofline
callswherec0isatruesystemcall,c nisatruesystemcall,
4.logwillthenreturntoline5andexecutetheprivileged
andc1;:::;c n(cid:0)1 arenullcalls.
Let c , 1 (cid:20) i (cid:20) n(cid:0)1bethe(cid:2)rst precall. Thenc is a
i j
actions.
precallforalli<j (cid:20)n(cid:0)1.
VtPathwillnotdetectthisattack.VtPathobservesreturn
PROOF. Supposenot.Then9i<k (cid:20)n(cid:0)1suchthatc
k
addresses at each system call point, here, after the return
addresshas beenmodi(cid:2)ed. Theif at line 3is a pointof
isthe(cid:2)rstpostcallinc i;:::;c n(cid:0)1. Thenc k(cid:0)1 isaprecall,
contradictingLemma1.
non-determinism,leadingVtPathtoincorrectlybelievethat
THEOREM. LetC bethecallgraphforprogramP. De-
thecalltologoriginatedatline4. Apush-downautoma-
note by C the graph obtained from C with each strongly
tonmodelwouldsimilarlymisstheattack.
connectedcomponentcollapsedtoasinglestate. Lethbe
The Dyck model detects the attack. Both calls to log
themaximeumdiameterofC. IfP generatesntruesystem
wouldbeinstrumentedwithdifferentpre-andpostcalls.In
callsduringexecution,thentheworst-casenumberofnull
particular,atthepointofthebufferoverrun,thecorrectre-
callsgeneratedis2hn. e
turnaddresshasalreadybeenstored. Thenullcallsbefore
PROOF. From Lemmas 1 and 2, it follows that the ob-
each call site thus aid attack detection by reducing non-
served call pattern is a repeating sequence of a string of
determinismwhensuchcodingpatternsarise.Wenotethat
precalls followedbya systemcall followedbya stringof
the VtPath model would detect this attack if it learned a
postcalls.Weclaimtheprecallstringandthepostcallstring
behavioraldatabasefromaprogramwithDyckinstrumen-
eachhavelengthatmosth.
tationpreviouslyinserted.
For a given system call, suppose the precall string has
length l > h. Then there exists a directed path in C of
B.FormalDe(cid:2)nitions andProofs
lengthl,whichcannotoccur.
DEFINITION 1. Denote local NFA models by A
i
= Suppose the postcall string has length m > h. Tehen
(Q i;(cid:6) i;(cid:14) i;q0;i;F i)whereirangesoverallfunctionsinthe thereexistsadirectedreversepathinCoflengthm,which
program. Let(cid:28) betheentrypointfunction. Foreachi,let similarlycannotoccur.
S ibethesetofsystemcallsandU ithesetofuserfunctions Therefore,thenumberofnullcallsgeeneratedis(cid:20)2hper
calledbyi.Then(cid:6) i =S i[U i.De(cid:2)netheDyckmodelas systemcall.
D = ([ iQ i;(cid:6);(cid:0);(cid:14);q0;(cid:28);;;F (cid:28))for[ iQ
i
thesetofstates,
(cid:6)theinputalphabet,(cid:0)thestackalphabet,(cid:14) thetransition C.DataDependence Graph
relation,q0;(cid:28) theuniqueentrystate,;theinitialstackcon-
(cid:2)guration,andF thesetofacceptingstates,with: The data dependence graph (DDG) is a common pro-
(cid:28)
gramanalysisstructurerepresentinginterprocedural(cid:3)ows
(cid:12)
(cid:15) (cid:0)= q p!q 2(cid:14) i and(cid:12) 2U i ofdatathroughaprogram[15,21].TheDDGisasubgraph
n (cid:12) o
(cid:12)
(cid:12)1 void security_check (char *file) f
2 uid_t uid = getuid();
3 if (uid == 0) f
4 log("Accessing %s", file);
5 restricted_access(file);
6 g else f
7 log("Invalid access %s", file);
8 exit(SECURITY_ERROR);
9 g
10 g
11 void log (char *msg, char *file) f
12 char buf[100];
13 sprintf(buf, msg, file); <--Bufferover(cid:3)ow
14 write(LOG_FD, buf, strlen(buf));
15 g
Figure11.CodeforVtPathattack.
2 sethi %hi(file), %o0
%o0
7 mov 0, %l7 5 mov 0, %o1 3 or %o0, %lo(file), %o0
%l7 %o1
%o0
%l7
14 add %l7, 1, %l7 %l7 4 call open
%l7 %o0
8 cmp %l7, 10 6 mov %o0, %l6
condition code %l6 %l6
register
9 bge L2 10 mov %l6, %o0 12 mov 128, %o1 17 mov %l6, %o0 19 mov 16, %o1
%o0 %o0 %o1 %o0 %o1
32 sethi %hi(root), %o1 15 call writewrap 11 call action 18 call action
%o1 p aa rs gs
s
ap ra gs ss p aa rs gs
s
33 or %o1, %lo(root), %o1 31 writewrap entry 22 action entry 26 sethi %hi(buf), %o1
%o0 %o1 %o1
35 mov 5, %o2 %o1 %o0 23 cmp %o0, 0 25 mov %o1, %o2 28 or %o1, %lo(buf), %o1
%o2 conditi ro en g ic so td ee r %o0 %o2 %o1
34 jmp write 24 ble L3 27 jmp read
Figure 12. Data dependence graph. Our analysis constructs this data dependence graph for the
codeinFigure1(a). TheshadednumberscorrespondtothelinenumbersinFigure1(a). InSPARC
code,therightmostregisterinaninstructionisthewrittenregister. Registers%o0-%o5containcall
arguments. %o0containsthereturnvalueofacall.
ofaprogramdependencegraph[6]thatincludesonlydata to L. Forconvenience,each edge label indicates the data
(cid:3)ow dependenceedges. The graph abstracts away proce- location creating the dependency. Furthermore, a DDG
dure and basic block boundaries, so each instruction is a includes interproceduraldata (cid:3)ow edges. Interprocedural
nodeinthegraph. Edgesindicatedata(cid:3)owingfromanin- edgesindicatedatadependenciesbetweenthede(cid:2)nitionof
structionP thatmaywritetoadatalocationLtoinstruc- argumentsandtheentrypointofafunctionthatusesthose
i
tions P that may read from L. Such a (cid:3)ow exists only argumentsand between the exit point of a function and a
j
when there is a def-clearpath fromP to P with respect useofthereturnvalue.
i jDEFINITION 2. LetI bethesetofinstructionsinapro- %o2)to read includesnodes 12, 19, 11, 18, 22, and25.
gramP andN bethesetoffunctionentrypoints. De(cid:2)ne Notethatthisrepresentsaninterproceduraldata(cid:3)ow.Sim-
thedatadependencegraphGforP tobeG = hI [N;Ei ulated executionrecoversboth values 128 and 16 for this
whereP !L P 2E ifthereisadef-clearpathfromP to argument.
i j i
P withrespecttoL. Branchanalysisandargumentcaptureforsystemcallre-
j
Consider an example. Figure 12 shows the DDG con- turn values requires a slight change to this procedure. In
structed for the program code in Figure 1(a). Shaded particular, discovery of the expression graph stops at the
node numberscorrespondto line numbers in Figure 1(a). returnvalueofasystemcall. Theexpressiongraphforar-
SPARCdelayslotsareunwound,sonode5precedesnode gument 1 (register %o0) to the read instruction in node
4inthegraph. 27reachesbacktonode4. Here, analysisrecognizesthat
With this DDG, argument capture becomes straightfor- open is a system call and marks the argument as using
ward. The subgraph of the DDG rooted at a system call
open’sreturnvalue.
instructionreachablebyfollowingreverseedgesforthede- Analysis of the branch in node 24 proceeds simi-
pendentdatalocationistheexpressiongraphsettingthear- larly. The expression graph reveals that the return
gumentvalue. Forexample,argument2(register%o1)to value from open in node 4 is compared against 0 in
thereadinstructioninnode27hasnodes26and28inits node 23. Given the branch condition branch less or
expressiongraph. Bysimulatingtheexecutionofthesein- equal, the predicates added to the program model are
structions,wecanidentifythebufferpassedtoread.Sim- open (cid:20) 0 for the branch-taken control (cid:3)ow path and
ilarly,theexpressiongraphforthethirdargument(register
open>0forthefall-throughpath,asshowninFigure8.